{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  char *next_in;\n  unsigned int avail_in;\n  unsigned int total_in_lo32;\n  unsigned int total_in_hi32;\n  char *next_out;\n  unsigned int avail_out;\n  unsigned int total_out_lo32;\n  unsigned int total_out_hi32;\n  void *state;\n  void *(*bzalloc)(void *, int, int);\n  void (*bzfree)(void *, void *);\n  void *opaque;\n} bz_stream",
            "name": "bz_stream",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_in",
                        "type": "char *",
                        "definition": [
                            "char *next_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_in",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int avail_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_in_lo32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int total_in_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_in_hi32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int total_in_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_out",
                        "type": "char *",
                        "definition": [
                            "char *next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int avail_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_out_lo32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int total_out_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_out_hi32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int total_out_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "void *",
                        "definition": [
                            "void *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzalloc",
                        "type": "void *(*)(void *, int, int)",
                        "definition": [
                            "void *(*bzalloc)(void *, int, int)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzfree",
                        "type": "void (*)(void *, void *)",
                        "definition": [
                            "void (*bzfree)(void *, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  bz_stream *strm;\n  Int32 mode;\n  Int32 state;\n  UInt32 avail_in_expect;\n  UInt32 *arr1;\n  UInt32 *arr2;\n  UInt32 *ftab;\n  Int32 origPtr;\n  UInt32 *ptr;\n  UChar *block;\n  UInt16 *mtfv;\n  UChar *zbits;\n  Int32 workFactor;\n  UInt32 state_in_ch;\n  Int32 state_in_len;\n  Int32 rNToGo;\n  Int32 rTPos;\n  Int32 nblock;\n  Int32 nblockMAX;\n  Int32 numZ;\n  Int32 state_out_pos;\n  Int32 nInUse;\n  Bool inUse[256];\n  UChar unseqToSeq[256];\n  UInt32 bsBuff;\n  Int32 bsLive;\n  UInt32 blockCRC;\n  UInt32 combinedCRC;\n  Int32 verbosity;\n  Int32 blockNo;\n  Int32 blockSize100k;\n  Int32 nMTF;\n  Int32 mtfFreq[258];\n  UChar selector[2 + (900000 / 50)];\n  UChar selectorMtf[2 + (900000 / 50)];\n  UChar len[6][258];\n  Int32 code[6][258];\n  Int32 rfreq[6][258];\n  UInt32 len_pack[258][4];\n} EState",
            "name": "EState",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "Int32",
                        "definition": [
                            "Int32 mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "Int32",
                        "definition": [
                            "Int32 state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_in_expect",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 avail_in_expect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arr1",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *arr1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arr2",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *arr2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origPtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 origPtr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zbits",
                        "type": "UChar *",
                        "definition": [
                            "UChar *zbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "Int32",
                        "definition": [
                            "Int32 workFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_in_ch",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 state_in_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_in_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 state_in_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rNToGo",
                        "type": "Int32",
                        "definition": [
                            "Int32 rNToGo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rTPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 rTPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numZ",
                        "type": "Int32",
                        "definition": [
                            "Int32 numZ"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_out_pos",
                        "type": "Int32",
                        "definition": [
                            "Int32 state_out_pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nInUse",
                        "type": "Int32",
                        "definition": [
                            "Int32 nInUse"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inUse",
                        "type": "Bool [256]",
                        "definition": [
                            "Bool inUse[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unseqToSeq",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar unseqToSeq[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsBuff",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 bsBuff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsLive",
                        "type": "Int32",
                        "definition": [
                            "Int32 bsLive"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 blockCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "combinedCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 combinedCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "Int32",
                        "definition": [
                            "Int32 verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 blockNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "Int32",
                        "definition": [
                            "Int32 blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nMTF",
                        "type": "Int32",
                        "definition": [
                            "Int32 nMTF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfFreq",
                        "type": "Int32 [258]",
                        "definition": [
                            "Int32 mtfFreq[258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selector",
                        "type": "UChar [2 + (900000 / 50)]",
                        "definition": [
                            "UChar selector[2 + (900000 / 50)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selectorMtf",
                        "type": "UChar [2 + (900000 / 50)]",
                        "definition": [
                            "UChar selectorMtf[2 + (900000 / 50)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "UChar [6][258]",
                        "definition": [
                            "UChar len[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "Int32 [6][258]",
                        "definition": [
                            "Int32 code[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rfreq",
                        "type": "Int32 [6][258]",
                        "definition": [
                            "Int32 rfreq[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_pack",
                        "type": "UInt32 [258][4]",
                        "definition": [
                            "UInt32 len_pack[258][4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  bz_stream *strm;\n  Int32 state;\n  UChar state_out_ch;\n  Int32 state_out_len;\n  Bool blockRandomised;\n  Int32 rNToGo;\n  Int32 rTPos;\n  UInt32 bsBuff;\n  Int32 bsLive;\n  Int32 blockSize100k;\n  Bool smallDecompress;\n  Int32 currBlockNo;\n  Int32 verbosity;\n  Int32 origPtr;\n  UInt32 tPos;\n  Int32 k0;\n  Int32 unzftab[256];\n  Int32 nblock_used;\n  Int32 cftab[257];\n  Int32 cftabCopy[257];\n  UInt32 *tt;\n  UInt16 *ll16;\n  UChar *ll4;\n  UInt32 storedBlockCRC;\n  UInt32 storedCombinedCRC;\n  UInt32 calculatedBlockCRC;\n  UInt32 calculatedCombinedCRC;\n  Int32 nInUse;\n  Bool inUse[256];\n  Bool inUse16[16];\n  UChar seqToUnseq[256];\n  UChar mtfa[4096];\n  Int32 mtfbase[256 / 16];\n  UChar selector[2 + (900000 / 50)];\n  UChar selectorMtf[2 + (900000 / 50)];\n  UChar len[6][258];\n  Int32 limit[6][258];\n  Int32 base[6][258];\n  Int32 perm[6][258];\n  Int32 minLens[6];\n  Int32 save_i;\n  Int32 save_j;\n  Int32 save_t;\n  Int32 save_alphaSize;\n  Int32 save_nGroups;\n  Int32 save_nSelectors;\n  Int32 save_EOB;\n  Int32 save_groupNo;\n  Int32 save_groupPos;\n  Int32 save_nextSym;\n  Int32 save_nblockMAX;\n  Int32 save_nblock;\n  Int32 save_es;\n  Int32 save_N;\n  Int32 save_curr;\n  Int32 save_zt;\n  Int32 save_zn;\n  Int32 save_zvec;\n  Int32 save_zj;\n  Int32 save_gSel;\n  Int32 save_gMinlen;\n  Int32 *save_gLimit;\n  Int32 *save_gBase;\n  Int32 *save_gPerm;\n} DState",
            "name": "DState",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "Int32",
                        "definition": [
                            "Int32 state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar state_out_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 state_out_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockRandomised",
                        "type": "Bool",
                        "definition": [
                            "Bool blockRandomised"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rNToGo",
                        "type": "Int32",
                        "definition": [
                            "Int32 rNToGo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rTPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 rTPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsBuff",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 bsBuff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsLive",
                        "type": "Int32",
                        "definition": [
                            "Int32 bsLive"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "Int32",
                        "definition": [
                            "Int32 blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallDecompress",
                        "type": "Bool",
                        "definition": [
                            "Bool smallDecompress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currBlockNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 currBlockNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "Int32",
                        "definition": [
                            "Int32 verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origPtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 origPtr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tPos",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 tPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k0",
                        "type": "Int32",
                        "definition": [
                            "Int32 k0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unzftab",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 unzftab[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_used",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock_used"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cftab",
                        "type": "Int32 [257]",
                        "definition": [
                            "Int32 cftab[257]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cftabCopy",
                        "type": "Int32 [257]",
                        "definition": [
                            "Int32 cftabCopy[257]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tt",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *tt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll16",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *ll16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll4",
                        "type": "UChar *",
                        "definition": [
                            "UChar *ll4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 storedBlockCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storedCombinedCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 storedCombinedCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 calculatedBlockCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "calculatedCombinedCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 calculatedCombinedCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nInUse",
                        "type": "Int32",
                        "definition": [
                            "Int32 nInUse"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inUse",
                        "type": "Bool [256]",
                        "definition": [
                            "Bool inUse[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inUse16",
                        "type": "Bool [16]",
                        "definition": [
                            "Bool inUse16[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seqToUnseq",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar seqToUnseq[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfa",
                        "type": "UChar [4096]",
                        "definition": [
                            "UChar mtfa[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfbase",
                        "type": "Int32 [256 / 16]",
                        "definition": [
                            "Int32 mtfbase[256 / 16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selector",
                        "type": "UChar [2 + (900000 / 50)]",
                        "definition": [
                            "UChar selector[2 + (900000 / 50)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selectorMtf",
                        "type": "UChar [2 + (900000 / 50)]",
                        "definition": [
                            "UChar selectorMtf[2 + (900000 / 50)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "UChar [6][258]",
                        "definition": [
                            "UChar len[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "Int32 [6][258]",
                        "definition": [
                            "Int32 limit[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "Int32 [6][258]",
                        "definition": [
                            "Int32 base[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "Int32 [6][258]",
                        "definition": [
                            "Int32 perm[6][258]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLens",
                        "type": "Int32 [6]",
                        "definition": [
                            "Int32 minLens[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_i",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_j",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_t",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_EOB",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_EOB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_groupNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_groupPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_nextSym"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_es",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_es"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_N",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_N"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_curr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_zt",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_zt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_zn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_zvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_zj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_gSel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 save_gMinlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_gLimit",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *save_gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_gBase",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *save_gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_gPerm",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *save_gPerm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  FILE *handle;\n  Char buf[5000];\n  Int32 bufN;\n  Bool writing;\n  bz_stream strm;\n  Int32 lastErr;\n  Bool initialisedOk;\n} bzFile",
            "name": "bzFile",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "handle",
                        "type": "FILE *",
                        "definition": [
                            "FILE *handle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "Char [5000]",
                        "definition": [
                            "Char buf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufN",
                        "type": "Int32",
                        "definition": [
                            "Int32 bufN"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writing",
                        "type": "Bool",
                        "definition": [
                            "Bool writing"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream",
                        "definition": [
                            "bz_stream strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastErr",
                        "type": "Int32",
                        "definition": [
                            "Int32 lastErr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initialisedOk",
                        "type": "Bool",
                        "definition": [
                            "Bool initialisedOk"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  UChar b[8];\n} UInt64",
            "name": "UInt64",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "UChar [8]",
                        "definition": [
                            "UChar b[8]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct zzzz\n{\n  Char *name;\n  struct zzzz *link;\n} Cell",
            "name": "Cell",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct zzzz",
                        "type": "struct zzzz *",
                        "definition": [
                            "struct zzzz *link"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  FILE *handle;\n  Int32 buffer;\n  Int32 buffLive;\n  Char mode;\n} BitStream",
            "name": "BitStream",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "handle",
                        "type": "FILE *",
                        "definition": [
                            "FILE *handle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "Int32",
                        "definition": [
                            "Int32 buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffLive",
                        "type": "Int32",
                        "definition": [
                            "Int32 buffLive"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "Char",
                        "definition": [
                            "Char mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "BZ2_rNums",
            "type": "Int32 [512]",
            "definition": [
                "extern Int32 BZ2_rNums[512]"
            ]
        },
        {
            "path": null,
            "name": "BZ2_crc32Table",
            "type": "UInt32 [256]",
            "definition": [
                "extern UInt32 BZ2_crc32Table[256]"
            ]
        },
        {
            "path": null,
            "name": "incs",
            "type": "Int32 [14]",
            "definition": [
                "static Int32 incs[14] = {1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484}"
            ]
        },
        {
            "path": null,
            "name": "bzerrorstrings",
            "type": "const char *[]",
            "definition": [
                "static const char *bzerrorstrings[] = {\"OK\", \"SEQUENCE_ERROR\", \"PARAM_ERROR\", \"MEM_ERROR\", \"DATA_ERROR\", \"DATA_ERROR_MAGIC\", \"IO_ERROR\", \"UNEXPECTED_EOF\", \"OUTBUFF_FULL\", \"CONFIG_ERROR\", \"???\", \"???\", \"???\", \"???\", \"???\", \"???\"}"
            ]
        },
        {
            "path": null,
            "name": "verbosity",
            "type": "Int32",
            "definition": [
                "Int32 verbosity"
            ]
        },
        {
            "path": null,
            "name": "keepInputFiles",
            "type": "Bool",
            "definition": [
                "Bool keepInputFiles"
            ]
        },
        {
            "path": null,
            "name": "smallMode",
            "type": "Bool",
            "definition": [
                "Bool smallMode"
            ]
        },
        {
            "path": null,
            "name": "deleteOutputOnInterrupt",
            "type": "Bool",
            "definition": [
                "Bool deleteOutputOnInterrupt"
            ]
        },
        {
            "path": null,
            "name": "forceOverwrite",
            "type": "Bool",
            "definition": [
                "Bool forceOverwrite"
            ]
        },
        {
            "path": null,
            "name": "testFailsExist",
            "type": "Bool",
            "definition": [
                "Bool testFailsExist"
            ]
        },
        {
            "path": null,
            "name": "unzFailsExist",
            "type": "Bool",
            "definition": [
                "Bool unzFailsExist"
            ]
        },
        {
            "path": null,
            "name": "noisy",
            "type": "Bool",
            "definition": [
                "Bool noisy"
            ]
        },
        {
            "path": null,
            "name": "numFileNames",
            "type": "Int32",
            "definition": [
                "Int32 numFileNames"
            ]
        },
        {
            "path": null,
            "name": "numFilesProcessed",
            "type": "Int32",
            "definition": [
                "Int32 numFilesProcessed"
            ]
        },
        {
            "path": null,
            "name": "blockSize100k",
            "type": "Int32",
            "definition": [
                "Int32 blockSize100k"
            ]
        },
        {
            "path": null,
            "name": "exitValue",
            "type": "Int32",
            "definition": [
                "Int32 exitValue"
            ]
        },
        {
            "path": null,
            "name": "opMode",
            "type": "Int32",
            "definition": [
                "Int32 opMode"
            ]
        },
        {
            "path": null,
            "name": "srcMode",
            "type": "Int32",
            "definition": [
                "Int32 srcMode"
            ]
        },
        {
            "path": null,
            "name": "longestFileName",
            "type": "Int32",
            "definition": [
                "Int32 longestFileName"
            ]
        },
        {
            "path": null,
            "name": "inName",
            "type": "Char [1034]",
            "definition": [
                "Char inName[1034]"
            ]
        },
        {
            "path": null,
            "name": "outName",
            "type": "Char [1034]",
            "definition": [
                "Char outName[1034]"
            ]
        },
        {
            "path": null,
            "name": "tmpName",
            "type": "Char [1034]",
            "definition": [
                "Char tmpName[1034]"
            ]
        },
        {
            "path": null,
            "name": "progName",
            "type": "Char [2000]",
            "definition": [
                "Char progName[2000]"
            ]
        },
        {
            "path": null,
            "name": "progNameReally",
            "type": "Char [1034]",
            "definition": [
                "Char progNameReally[1034]"
            ]
        },
        {
            "path": null,
            "name": "outputHandleJustInCase",
            "type": "FILE *",
            "definition": [
                "FILE *outputHandleJustInCase"
            ]
        },
        {
            "path": null,
            "name": "workFactor",
            "type": "Int32",
            "definition": [
                "Int32 workFactor"
            ]
        },
        {
            "path": null,
            "name": "zSuffix",
            "type": "const Char *[4]",
            "definition": [
                "const Char *zSuffix[4] = {\".bz2\", \".bz\", \".tbz2\", \".tbz\"}"
            ]
        },
        {
            "path": null,
            "name": "unzSuffix",
            "type": "const Char *[4]",
            "definition": [
                "const Char *unzSuffix[4] = {\"\", \"\", \".tar\", \".tar\"}"
            ]
        },
        {
            "path": null,
            "name": "inFileName",
            "type": "Char [2000]",
            "definition": [
                "Char inFileName[2000]"
            ]
        },
        {
            "path": null,
            "name": "outFileName",
            "type": "Char [2000]",
            "definition": [
                "Char outFileName[2000]"
            ]
        },
        {
            "path": null,
            "name": "bytesOut",
            "type": "MaybeUInt64",
            "definition": [
                "MaybeUInt64 bytesOut = 0"
            ]
        },
        {
            "path": null,
            "name": "bytesIn",
            "type": "MaybeUInt64",
            "definition": [
                "MaybeUInt64 bytesIn = 0"
            ]
        },
        {
            "path": null,
            "name": "bStart",
            "type": "MaybeUInt64 [50000]",
            "definition": [
                "MaybeUInt64 bStart[50000]"
            ]
        },
        {
            "path": null,
            "name": "bEnd",
            "type": "MaybeUInt64 [50000]",
            "definition": [
                "MaybeUInt64 bEnd[50000]"
            ]
        },
        {
            "path": null,
            "name": "rbStart",
            "type": "MaybeUInt64 [50000]",
            "definition": [
                "MaybeUInt64 rbStart[50000]"
            ]
        },
        {
            "path": null,
            "name": "rbEnd",
            "type": "MaybeUInt64 [50000]",
            "definition": [
                "MaybeUInt64 rbEnd[50000]"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "BZ2_blockSort",
            "header": "extern void BZ2_blockSort(EState *)",
            "params": [
                "EState *s"
            ],
            "definition": "void BZ2_blockSort(EState *s)\n{\n  UInt32 *ptr = s->ptr;\n  UChar *block = s->block;\n  UInt32 *ftab = s->ftab;\n  Int32 nblock = s->nblock;\n  Int32 verb = s->verbosity;\n  Int32 wfact = s->workFactor;\n  UInt16 *quadrant;\n  unsigned int quadrant_idx = 0;\n  Int32 budget;\n  Int32 budgetInit;\n  Int32 i;\n  if (nblock < 10000)\n  {\n    fallbackSort(s->arr1, s->arr2, ftab, nblock, verb);\n  }\n  else\n  {\n    helper_BZ2_blockSort_1(&wfact, &quadrant_idx, &budget, &budgetInit, &i, s, ptr, block, ftab, nblock, verb, quadrant);\n  }\n  s->origPtr = -1;\n  for (i = 0; i < s->nblock; i += 1)\n    if (ptr[i] == 0)\n  {\n    s->origPtr = i;\n    break;\n  }\n\n  ;\n  {\n    if (!(s->origPtr != (-1)))\n    {\n      BZ2_bz__AssertH__fail(1003);\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "fallbackSort",
                "helper_BZ2_blockSort_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr = s->ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block = s->block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ftab = s->ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = s->nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb = s->verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wfact",
                        "type": "Int32",
                        "definition": [
                            "Int32 wfact = s->workFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int quadrant_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32",
                        "definition": [
                            "Int32 budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budgetInit",
                        "type": "Int32",
                        "definition": [
                            "Int32 budgetInit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fallbackSimpleSort",
            "header": "",
            "params": [
                "UInt32 *fmap",
                "UInt32 *eclass",
                "Int32 lo",
                "Int32 hi"
            ],
            "definition": "static void fallbackSimpleSort(UInt32 *fmap, UInt32 *eclass, Int32 lo, Int32 hi)\n{\n  Int32 i;\n  Int32 j;\n  Int32 tmp;\n  UInt32 ec_tmp;\n  if (lo == hi)\n  {\n    return;\n  }\n  if ((hi - lo) > 3)\n  {\n    for (i = hi - 4; i >= lo; i -= 1)\n    {\n      tmp = fmap[i];\n      ec_tmp = eclass[tmp];\n      for (j = i + 4; (j <= hi) && (ec_tmp > eclass[fmap[j]]); j += 4)\n        fmap[j - 4] = fmap[j];\n\n      fmap[j - 4] = tmp;\n    }\n\n  }\n  for (i = hi - 1; i >= lo; i -= 1)\n  {\n    tmp = fmap[i];\n    ec_tmp = eclass[tmp];\n    for (j = i + 1; (j <= hi) && (ec_tmp > eclass[fmap[j]]); j += 1)\n      fmap[j - 1] = fmap[j];\n\n    fmap[j - 1] = tmp;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ec_tmp",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 ec_tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fallbackQSort3",
            "header": "",
            "params": [
                "UInt32 *fmap",
                "UInt32 *eclass",
                "Int32 loSt",
                "Int32 hiSt"
            ],
            "definition": "static void fallbackQSort3(UInt32 *fmap, UInt32 *eclass, Int32 loSt, Int32 hiSt)\n{\n  Int32 unLo;\n  Int32 unHi;\n  Int32 ltLo;\n  Int32 gtHi;\n  Int32 n;\n  Int32 m;\n  Int32 sp;\n  Int32 lo;\n  Int32 hi;\n  UInt32 med;\n  UInt32 r;\n  UInt32 r3;\n  Int32 stackLo[100];\n  Int32 stackHi[100];\n  r = 0;\n  sp = 0;\n  {\n    stackLo[sp] = loSt;\n    stackHi[sp] = hiSt;\n    sp += 1;\n  }\n  ;\n  while (sp > 0)\n  {\n    helper_fallbackQSort3_1(&unLo, &unHi, &ltLo, &gtHi, &n, &m, &sp, &lo, &hi, &med, &r, &r3, fmap, eclass, stackLo, stackHi);\n  }\n\n}\n\n",
            "calle": [
                "helper_fallbackQSort3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "loSt",
                        "type": "Int32",
                        "definition": [
                            "Int32 loSt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hiSt",
                        "type": "Int32",
                        "definition": [
                            "Int32 hiSt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r3",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 r3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fallbackSort",
            "header": "",
            "params": [
                "UInt32 *fmap",
                "UInt32 *eclass",
                "UInt32 *bhtab",
                "Int32 nblock",
                "Int32 verb"
            ],
            "definition": "static void fallbackSort(UInt32 *fmap, UInt32 *eclass, UInt32 *bhtab, Int32 nblock, Int32 verb)\n{\n  Int32 ftab[257];\n  Int32 ftabCopy[256];\n  Int32 H;\n  Int32 i;\n  Int32 j;\n  Int32 k;\n  Int32 l;\n  Int32 r;\n  Int32 cc;\n  Int32 cc1;\n  Int32 nNotDone;\n  Int32 nBhtab;\n  UChar *eclass8 = (UChar *) eclass;\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        bucket sorting ...\\n\");\n  }\n  for (i = 0; i < 257; i += 1)\n    ftab[i] = 0;\n\n  for (i = 0; i < nblock; i += 1)\n    ftab[eclass8[i]]++;\n\n  for (i = 0; i < 256; i += 1)\n    ftabCopy[i] = ftab[i];\n\n  for (i = 1; i < 257; i += 1)\n    ftab[i] += ftab[i - 1];\n\n  for (i = 0; i < nblock; i += 1)\n  {\n    j = eclass8[i];\n    k = ftab[j] - 1;\n    ftab[j] = k;\n    fmap[k] = i;\n  }\n\n  nBhtab = 2 + (nblock / 32);\n  for (i = 0; i < nBhtab; i += 1)\n    bhtab[i] = 0;\n\n  for (i = 0; i < 256; i += 1)\n    bhtab[ftab[i] >> 5] |= ((UInt32) 1) << (ftab[i] & 31);\n\n  for (i = 0; i < 32; i += 1)\n  {\n    bhtab[(nblock + (2 * i)) >> 5] |= ((UInt32) 1) << ((nblock + (2 * i)) & 31);\n    bhtab[((nblock + (2 * i)) + 1) >> 5] &= ~(((UInt32) 1) << (((nblock + (2 * i)) + 1) & 31));\n  }\n\n  H = 1;\n  while (1)\n  {\n    helper_fallbackSort_1(&H, &i, &j, &k, &l, &r, &cc, &cc1, &nNotDone, fmap, eclass, bhtab, nblock, verb);\n  }\n\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        reconstructing block ...\\n\");\n  }\n  j = 0;\n  for (i = 0; i < nblock; i += 1)\n  {\n    while (ftabCopy[j] == 0)\n      j++;\n\n    j += 1;\n    ftabCopy[j] -= 1;\n    eclass8[fmap[i]] = (UChar) j;\n  }\n\n  {\n    if (!(j < 256))\n    {\n      BZ2_bz__AssertH__fail(1005);\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "fprintf",
                "helper_fallbackSort_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bhtab",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *bhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "Int32 [257]",
                        "definition": [
                            "Int32 ftab[257]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftabCopy",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 ftabCopy[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "H",
                        "type": "Int32",
                        "definition": [
                            "Int32 H"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "Int32",
                        "definition": [
                            "Int32 l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "Int32",
                        "definition": [
                            "Int32 r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNotDone"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBhtab",
                        "type": "Int32",
                        "definition": [
                            "Int32 nBhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass8",
                        "type": "UChar *",
                        "definition": [
                            "UChar *eclass8 = (UChar *) eclass"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mainGtU",
            "header": "",
            "params": [
                "UInt32 i1",
                "UInt32 i2",
                "UChar *block",
                "UInt16 *quadrant",
                "UInt32 nblock",
                "Int32 *budget"
            ],
            "definition": "static Bool mainGtU(UInt32 i1, UInt32 i2, UChar *block, UInt16 *quadrant, UInt32 nblock, Int32 *budget)\n{\n  Int32 k;\n  UChar c1;\n  UChar c2;\n  UInt16 s1;\n  UInt16 s2;\n  ;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  i1 += 1;\n  i2 += 1;\n  k = nblock + 8;\n  do\n  {\n    helper_mainGtU_1(&i1, &i2, &k, &c1, &c2, &s1, &s2, block, quadrant, nblock, budget);\n  }\n  while (k >= 0);\n  return (Bool) 0;\n}\n\n",
            "calle": [
                "helper_mainGtU_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i1",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 i1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i2",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 i2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "UChar",
                        "definition": [
                            "UChar c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "UChar",
                        "definition": [
                            "UChar c2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s1",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mainSimpleSort",
            "header": "",
            "params": [
                "UInt32 *ptr",
                "UChar *block",
                "UInt16 *quadrant",
                "Int32 nblock",
                "Int32 lo",
                "Int32 hi",
                "Int32 d",
                "Int32 *budget"
            ],
            "definition": "static void mainSimpleSort(UInt32 *ptr, UChar *block, UInt16 *quadrant, Int32 nblock, Int32 lo, Int32 hi, Int32 d, Int32 *budget)\n{\n  Int32 i;\n  Int32 j;\n  Int32 h;\n  Int32 bigN;\n  Int32 hp;\n  UInt32 v;\n  bigN = (hi - lo) + 1;\n  if (bigN < 2)\n  {\n    return;\n  }\n  hp = 0;\n  while (incs[hp] < bigN)\n    hp++;\n\n  hp += 1;\n  hp -= 1;\n  for (; hp >= 0; hp--)\n  {\n    helper_mainSimpleSort_1(&i, &j, &h, &v, ptr, block, quadrant, nblock, lo, hi, d, budget, hp);\n  }\n\n}\n\n",
            "calle": [
                "helper_mainSimpleSort_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "Int32",
                        "definition": [
                            "Int32 h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bigN",
                        "type": "Int32",
                        "definition": [
                            "Int32 bigN"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hp",
                        "type": "Int32",
                        "definition": [
                            "Int32 hp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mmed3",
            "header": "",
            "params": [
                "UChar a",
                "UChar b",
                "UChar c"
            ],
            "definition": "static UChar mmed3(UChar a, UChar b, UChar c)\n{\n  UChar t;\n  if (a > b)\n  {\n    t = a;\n    a = b;\n    b = t;\n  }\n  ;\n  if (b > c)\n  {\n    b = c;\n    if (a > b)\n    {\n      b = a;\n    }\n  }\n  return b;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "UChar",
                        "definition": [
                            "UChar a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "UChar",
                        "definition": [
                            "UChar b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "UChar",
                        "definition": [
                            "UChar c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "UChar",
                        "definition": [
                            "UChar t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mainQSort3",
            "header": "",
            "params": [
                "UInt32 *ptr",
                "UChar *block",
                "UInt16 *quadrant",
                "Int32 nblock",
                "Int32 loSt",
                "Int32 hiSt",
                "Int32 dSt",
                "Int32 *budget"
            ],
            "definition": "static void mainQSort3(UInt32 *ptr, UChar *block, UInt16 *quadrant, Int32 nblock, Int32 loSt, Int32 hiSt, Int32 dSt, Int32 *budget)\n{\n  Int32 unLo;\n  Int32 unHi;\n  Int32 ltLo;\n  Int32 gtHi;\n  Int32 n;\n  Int32 m;\n  Int32 med;\n  Int32 sp;\n  Int32 lo;\n  Int32 hi;\n  Int32 d;\n  Int32 stackLo[100];\n  Int32 stackHi[100];\n  Int32 stackD[100];\n  Int32 nextLo[3];\n  Int32 nextHi[3];\n  Int32 nextD[3];\n  sp = 0;\n  {\n    stackLo[sp] = loSt;\n    stackHi[sp] = hiSt;\n    stackD[sp] = dSt;\n    sp += 1;\n  }\n  ;\n  while (sp > 0)\n  {\n    helper_mainQSort3_1(&unLo, &unHi, &ltLo, &gtHi, &n, &m, &med, &sp, &lo, &hi, &d, ptr, block, quadrant, nblock, budget, stackLo, stackHi, stackD, nextLo, nextHi, nextD);\n  }\n\n}\n\n",
            "calle": [
                "helper_mainQSort3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "loSt",
                        "type": "Int32",
                        "definition": [
                            "Int32 loSt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hiSt",
                        "type": "Int32",
                        "definition": [
                            "Int32 hiSt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dSt",
                        "type": "Int32",
                        "definition": [
                            "Int32 dSt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "Int32",
                        "definition": [
                            "Int32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackD",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackD[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextLo",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextLo[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextHi",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextHi[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextD",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextD[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mainSort",
            "header": "",
            "params": [
                "UInt32 *ptr",
                "UChar *block",
                "UInt16 *quadrant",
                "UInt32 *ftab",
                "Int32 nblock",
                "Int32 verb",
                "Int32 *budget"
            ],
            "definition": "static void mainSort(UInt32 *ptr, UChar *block, UInt16 *quadrant, UInt32 *ftab, Int32 nblock, Int32 verb, Int32 *budget)\n{\n  Int32 i;\n  Int32 j;\n  Int32 k;\n  Int32 ss;\n  Int32 sb;\n  Int32 runningOrder[256];\n  Bool bigDone[256];\n  Int32 copyStart[256];\n  Int32 copyEnd[256];\n  UChar c1;\n  Int32 numQSorted;\n  UInt16 s;\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        main sort initialise ...\\n\");\n  }\n  for (i = 65536; i >= 0; i -= 1)\n    ftab[i] = 0;\n\n  j = block[0] << 8;\n  i = nblock - 1;\n  for (; i >= 3; i -= 4)\n  {\n    helper_mainSort_1(&i, &j, block, quadrant, ftab);\n  }\n\n  for (; i >= 0; i -= 1)\n  {\n    quadrant[i] = 0;\n    j = (j >> 8) | (((UInt16) block[i]) << 8);\n    ftab[j] += 1;\n  }\n\n  for (i = 0; i < (((2 + 12) + 18) + 2); i += 1)\n  {\n    block[nblock + i] = block[i];\n    quadrant[nblock + i] = 0;\n  }\n\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        bucket sorting ...\\n\");\n  }\n  for (i = 1; i <= 65536; i += 1)\n    ftab[i] += ftab[i - 1];\n\n  s = block[0] << 8;\n  i = nblock - 1;\n  for (; i >= 3; i -= 4)\n  {\n    helper_mainSort_3(&j, &s, ptr, block, ftab, i);\n  }\n\n  for (; i >= 0; i -= 1)\n  {\n    s = (s >> 8) | (block[i] << 8);\n    j = ftab[s] - 1;\n    ftab[s] = j;\n    ptr[j] = i;\n  }\n\n  for (i = 0; i <= 255; i += 1)\n  {\n    bigDone[i] = (Bool) 0;\n    runningOrder[i] = i;\n  }\n\n  {\n    helper_mainSort_2(&i, &j, ftab, runningOrder);\n  }\n  numQSorted = 0;\n  for (i = 0; i <= 255; i += 1)\n  {\n    helper_mainSort_4(&nblock, &j, &k, &ss, &sb, &c1, &numQSorted, ptr, block, quadrant, ftab, verb, budget, i, runningOrder, bigDone, copyStart, copyEnd);\n  }\n\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        %d pointers, %d sorted, %d scanned\\n\", nblock, numQSorted, nblock - numQSorted);\n  }\n}\n\n",
            "calle": [
                "fprintf",
                "helper_mainSort_1",
                "helper_mainSort_2",
                "helper_mainSort_3",
                "helper_mainSort_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "Int32",
                        "definition": [
                            "Int32 ss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sb",
                        "type": "Int32",
                        "definition": [
                            "Int32 sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runningOrder",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 runningOrder[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bigDone",
                        "type": "Bool [256]",
                        "definition": [
                            "Bool bigDone[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyStart",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyStart[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyEnd",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyEnd[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "UChar",
                        "definition": [
                            "UChar c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numQSorted",
                        "type": "Int32",
                        "definition": [
                            "Int32 numQSorted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fallbackQSort3_1",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const unHi_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "Int32 * const m_ref",
                "Int32 * const sp_ref",
                "Int32 * const lo_ref",
                "Int32 * const hi_ref",
                "UInt32 * const med_ref",
                "UInt32 * const r_ref",
                "UInt32 * const r3_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "Int32 stackLo[100]",
                "Int32 stackHi[100]"
            ],
            "definition": "void helper_fallbackQSort3_1(Int32 * const unLo_ref, Int32 * const unHi_ref, Int32 * const ltLo_ref, Int32 * const gtHi_ref, Int32 * const n_ref, Int32 * const m_ref, Int32 * const sp_ref, Int32 * const lo_ref, Int32 * const hi_ref, UInt32 * const med_ref, UInt32 * const r_ref, UInt32 * const r3_ref, UInt32 * const fmap, UInt32 * const eclass, Int32 stackLo[100], Int32 stackHi[100])\n{\n  Int32 unLo = *unLo_ref;\n  Int32 unHi = *unHi_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  Int32 m = *m_ref;\n  Int32 sp = *sp_ref;\n  Int32 lo = *lo_ref;\n  Int32 hi = *hi_ref;\n  UInt32 med = *med_ref;\n  UInt32 r = *r_ref;\n  UInt32 r3 = *r3_ref;\n  {\n    if (!(sp < (100 - 1)))\n    {\n      BZ2_bz__AssertH__fail(1004);\n    }\n  }\n  ;\n  {\n    sp -= 1;\n    lo = stackLo[sp];\n    hi = stackHi[sp];\n  }\n  ;\n  if ((hi - lo) < 10)\n  {\n    fallbackSimpleSort(fmap, eclass, lo, hi);\n    continue;\n  }\n  r = ((r * 7621) + 1) % 32768;\n  r3 = r % 3;\n  if (r3 == 0)\n  {\n    med = eclass[fmap[lo]];\n  }\n  else\n    if (r3 == 1)\n  {\n    med = eclass[fmap[(lo + hi) >> 1]];\n  }\n  else\n    med = eclass[fmap[hi]];\n  unLo = (ltLo = lo);\n  unHi = (gtHi = hi);\n  while (1)\n  {\n    helper_helper_fallbackQSort3_1_5(&unLo, &unHi, &ltLo, &gtHi, &n, fmap, eclass, med);\n  }\n\n  ;\n  if (gtHi < ltLo)\n  {\n    continue;\n  }\n  n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);\n  {\n    helper_helper_fallbackQSort3_1_3(fmap, unLo, n, lo);\n  }\n  ;\n  m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);\n  {\n    helper_helper_fallbackQSort3_1_4(fmap, unLo, m, hi);\n  }\n  ;\n  n = ((lo + unLo) - ltLo) - 1;\n  m = (hi - (gtHi - unHi)) + 1;\n  if ((n - lo) > (hi - m))\n  {\n    helper_helper_fallbackQSort3_1_1(&sp, stackLo, stackHi, n, m, lo, hi);\n  }\n  else\n  {\n    helper_helper_fallbackQSort3_1_2(&sp, stackLo, stackHi, n, m, lo, hi);\n  }\n  *unLo_ref = unLo;\n  *unHi_ref = unHi;\n  *ltLo_ref = ltLo;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n  *m_ref = m;\n  *sp_ref = sp;\n  *lo_ref = lo;\n  *hi_ref = hi;\n  *med_ref = med;\n  *r_ref = r;\n  *r3_ref = r3;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "fallbackSimpleSort",
                "helper_helper_fallbackQSort3_1_1",
                "helper_helper_fallbackQSort3_1_2",
                "helper_helper_fallbackQSort3_1_3",
                "helper_helper_fallbackQSort3_1_4",
                "helper_helper_fallbackQSort3_1_5"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const lo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const hi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const med_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r3_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const r3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m = *m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo = *lo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi = *hi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 med = *med_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r3",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 r3 = *r3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fallbackSort_1",
            "header": "",
            "params": [
                "Int32 * const H_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "Int32 * const l_ref",
                "Int32 * const r_ref",
                "Int32 * const cc_ref",
                "Int32 * const cc1_ref",
                "Int32 * const nNotDone_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 * const bhtab",
                "Int32 nblock",
                "Int32 verb"
            ],
            "definition": "void helper_fallbackSort_1(Int32 * const H_ref, Int32 * const i_ref, Int32 * const j_ref, Int32 * const k_ref, Int32 * const l_ref, Int32 * const r_ref, Int32 * const cc_ref, Int32 * const cc1_ref, Int32 * const nNotDone_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 * const bhtab, Int32 nblock, Int32 verb)\n{\n  Int32 H = *H_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  Int32 l = *l_ref;\n  Int32 r = *r_ref;\n  Int32 cc = *cc_ref;\n  Int32 cc1 = *cc1_ref;\n  Int32 nNotDone = *nNotDone_ref;\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"        depth %6d has \", H);\n  }\n  j = 0;\n  for (i = 0; i < nblock; i += 1)\n  {\n    helper_helper_fallbackSort_1_1(&j, &k, fmap, eclass, bhtab, nblock, H, i);\n  }\n\n  nNotDone = 0;\n  r = -1;\n  while (1)\n  {\n    helper_helper_fallbackSort_1_2(&i, &k, &l, &r, &cc, &cc1, &nNotDone, fmap, eclass, bhtab, nblock);\n  }\n\n  if (verb >= 4)\n  {\n    fprintf(stderr, \"%6d unresolved strings\\n\", nNotDone);\n  }\n  H *= 2;\n  if ((H > nblock) || (nNotDone == 0))\n  {\n    break;\n  }\n  *H_ref = H;\n  *i_ref = i;\n  *j_ref = j;\n  *k_ref = k;\n  *l_ref = l;\n  *r_ref = r;\n  *cc_ref = cc;\n  *cc1_ref = cc1;\n  *nNotDone_ref = nNotDone;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_helper_fallbackSort_1_1",
                "helper_helper_fallbackSort_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "H_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const H_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nNotDone_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bhtab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const bhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "H",
                        "type": "Int32",
                        "definition": [
                            "Int32 H = *H_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "Int32",
                        "definition": [
                            "Int32 l = *l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "Int32",
                        "definition": [
                            "Int32 r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc = *cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc1 = *cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNotDone = *nNotDone_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainGtU_1",
            "header": "",
            "params": [
                "UInt32 * const i1_ref",
                "UInt32 * const i2_ref",
                "Int32 * const k_ref",
                "UChar * const c1_ref",
                "UChar * const c2_ref",
                "UInt16 * const s1_ref",
                "UInt16 * const s2_ref",
                "UChar * const block",
                "UInt16 * const quadrant",
                "UInt32 nblock",
                "Int32 * const budget"
            ],
            "definition": "Bool helper_mainGtU_1(UInt32 * const i1_ref, UInt32 * const i2_ref, Int32 * const k_ref, UChar * const c1_ref, UChar * const c2_ref, UInt16 * const s1_ref, UInt16 * const s2_ref, UChar * const block, UInt16 * const quadrant, UInt32 nblock, Int32 * const budget)\n{\n  UInt32 i1 = *i1_ref;\n  UInt32 i2 = *i2_ref;\n  Int32 k = *k_ref;\n  UChar c1 = *c1_ref;\n  UChar c2 = *c2_ref;\n  UInt16 s1 = *s1_ref;\n  UInt16 s2 = *s2_ref;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  c1 = block[i1];\n  c2 = block[i2];\n  if (c1 != c2)\n  {\n    return c1 > c2;\n  }\n  s1 = quadrant[i1];\n  s2 = quadrant[i2];\n  if (s1 != s2)\n  {\n    return s1 > s2;\n  }\n  i1 += 1;\n  i2 += 1;\n  if (i1 >= nblock)\n  {\n    i1 -= nblock;\n  }\n  if (i2 >= nblock)\n  {\n    i2 -= nblock;\n  }\n  k -= 8;\n  *budget -= 1;\n  *i1_ref = i1;\n  *i2_ref = i2;\n  *k_ref = k;\n  *c1_ref = c1;\n  *c2_ref = c2;\n  *s1_ref = s1;\n  *s2_ref = s2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i1_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const i1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i2_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const i2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const c1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const c2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s1_ref",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const s1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2_ref",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const s2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i1",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 i1 = *i1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i2",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 i2 = *i2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "UChar",
                        "definition": [
                            "UChar c1 = *c1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "UChar",
                        "definition": [
                            "UChar c2 = *c2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s1",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s1 = *s1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s2 = *s2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainSimpleSort_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const h_ref",
                "UInt32 * const v_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const quadrant",
                "Int32 nblock",
                "Int32 lo",
                "Int32 hi",
                "Int32 d",
                "Int32 * const budget",
                "Int32 hp"
            ],
            "definition": "void helper_mainSimpleSort_1(Int32 * const i_ref, Int32 * const j_ref, Int32 * const h_ref, UInt32 * const v_ref, UInt32 * const ptr, UChar * const block, UInt16 * const quadrant, Int32 nblock, Int32 lo, Int32 hi, Int32 d, Int32 * const budget, Int32 hp)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 h = *h_ref;\n  UInt32 v = *v_ref;\n  h = incs[hp];\n  i = lo + h;\n  while ((Bool) 1)\n  {\n    helper_helper_mainSimpleSort_1_1(&j, &v, ptr, block, quadrant, nblock, lo, hi, d, budget, i, h);\n  }\n\n  *i_ref = i;\n  *j_ref = j;\n  *h_ref = h;\n  *v_ref = v;\n}\n\n",
            "calle": [
                "helper_helper_mainSimpleSort_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hp",
                        "type": "Int32",
                        "definition": [
                            "Int32 hp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "Int32",
                        "definition": [
                            "Int32 h = *h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainQSort3_1",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const unHi_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "Int32 * const m_ref",
                "Int32 * const med_ref",
                "Int32 * const sp_ref",
                "Int32 * const lo_ref",
                "Int32 * const hi_ref",
                "Int32 * const d_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const quadrant",
                "Int32 nblock",
                "Int32 * const budget",
                "Int32 stackLo[100]",
                "Int32 stackHi[100]",
                "Int32 stackD[100]",
                "Int32 nextLo[3]",
                "Int32 nextHi[3]",
                "Int32 nextD[3]"
            ],
            "definition": "void helper_mainQSort3_1(Int32 * const unLo_ref, Int32 * const unHi_ref, Int32 * const ltLo_ref, Int32 * const gtHi_ref, Int32 * const n_ref, Int32 * const m_ref, Int32 * const med_ref, Int32 * const sp_ref, Int32 * const lo_ref, Int32 * const hi_ref, Int32 * const d_ref, UInt32 * const ptr, UChar * const block, UInt16 * const quadrant, Int32 nblock, Int32 * const budget, Int32 stackLo[100], Int32 stackHi[100], Int32 stackD[100], Int32 nextLo[3], Int32 nextHi[3], Int32 nextD[3])\n{\n  Int32 unLo = *unLo_ref;\n  Int32 unHi = *unHi_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  Int32 m = *m_ref;\n  Int32 med = *med_ref;\n  Int32 sp = *sp_ref;\n  Int32 lo = *lo_ref;\n  Int32 hi = *hi_ref;\n  Int32 d = *d_ref;\n  {\n    if (!(sp < (100 - 2)))\n    {\n      BZ2_bz__AssertH__fail(1001);\n    }\n  }\n  ;\n  {\n    sp -= 1;\n    lo = stackLo[sp];\n    hi = stackHi[sp];\n    d = stackD[sp];\n  }\n  ;\n  if (((hi - lo) < 20) || (d > (2 + 12)))\n  {\n    mainSimpleSort(ptr, block, quadrant, nblock, lo, hi, d, budget);\n    if ((*budget) < 0)\n    {\n      return;\n    }\n    continue;\n  }\n  med = (Int32) mmed3(block[ptr[lo] + d], block[ptr[hi] + d], block[ptr[(lo + hi) >> 1] + d]);\n  unLo = (ltLo = lo);\n  unHi = (gtHi = hi);\n  while ((Bool) 1)\n  {\n    helper_helper_mainQSort3_1_7(&unLo, &unHi, &ltLo, &gtHi, &n, ptr, block, med, d);\n  }\n\n  ;\n  if (gtHi < ltLo)\n  {\n    helper_helper_mainQSort3_1_1(&sp, stackLo, stackHi, stackD, lo, hi, d);\n  }\n  n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);\n  {\n    helper_helper_mainQSort3_1_5(ptr, unLo, n, lo);\n  }\n  ;\n  m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);\n  {\n    helper_helper_mainQSort3_1_6(ptr, unLo, m, hi);\n  }\n  ;\n  n = ((lo + unLo) - ltLo) - 1;\n  m = (hi - (gtHi - unHi)) + 1;\n  nextLo[0] = lo;\n  nextHi[0] = n;\n  nextD[0] = d;\n  nextLo[1] = m;\n  nextHi[1] = hi;\n  nextD[1] = d;\n  nextLo[2] = n + 1;\n  nextHi[2] = m - 1;\n  nextD[2] = d + 1;\n  if ((nextHi[0] - nextLo[0]) < (nextHi[1] - nextLo[1]))\n  {\n    helper_helper_mainQSort3_1_2(nextLo, nextHi, nextD);\n  }\n  ;\n  if ((nextHi[1] - nextLo[1]) < (nextHi[2] - nextLo[2]))\n  {\n    helper_helper_mainQSort3_1_3(nextLo, nextHi, nextD);\n  }\n  ;\n  if ((nextHi[0] - nextLo[0]) < (nextHi[1] - nextLo[1]))\n  {\n    helper_helper_mainQSort3_1_4(nextLo, nextHi, nextD);\n  }\n  ;\n  ;\n  ;\n  {\n    stackLo[sp] = nextLo[0];\n    stackHi[sp] = nextHi[0];\n    stackD[sp] = nextD[0];\n    sp += 1;\n  }\n  ;\n  {\n    stackLo[sp] = nextLo[1];\n    stackHi[sp] = nextHi[1];\n    stackD[sp] = nextD[1];\n    sp += 1;\n  }\n  ;\n  {\n    stackLo[sp] = nextLo[2];\n    stackHi[sp] = nextHi[2];\n    stackD[sp] = nextD[2];\n    sp += 1;\n  }\n  ;\n  *unLo_ref = unLo;\n  *unHi_ref = unHi;\n  *ltLo_ref = ltLo;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n  *m_ref = m;\n  *med_ref = med;\n  *sp_ref = sp;\n  *lo_ref = lo;\n  *hi_ref = hi;\n  *d_ref = d;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "helper_helper_mainQSort3_1_1",
                "helper_helper_mainQSort3_1_2",
                "helper_helper_mainQSort3_1_3",
                "helper_helper_mainQSort3_1_4",
                "helper_helper_mainQSort3_1_5",
                "helper_helper_mainQSort3_1_6",
                "helper_helper_mainQSort3_1_7",
                "mainSimpleSort",
                "mmed3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const med_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const lo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const hi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const d_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackD",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackD[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextLo",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextLo[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextHi",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextHi[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextD",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextD[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m = *m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "Int32",
                        "definition": [
                            "Int32 med = *med_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo = *lo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi = *hi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d = *d_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainSort_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "UChar * const block",
                "UInt16 * const quadrant",
                "UInt32 * const ftab"
            ],
            "definition": "void helper_mainSort_1(Int32 * const i_ref, Int32 * const j_ref, UChar * const block, UInt16 * const quadrant, UInt32 * const ftab)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  quadrant[i] = 0;\n  j = (j >> 8) | (((UInt16) block[i]) << 8);\n  ftab[j] += 1;\n  quadrant[i - 1] = 0;\n  j = (j >> 8) | (((UInt16) block[i - 1]) << 8);\n  ftab[j] += 1;\n  quadrant[i - 2] = 0;\n  j = (j >> 8) | (((UInt16) block[i - 2]) << 8);\n  ftab[j] += 1;\n  quadrant[i - 3] = 0;\n  j = (j >> 8) | (((UInt16) block[i - 3]) << 8);\n  ftab[j] += 1;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainSort_2",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "UInt32 * const ftab",
                "Int32 runningOrder[256]"
            ],
            "definition": "void helper_mainSort_2(Int32 * const i_ref, Int32 * const j_ref, UInt32 * const ftab, Int32 runningOrder[256])\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 vv;\n  Int32 h = 1;\n  do\n    h = (3 * h) + 1;\n  while (h <= 256);\n  do\n  {\n    h = h / 3;\n    for (i = h; i <= 255; i += 1)\n    {\n      vv = runningOrder[i];\n      j = i;\n      while ((ftab[(runningOrder[j - h] + 1) << 8] - ftab[runningOrder[j - h] << 8]) > (ftab[(vv + 1) << 8] - ftab[vv << 8]))\n      {\n        runningOrder[j] = runningOrder[j - h];\n        j = j - h;\n        if (j <= (h - 1))\n        {\n          goto zero;\n        }\n      }\n\n      zero:\n      runningOrder[j] = vv;\n\n    }\n\n  }\n  while (h != 1);\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runningOrder",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 runningOrder[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vv",
                        "type": "Int32",
                        "definition": [
                            "Int32 vv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "Int32",
                        "definition": [
                            "Int32 h = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainSort_3",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "UInt16 * const s_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt32 * const ftab",
                "Int32 i"
            ],
            "definition": "void helper_mainSort_3(Int32 * const j_ref, UInt16 * const s_ref, UInt32 * const ptr, UChar * const block, UInt32 * const ftab, Int32 i)\n{\n  Int32 j = *j_ref;\n  UInt16 s = *s_ref;\n  s = (s >> 8) | (block[i] << 8);\n  j = ftab[s] - 1;\n  ftab[s] = j;\n  ptr[j] = i;\n  s = (s >> 8) | (block[i - 1] << 8);\n  j = ftab[s] - 1;\n  ftab[s] = j;\n  ptr[j] = i - 1;\n  s = (s >> 8) | (block[i - 2] << 8);\n  j = ftab[s] - 1;\n  ftab[s] = j;\n  ptr[j] = i - 2;\n  s = (s >> 8) | (block[i - 3] << 8);\n  j = ftab[s] - 1;\n  ftab[s] = j;\n  ptr[j] = i - 3;\n  *j_ref = j;\n  *s_ref = s;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_ref",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 s = *s_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_mainSort_4",
            "header": "",
            "params": [
                "Int32 * const nblock_ref",
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "Int32 * const ss_ref",
                "Int32 * const sb_ref",
                "UChar * const c1_ref",
                "Int32 * const numQSorted_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const quadrant",
                "UInt32 * const ftab",
                "Int32 verb",
                "Int32 * const budget",
                "Int32 i",
                "Int32 runningOrder[256]",
                "Bool bigDone[256]",
                "Int32 copyStart[256]",
                "Int32 copyEnd[256]"
            ],
            "definition": "void helper_mainSort_4(Int32 * const nblock_ref, Int32 * const j_ref, Int32 * const k_ref, Int32 * const ss_ref, Int32 * const sb_ref, UChar * const c1_ref, Int32 * const numQSorted_ref, UInt32 * const ptr, UChar * const block, UInt16 * const quadrant, UInt32 * const ftab, Int32 verb, Int32 * const budget, Int32 i, Int32 runningOrder[256], Bool bigDone[256], Int32 copyStart[256], Int32 copyEnd[256])\n{\n  Int32 nblock = *nblock_ref;\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  Int32 ss = *ss_ref;\n  Int32 sb = *sb_ref;\n  UChar c1 = *c1_ref;\n  Int32 numQSorted = *numQSorted_ref;\n  ss = runningOrder[i];\n  for (j = 0; j <= 255; j += 1)\n  {\n    helper_helper_mainSort_4_1(&sb, &numQSorted, ptr, block, quadrant, ftab, verb, budget, nblock, j, ss);\n  }\n\n  {\n    if (!(!bigDone[ss]))\n    {\n      BZ2_bz__AssertH__fail(1006);\n    }\n  }\n  ;\n  {\n    helper_helper_mainSort_4_3(&j, &k, &c1, ptr, block, ftab, bigDone, copyStart, copyEnd, nblock, ss);\n  }\n  {\n    if (!(((copyStart[ss] - 1) == copyEnd[ss]) || ((copyStart[ss] == 0) && (copyEnd[ss] == (nblock - 1)))))\n    {\n      BZ2_bz__AssertH__fail(1007);\n    }\n  }\n  for (j = 0; j <= 255; j += 1)\n    ftab[(j << 8) + ss] |= 1 << 21;\n\n  bigDone[ss] = (Bool) 1;\n  if (i < 255)\n  {\n    helper_helper_mainSort_4_2(&nblock, &j, ptr, quadrant, ftab, ss);\n  }\n  *nblock_ref = nblock;\n  *j_ref = j;\n  *k_ref = k;\n  *ss_ref = ss;\n  *sb_ref = sb;\n  *c1_ref = c1;\n  *numQSorted_ref = numQSorted;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "helper_helper_mainSort_4_1",
                "helper_helper_mainSort_4_2",
                "helper_helper_mainSort_4_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ss_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sb_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const c1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numQSorted_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const numQSorted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runningOrder",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 runningOrder[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bigDone",
                        "type": "Bool [256]",
                        "definition": [
                            "Bool bigDone[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyStart",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyStart[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyEnd",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyEnd[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "Int32",
                        "definition": [
                            "Int32 ss = *ss_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sb",
                        "type": "Int32",
                        "definition": [
                            "Int32 sb = *sb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "UChar",
                        "definition": [
                            "UChar c1 = *c1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numQSorted",
                        "type": "Int32",
                        "definition": [
                            "Int32 numQSorted = *numQSorted_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_blockSort_1",
            "header": "",
            "params": [
                "Int32 * const wfact_ref",
                "unsigned int * const quadrant_idx_ref",
                "Int32 * const budget_ref",
                "Int32 * const budgetInit_ref",
                "Int32 * const i_ref",
                "EState * const s",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt32 * const ftab",
                "Int32 nblock",
                "Int32 verb",
                "UInt16 * const quadrant"
            ],
            "definition": "void helper_BZ2_blockSort_1(Int32 * const wfact_ref, unsigned int * const quadrant_idx_ref, Int32 * const budget_ref, Int32 * const budgetInit_ref, Int32 * const i_ref, EState * const s, UInt32 * const ptr, UChar * const block, UInt32 * const ftab, Int32 nblock, Int32 verb, UInt16 * const quadrant)\n{\n  Int32 wfact = *wfact_ref;\n  unsigned int quadrant_idx = *quadrant_idx_ref;\n  Int32 budget = *budget_ref;\n  Int32 budgetInit = *budgetInit_ref;\n  Int32 i = *i_ref;\n  i = nblock + (((2 + 12) + 18) + 2);\n  if (i & 1)\n  {\n    i += 1;\n  }\n  quadrant_idx = (UInt16 *) (&block[i]);\n  if (wfact < 1)\n  {\n    wfact = 1;\n  }\n  if (wfact > 100)\n  {\n    wfact = 100;\n  }\n  budgetInit = nblock * ((wfact - 1) / 3);\n  budget = budgetInit;\n  mainSort(ptr, block, quadrant, ftab, nblock, verb, &budget);\n  if (verb >= 3)\n  {\n    fprintf(stderr, \"      %d work, %d block, ratio %5.2f\\n\", budgetInit - budget, nblock, ((float) (budgetInit - budget)) / ((float) ((nblock == 0) ? (1) : (nblock))));\n  }\n  if (budget < 0)\n  {\n    if (verb >= 2)\n    {\n      fprintf(stderr, \"    too repetitive; using fallback sorting algorithm\\n\");\n    }\n    fallbackSort(s->arr1, s->arr2, ftab, nblock, verb);\n  }\n  *wfact_ref = wfact;\n  *quadrant_idx_ref = quadrant_idx;\n  *budget_ref = budget;\n  *budgetInit_ref = budgetInit;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fallbackSort",
                "fprintf",
                "mainSort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "wfact_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wfact_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const quadrant_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budgetInit_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budgetInit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wfact",
                        "type": "Int32",
                        "definition": [
                            "Int32 wfact = *wfact_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int quadrant_idx = *quadrant_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32",
                        "definition": [
                            "Int32 budget = *budget_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budgetInit",
                        "type": "Int32",
                        "definition": [
                            "Int32 budgetInit = *budgetInit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackQSort3_1_1",
            "header": "",
            "params": [
                "Int32 * const sp_ref",
                "Int32 stackLo[100]",
                "Int32 stackHi[100]",
                "Int32 n",
                "Int32 m",
                "Int32 lo",
                "Int32 hi"
            ],
            "definition": "void helper_helper_fallbackQSort3_1_1(Int32 * const sp_ref, Int32 stackLo[100], Int32 stackHi[100], Int32 n, Int32 m, Int32 lo, Int32 hi)\n{\n  Int32 sp = *sp_ref;\n  {\n    stackLo[sp] = lo;\n    stackHi[sp] = n;\n    sp += 1;\n  }\n  ;\n  {\n    stackLo[sp] = m;\n    stackHi[sp] = hi;\n    sp += 1;\n  }\n  ;\n  *sp_ref = sp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp = *sp_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackQSort3_1_2",
            "header": "",
            "params": [
                "Int32 * const sp_ref",
                "Int32 stackLo[100]",
                "Int32 stackHi[100]",
                "Int32 n",
                "Int32 m",
                "Int32 lo",
                "Int32 hi"
            ],
            "definition": "void helper_helper_fallbackQSort3_1_2(Int32 * const sp_ref, Int32 stackLo[100], Int32 stackHi[100], Int32 n, Int32 m, Int32 lo, Int32 hi)\n{\n  Int32 sp = *sp_ref;\n  {\n    stackLo[sp] = m;\n    stackHi[sp] = hi;\n    sp += 1;\n  }\n  ;\n  {\n    stackLo[sp] = lo;\n    stackHi[sp] = n;\n    sp += 1;\n  }\n  ;\n  *sp_ref = sp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp = *sp_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackQSort3_1_3",
            "header": "",
            "params": [
                "UInt32 * const fmap",
                "Int32 unLo",
                "Int32 n",
                "Int32 lo"
            ],
            "definition": "void helper_helper_fallbackQSort3_1_3(UInt32 * const fmap, Int32 unLo, Int32 n, Int32 lo)\n{\n  Int32 yyp1 = lo;\n  Int32 yyp2 = unLo - n;\n  Int32 yyn = n;\n  while (yyn > 0)\n  {\n    {\n      Int32 zztmp = fmap[yyp1];\n      fmap[yyp1] = fmap[yyp2];\n      fmap[yyp2] = zztmp;\n    }\n    ;\n    yyp1 += 1;\n    yyp2 += 1;\n    yyn -= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp1",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp1 = lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp2",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp2 = unLo - n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyn",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyn = n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = fmap[yyp1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackQSort3_1_4",
            "header": "",
            "params": [
                "UInt32 * const fmap",
                "Int32 unLo",
                "Int32 m",
                "Int32 hi"
            ],
            "definition": "void helper_helper_fallbackQSort3_1_4(UInt32 * const fmap, Int32 unLo, Int32 m, Int32 hi)\n{\n  Int32 yyp1 = unLo;\n  Int32 yyp2 = (hi - m) + 1;\n  Int32 yyn = m;\n  while (yyn > 0)\n  {\n    {\n      Int32 zztmp = fmap[yyp1];\n      fmap[yyp1] = fmap[yyp2];\n      fmap[yyp2] = zztmp;\n    }\n    ;\n    yyp1 += 1;\n    yyp2 += 1;\n    yyn -= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp1",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp1 = unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp2",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp2 = (hi - m) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyn",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyn = m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = fmap[yyp1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackQSort3_1_5",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const unHi_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 med"
            ],
            "definition": "void helper_helper_fallbackQSort3_1_5(Int32 * const unLo_ref, Int32 * const unHi_ref, Int32 * const ltLo_ref, Int32 * const gtHi_ref, Int32 * const n_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 med)\n{\n  Int32 unLo = *unLo_ref;\n  Int32 unHi = *unHi_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  while (1)\n  {\n    helper_helper_helper_fallbackQSort3_1_5_1(&unLo, &ltLo, &n, fmap, eclass, med, unHi);\n  }\n\n  while (1)\n  {\n    helper_helper_helper_fallbackQSort3_1_5_2(&unHi, &gtHi, &n, fmap, eclass, med, unLo);\n  }\n\n  if (unLo > unHi)\n  {\n    break;\n  }\n  {\n    Int32 zztmp = fmap[unLo];\n    fmap[unLo] = fmap[unHi];\n    fmap[unHi] = zztmp;\n  }\n  ;\n  unLo += 1;\n  unHi -= 1;\n  *unLo_ref = unLo;\n  *unHi_ref = unHi;\n  *ltLo_ref = ltLo;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "helper_helper_helper_fallbackQSort3_1_5_1",
                "helper_helper_helper_fallbackQSort3_1_5_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = fmap[unLo]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackSort_1_1",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 * const bhtab",
                "Int32 nblock",
                "Int32 H",
                "Int32 i"
            ],
            "definition": "void helper_helper_fallbackSort_1_1(Int32 * const j_ref, Int32 * const k_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 * const bhtab, Int32 nblock, Int32 H, Int32 i)\n{\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  if (bhtab[i >> 5] & (((UInt32) 1) << (i & 31)))\n  {\n    j = i;\n  }\n  k = fmap[i] - H;\n  if (k < 0)\n  {\n    k += nblock;\n  }\n  eclass[k] = j;\n  *j_ref = j;\n  *k_ref = k;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bhtab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const bhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "H",
                        "type": "Int32",
                        "definition": [
                            "Int32 H"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fallbackSort_1_2",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const k_ref",
                "Int32 * const l_ref",
                "Int32 * const r_ref",
                "Int32 * const cc_ref",
                "Int32 * const cc1_ref",
                "Int32 * const nNotDone_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 * const bhtab",
                "Int32 nblock"
            ],
            "definition": "void helper_helper_fallbackSort_1_2(Int32 * const i_ref, Int32 * const k_ref, Int32 * const l_ref, Int32 * const r_ref, Int32 * const cc_ref, Int32 * const cc1_ref, Int32 * const nNotDone_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 * const bhtab, Int32 nblock)\n{\n  Int32 i = *i_ref;\n  Int32 k = *k_ref;\n  Int32 l = *l_ref;\n  Int32 r = *r_ref;\n  Int32 cc = *cc_ref;\n  Int32 cc1 = *cc1_ref;\n  Int32 nNotDone = *nNotDone_ref;\n  k = r + 1;\n  while ((bhtab[k >> 5] & (((UInt32) 1) << (k & 31))) && (k & 0x01f))\n    k++;\n\n  k += 1;\n  if (bhtab[k >> 5] & (((UInt32) 1) << (k & 31)))\n  {\n    while (bhtab[k >> 5] == 0xffffffff)\n      k += 32;\n\n    while (bhtab[k >> 5] & (((UInt32) 1) << (k & 31)))\n      k++;\n\n    k += 1;\n  }\n  l = k - 1;\n  if (l >= nblock)\n  {\n    break;\n  }\n  while ((!(bhtab[k >> 5] & (((UInt32) 1) << (k & 31)))) && (k & 0x01f))\n    k++;\n\n  k += 1;\n  if (!(bhtab[k >> 5] & (((UInt32) 1) << (k & 31))))\n  {\n    while (bhtab[k >> 5] == 0x00000000)\n      k += 32;\n\n    while (!(bhtab[k >> 5] & (((UInt32) 1) << (k & 31))))\n      k++;\n\n    k += 1;\n  }\n  r = k - 1;\n  if (r >= nblock)\n    break;\n  if (r > l)\n  {\n    helper_helper_helper_fallbackSort_1_2_1(&i, &cc, &cc1, &nNotDone, fmap, eclass, bhtab, l, r);\n  }\n  *i_ref = i;\n  *k_ref = k;\n  *l_ref = l;\n  *r_ref = r;\n  *cc_ref = cc;\n  *cc1_ref = cc1;\n  *nNotDone_ref = nNotDone;\n}\n\n",
            "calle": [
                "helper_helper_helper_fallbackSort_1_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nNotDone_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bhtab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const bhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "Int32",
                        "definition": [
                            "Int32 l = *l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "Int32",
                        "definition": [
                            "Int32 r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc = *cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc1 = *cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNotDone = *nNotDone_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainSimpleSort_1_1",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "UInt32 * const v_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const quadrant",
                "Int32 nblock",
                "Int32 lo",
                "Int32 hi",
                "Int32 d",
                "Int32 * const budget",
                "Int32 i",
                "Int32 h"
            ],
            "definition": "void helper_helper_mainSimpleSort_1_1(Int32 * const j_ref, UInt32 * const v_ref, UInt32 * const ptr, UChar * const block, UInt16 * const quadrant, Int32 nblock, Int32 lo, Int32 hi, Int32 d, Int32 * const budget, Int32 i, Int32 h)\n{\n  Int32 j = *j_ref;\n  UInt32 v = *v_ref;\n  if (i > hi)\n    break;\n  v = ptr[i];\n  j = i;\n  while (mainGtU(ptr[j - h] + d, v + d, block, quadrant, nblock, budget))\n  {\n    ptr[j] = ptr[j - h];\n    j = j - h;\n    if (j <= ((lo + h) - 1))\n      break;\n  }\n\n  ptr[j] = v;\n  i++;\n  if (i > hi)\n    break;\n  v = ptr[i];\n  j = i;\n  while (mainGtU(ptr[j - h] + d, v + d, block, quadrant, nblock, budget))\n  {\n    ptr[j] = ptr[j - h];\n    j = j - h;\n    if (j <= ((lo + h) - 1))\n      break;\n  }\n\n  ptr[j] = v;\n  i++;\n  if (i > hi)\n    break;\n  v = ptr[i];\n  j = i;\n  while (mainGtU(ptr[j - h] + d, v + d, block, quadrant, nblock, budget))\n  {\n    ptr[j] = ptr[j - h];\n    j = j - h;\n    if (j <= ((lo + h) - 1))\n      break;\n  }\n\n  ptr[j] = v;\n  i++;\n  if ((*budget) < 0)\n    return;\n  *j_ref = j;\n  *v_ref = v;\n}\n\n",
            "calle": [
                "mainGtU"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "Int32",
                        "definition": [
                            "Int32 h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v = *v_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_1",
            "header": "",
            "params": [
                "Int32 * const sp_ref",
                "Int32 stackLo[100]",
                "Int32 stackHi[100]",
                "Int32 stackD[100]",
                "Int32 lo",
                "Int32 hi",
                "Int32 d"
            ],
            "definition": "void helper_helper_mainQSort3_1_1(Int32 * const sp_ref, Int32 stackLo[100], Int32 stackHi[100], Int32 stackD[100], Int32 lo, Int32 hi, Int32 d)\n{\n  Int32 sp = *sp_ref;\n  {\n    stackLo[sp] = lo;\n    stackHi[sp] = hi;\n    stackD[sp] = d + 1;\n    sp += 1;\n  }\n  ;\n  continue;\n  *sp_ref = sp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackLo",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackLo[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackHi",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackHi[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stackD",
                        "type": "Int32 [100]",
                        "definition": [
                            "Int32 stackD[100]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "Int32",
                        "definition": [
                            "Int32 sp = *sp_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_2",
            "header": "",
            "params": [
                "Int32 nextLo[3]",
                "Int32 nextHi[3]",
                "Int32 nextD[3]"
            ],
            "definition": "void helper_helper_mainQSort3_1_2(Int32 nextLo[3], Int32 nextHi[3], Int32 nextD[3])\n{\n  Int32 tz;\n  tz = nextLo[0];\n  nextLo[0] = nextLo[1];\n  nextLo[1] = tz;\n  tz = nextHi[0];\n  nextHi[0] = nextHi[1];\n  nextHi[1] = tz;\n  tz = nextD[0];\n  nextD[0] = nextD[1];\n  nextD[1] = tz;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nextLo",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextLo[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextHi",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextHi[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextD",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextD[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tz",
                        "type": "Int32",
                        "definition": [
                            "Int32 tz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_3",
            "header": "",
            "params": [
                "Int32 nextLo[3]",
                "Int32 nextHi[3]",
                "Int32 nextD[3]"
            ],
            "definition": "void helper_helper_mainQSort3_1_3(Int32 nextLo[3], Int32 nextHi[3], Int32 nextD[3])\n{\n  Int32 tz;\n  tz = nextLo[1];\n  nextLo[1] = nextLo[2];\n  nextLo[2] = tz;\n  tz = nextHi[1];\n  nextHi[1] = nextHi[2];\n  nextHi[2] = tz;\n  tz = nextD[1];\n  nextD[1] = nextD[2];\n  nextD[2] = tz;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nextLo",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextLo[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextHi",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextHi[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextD",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextD[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tz",
                        "type": "Int32",
                        "definition": [
                            "Int32 tz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_4",
            "header": "",
            "params": [
                "Int32 nextLo[3]",
                "Int32 nextHi[3]",
                "Int32 nextD[3]"
            ],
            "definition": "void helper_helper_mainQSort3_1_4(Int32 nextLo[3], Int32 nextHi[3], Int32 nextD[3])\n{\n  Int32 tz;\n  tz = nextLo[0];\n  nextLo[0] = nextLo[1];\n  nextLo[1] = tz;\n  tz = nextHi[0];\n  nextHi[0] = nextHi[1];\n  nextHi[1] = tz;\n  tz = nextD[0];\n  nextD[0] = nextD[1];\n  nextD[1] = tz;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nextLo",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextLo[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextHi",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextHi[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextD",
                        "type": "Int32 [3]",
                        "definition": [
                            "Int32 nextD[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tz",
                        "type": "Int32",
                        "definition": [
                            "Int32 tz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_5",
            "header": "",
            "params": [
                "UInt32 * const ptr",
                "Int32 unLo",
                "Int32 n",
                "Int32 lo"
            ],
            "definition": "void helper_helper_mainQSort3_1_5(UInt32 * const ptr, Int32 unLo, Int32 n, Int32 lo)\n{\n  Int32 yyp1 = lo;\n  Int32 yyp2 = unLo - n;\n  Int32 yyn = n;\n  while (yyn > 0)\n  {\n    {\n      Int32 zztmp = ptr[yyp1];\n      ptr[yyp1] = ptr[yyp2];\n      ptr[yyp2] = zztmp;\n    }\n    ;\n    yyp1 += 1;\n    yyp2 += 1;\n    yyn -= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp1",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp1 = lo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp2",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp2 = unLo - n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyn",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyn = n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = ptr[yyp1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_6",
            "header": "",
            "params": [
                "UInt32 * const ptr",
                "Int32 unLo",
                "Int32 m",
                "Int32 hi"
            ],
            "definition": "void helper_helper_mainQSort3_1_6(UInt32 * const ptr, Int32 unLo, Int32 m, Int32 hi)\n{\n  Int32 yyp1 = unLo;\n  Int32 yyp2 = (hi - m) + 1;\n  Int32 yyn = m;\n  while (yyn > 0)\n  {\n    {\n      Int32 zztmp = ptr[yyp1];\n      ptr[yyp1] = ptr[yyp2];\n      ptr[yyp2] = zztmp;\n    }\n    ;\n    yyp1 += 1;\n    yyp2 += 1;\n    yyn -= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "Int32",
                        "definition": [
                            "Int32 m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp1",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp1 = unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyp2",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyp2 = (hi - m) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yyn",
                        "type": "Int32",
                        "definition": [
                            "Int32 yyn = m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = ptr[yyp1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainQSort3_1_7",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const unHi_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "Int32 med",
                "Int32 d"
            ],
            "definition": "void helper_helper_mainQSort3_1_7(Int32 * const unLo_ref, Int32 * const unHi_ref, Int32 * const ltLo_ref, Int32 * const gtHi_ref, Int32 * const n_ref, UInt32 * const ptr, UChar * const block, Int32 med, Int32 d)\n{\n  Int32 unLo = *unLo_ref;\n  Int32 unHi = *unHi_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_mainQSort3_1_7_1(&unLo, &ltLo, &n, ptr, block, med, d, unHi);\n  }\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_mainQSort3_1_7_2(&unHi, &gtHi, &n, ptr, block, med, d, unLo);\n  }\n\n  if (unLo > unHi)\n  {\n    break;\n  }\n  {\n    Int32 zztmp = ptr[unLo];\n    ptr[unLo] = ptr[unHi];\n    ptr[unHi] = zztmp;\n  }\n  ;\n  unLo += 1;\n  unHi -= 1;\n  *unLo_ref = unLo;\n  *unHi_ref = unHi;\n  *ltLo_ref = ltLo;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "helper_helper_helper_mainQSort3_1_7_1",
                "helper_helper_helper_mainQSort3_1_7_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "Int32",
                        "definition": [
                            "Int32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = ptr[unLo]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainSort_4_1",
            "header": "",
            "params": [
                "Int32 * const sb_ref",
                "Int32 * const numQSorted_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const quadrant",
                "UInt32 * const ftab",
                "Int32 verb",
                "Int32 * const budget",
                "Int32 nblock",
                "Int32 j",
                "Int32 ss"
            ],
            "definition": "void helper_helper_mainSort_4_1(Int32 * const sb_ref, Int32 * const numQSorted_ref, UInt32 * const ptr, UChar * const block, UInt16 * const quadrant, UInt32 * const ftab, Int32 verb, Int32 * const budget, Int32 nblock, Int32 j, Int32 ss)\n{\n  Int32 sb = *sb_ref;\n  Int32 numQSorted = *numQSorted_ref;\n  if (j != ss)\n  {\n    sb = (ss << 8) + j;\n    if (!(ftab[sb] & (1 << 21)))\n    {\n      Int32 lo = ftab[sb] & (~(1 << 21));\n      Int32 hi = (ftab[sb + 1] & (~(1 << 21))) - 1;\n      if (hi > lo)\n      {\n        if (verb >= 4)\n        {\n          fprintf(stderr, \"        qsort [0x%x, 0x%x]   done %d   this %d\\n\", ss, j, numQSorted, (hi - lo) + 1);\n        }\n        mainQSort3(ptr, block, quadrant, nblock, lo, hi, 2, budget);\n        numQSorted += (hi - lo) + 1;\n        if ((*budget) < 0)\n        {\n          return;\n        }\n      }\n    }\n    ftab[sb] |= 1 << 21;\n  }\n  *sb_ref = sb;\n  *numQSorted_ref = numQSorted;\n}\n\n",
            "calle": [
                "fprintf",
                "mainQSort3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sb_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const sb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numQSorted_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const numQSorted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verb",
                        "type": "Int32",
                        "definition": [
                            "Int32 verb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "budget",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const budget"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "Int32",
                        "definition": [
                            "Int32 ss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sb",
                        "type": "Int32",
                        "definition": [
                            "Int32 sb = *sb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numQSorted",
                        "type": "Int32",
                        "definition": [
                            "Int32 numQSorted = *numQSorted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo",
                        "type": "Int32",
                        "definition": [
                            "Int32 lo = ftab[sb] & (~(1 << 21))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi",
                        "type": "Int32",
                        "definition": [
                            "Int32 hi = (ftab[sb + 1] & (~(1 << 21))) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainSort_4_2",
            "header": "",
            "params": [
                "Int32 * const nblock_ref",
                "Int32 * const j_ref",
                "UInt32 * const ptr",
                "UInt16 * const quadrant",
                "UInt32 * const ftab",
                "Int32 ss"
            ],
            "definition": "void helper_helper_mainSort_4_2(Int32 * const nblock_ref, Int32 * const j_ref, UInt32 * const ptr, UInt16 * const quadrant, UInt32 * const ftab, Int32 ss)\n{\n  Int32 nblock = *nblock_ref;\n  Int32 j = *j_ref;\n  Int32 bbStart = ftab[ss << 8] & (~(1 << 21));\n  Int32 bbSize = (ftab[(ss + 1) << 8] & (~(1 << 21))) - bbStart;\n  Int32 shifts = 0;\n  while ((bbSize >> shifts) > 65534)\n    shifts++;\n\n  shifts += 1;\n  for (j = bbSize - 1; j >= 0; j -= 1)\n  {\n    Int32 a2update = ptr[bbStart + j];\n    UInt16 qVal = (UInt16) (j >> shifts);\n    quadrant[a2update] = qVal;\n    if (a2update < (((2 + 12) + 18) + 2))\n    {\n      quadrant[a2update + nblock] = qVal;\n    }\n  }\n\n  {\n    if (!(((bbSize - 1) >> shifts) <= 65535))\n    {\n      BZ2_bz__AssertH__fail(1002);\n    }\n  }\n  ;\n  *nblock_ref = nblock;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quadrant",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const quadrant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "Int32",
                        "definition": [
                            "Int32 ss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bbStart",
                        "type": "Int32",
                        "definition": [
                            "Int32 bbStart = ftab[ss << 8] & (~(1 << 21))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bbSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 bbSize = (ftab[(ss + 1) << 8] & (~(1 << 21))) - bbStart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shifts",
                        "type": "Int32",
                        "definition": [
                            "Int32 shifts = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a2update",
                        "type": "Int32",
                        "definition": [
                            "Int32 a2update = ptr[bbStart + j]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qVal",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 qVal = (UInt16) (j >> shifts)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_mainSort_4_3",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "UChar * const c1_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt32 * const ftab",
                "Bool bigDone[256]",
                "Int32 copyStart[256]",
                "Int32 copyEnd[256]",
                "Int32 nblock",
                "Int32 ss"
            ],
            "definition": "void helper_helper_mainSort_4_3(Int32 * const j_ref, Int32 * const k_ref, UChar * const c1_ref, UInt32 * const ptr, UChar * const block, UInt32 * const ftab, Bool bigDone[256], Int32 copyStart[256], Int32 copyEnd[256], Int32 nblock, Int32 ss)\n{\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  UChar c1 = *c1_ref;\n  for (j = 0; j <= 255; j += 1)\n  {\n    copyStart[j] = ftab[(j << 8) + ss] & (~(1 << 21));\n    copyEnd[j] = (ftab[((j << 8) + ss) + 1] & (~(1 << 21))) - 1;\n  }\n\n  for (j = ftab[ss << 8] & (~(1 << 21)); j < copyStart[ss]; j += 1)\n  {\n    k = ptr[j] - 1;\n    if (k < 0)\n    {\n      k += nblock;\n    }\n    c1 = block[k];\n    if (!bigDone[c1])\n    {\n      ptr[copyStart[c1]++] = k;\n    }\n  }\n\n  for (j = (ftab[(ss + 1) << 8] & (~(1 << 21))) - 1; j > copyEnd[ss]; j -= 1)\n  {\n    k = ptr[j] - 1;\n    if (k < 0)\n    {\n      k += nblock;\n    }\n    c1 = block[k];\n    if (!bigDone[c1])\n    {\n      ptr[copyEnd[c1]--] = k;\n    }\n  }\n\n  *j_ref = j;\n  *k_ref = k;\n  *c1_ref = c1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const c1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bigDone",
                        "type": "Bool [256]",
                        "definition": [
                            "Bool bigDone[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyStart",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyStart[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyEnd",
                        "type": "Int32 [256]",
                        "definition": [
                            "Int32 copyEnd[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "Int32",
                        "definition": [
                            "Int32 ss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "UChar",
                        "definition": [
                            "UChar c1 = *c1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_fallbackQSort3_1_5_1",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const n_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 med",
                "Int32 unHi"
            ],
            "definition": "void helper_helper_helper_fallbackQSort3_1_5_1(Int32 * const unLo_ref, Int32 * const ltLo_ref, Int32 * const n_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 med, Int32 unHi)\n{\n  Int32 unLo = *unLo_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 n = *n_ref;\n  if (unLo > unHi)\n  {\n    break;\n  }\n  n = ((Int32) eclass[fmap[unLo]]) - ((Int32) med);\n  if (n == 0)\n  {\n    {\n      Int32 zztmp = fmap[unLo];\n      fmap[unLo] = fmap[ltLo];\n      fmap[ltLo] = zztmp;\n    }\n    ;\n    ltLo += 1;\n    unLo += 1;\n    continue;\n  }\n  ;\n  if (n > 0)\n  {\n    break;\n  }\n  unLo += 1;\n  *unLo_ref = unLo;\n  *ltLo_ref = ltLo;\n  *n_ref = n;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = fmap[unLo]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_fallbackQSort3_1_5_2",
            "header": "",
            "params": [
                "Int32 * const unHi_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 med",
                "Int32 unLo"
            ],
            "definition": "void helper_helper_helper_fallbackQSort3_1_5_2(Int32 * const unHi_ref, Int32 * const gtHi_ref, Int32 * const n_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 med, Int32 unLo)\n{\n  Int32 unHi = *unHi_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  if (unLo > unHi)\n  {\n    break;\n  }\n  n = ((Int32) eclass[fmap[unHi]]) - ((Int32) med);\n  if (n == 0)\n  {\n    {\n      Int32 zztmp = fmap[unHi];\n      fmap[unHi] = fmap[gtHi];\n      fmap[gtHi] = zztmp;\n    }\n    ;\n    gtHi -= 1;\n    unHi -= 1;\n    continue;\n  }\n  ;\n  if (n < 0)\n  {\n    break;\n  }\n  unHi -= 1;\n  *unHi_ref = unHi;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = fmap[unHi]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_fallbackSort_1_2_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const cc_ref",
                "Int32 * const cc1_ref",
                "Int32 * const nNotDone_ref",
                "UInt32 * const fmap",
                "UInt32 * const eclass",
                "UInt32 * const bhtab",
                "Int32 l",
                "Int32 r"
            ],
            "definition": "void helper_helper_helper_fallbackSort_1_2_1(Int32 * const i_ref, Int32 * const cc_ref, Int32 * const cc1_ref, Int32 * const nNotDone_ref, UInt32 * const fmap, UInt32 * const eclass, UInt32 * const bhtab, Int32 l, Int32 r)\n{\n  Int32 i = *i_ref;\n  Int32 cc = *cc_ref;\n  Int32 cc1 = *cc1_ref;\n  Int32 nNotDone = *nNotDone_ref;\n  nNotDone += (r - l) + 1;\n  fallbackQSort3(fmap, eclass, l, r);\n  cc = -1;\n  for (i = l; i <= r; i++)\n  {\n    cc1 = eclass[fmap[i]];\n    if (cc != cc1)\n    {\n      bhtab[i >> 5] |= ((UInt32) 1) << (i & 31);\n      cc = cc1;\n    }\n    ;\n  }\n\n  *i_ref = i;\n  *cc_ref = cc;\n  *cc1_ref = cc1;\n  *nNotDone_ref = nNotDone;\n}\n\n",
            "calle": [
                "fallbackQSort3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nNotDone_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmap",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const fmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eclass",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const eclass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bhtab",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const bhtab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "Int32",
                        "definition": [
                            "Int32 l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "Int32",
                        "definition": [
                            "Int32 r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc = *cc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc1",
                        "type": "Int32",
                        "definition": [
                            "Int32 cc1 = *cc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNotDone",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNotDone = *nNotDone_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_mainQSort3_1_7_1",
            "header": "",
            "params": [
                "Int32 * const unLo_ref",
                "Int32 * const ltLo_ref",
                "Int32 * const n_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "Int32 med",
                "Int32 d",
                "Int32 unHi"
            ],
            "definition": "void helper_helper_helper_mainQSort3_1_7_1(Int32 * const unLo_ref, Int32 * const ltLo_ref, Int32 * const n_ref, UInt32 * const ptr, UChar * const block, Int32 med, Int32 d, Int32 unHi)\n{\n  Int32 unLo = *unLo_ref;\n  Int32 ltLo = *ltLo_ref;\n  Int32 n = *n_ref;\n  if (unLo > unHi)\n  {\n    break;\n  }\n  n = ((Int32) block[ptr[unLo] + d]) - med;\n  if (n == 0)\n  {\n    {\n      Int32 zztmp = ptr[unLo];\n      ptr[unLo] = ptr[ltLo];\n      ptr[ltLo] = zztmp;\n    }\n    ;\n    ltLo += 1;\n    unLo += 1;\n    continue;\n  }\n  ;\n  if (n > 0)\n  {\n    break;\n  }\n  unLo += 1;\n  *unLo_ref = unLo;\n  *ltLo_ref = ltLo;\n  *n_ref = n;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "Int32",
                        "definition": [
                            "Int32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo = *unLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 ltLo = *ltLo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = ptr[unLo]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_mainQSort3_1_7_2",
            "header": "",
            "params": [
                "Int32 * const unHi_ref",
                "Int32 * const gtHi_ref",
                "Int32 * const n_ref",
                "UInt32 * const ptr",
                "UChar * const block",
                "Int32 med",
                "Int32 d",
                "Int32 unLo"
            ],
            "definition": "void helper_helper_helper_mainQSort3_1_7_2(Int32 * const unHi_ref, Int32 * const gtHi_ref, Int32 * const n_ref, UInt32 * const ptr, UChar * const block, Int32 med, Int32 d, Int32 unLo)\n{\n  Int32 unHi = *unHi_ref;\n  Int32 gtHi = *gtHi_ref;\n  Int32 n = *n_ref;\n  if (unLo > unHi)\n  {\n    break;\n  }\n  n = ((Int32) block[ptr[unHi] + d]) - med;\n  if (n == 0)\n  {\n    {\n      Int32 zztmp = ptr[unHi];\n      ptr[unHi] = ptr[gtHi];\n      ptr[gtHi] = zztmp;\n    }\n    ;\n    gtHi -= 1;\n    unHi -= 1;\n    continue;\n  }\n  ;\n  if (n < 0)\n  {\n    break;\n  }\n  unHi -= 1;\n  *unHi_ref = unHi;\n  *gtHi_ref = gtHi;\n  *n_ref = n;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "med",
                        "type": "Int32",
                        "definition": [
                            "Int32 med"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "Int32",
                        "definition": [
                            "Int32 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unLo",
                        "type": "Int32",
                        "definition": [
                            "Int32 unLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 unHi = *unHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtHi",
                        "type": "Int32",
                        "definition": [
                            "Int32 gtHi = *gtHi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zztmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 zztmp = ptr[unHi]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_hbAssignCodes",
            "header": "extern void BZ2_hbAssignCodes(Int32 *, UChar *, Int32, Int32, Int32)",
            "params": [
                "Int32 *code",
                "UChar *length",
                "Int32 minLen",
                "Int32 maxLen",
                "Int32 alphaSize"
            ],
            "definition": "void BZ2_hbAssignCodes(Int32 *code, UChar *length, Int32 minLen, Int32 maxLen, Int32 alphaSize)\n{\n  Int32 n;\n  Int32 vec;\n  Int32 i;\n  vec = 0;\n  for (n = minLen; n <= maxLen; n += 1)\n  {\n    for (i = 0; i < alphaSize; i += 1)\n      if (length[i] == n)\n    {\n      code[i] = vec;\n      vec += 1;\n    }\n\n    ;\n    vec <<= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "UChar *",
                        "definition": [
                            "UChar *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vec",
                        "type": "Int32",
                        "definition": [
                            "Int32 vec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_hbMakeCodeLengths",
            "header": "extern void BZ2_hbMakeCodeLengths(UChar *, Int32 *, Int32, Int32)",
            "params": [
                "UChar *len",
                "Int32 *freq",
                "Int32 alphaSize",
                "Int32 maxLen"
            ],
            "definition": "void BZ2_hbMakeCodeLengths(UChar *len, Int32 *freq, Int32 alphaSize, Int32 maxLen)\n{\n  Int32 nNodes;\n  Int32 nHeap;\n  Int32 n1;\n  Int32 n2;\n  Int32 i;\n  Int32 j;\n  Int32 k;\n  Bool tooLong;\n  Int32 heap[258 + 2];\n  Int32 weight[258 * 2];\n  Int32 parent[258 * 2];\n  for (i = 0; i < alphaSize; i += 1)\n    weight[i + 1] = ((freq[i] == 0) ? (1) : (freq[i])) << 8;\n\n  while ((Bool) 1)\n  {\n    helper_BZ2_hbMakeCodeLengths_1(&nNodes, &nHeap, &n1, &n2, &i, &j, &k, &tooLong, len, alphaSize, maxLen, heap, weight, parent);\n  }\n\n}\n\n",
            "calle": [
                "helper_BZ2_hbMakeCodeLengths_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len",
                        "type": "UChar *",
                        "definition": [
                            "UChar *len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freq",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *freq"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNodes",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1",
                        "type": "Int32",
                        "definition": [
                            "Int32 n1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tooLong",
                        "type": "Bool",
                        "definition": [
                            "Bool tooLong"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 parent[258 * 2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_hbCreateDecodeTables",
            "header": "extern void BZ2_hbCreateDecodeTables(Int32 *, Int32 *, Int32 *, UChar *, Int32, Int32, Int32)",
            "params": [
                "Int32 *limit",
                "Int32 *base",
                "Int32 *perm",
                "UChar *length",
                "Int32 minLen",
                "Int32 maxLen",
                "Int32 alphaSize"
            ],
            "definition": "void BZ2_hbCreateDecodeTables(Int32 *limit, Int32 *base, Int32 *perm, UChar *length, Int32 minLen, Int32 maxLen, Int32 alphaSize)\n{\n  Int32 pp;\n  Int32 i;\n  Int32 j;\n  Int32 vec;\n  pp = 0;\n  for (i = minLen; i <= maxLen; i += 1)\n    for (j = 0; j < alphaSize; j += 1)\n    if (length[j] == i)\n  {\n    perm[pp] = j;\n    pp += 1;\n  }\n\n\n  ;\n  for (i = 0; i < 23; i += 1)\n    base[i] = 0;\n\n  for (i = 0; i < alphaSize; i += 1)\n    base[length[i] + 1]++;\n\n  for (i = 1; i < 23; i += 1)\n    base[i] += base[i - 1];\n\n  for (i = 0; i < 23; i += 1)\n    limit[i] = 0;\n\n  vec = 0;\n  for (i = minLen; i <= maxLen; i += 1)\n  {\n    vec += base[i + 1] - base[i];\n    limit[i] = vec - 1;\n    vec <<= 1;\n  }\n\n  for (i = minLen + 1; i <= maxLen; i += 1)\n    base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "limit",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "UChar *",
                        "definition": [
                            "UChar *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "Int32",
                        "definition": [
                            "Int32 pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vec",
                        "type": "Int32",
                        "definition": [
                            "Int32 vec"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_hbMakeCodeLengths_1",
            "header": "",
            "params": [
                "Int32 * const nNodes_ref",
                "Int32 * const nHeap_ref",
                "Int32 * const n1_ref",
                "Int32 * const n2_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "Bool * const tooLong_ref",
                "UChar * const len",
                "Int32 alphaSize",
                "Int32 maxLen",
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 parent[258 * 2]"
            ],
            "definition": "void helper_BZ2_hbMakeCodeLengths_1(Int32 * const nNodes_ref, Int32 * const nHeap_ref, Int32 * const n1_ref, Int32 * const n2_ref, Int32 * const i_ref, Int32 * const j_ref, Int32 * const k_ref, Bool * const tooLong_ref, UChar * const len, Int32 alphaSize, Int32 maxLen, Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 parent[258 * 2])\n{\n  Int32 nNodes = *nNodes_ref;\n  Int32 nHeap = *nHeap_ref;\n  Int32 n1 = *n1_ref;\n  Int32 n2 = *n2_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  Bool tooLong = *tooLong_ref;\n  nNodes = alphaSize;\n  nHeap = 0;\n  heap[0] = 0;\n  weight[0] = 0;\n  parent[0] = -2;\n  for (i = 1; i <= alphaSize; i += 1)\n  {\n    helper_helper_BZ2_hbMakeCodeLengths_1_2(&nHeap, &i, heap, weight, parent);\n  }\n\n  {\n    if (!(nHeap < (258 + 2)))\n    {\n      BZ2_bz__AssertH__fail(2001);\n    }\n  }\n  ;\n  while (nHeap > 1)\n  {\n    helper_helper_BZ2_hbMakeCodeLengths_1_3(&nNodes, &nHeap, &n1, &n2, heap, weight, parent);\n  }\n\n  {\n    if (!(nNodes < (258 * 2)))\n    {\n      BZ2_bz__AssertH__fail(2002);\n    }\n  }\n  ;\n  tooLong = (Bool) 0;\n  for (i = 1; i <= alphaSize; i += 1)\n  {\n    helper_helper_BZ2_hbMakeCodeLengths_1_1(&i, &j, &k, &tooLong, len, maxLen, parent);\n  }\n\n  if (!tooLong)\n  {\n    break;\n  }\n  for (i = 1; i <= alphaSize; i += 1)\n  {\n    j = weight[i] >> 8;\n    j = 1 + (j / 2);\n    weight[i] = j << 8;\n  }\n\n  *nNodes_ref = nNodes;\n  *nHeap_ref = nHeap;\n  *n1_ref = n1;\n  *n2_ref = n2;\n  *i_ref = i;\n  *j_ref = j;\n  *k_ref = k;\n  *tooLong_ref = tooLong;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "helper_helper_BZ2_hbMakeCodeLengths_1_1",
                "helper_helper_BZ2_hbMakeCodeLengths_1_2",
                "helper_helper_BZ2_hbMakeCodeLengths_1_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nNodes_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nNodes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tooLong_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const tooLong_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 parent[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNodes",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNodes = *nNodes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap = *nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1",
                        "type": "Int32",
                        "definition": [
                            "Int32 n1 = *n1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tooLong",
                        "type": "Bool",
                        "definition": [
                            "Bool tooLong = *tooLong_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_hbMakeCodeLengths_1_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "Bool * const tooLong_ref",
                "UChar * const len",
                "Int32 maxLen",
                "Int32 parent[258 * 2]"
            ],
            "definition": "void helper_helper_BZ2_hbMakeCodeLengths_1_1(Int32 * const i_ref, Int32 * const j_ref, Int32 * const k_ref, Bool * const tooLong_ref, UChar * const len, Int32 maxLen, Int32 parent[258 * 2])\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  Bool tooLong = *tooLong_ref;\n  j = 0;\n  k = i;\n  while (parent[k] >= 0)\n  {\n    k = parent[k];\n    j += 1;\n  }\n\n  len[i - 1] = j;\n  if (j > maxLen)\n  {\n    tooLong = (Bool) 1;\n  }\n  *i_ref = i;\n  *j_ref = j;\n  *k_ref = k;\n  *tooLong_ref = tooLong;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tooLong_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const tooLong_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 parent[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tooLong",
                        "type": "Bool",
                        "definition": [
                            "Bool tooLong = *tooLong_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_hbMakeCodeLengths_1_2",
            "header": "",
            "params": [
                "Int32 * const nHeap_ref",
                "Int32 * const i_ref",
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 parent[258 * 2]"
            ],
            "definition": "void helper_helper_BZ2_hbMakeCodeLengths_1_2(Int32 * const nHeap_ref, Int32 * const i_ref, Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 parent[258 * 2])\n{\n  Int32 nHeap = *nHeap_ref;\n  Int32 i = *i_ref;\n  parent[i] = -1;\n  nHeap += 1;\n  heap[nHeap] = i;\n  {\n    Int32 zz;\n    Int32 tmp;\n    zz = nHeap;\n    tmp = heap[zz];\n    while (weight[tmp] < weight[heap[zz >> 1]])\n    {\n      heap[zz] = heap[zz >> 1];\n      zz >>= 1;\n    }\n\n    heap[zz] = tmp;\n  }\n  ;\n  *nHeap_ref = nHeap;\n  *i_ref = i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nHeap_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 parent[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap = *nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "Int32",
                        "definition": [
                            "Int32 zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_hbMakeCodeLengths_1_3",
            "header": "",
            "params": [
                "Int32 * const nNodes_ref",
                "Int32 * const nHeap_ref",
                "Int32 * const n1_ref",
                "Int32 * const n2_ref",
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 parent[258 * 2]"
            ],
            "definition": "void helper_helper_BZ2_hbMakeCodeLengths_1_3(Int32 * const nNodes_ref, Int32 * const nHeap_ref, Int32 * const n1_ref, Int32 * const n2_ref, Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 parent[258 * 2])\n{\n  Int32 nNodes = *nNodes_ref;\n  Int32 nHeap = *nHeap_ref;\n  Int32 n1 = *n1_ref;\n  Int32 n2 = *n2_ref;\n  n1 = heap[1];\n  heap[1] = heap[nHeap];\n  nHeap -= 1;\n  {\n    helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_2(heap, weight, nHeap);\n  }\n  ;\n  n2 = heap[1];\n  heap[1] = heap[nHeap];\n  nHeap -= 1;\n  {\n    helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_3(heap, weight, nHeap);\n  }\n  ;\n  nNodes += 1;\n  parent[n1] = (parent[n2] = nNodes);\n  weight[nNodes] = ((weight[n1] & 0xffffff00) + (weight[n2] & 0xffffff00)) | (1 + (((weight[n1] & 0x000000ff) > (weight[n2] & 0x000000ff)) ? (weight[n1] & 0x000000ff) : (weight[n2] & 0x000000ff)));\n  parent[nNodes] = -1;\n  nHeap += 1;\n  heap[nHeap] = nNodes;\n  {\n    helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_1(heap, weight, nHeap);\n  }\n  ;\n  *nNodes_ref = nNodes;\n  *nHeap_ref = nHeap;\n  *n1_ref = n1;\n  *n2_ref = n2;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_1",
                "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_2",
                "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nNodes_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nNodes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 parent[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nNodes",
                        "type": "Int32",
                        "definition": [
                            "Int32 nNodes = *nNodes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap = *nHeap_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1",
                        "type": "Int32",
                        "definition": [
                            "Int32 n1 = *n1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_1",
            "header": "",
            "params": [
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 nHeap"
            ],
            "definition": "void helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_1(Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 nHeap)\n{\n  Int32 zz;\n  Int32 tmp;\n  zz = nHeap;\n  tmp = heap[zz];\n  while (weight[tmp] < weight[heap[zz >> 1]])\n  {\n    heap[zz] = heap[zz >> 1];\n    zz >>= 1;\n  }\n\n  heap[zz] = tmp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "Int32",
                        "definition": [
                            "Int32 zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_2",
            "header": "",
            "params": [
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 nHeap"
            ],
            "definition": "void helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_2(Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 nHeap)\n{\n  Int32 zz;\n  Int32 yy;\n  Int32 tmp;\n  zz = 1;\n  tmp = heap[zz];\n  while ((Bool) 1)\n  {\n    yy = zz << 1;\n    if (yy > nHeap)\n    {\n      break;\n    }\n    if ((yy < nHeap) && (weight[heap[yy + 1]] < weight[heap[yy]]))\n    {\n      yy += 1;\n    }\n    if (weight[tmp] < weight[heap[yy]])\n    {\n      break;\n    }\n    heap[zz] = heap[yy];\n    zz = yy;\n  }\n\n  heap[zz] = tmp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "Int32",
                        "definition": [
                            "Int32 zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "Int32",
                        "definition": [
                            "Int32 yy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_3",
            "header": "",
            "params": [
                "Int32 heap[258 + 2]",
                "Int32 weight[258 * 2]",
                "Int32 nHeap"
            ],
            "definition": "void helper_helper_helper_BZ2_hbMakeCodeLengths_1_3_3(Int32 heap[258 + 2], Int32 weight[258 * 2], Int32 nHeap)\n{\n  Int32 zz;\n  Int32 yy;\n  Int32 tmp;\n  zz = 1;\n  tmp = heap[zz];\n  while ((Bool) 1)\n  {\n    yy = zz << 1;\n    if (yy > nHeap)\n    {\n      break;\n    }\n    if ((yy < nHeap) && (weight[heap[yy + 1]] < weight[heap[yy]]))\n    {\n      yy += 1;\n    }\n    if (weight[tmp] < weight[heap[yy]])\n    {\n      break;\n    }\n    heap[zz] = heap[yy];\n    zz = yy;\n  }\n\n  heap[zz] = tmp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heap",
                        "type": "Int32 [258 + 2]",
                        "definition": [
                            "Int32 heap[258 + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "Int32 [258 * 2]",
                        "definition": [
                            "Int32 weight[258 * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nHeap",
                        "type": "Int32",
                        "definition": [
                            "Int32 nHeap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "Int32",
                        "definition": [
                            "Int32 zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "Int32",
                        "definition": [
                            "Int32 yy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_compressBlock",
            "header": "extern void BZ2_compressBlock(EState *, Bool)",
            "params": [
                "EState *s",
                "Bool is_last_block"
            ],
            "definition": "void BZ2_compressBlock(EState *s, Bool is_last_block)\n{\n  if (s->nblock > 0)\n  {\n    helper_BZ2_compressBlock_1(s);\n  }\n  s->zbits = (UChar *) (&((UChar *) s->arr2)[s->nblock]);\n  if (s->blockNo == 1)\n  {\n    BZ2_bsInitWrite(s);\n    bsPutUChar(s, 0x42);\n    bsPutUChar(s, 0x5a);\n    bsPutUChar(s, 0x68);\n    bsPutUChar(s, (UChar) (0x30 + s->blockSize100k));\n  }\n  if (s->nblock > 0)\n  {\n    helper_BZ2_compressBlock_3(s);\n  }\n  if (is_last_block)\n  {\n    helper_BZ2_compressBlock_2(s);\n  }\n}\n\n",
            "calle": [
                "BZ2_bsInitWrite",
                "bsPutUChar",
                "helper_BZ2_compressBlock_1",
                "helper_BZ2_compressBlock_2",
                "helper_BZ2_compressBlock_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_last_block",
                        "type": "Bool",
                        "definition": [
                            "Bool is_last_block"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bsInitWrite",
            "header": "extern void BZ2_bsInitWrite(EState *)",
            "params": [
                "EState *s"
            ],
            "definition": "void BZ2_bsInitWrite(EState *s)\n{\n  s->bsLive = 0;\n  s->bsBuff = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsFinishWrite",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void bsFinishWrite(EState *s)\n{\n  while (s->bsLive > 0)\n  {\n    s->zbits[s->numZ] = (UChar) (s->bsBuff >> 24);\n    s->numZ += 1;\n    s->bsBuff <<= 8;\n    s->bsLive -= 8;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsW",
            "header": "",
            "params": [
                "EState *s",
                "Int32 n",
                "UInt32 v"
            ],
            "definition": "static void bsW(EState *s, Int32 n, UInt32 v)\n{\n  {\n    while (s->bsLive >= 8)\n    {\n      s->zbits[s->numZ] = (UChar) (s->bsBuff >> 24);\n      s->numZ += 1;\n      s->bsBuff <<= 8;\n      s->bsLive -= 8;\n    }\n\n  }\n  ;\n  s->bsBuff |= v << ((32 - s->bsLive) - n);\n  s->bsLive += n;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsPutUInt32",
            "header": "",
            "params": [
                "EState *s",
                "UInt32 u"
            ],
            "definition": "static void bsPutUInt32(EState *s, UInt32 u)\n{\n  bsW(s, 8, (u >> 24) & 0xffL);\n  bsW(s, 8, (u >> 16) & 0xffL);\n  bsW(s, 8, (u >> 8) & 0xffL);\n  bsW(s, 8, u & 0xffL);\n}\n\n",
            "calle": [
                "bsW"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 u"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsPutUChar",
            "header": "",
            "params": [
                "EState *s",
                "UChar c"
            ],
            "definition": "static void bsPutUChar(EState *s, UChar c)\n{\n  bsW(s, 8, (UInt32) c);\n}\n\n",
            "calle": [
                "bsW"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "UChar",
                        "definition": [
                            "UChar c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "makeMaps_e",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void makeMaps_e(EState *s)\n{\n  Int32 i;\n  s->nInUse = 0;\n  for (i = 0; i < 256; i += 1)\n    if (s->inUse[i])\n  {\n    s->unseqToSeq[i] = s->nInUse;\n    s->nInUse += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "generateMTFValues",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void generateMTFValues(EState *s)\n{\n  UChar yy[256];\n  Int32 i;\n  Int32 j;\n  Int32 zPend;\n  Int32 wr;\n  Int32 EOB;\n  UInt32 *ptr = s->ptr;\n  UChar *block = s->block;\n  UInt16 *mtfv = s->mtfv;\n  makeMaps_e(s);\n  EOB = s->nInUse + 1;\n  for (i = 0; i <= EOB; i += 1)\n    s->mtfFreq[i] = 0;\n\n  wr = 0;\n  zPend = 0;\n  for (i = 0; i < s->nInUse; i += 1)\n    yy[i] = (UChar) i;\n\n  for (i = 0; i < s->nblock; i += 1)\n  {\n    helper_generateMTFValues_2(&j, &zPend, &wr, s, yy, i, ptr, block, mtfv);\n  }\n\n  if (zPend > 0)\n  {\n    helper_generateMTFValues_1(&zPend, &wr, s, mtfv);\n  }\n  mtfv[wr] = EOB;\n  wr += 1;\n  s->mtfFreq[EOB] += 1;\n  s->nMTF = wr;\n}\n\n",
            "calle": [
                "helper_generateMTFValues_1",
                "helper_generateMTFValues_2",
                "makeMaps_e"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar yy[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend",
                        "type": "Int32",
                        "definition": [
                            "Int32 zPend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "EOB",
                        "type": "Int32",
                        "definition": [
                            "Int32 EOB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *ptr = s->ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar *",
                        "definition": [
                            "UChar *block = s->block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *mtfv = s->mtfv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sendMTFValues",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void sendMTFValues(EState *s)\n{\n  Int32 v;\n  Int32 t;\n  Int32 i;\n  Int32 j;\n  Int32 gs;\n  Int32 ge;\n  Int32 totc;\n  Int32 bt;\n  Int32 bc;\n  Int32 iter;\n  Int32 nSelectors;\n  Int32 alphaSize;\n  Int32 minLen;\n  Int32 maxLen;\n  Int32 selCtr;\n  Int32 nGroups;\n  Int32 nBytes;\n  UInt16 cost[6];\n  Int32 fave[6];\n  UInt16 *mtfv = s->mtfv;\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\\n\", s->nblock, s->nMTF, s->nInUse);\n  }\n  alphaSize = s->nInUse + 2;\n  for (t = 0; t < 6; t += 1)\n    for (v = 0; v < alphaSize; v += 1)\n    s->len[t][v] = 15;\n\n\n  {\n    if (!(s->nMTF > 0))\n    {\n      BZ2_bz__AssertH__fail(3001);\n    }\n  }\n  ;\n  if (s->nMTF < 200)\n  {\n    nGroups = 2;\n  }\n  else\n    if (s->nMTF < 600)\n  {\n    nGroups = 3;\n  }\n  else\n    if (s->nMTF < 1200)\n  {\n    nGroups = 4;\n  }\n  else\n    if (s->nMTF < 2400)\n  {\n    nGroups = 5;\n  }\n  else\n    nGroups = 6;\n  {\n    helper_sendMTFValues_5(&v, &gs, &ge, s, alphaSize, nGroups);\n  }\n  for (iter = 0; iter < 4; iter += 1)\n  {\n    helper_sendMTFValues_7(&v, &t, &i, &gs, &ge, &totc, &bt, &bc, &nSelectors, s, iter, alphaSize, nGroups, cost, fave, mtfv);\n  }\n\n  {\n    if (!(nGroups < 8))\n    {\n      BZ2_bz__AssertH__fail(3002);\n    }\n  }\n  ;\n  {\n    if (!((nSelectors < 32768) && (nSelectors <= (2 + (900000 / 50)))))\n    {\n      BZ2_bz__AssertH__fail(3003);\n    }\n  }\n  ;\n  {\n    helper_sendMTFValues_4(&i, &j, s, nSelectors, nGroups);\n  }\n  ;\n  for (t = 0; t < nGroups; t += 1)\n  {\n    helper_sendMTFValues_3(&i, &minLen, &maxLen, s, t, alphaSize);\n  }\n\n  {\n    helper_sendMTFValues_2(&i, &j, &nBytes, s);\n  }\n  nBytes = s->numZ;\n  bsW(s, 3, nGroups);\n  bsW(s, 15, nSelectors);\n  for (i = 0; i < nSelectors; i += 1)\n  {\n    for (j = 0; j < s->selectorMtf[i]; j += 1)\n      bsW(s, 1, 1);\n\n    bsW(s, 1, 0);\n  }\n\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"selectors %d, \", s->numZ - nBytes);\n  }\n  nBytes = s->numZ;\n  for (t = 0; t < nGroups; t += 1)\n  {\n    helper_sendMTFValues_1(&i, s, t, alphaSize);\n  }\n\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"code lengths %d, \", s->numZ - nBytes);\n  }\n  nBytes = s->numZ;\n  selCtr = 0;\n  gs = 0;\n  while ((Bool) 1)\n  {\n    helper_sendMTFValues_6(&i, &gs, &ge, &selCtr, s, nGroups, mtfv);\n  }\n\n  {\n    if (!(selCtr == nSelectors))\n    {\n      BZ2_bz__AssertH__fail(3007);\n    }\n  }\n  ;\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"codes %d\\n\", s->numZ - nBytes);\n  }\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "bsW",
                "fprintf",
                "helper_sendMTFValues_1",
                "helper_sendMTFValues_2",
                "helper_sendMTFValues_3",
                "helper_sendMTFValues_4",
                "helper_sendMTFValues_5",
                "helper_sendMTFValues_6",
                "helper_sendMTFValues_7"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "Int32",
                        "definition": [
                            "Int32 v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totc",
                        "type": "Int32",
                        "definition": [
                            "Int32 totc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt",
                        "type": "Int32",
                        "definition": [
                            "Int32 bt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bc",
                        "type": "Int32",
                        "definition": [
                            "Int32 bc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "Int32",
                        "definition": [
                            "Int32 iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selCtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 selCtr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytes",
                        "type": "Int32",
                        "definition": [
                            "Int32 nBytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "UInt16 [6]",
                        "definition": [
                            "UInt16 cost[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fave",
                        "type": "Int32 [6]",
                        "definition": [
                            "Int32 fave[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 *",
                        "definition": [
                            "UInt16 *mtfv = s->mtfv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_generateMTFValues_1",
            "header": "",
            "params": [
                "Int32 * const zPend_ref",
                "Int32 * const wr_ref",
                "EState * const s",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_generateMTFValues_1(Int32 * const zPend_ref, Int32 * const wr_ref, EState * const s, UInt16 * const mtfv)\n{\n  Int32 zPend = *zPend_ref;\n  Int32 wr = *wr_ref;\n  zPend -= 1;\n  while ((Bool) 1)\n  {\n    if (zPend & 1)\n    {\n      mtfv[wr] = 1;\n      wr += 1;\n      s->mtfFreq[1] += 1;\n    }\n    else\n    {\n      mtfv[wr] = 0;\n      wr += 1;\n      s->mtfFreq[0] += 1;\n    }\n    if (zPend < 2)\n    {\n      break;\n    }\n    zPend = (zPend - 2) / 2;\n  }\n\n  ;\n  zPend = 0;\n  *zPend_ref = zPend;\n  *wr_ref = wr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zPend_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend",
                        "type": "Int32",
                        "definition": [
                            "Int32 zPend = *zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr = *wr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_generateMTFValues_2",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Int32 * const zPend_ref",
                "Int32 * const wr_ref",
                "EState * const s",
                "UChar yy[256]",
                "Int32 i",
                "UInt32 * const ptr",
                "UChar * const block",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_generateMTFValues_2(Int32 * const j_ref, Int32 * const zPend_ref, Int32 * const wr_ref, EState * const s, UChar yy[256], Int32 i, UInt32 * const ptr, UChar * const block, UInt16 * const mtfv)\n{\n  Int32 j = *j_ref;\n  Int32 zPend = *zPend_ref;\n  Int32 wr = *wr_ref;\n  UChar ll_i;\n  ;\n  j = ptr[i] - 1;\n  if (j < 0)\n  {\n    j += s->nblock;\n  }\n  ll_i = s->unseqToSeq[block[j]];\n  ;\n  if (yy[0] == ll_i)\n  {\n    zPend += 1;\n  }\n  else\n  {\n    helper_helper_generateMTFValues_2_1(&j, &zPend, &wr, s, yy, mtfv, ll_i);\n  }\n  *j_ref = j;\n  *zPend_ref = zPend;\n  *wr_ref = wr;\n}\n\n",
            "calle": [
                "helper_helper_generateMTFValues_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar yy[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend",
                        "type": "Int32",
                        "definition": [
                            "Int32 zPend = *zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr = *wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_i",
                        "type": "UChar",
                        "definition": [
                            "UChar ll_i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "EState * const s",
                "Int32 t",
                "Int32 alphaSize"
            ],
            "definition": "void helper_sendMTFValues_1(Int32 * const i_ref, EState * const s, Int32 t, Int32 alphaSize)\n{\n  Int32 i = *i_ref;\n  Int32 curr = s->len[t][0];\n  bsW(s, 5, curr);\n  for (i = 0; i < alphaSize; i += 1)\n  {\n    while (curr < s->len[t][i])\n    {\n      bsW(s, 2, 2);\n      curr += 1;\n    }\n\n    ;\n    while (curr > s->len[t][i])\n    {\n      bsW(s, 2, 3);\n      curr -= 1;\n    }\n\n    ;\n    bsW(s, 1, 0);\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "bsW"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = s->len[t][0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_2",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const nBytes_ref",
                "EState * const s"
            ],
            "definition": "void helper_sendMTFValues_2(Int32 * const i_ref, Int32 * const j_ref, Int32 * const nBytes_ref, EState * const s)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 nBytes = *nBytes_ref;\n  Bool inUse16[16];\n  for (i = 0; i < 16; i += 1)\n  {\n    inUse16[i] = (Bool) 0;\n    for (j = 0; j < 16; j += 1)\n      if (s->inUse[(i * 16) + j])\n    {\n      inUse16[i] = (Bool) 1;\n    }\n\n  }\n\n  nBytes = s->numZ;\n  for (i = 0; i < 16; i += 1)\n    if (inUse16[i])\n  {\n    bsW(s, 1, 1);\n  }\n  else\n    bsW(s, 1, 0);\n\n  for (i = 0; i < 16; i += 1)\n    if (inUse16[i])\n  {\n    for (j = 0; j < 16; j += 1)\n    {\n      if (s->inUse[(i * 16) + j])\n      {\n        bsW(s, 1, 1);\n      }\n      else\n        bsW(s, 1, 0);\n    }\n\n  }\n\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"      bytes: mapping %d, \", s->numZ - nBytes);\n  }\n  *i_ref = i;\n  *j_ref = j;\n  *nBytes_ref = nBytes;\n}\n\n",
            "calle": [
                "bsW",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytes_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nBytes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytes",
                        "type": "Int32",
                        "definition": [
                            "Int32 nBytes = *nBytes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inUse16",
                        "type": "Bool [16]",
                        "definition": [
                            "Bool inUse16[16]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_3",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const minLen_ref",
                "Int32 * const maxLen_ref",
                "EState * const s",
                "Int32 t",
                "Int32 alphaSize"
            ],
            "definition": "void helper_sendMTFValues_3(Int32 * const i_ref, Int32 * const minLen_ref, Int32 * const maxLen_ref, EState * const s, Int32 t, Int32 alphaSize)\n{\n  Int32 i = *i_ref;\n  Int32 minLen = *minLen_ref;\n  Int32 maxLen = *maxLen_ref;\n  minLen = 32;\n  maxLen = 0;\n  for (i = 0; i < alphaSize; i += 1)\n  {\n    if (s->len[t][i] > maxLen)\n    {\n      maxLen = s->len[t][i];\n    }\n    if (s->len[t][i] < minLen)\n    {\n      minLen = s->len[t][i];\n    }\n  }\n\n  {\n    if (!(!(maxLen > 17)))\n    {\n      BZ2_bz__AssertH__fail(3004);\n    }\n  }\n  ;\n  {\n    if (!(!(minLen < 1)))\n    {\n      BZ2_bz__AssertH__fail(3005);\n    }\n  }\n  ;\n  BZ2_hbAssignCodes(&s->code[t][0], &s->len[t][0], minLen, maxLen, alphaSize);\n  *i_ref = i;\n  *minLen_ref = minLen;\n  *maxLen_ref = maxLen;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "BZ2_hbAssignCodes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const maxLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen = *minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen = *maxLen_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_4",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "EState * const s",
                "Int32 nSelectors",
                "Int32 nGroups"
            ],
            "definition": "void helper_sendMTFValues_4(Int32 * const i_ref, Int32 * const j_ref, EState * const s, Int32 nSelectors, Int32 nGroups)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  UChar pos[6];\n  UChar ll_i;\n  UChar tmp2;\n  UChar tmp;\n  for (i = 0; i < nGroups; i += 1)\n    pos[i] = i;\n\n  for (i = 0; i < nSelectors; i += 1)\n  {\n    ll_i = s->selector[i];\n    j = 0;\n    tmp = pos[j];\n    while (ll_i != tmp)\n    {\n      j += 1;\n      tmp2 = tmp;\n      tmp = pos[j];\n      pos[j] = tmp2;\n    }\n\n    ;\n    pos[0] = tmp;\n    s->selectorMtf[i] = j;\n  }\n\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "UChar [6]",
                        "definition": [
                            "UChar pos[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_i",
                        "type": "UChar",
                        "definition": [
                            "UChar ll_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp2",
                        "type": "UChar",
                        "definition": [
                            "UChar tmp2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "UChar",
                        "definition": [
                            "UChar tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_5",
            "header": "",
            "params": [
                "Int32 * const v_ref",
                "Int32 * const gs_ref",
                "Int32 * const ge_ref",
                "EState * const s",
                "Int32 alphaSize",
                "Int32 nGroups"
            ],
            "definition": "void helper_sendMTFValues_5(Int32 * const v_ref, Int32 * const gs_ref, Int32 * const ge_ref, EState * const s, Int32 alphaSize, Int32 nGroups)\n{\n  Int32 v = *v_ref;\n  Int32 gs = *gs_ref;\n  Int32 ge = *ge_ref;\n  Int32 nPart;\n  Int32 remF;\n  Int32 tFreq;\n  Int32 aFreq;\n  nPart = nGroups;\n  remF = s->nMTF;\n  gs = 0;\n  while (nPart > 0)\n  {\n    helper_helper_sendMTFValues_5_1(&v, &gs, &ge, &nPart, &remF, &tFreq, &aFreq, s, alphaSize, nGroups);\n  }\n\n  *v_ref = v;\n  *gs_ref = gs;\n  *ge_ref = ge;\n}\n\n",
            "calle": [
                "helper_helper_sendMTFValues_5_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "Int32",
                        "definition": [
                            "Int32 v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge = *ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nPart",
                        "type": "Int32",
                        "definition": [
                            "Int32 nPart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "remF",
                        "type": "Int32",
                        "definition": [
                            "Int32 remF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tFreq",
                        "type": "Int32",
                        "definition": [
                            "Int32 tFreq"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aFreq",
                        "type": "Int32",
                        "definition": [
                            "Int32 aFreq"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_6",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const gs_ref",
                "Int32 * const ge_ref",
                "Int32 * const selCtr_ref",
                "EState * const s",
                "Int32 nGroups",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_sendMTFValues_6(Int32 * const i_ref, Int32 * const gs_ref, Int32 * const ge_ref, Int32 * const selCtr_ref, EState * const s, Int32 nGroups, UInt16 * const mtfv)\n{\n  Int32 i = *i_ref;\n  Int32 gs = *gs_ref;\n  Int32 ge = *ge_ref;\n  Int32 selCtr = *selCtr_ref;\n  if (gs >= s->nMTF)\n  {\n    break;\n  }\n  ge = (gs + 50) - 1;\n  if (ge >= s->nMTF)\n  {\n    ge = s->nMTF - 1;\n  }\n  {\n    if (!(s->selector[selCtr] < nGroups))\n    {\n      BZ2_bz__AssertH__fail(3006);\n    }\n  }\n  ;\n  if ((nGroups == 6) && (50 == ((ge - gs) + 1)))\n  {\n    helper_helper_sendMTFValues_6_1(s, mtfv, gs, selCtr);\n  }\n  else\n  {\n    for (i = gs; i <= ge; i += 1)\n    {\n      bsW(s, s->len[s->selector[selCtr]][mtfv[i]], s->code[s->selector[selCtr]][mtfv[i]]);\n    }\n\n  }\n  gs = ge + 1;\n  selCtr += 1;\n  *i_ref = i;\n  *gs_ref = gs;\n  *ge_ref = ge;\n  *selCtr_ref = selCtr;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "bsW",
                "helper_helper_sendMTFValues_6_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selCtr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const selCtr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge = *ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selCtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 selCtr = *selCtr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_sendMTFValues_7",
            "header": "",
            "params": [
                "Int32 * const v_ref",
                "Int32 * const t_ref",
                "Int32 * const i_ref",
                "Int32 * const gs_ref",
                "Int32 * const ge_ref",
                "Int32 * const totc_ref",
                "Int32 * const bt_ref",
                "Int32 * const bc_ref",
                "Int32 * const nSelectors_ref",
                "EState * const s",
                "Int32 iter",
                "Int32 alphaSize",
                "Int32 nGroups",
                "UInt16 cost[6]",
                "Int32 fave[6]",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_sendMTFValues_7(Int32 * const v_ref, Int32 * const t_ref, Int32 * const i_ref, Int32 * const gs_ref, Int32 * const ge_ref, Int32 * const totc_ref, Int32 * const bt_ref, Int32 * const bc_ref, Int32 * const nSelectors_ref, EState * const s, Int32 iter, Int32 alphaSize, Int32 nGroups, UInt16 cost[6], Int32 fave[6], UInt16 * const mtfv)\n{\n  Int32 v = *v_ref;\n  Int32 t = *t_ref;\n  Int32 i = *i_ref;\n  Int32 gs = *gs_ref;\n  Int32 ge = *ge_ref;\n  Int32 totc = *totc_ref;\n  Int32 bt = *bt_ref;\n  Int32 bc = *bc_ref;\n  Int32 nSelectors = *nSelectors_ref;\n  for (t = 0; t < nGroups; t += 1)\n    fave[t] = 0;\n\n  for (t = 0; t < nGroups; t += 1)\n    for (v = 0; v < alphaSize; v += 1)\n    s->rfreq[t][v] = 0;\n\n\n  if (nGroups == 6)\n  {\n    for (v = 0; v < alphaSize; v += 1)\n    {\n      s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];\n      s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];\n      s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];\n    }\n\n  }\n  nSelectors = 0;\n  totc = 0;\n  gs = 0;\n  while ((Bool) 1)\n  {\n    helper_helper_sendMTFValues_7_1(&t, &i, &gs, &ge, &totc, &bt, &bc, &nSelectors, s, nGroups, cost, fave, mtfv);\n  }\n\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"      pass %d: size is %d, grp uses are \", iter + 1, totc / 8);\n    for (t = 0; t < nGroups; t += 1)\n      fprintf(stderr, \"%d \", fave[t]);\n\n    fprintf(stderr, \"\\n\");\n  }\n  for (t = 0; t < nGroups; t += 1)\n    BZ2_hbMakeCodeLengths(&s->len[t][0], &s->rfreq[t][0], alphaSize, 17);\n\n  *v_ref = v;\n  *t_ref = t;\n  *i_ref = i;\n  *gs_ref = gs;\n  *ge_ref = ge;\n  *totc_ref = totc;\n  *bt_ref = bt;\n  *bc_ref = bc;\n  *nSelectors_ref = nSelectors;\n}\n\n",
            "calle": [
                "BZ2_hbMakeCodeLengths",
                "fprintf",
                "helper_helper_sendMTFValues_7_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const totc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const bt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const bc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "Int32",
                        "definition": [
                            "Int32 iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "UInt16 [6]",
                        "definition": [
                            "UInt16 cost[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fave",
                        "type": "Int32 [6]",
                        "definition": [
                            "Int32 fave[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "Int32",
                        "definition": [
                            "Int32 v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge = *ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totc",
                        "type": "Int32",
                        "definition": [
                            "Int32 totc = *totc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt",
                        "type": "Int32",
                        "definition": [
                            "Int32 bt = *bt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bc",
                        "type": "Int32",
                        "definition": [
                            "Int32 bc = *bc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors = *nSelectors_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_compressBlock_1",
            "header": "",
            "params": [
                "EState * const s"
            ],
            "definition": "void helper_BZ2_compressBlock_1(EState * const s)\n{\n  {\n    s->blockCRC = ~s->blockCRC;\n  }\n  ;\n  s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);\n  s->combinedCRC ^= s->blockCRC;\n  if (s->blockNo > 1)\n  {\n    s->numZ = 0;\n  }\n  if (s->verbosity >= 2)\n  {\n    fprintf(stderr, \"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\\n\", s->blockNo, s->blockCRC, s->combinedCRC, s->nblock);\n  }\n  BZ2_blockSort(s);\n}\n\n",
            "calle": [
                "BZ2_blockSort",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_compressBlock_2",
            "header": "",
            "params": [
                "EState * const s"
            ],
            "definition": "void helper_BZ2_compressBlock_2(EState * const s)\n{\n  bsPutUChar(s, 0x17);\n  bsPutUChar(s, 0x72);\n  bsPutUChar(s, 0x45);\n  bsPutUChar(s, 0x38);\n  bsPutUChar(s, 0x50);\n  bsPutUChar(s, 0x90);\n  bsPutUInt32(s, s->combinedCRC);\n  if (s->verbosity >= 2)\n  {\n    fprintf(stderr, \"    final combined CRC = 0x%08x\\n   \", s->combinedCRC);\n  }\n  bsFinishWrite(s);\n}\n\n",
            "calle": [
                "bsFinishWrite",
                "bsPutUChar",
                "bsPutUInt32",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_compressBlock_3",
            "header": "",
            "params": [
                "EState * const s"
            ],
            "definition": "void helper_BZ2_compressBlock_3(EState * const s)\n{\n  bsPutUChar(s, 0x31);\n  bsPutUChar(s, 0x41);\n  bsPutUChar(s, 0x59);\n  bsPutUChar(s, 0x26);\n  bsPutUChar(s, 0x53);\n  bsPutUChar(s, 0x59);\n  bsPutUInt32(s, s->blockCRC);\n  bsW(s, 1, 0);\n  bsW(s, 24, s->origPtr);\n  generateMTFValues(s);\n  sendMTFValues(s);\n}\n\n",
            "calle": [
                "bsPutUChar",
                "bsPutUInt32",
                "bsW",
                "generateMTFValues",
                "sendMTFValues"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_generateMTFValues_2_1",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Int32 * const zPend_ref",
                "Int32 * const wr_ref",
                "EState * const s",
                "UChar yy[256]",
                "UInt16 * const mtfv",
                "UChar ll_i"
            ],
            "definition": "void helper_helper_generateMTFValues_2_1(Int32 * const j_ref, Int32 * const zPend_ref, Int32 * const wr_ref, EState * const s, UChar yy[256], UInt16 * const mtfv, UChar ll_i)\n{\n  Int32 j = *j_ref;\n  Int32 zPend = *zPend_ref;\n  Int32 wr = *wr_ref;\n  if (zPend > 0)\n  {\n    helper_helper_helper_generateMTFValues_2_1_1(&zPend, &wr, s, mtfv);\n  }\n  {\n    helper_helper_helper_generateMTFValues_2_1_2(&j, &wr, s, yy, mtfv, ll_i);\n  }\n  *j_ref = j;\n  *zPend_ref = zPend;\n  *wr_ref = wr;\n}\n\n",
            "calle": [
                "helper_helper_helper_generateMTFValues_2_1_1",
                "helper_helper_helper_generateMTFValues_2_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar yy[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_i",
                        "type": "UChar",
                        "definition": [
                            "UChar ll_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend",
                        "type": "Int32",
                        "definition": [
                            "Int32 zPend = *zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr = *wr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_sendMTFValues_5_1",
            "header": "",
            "params": [
                "Int32 * const v_ref",
                "Int32 * const gs_ref",
                "Int32 * const ge_ref",
                "Int32 * const nPart_ref",
                "Int32 * const remF_ref",
                "Int32 * const tFreq_ref",
                "Int32 * const aFreq_ref",
                "EState * const s",
                "Int32 alphaSize",
                "Int32 nGroups"
            ],
            "definition": "void helper_helper_sendMTFValues_5_1(Int32 * const v_ref, Int32 * const gs_ref, Int32 * const ge_ref, Int32 * const nPart_ref, Int32 * const remF_ref, Int32 * const tFreq_ref, Int32 * const aFreq_ref, EState * const s, Int32 alphaSize, Int32 nGroups)\n{\n  Int32 v = *v_ref;\n  Int32 gs = *gs_ref;\n  Int32 ge = *ge_ref;\n  Int32 nPart = *nPart_ref;\n  Int32 remF = *remF_ref;\n  Int32 tFreq = *tFreq_ref;\n  Int32 aFreq = *aFreq_ref;\n  tFreq = remF / nPart;\n  ge = gs - 1;\n  aFreq = 0;\n  while ((aFreq < tFreq) && (ge < (alphaSize - 1)))\n  {\n    ge += 1;\n    aFreq += s->mtfFreq[ge];\n  }\n\n  if ((((ge > gs) && (nPart != nGroups)) && (nPart != 1)) && (((nGroups - nPart) % 2) == 1))\n  {\n    aFreq -= s->mtfFreq[ge];\n    ge -= 1;\n  }\n  if (s->verbosity >= 3)\n  {\n    fprintf(stderr, \"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\\n\", nPart, gs, ge, aFreq, (100.0 * ((float) aFreq)) / ((float) s->nMTF));\n  }\n  for (v = 0; v < alphaSize; v += 1)\n    if ((v >= gs) && (v <= ge))\n  {\n    s->len[nPart - 1][v] = 0;\n  }\n  else\n    s->len[nPart - 1][v] = 15;\n\n  nPart -= 1;\n  gs = ge + 1;\n  remF -= aFreq;\n  *v_ref = v;\n  *gs_ref = gs;\n  *ge_ref = ge;\n  *nPart_ref = nPart;\n  *remF_ref = remF;\n  *tFreq_ref = tFreq;\n  *aFreq_ref = aFreq;\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nPart_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nPart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "remF_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const remF_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tFreq_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const tFreq_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aFreq_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const aFreq_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "Int32",
                        "definition": [
                            "Int32 v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge = *ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nPart",
                        "type": "Int32",
                        "definition": [
                            "Int32 nPart = *nPart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "remF",
                        "type": "Int32",
                        "definition": [
                            "Int32 remF = *remF_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tFreq",
                        "type": "Int32",
                        "definition": [
                            "Int32 tFreq = *tFreq_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aFreq",
                        "type": "Int32",
                        "definition": [
                            "Int32 aFreq = *aFreq_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_sendMTFValues_6_1",
            "header": "",
            "params": [
                "EState * const s",
                "UInt16 * const mtfv",
                "Int32 gs",
                "Int32 selCtr"
            ],
            "definition": "void helper_helper_sendMTFValues_6_1(EState * const s, UInt16 * const mtfv, Int32 gs, Int32 selCtr)\n{\n  UInt16 mtfv_i;\n  UChar *s_len_sel_selCtr = &s->len[s->selector[selCtr]][0];\n  Int32 *s_code_sel_selCtr = &s->code[s->selector[selCtr]][0];\n  mtfv_i = mtfv[gs + 0];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 1];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 2];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 3];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 4];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 5];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 6];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 7];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 8];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 9];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 10];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 11];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 12];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 13];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 14];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 15];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 16];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 17];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 18];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 19];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 20];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 21];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 22];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 23];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 24];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 25];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 26];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 27];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 28];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 29];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 30];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 31];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 32];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 33];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 34];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 35];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 36];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 37];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 38];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 39];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 40];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 41];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 42];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 43];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 44];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 45];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 46];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 47];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 48];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n  mtfv_i = mtfv[gs + 49];\n  bsW(s, s_len_sel_selCtr[mtfv_i], s_code_sel_selCtr[mtfv_i]);\n}\n\n",
            "calle": [
                "bsW"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "selCtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 selCtr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv_i",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 mtfv_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_len_sel_selCtr",
                        "type": "UChar *",
                        "definition": [
                            "UChar *s_len_sel_selCtr = &s->len[s->selector[selCtr]][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_code_sel_selCtr",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *s_code_sel_selCtr = &s->code[s->selector[selCtr]][0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_sendMTFValues_7_1",
            "header": "",
            "params": [
                "Int32 * const t_ref",
                "Int32 * const i_ref",
                "Int32 * const gs_ref",
                "Int32 * const ge_ref",
                "Int32 * const totc_ref",
                "Int32 * const bt_ref",
                "Int32 * const bc_ref",
                "Int32 * const nSelectors_ref",
                "EState * const s",
                "Int32 nGroups",
                "UInt16 cost[6]",
                "Int32 fave[6]",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_helper_sendMTFValues_7_1(Int32 * const t_ref, Int32 * const i_ref, Int32 * const gs_ref, Int32 * const ge_ref, Int32 * const totc_ref, Int32 * const bt_ref, Int32 * const bc_ref, Int32 * const nSelectors_ref, EState * const s, Int32 nGroups, UInt16 cost[6], Int32 fave[6], UInt16 * const mtfv)\n{\n  Int32 t = *t_ref;\n  Int32 i = *i_ref;\n  Int32 gs = *gs_ref;\n  Int32 ge = *ge_ref;\n  Int32 totc = *totc_ref;\n  Int32 bt = *bt_ref;\n  Int32 bc = *bc_ref;\n  Int32 nSelectors = *nSelectors_ref;\n  if (gs >= s->nMTF)\n  {\n    break;\n  }\n  ge = (gs + 50) - 1;\n  if (ge >= s->nMTF)\n  {\n    ge = s->nMTF - 1;\n  }\n  for (t = 0; t < nGroups; t += 1)\n    cost[t] = 0;\n\n  if ((nGroups == 6) && (50 == ((ge - gs) + 1)))\n  {\n    helper_helper_helper_sendMTFValues_7_1_2(s, cost, mtfv, gs);\n  }\n  else\n  {\n    for (i = gs; i <= ge; i += 1)\n    {\n      UInt16 icv = mtfv[i];\n      for (t = 0; t < nGroups; t += 1)\n        cost[t] += s->len[t][icv];\n\n    }\n\n  }\n  bc = 999999999;\n  bt = -1;\n  for (t = 0; t < nGroups; t += 1)\n    if (cost[t] < bc)\n  {\n    bc = cost[t];\n    bt = t;\n  }\n\n  ;\n  totc += bc;\n  fave[bt] += 1;\n  s->selector[nSelectors] = bt;\n  nSelectors += 1;\n  if ((nGroups == 6) && (50 == ((ge - gs) + 1)))\n  {\n    helper_helper_helper_sendMTFValues_7_1_1(&gs, &bt, s, mtfv);\n  }\n  else\n  {\n    for (i = gs; i <= ge; i += 1)\n      s->rfreq[bt][mtfv[i]]++;\n\n  }\n  gs = ge + 1;\n  *t_ref = t;\n  *i_ref = i;\n  *gs_ref = gs;\n  *ge_ref = ge;\n  *totc_ref = totc;\n  *bt_ref = bt;\n  *bc_ref = bc;\n  *nSelectors_ref = nSelectors;\n}\n\n",
            "calle": [
                "helper_helper_helper_sendMTFValues_7_1_1",
                "helper_helper_helper_sendMTFValues_7_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const totc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const bt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bc_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const bc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "UInt16 [6]",
                        "definition": [
                            "UInt16 cost[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fave",
                        "type": "Int32 [6]",
                        "definition": [
                            "Int32 fave[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ge",
                        "type": "Int32",
                        "definition": [
                            "Int32 ge = *ge_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totc",
                        "type": "Int32",
                        "definition": [
                            "Int32 totc = *totc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt",
                        "type": "Int32",
                        "definition": [
                            "Int32 bt = *bt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bc",
                        "type": "Int32",
                        "definition": [
                            "Int32 bc = *bc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors = *nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "icv",
                        "type": "UInt16",
                        "definition": [
                            "UInt16 icv = mtfv[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_generateMTFValues_2_1_1",
            "header": "",
            "params": [
                "Int32 * const zPend_ref",
                "Int32 * const wr_ref",
                "EState * const s",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_helper_helper_generateMTFValues_2_1_1(Int32 * const zPend_ref, Int32 * const wr_ref, EState * const s, UInt16 * const mtfv)\n{\n  Int32 zPend = *zPend_ref;\n  Int32 wr = *wr_ref;\n  zPend -= 1;\n  while ((Bool) 1)\n  {\n    if (zPend & 1)\n    {\n      mtfv[wr] = 1;\n      wr += 1;\n      s->mtfFreq[1] += 1;\n    }\n    else\n    {\n      mtfv[wr] = 0;\n      wr += 1;\n      s->mtfFreq[0] += 1;\n    }\n    if (zPend < 2)\n    {\n      break;\n    }\n    zPend = (zPend - 2) / 2;\n  }\n\n  ;\n  zPend = 0;\n  *zPend_ref = zPend;\n  *wr_ref = wr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zPend_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zPend",
                        "type": "Int32",
                        "definition": [
                            "Int32 zPend = *zPend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr = *wr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_generateMTFValues_2_1_2",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Int32 * const wr_ref",
                "EState * const s",
                "UChar yy[256]",
                "UInt16 * const mtfv",
                "UChar ll_i"
            ],
            "definition": "void helper_helper_helper_generateMTFValues_2_1_2(Int32 * const j_ref, Int32 * const wr_ref, EState * const s, UChar yy[256], UInt16 * const mtfv, UChar ll_i)\n{\n  Int32 j = *j_ref;\n  Int32 wr = *wr_ref;\n  register UChar rtmp;\n  register UChar *ryy_j;\n  unsigned int ryy_j_idx = 0;\n  register UChar rll_i;\n  rtmp = yy[1];\n  yy[1] = yy[0];\n  ryy_j_idx = &yy[1];\n  rll_i = ll_i;\n  while (rll_i != rtmp)\n  {\n    register UChar rtmp2;\n    ryy_j_idx += 1;\n    rtmp2 = rtmp;\n    rtmp = ryy_j[ryy_j_idx];\n    ryy_j[ryy_j_idx] = rtmp2;\n  }\n\n  ;\n  yy[0] = rtmp;\n  j = (&ryy_j[ryy_j_idx]) - (&yy[0]);\n  mtfv[wr] = j + 1;\n  wr += 1;\n  s->mtfFreq[j + 1] += 1;\n  *j_ref = j;\n  *wr_ref = wr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "UChar [256]",
                        "definition": [
                            "UChar yy[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_i",
                        "type": "UChar",
                        "definition": [
                            "UChar ll_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wr",
                        "type": "Int32",
                        "definition": [
                            "Int32 wr = *wr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rtmp",
                        "type": "UChar",
                        "definition": [
                            "register UChar rtmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ryy_j",
                        "type": "UChar *",
                        "definition": [
                            "register UChar *ryy_j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ryy_j_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ryy_j_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rll_i",
                        "type": "UChar",
                        "definition": [
                            "register UChar rll_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rtmp2",
                        "type": "UChar",
                        "definition": [
                            "register UChar rtmp2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_sendMTFValues_7_1_1",
            "header": "",
            "params": [
                "Int32 * const gs_ref",
                "Int32 * const bt_ref",
                "EState * const s",
                "UInt16 * const mtfv"
            ],
            "definition": "void helper_helper_helper_sendMTFValues_7_1_1(Int32 * const gs_ref, Int32 * const bt_ref, EState * const s, UInt16 * const mtfv)\n{\n  Int32 gs = *gs_ref;\n  Int32 bt = *bt_ref;\n  s->rfreq[bt][mtfv[gs + 0]] += 1;\n  s->rfreq[bt][mtfv[gs + 1]] += 1;\n  s->rfreq[bt][mtfv[gs + 2]] += 1;\n  s->rfreq[bt][mtfv[gs + 3]] += 1;\n  s->rfreq[bt][mtfv[gs + 4]] += 1;\n  s->rfreq[bt][mtfv[gs + 5]] += 1;\n  s->rfreq[bt][mtfv[gs + 6]] += 1;\n  s->rfreq[bt][mtfv[gs + 7]] += 1;\n  s->rfreq[bt][mtfv[gs + 8]] += 1;\n  s->rfreq[bt][mtfv[gs + 9]] += 1;\n  s->rfreq[bt][mtfv[gs + 10]] += 1;\n  s->rfreq[bt][mtfv[gs + 11]] += 1;\n  s->rfreq[bt][mtfv[gs + 12]] += 1;\n  s->rfreq[bt][mtfv[gs + 13]] += 1;\n  s->rfreq[bt][mtfv[gs + 14]] += 1;\n  s->rfreq[bt][mtfv[gs + 15]] += 1;\n  s->rfreq[bt][mtfv[gs + 16]] += 1;\n  s->rfreq[bt][mtfv[gs + 17]] += 1;\n  s->rfreq[bt][mtfv[gs + 18]] += 1;\n  s->rfreq[bt][mtfv[gs + 19]] += 1;\n  s->rfreq[bt][mtfv[gs + 20]] += 1;\n  s->rfreq[bt][mtfv[gs + 21]] += 1;\n  s->rfreq[bt][mtfv[gs + 22]] += 1;\n  s->rfreq[bt][mtfv[gs + 23]] += 1;\n  s->rfreq[bt][mtfv[gs + 24]] += 1;\n  s->rfreq[bt][mtfv[gs + 25]] += 1;\n  s->rfreq[bt][mtfv[gs + 26]] += 1;\n  s->rfreq[bt][mtfv[gs + 27]] += 1;\n  s->rfreq[bt][mtfv[gs + 28]] += 1;\n  s->rfreq[bt][mtfv[gs + 29]] += 1;\n  s->rfreq[bt][mtfv[gs + 30]] += 1;\n  s->rfreq[bt][mtfv[gs + 31]] += 1;\n  s->rfreq[bt][mtfv[gs + 32]] += 1;\n  s->rfreq[bt][mtfv[gs + 33]] += 1;\n  s->rfreq[bt][mtfv[gs + 34]] += 1;\n  s->rfreq[bt][mtfv[gs + 35]] += 1;\n  s->rfreq[bt][mtfv[gs + 36]] += 1;\n  s->rfreq[bt][mtfv[gs + 37]] += 1;\n  s->rfreq[bt][mtfv[gs + 38]] += 1;\n  s->rfreq[bt][mtfv[gs + 39]] += 1;\n  s->rfreq[bt][mtfv[gs + 40]] += 1;\n  s->rfreq[bt][mtfv[gs + 41]] += 1;\n  s->rfreq[bt][mtfv[gs + 42]] += 1;\n  s->rfreq[bt][mtfv[gs + 43]] += 1;\n  s->rfreq[bt][mtfv[gs + 44]] += 1;\n  s->rfreq[bt][mtfv[gs + 45]] += 1;\n  s->rfreq[bt][mtfv[gs + 46]] += 1;\n  s->rfreq[bt][mtfv[gs + 47]] += 1;\n  s->rfreq[bt][mtfv[gs + 48]] += 1;\n  s->rfreq[bt][mtfv[gs + 49]] += 1;\n  *gs_ref = gs;\n  *bt_ref = bt;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "gs_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const bt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs = *gs_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt",
                        "type": "Int32",
                        "definition": [
                            "Int32 bt = *bt_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_sendMTFValues_7_1_2",
            "header": "",
            "params": [
                "EState * const s",
                "UInt16 cost[6]",
                "UInt16 * const mtfv",
                "Int32 gs"
            ],
            "definition": "void helper_helper_helper_sendMTFValues_7_1_2(EState * const s, UInt16 cost[6], UInt16 * const mtfv, Int32 gs)\n{\n  register UInt32 cost01;\n  register UInt32 cost23;\n  register UInt32 cost45;\n  register UInt16 icv;\n  cost01 = (cost23 = (cost45 = 0));\n  icv = mtfv[gs + 0];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 1];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 2];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 3];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 4];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 5];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 6];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 7];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 8];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 9];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 10];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 11];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 12];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 13];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 14];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 15];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 16];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 17];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 18];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 19];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 20];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 21];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 22];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 23];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 24];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 25];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 26];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 27];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 28];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 29];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 30];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 31];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 32];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 33];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 34];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 35];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 36];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 37];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 38];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 39];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 40];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 41];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 42];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 43];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 44];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 45];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 46];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 47];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 48];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  icv = mtfv[gs + 49];\n  cost01 += s->len_pack[icv][0];\n  cost23 += s->len_pack[icv][1];\n  cost45 += s->len_pack[icv][2];\n  ;\n  cost[0] = cost01 & 0xffff;\n  cost[1] = cost01 >> 16;\n  cost[2] = cost23 & 0xffff;\n  cost[3] = cost23 >> 16;\n  cost[4] = cost45 & 0xffff;\n  cost[5] = cost45 >> 16;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "UInt16 [6]",
                        "definition": [
                            "UInt16 cost[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mtfv",
                        "type": "UInt16 * const",
                        "definition": [
                            "UInt16 * const mtfv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gs",
                        "type": "Int32",
                        "definition": [
                            "Int32 gs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost01",
                        "type": "UInt32",
                        "definition": [
                            "register UInt32 cost01"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost23",
                        "type": "UInt32",
                        "definition": [
                            "register UInt32 cost23"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost45",
                        "type": "UInt32",
                        "definition": [
                            "register UInt32 cost45"
                        ]
                    },
                    {
                        "path": null,
                        "name": "icv",
                        "type": "UInt16",
                        "definition": [
                            "register UInt16 icv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_decompress",
            "header": "extern Int32 BZ2_decompress(DState *)",
            "params": [
                "DState *s"
            ],
            "definition": "Int32 BZ2_decompress(DState *s)\n{\n  UChar uc;\n  Int32 retVal;\n  Int32 minLen;\n  Int32 maxLen;\n  bz_stream *strm = s->strm;\n  Int32 i;\n  Int32 j;\n  Int32 t;\n  Int32 alphaSize;\n  Int32 nGroups;\n  Int32 nSelectors;\n  Int32 EOB;\n  Int32 groupNo;\n  Int32 groupPos;\n  Int32 nextSym;\n  Int32 nblockMAX;\n  Int32 nblock;\n  Int32 es;\n  Int32 N;\n  Int32 curr;\n  Int32 zt;\n  Int32 zn;\n  Int32 zvec;\n  Int32 zj;\n  Int32 gSel;\n  Int32 gMinlen;\n  Int32 *gLimit;\n  unsigned int gLimit_idx = 0;\n  Int32 *gBase;\n  unsigned int gBase_idx = 0;\n  Int32 *gPerm;\n  unsigned int gPerm_idx = 0;\n  if (s->state == 10)\n  {\n    helper_BZ2_decompress_11(s);\n  }\n  i = s->save_i;\n  j = s->save_j;\n  t = s->save_t;\n  alphaSize = s->save_alphaSize;\n  nGroups = s->save_nGroups;\n  nSelectors = s->save_nSelectors;\n  EOB = s->save_EOB;\n  groupNo = s->save_groupNo;\n  groupPos = s->save_groupPos;\n  nextSym = s->save_nextSym;\n  nblockMAX = s->save_nblockMAX;\n  nblock = s->save_nblock;\n  es = s->save_es;\n  N = s->save_N;\n  curr = s->save_curr;\n  zt = s->save_zt;\n  zn = s->save_zn;\n  zvec = s->save_zvec;\n  zj = s->save_zj;\n  gSel = s->save_gSel;\n  gMinlen = s->save_gMinlen;\n  gLimit_idx = s->save_gLimit;\n  gBase_idx = s->save_gBase;\n  gPerm_idx = s->save_gPerm;\n  retVal = 0;\n  switch (s->state)\n  {\n    case 10:\n    {\n      helper_BZ2_decompress_13(&uc, &retVal, s);\n    }\n\n    case 11:\n    {\n      helper_BZ2_decompress_14(&uc, &retVal, s);\n    }\n\n    case 12:\n    {\n      helper_BZ2_decompress_12(&uc, &retVal, s);\n    }\n\n    case 13:\n    {\n      helper_BZ2_decompress_27(&retVal, s, strm);\n    }\n\n    case 14:\n    {\n      helper_BZ2_decompress_24(&uc, &retVal, s);\n    }\n\n    case 15:\n    {\n      helper_BZ2_decompress_15(&uc, &retVal, s);\n    }\n\n    case 16:\n    {\n      helper_BZ2_decompress_16(&uc, &retVal, s);\n    }\n\n    case 17:\n    {\n      helper_BZ2_decompress_17(&uc, &retVal, s);\n    }\n\n    case 18:\n    {\n      helper_BZ2_decompress_18(&uc, &retVal, s);\n    }\n\n    case 19:\n    {\n      helper_BZ2_decompress_26(&uc, &retVal, s);\n    }\n\n    case 20:\n    {\n      helper_BZ2_decompress_1(&uc, &retVal, s);\n    }\n\n    case 21:\n    {\n      helper_BZ2_decompress_2(&uc, &retVal, s);\n    }\n\n    case 22:\n    {\n      helper_BZ2_decompress_3(&uc, &retVal, s);\n    }\n\n    case 23:\n    {\n      helper_BZ2_decompress_4(&uc, &retVal, s);\n    }\n\n    case 24:\n    {\n      helper_BZ2_decompress_5(&retVal, s);\n    }\n\n    case 25:\n    {\n      helper_BZ2_decompress_6(&uc, &retVal, s);\n    }\n\n    case 26:\n    {\n      helper_BZ2_decompress_7(&uc, &retVal, s);\n    }\n\n    case 27:\n    {\n      helper_BZ2_decompress_28(&uc, &retVal, &i, &j, &alphaSize, s);\n    }\n\n    case 30:\n    {\n      helper_BZ2_decompress_19(&retVal, &nGroups, s);\n    }\n\n    case 31:\n    {\n      helper_BZ2_decompress_29(&uc, &retVal, &minLen, &maxLen, &i, &j, &t, &nSelectors, &EOB, &groupNo, &groupPos, &nextSym, &nblockMAX, &nblock, &es, &N, &curr, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, alphaSize, nGroups, gLimit, gBase, gPerm);\n    }\n\n    case 43:\n    {\n      helper_BZ2_decompress_20(&uc, &retVal, s);\n    }\n\n    case 44:\n    {\n      helper_BZ2_decompress_21(&uc, &retVal, s);\n    }\n\n    case 45:\n    {\n      helper_BZ2_decompress_22(&uc, &retVal, s);\n    }\n\n    case 46:\n    {\n      helper_BZ2_decompress_23(&uc, &retVal, s);\n    }\n\n    case 47:\n    {\n      helper_BZ2_decompress_8(&uc, &retVal, s);\n    }\n\n    case 48:\n    {\n      helper_BZ2_decompress_9(&uc, &retVal, s);\n    }\n\n    case 49:\n    {\n      helper_BZ2_decompress_10(&uc, &retVal, s);\n    }\n\n    case 50:\n    {\n      helper_BZ2_decompress_25(&uc, &retVal, s);\n    }\n\n    default:\n    {\n      {\n        if (!((Bool) 0))\n        {\n          BZ2_bz__AssertH__fail(4001);\n        }\n      }\n      ;\n    }\n\n  }\n\n  {\n    if (!((Bool) 0))\n    {\n      BZ2_bz__AssertH__fail(4002);\n    }\n  }\n  ;\n  save_state_and_return:\n  s->save_i = i;\n\n  s->save_j = j;\n  s->save_t = t;\n  s->save_alphaSize = alphaSize;\n  s->save_nGroups = nGroups;\n  s->save_nSelectors = nSelectors;\n  s->save_EOB = EOB;\n  s->save_groupNo = groupNo;\n  s->save_groupPos = groupPos;\n  s->save_nextSym = nextSym;\n  s->save_nblockMAX = nblockMAX;\n  s->save_nblock = nblock;\n  s->save_es = es;\n  s->save_N = N;\n  s->save_curr = curr;\n  s->save_zt = zt;\n  s->save_zn = zn;\n  s->save_zvec = zvec;\n  s->save_zj = zj;\n  s->save_gSel = gSel;\n  s->save_gMinlen = gMinlen;\n  s->save_gLimit = &gLimit[gLimit_idx];\n  s->save_gBase = &gBase[gBase_idx];\n  s->save_gPerm = &gPerm[gPerm_idx];\n  return retVal;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "helper_BZ2_decompress_1",
                "helper_BZ2_decompress_10",
                "helper_BZ2_decompress_11",
                "helper_BZ2_decompress_12",
                "helper_BZ2_decompress_13",
                "helper_BZ2_decompress_14",
                "helper_BZ2_decompress_15",
                "helper_BZ2_decompress_16",
                "helper_BZ2_decompress_17",
                "helper_BZ2_decompress_18",
                "helper_BZ2_decompress_19",
                "helper_BZ2_decompress_2",
                "helper_BZ2_decompress_20",
                "helper_BZ2_decompress_21",
                "helper_BZ2_decompress_22",
                "helper_BZ2_decompress_23",
                "helper_BZ2_decompress_24",
                "helper_BZ2_decompress_25",
                "helper_BZ2_decompress_26",
                "helper_BZ2_decompress_27",
                "helper_BZ2_decompress_28",
                "helper_BZ2_decompress_29",
                "helper_BZ2_decompress_3",
                "helper_BZ2_decompress_4",
                "helper_BZ2_decompress_5",
                "helper_BZ2_decompress_6",
                "helper_BZ2_decompress_7",
                "helper_BZ2_decompress_8",
                "helper_BZ2_decompress_9"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm = s->strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "EOB",
                        "type": "Int32",
                        "definition": [
                            "Int32 EOB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "Int32",
                        "definition": [
                            "Int32 N"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zt",
                        "type": "Int32",
                        "definition": [
                            "Int32 zt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "makeMaps_d",
            "header": "",
            "params": [
                "DState *s"
            ],
            "definition": "static void makeMaps_d(DState *s)\n{\n  Int32 i;\n  s->nInUse = 0;\n  for (i = 0; i < 256; i += 1)\n    if (s->inUse[i])\n  {\n    s->seqToUnseq[s->nInUse] = i;\n    s->nInUse += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 20;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_1_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_2(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 21;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_2_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_3",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_3(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 22;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_3_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_4",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_4(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 23;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_4_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_4_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_5",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_5(Int32 * const retVal_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  s->state = 24;\n  while ((Bool) 1)\n  {\n    if (s->bsLive >= 1)\n    {\n      UInt32 v;\n      v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n      s->bsLive -= 1;\n      s->blockRandomised = v;\n      break;\n    }\n    if (s->strm->avail_in == 0)\n    {\n      retVal = 0;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n    s->bsLive += 8;\n    s->strm->next_in += 1;\n    s->strm->avail_in -= 1;\n    s->strm->total_in_lo32 += 1;\n    if (s->strm->total_in_lo32 == 0)\n    {\n      s->strm->total_in_hi32 += 1;\n    }\n  }\n\n  ;\n  s->origPtr = 0;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_6",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_6(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 25;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_6_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->origPtr = (s->origPtr << 8) | ((Int32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_6_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_7",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_7(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 26;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_7_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->origPtr = (s->origPtr << 8) | ((Int32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_7_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_8",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_8(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 47;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_8_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_8_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_9",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_9(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 48;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_9_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_9_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_10",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_10(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 49;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_10_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32) uc);\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_10_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_11",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_11(DState * const s)\n{\n  s->save_i = 0;\n  s->save_j = 0;\n  s->save_t = 0;\n  s->save_alphaSize = 0;\n  s->save_nGroups = 0;\n  s->save_nSelectors = 0;\n  s->save_EOB = 0;\n  s->save_groupNo = 0;\n  s->save_groupPos = 0;\n  s->save_nextSym = 0;\n  s->save_nblockMAX = 0;\n  s->save_nblock = 0;\n  s->save_es = 0;\n  s->save_N = 0;\n  s->save_curr = 0;\n  s->save_zt = 0;\n  s->save_zn = 0;\n  s->save_zvec = 0;\n  s->save_zj = 0;\n  s->save_gSel = 0;\n  s->save_gMinlen = 0;\n  s->save_gLimit = 0;\n  s->save_gBase = 0;\n  s->save_gPerm = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_12",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_12(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 12;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_12_1(&uc, &retVal, s);\n  }\n\n  if (uc != 0x68)\n  {\n    retVal = -5;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_12_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_13",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_13(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 10;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_13_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x42)\n  {\n    retVal = -5;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_13_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_14",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_14(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 11;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_14_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x5a)\n  {\n    retVal = -5;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_14_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_15",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_15(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 15;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_15_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x41)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_15_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_16",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_16(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 16;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_16_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x59)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_16_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_17",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_17(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 17;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_17_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x26)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_17_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_18",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_18(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 18;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_18_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x53)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_18_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_19",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const nGroups_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_19(Int32 * const retVal_ref, Int32 * const nGroups_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 nGroups = *nGroups_ref;\n  s->state = 30;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_19_1(&retVal, &nGroups, s);\n  }\n\n  ;\n  if ((nGroups < 2) || (nGroups > 6))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *retVal_ref = retVal;\n  *nGroups_ref = nGroups;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_19_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nGroups_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups = *nGroups_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_20",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_20(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 43;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_20_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x45)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_20_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_21",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_21(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 44;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_21_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x38)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_21_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_22",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_22(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 45;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_22_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x50)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_22_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_23",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_23(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 46;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_23_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x90)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->storedCombinedCRC = 0;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_23_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_24",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_24(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 14;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_24_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 0x17)\n  {\n    goto endhdr_2;\n  }\n  if (uc != 0x31)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_24_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_25",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_25(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 50;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_25_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32) uc);\n  s->state = 1;\n  {\n    retVal = 4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_25_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_26",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_26(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  s->state = 19;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_26_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x59)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->currBlockNo += 1;\n  if (s->verbosity >= 2)\n  {\n    fprintf(stderr, \"\\n    [%d: huff+mtf \", s->currBlockNo);\n  }\n  s->storedBlockCRC = 0;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_helper_BZ2_decompress_26_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_27",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s",
                "bz_stream * const strm"
            ],
            "definition": "void helper_BZ2_decompress_27(Int32 * const retVal_ref, DState * const s, bz_stream * const strm)\n{\n  Int32 retVal = *retVal_ref;\n  s->state = 13;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_27_3(&retVal, s);\n  }\n\n  if ((s->blockSize100k < (0x30 + 1)) || (s->blockSize100k > (0x30 + 9)))\n  {\n    retVal = -5;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->blockSize100k -= 0x30;\n  if (s->smallDecompress)\n  {\n    helper_helper_BZ2_decompress_27_2(&retVal, s, strm);\n  }\n  else\n  {\n    helper_helper_BZ2_decompress_27_1(&retVal, s, strm);\n  }\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_27_1",
                "helper_helper_BZ2_decompress_27_2",
                "helper_helper_BZ2_decompress_27_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_28",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const alphaSize_ref",
                "DState * const s"
            ],
            "definition": "void helper_BZ2_decompress_28(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const j_ref, Int32 * const alphaSize_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 alphaSize = *alphaSize_ref;\n  s->state = 27;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_28_1(&uc, &retVal, s);\n  }\n\n  ;\n  s->origPtr = (s->origPtr << 8) | ((Int32) uc);\n  if (s->origPtr < 0)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  if (s->origPtr > (10 + (100000 * s->blockSize100k)))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  for (i = 0; i < 16; i += 1)\n  {\n    helper_helper_BZ2_decompress_28_2(&uc, &retVal, &i, s);\n  }\n\n  for (i = 0; i < 256; i += 1)\n    s->inUse[i] = (Bool) 0;\n\n  for (i = 0; i < 16; i += 1)\n    if (s->inUse16[i])\n  {\n    helper_helper_BZ2_decompress_28_3(&uc, &retVal, &i, &j, s);\n  }\n\n  makeMaps_d(s);\n  if (s->nInUse == 0)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  alphaSize = s->nInUse + 2;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *j_ref = j;\n  *alphaSize_ref = alphaSize;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_decompress_28_1",
                "helper_helper_BZ2_decompress_28_2",
                "helper_helper_BZ2_decompress_28_3",
                "makeMaps_d"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const alphaSize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize = *alphaSize_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_decompress_29",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const minLen_ref",
                "Int32 * const maxLen_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const t_ref",
                "Int32 * const nSelectors_ref",
                "Int32 * const EOB_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const nblockMAX_ref",
                "Int32 * const nblock_ref",
                "Int32 * const es_ref",
                "Int32 * const N_ref",
                "Int32 * const curr_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 alphaSize",
                "Int32 nGroups",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm"
            ],
            "definition": "Int32 helper_BZ2_decompress_29(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const minLen_ref, Int32 * const maxLen_ref, Int32 * const i_ref, Int32 * const j_ref, Int32 * const t_ref, Int32 * const nSelectors_ref, Int32 * const EOB_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const nblockMAX_ref, Int32 * const nblock_ref, Int32 * const es_ref, Int32 * const N_ref, Int32 * const curr_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 alphaSize, Int32 nGroups, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 minLen = *minLen_ref;\n  Int32 maxLen = *maxLen_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 t = *t_ref;\n  Int32 nSelectors = *nSelectors_ref;\n  Int32 EOB = *EOB_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 nblockMAX = *nblockMAX_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 es = *es_ref;\n  Int32 N = *N_ref;\n  Int32 curr = *curr_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  s->state = 31;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_29_6(&retVal, &nSelectors, s);\n  }\n\n  ;\n  if (nSelectors < 1)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  for (i = 0; i < nSelectors; i += 1)\n  {\n    helper_helper_BZ2_decompress_29_9(&uc, &retVal, &i, &j, s, nGroups);\n  }\n\n  if (nSelectors > (2 + (900000 / 50)))\n  {\n    nSelectors = 2 + (900000 / 50);\n  }\n  {\n    helper_helper_BZ2_decompress_29_5(&i, s, nGroups, nSelectors);\n  }\n  for (t = 0; t < nGroups; t += 1)\n  {\n    helper_helper_BZ2_decompress_29_12(&uc, &retVal, &i, &t, &curr, s, alphaSize);\n  }\n\n  for (t = 0; t < nGroups; t += 1)\n  {\n    helper_helper_BZ2_decompress_29_3(&minLen, &maxLen, &i, &t, s, alphaSize);\n  }\n\n  EOB = s->nInUse + 1;\n  nblockMAX = 100000 * s->blockSize100k;\n  groupNo = -1;\n  groupPos = 0;\n  for (i = 0; i <= 255; i += 1)\n    s->unzftab[i] = 0;\n\n  {\n    helper_helper_BZ2_decompress_29_4(s);\n  }\n  nblock = 0;\n  {\n    helper_helper_BZ2_decompress_29_11(&retVal, &groupNo, &groupPos, &nextSym, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors);\n  }\n  ;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_29_13(&uc, &retVal, &groupNo, &groupPos, &nextSym, &nblock, &es, &N, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors, EOB, nblockMAX);\n  }\n\n  if ((s->origPtr < 0) || (s->origPtr >= nblock))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  for (i = 0; i <= 255; i += 1)\n  {\n    if ((s->unzftab[i] < 0) || (s->unzftab[i] > nblock))\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n  }\n\n  s->cftab[0] = 0;\n  for (i = 1; i <= 256; i += 1)\n    s->cftab[i] = s->unzftab[i - 1];\n\n  for (i = 1; i <= 256; i += 1)\n    s->cftab[i] += s->cftab[i - 1];\n\n  for (i = 0; i <= 256; i += 1)\n  {\n    helper_helper_BZ2_decompress_29_1(&retVal, s, i, nblock);\n  }\n\n  for (i = 1; i <= 256; i += 1)\n  {\n    helper_helper_BZ2_decompress_29_2(&retVal, s, i);\n  }\n\n  s->state_out_len = 0;\n  s->state_out_ch = 0;\n  {\n    s->calculatedBlockCRC = 0xffffffffL;\n  }\n  ;\n  s->state = 2;\n  if (s->verbosity >= 2)\n  {\n    fprintf(stderr, \"rt+rld\");\n  }\n  if (s->smallDecompress)\n  {\n    helper_helper_BZ2_decompress_29_10(&uc, &i, &j, s, nblock);\n  }\n  else\n  {\n    helper_helper_BZ2_decompress_29_8(&uc, &i, s, nblock);\n  }\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  endhdr_2:\n  case 42:\n    s->state = 42;\n\n\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_decompress_29_7(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc != 0x72)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *minLen_ref = minLen;\n  *maxLen_ref = maxLen;\n  *i_ref = i;\n  *j_ref = j;\n  *t_ref = t;\n  *nSelectors_ref = nSelectors;\n  *EOB_ref = EOB;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *nblockMAX_ref = nblockMAX;\n  *nblock_ref = nblock;\n  *es_ref = es;\n  *N_ref = N;\n  *curr_ref = curr;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_helper_BZ2_decompress_29_1",
                "helper_helper_BZ2_decompress_29_10",
                "helper_helper_BZ2_decompress_29_11",
                "helper_helper_BZ2_decompress_29_12",
                "helper_helper_BZ2_decompress_29_13",
                "helper_helper_BZ2_decompress_29_2",
                "helper_helper_BZ2_decompress_29_3",
                "helper_helper_BZ2_decompress_29_4",
                "helper_helper_BZ2_decompress_29_5",
                "helper_helper_BZ2_decompress_29_6",
                "helper_helper_BZ2_decompress_29_7",
                "helper_helper_BZ2_decompress_29_8",
                "helper_helper_BZ2_decompress_29_9"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const maxLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "EOB_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const EOB_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblockMAX_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen = *minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen = *maxLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors = *nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "EOB",
                        "type": "Int32",
                        "definition": [
                            "Int32 EOB = *EOB_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX = *nblockMAX_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "Int32",
                        "definition": [
                            "Int32 N = *N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = *curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_1_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_1_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_2_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_2_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_3_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_3_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_4_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_4_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_6_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_6_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_7_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_7_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_8_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_8_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_9_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_9_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_10_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_10_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_12_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_12_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_13_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_13_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_14_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_14_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_15_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_15_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_16_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_16_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_17_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_17_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_18_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_18_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_19_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const nGroups_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_19_1(Int32 * const retVal_ref, Int32 * const nGroups_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 nGroups = *nGroups_ref;\n  if (s->bsLive >= 3)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 3)) & ((1 << 3) - 1);\n    s->bsLive -= 3;\n    nGroups = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *nGroups_ref = nGroups;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nGroups_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups = *nGroups_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_20_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_20_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_21_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_21_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_22_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_22_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_23_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_23_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_24_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_24_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_25_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_25_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_26_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_26_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_27_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s",
                "bz_stream * const strm"
            ],
            "definition": "void helper_helper_BZ2_decompress_27_1(Int32 * const retVal_ref, DState * const s, bz_stream * const strm)\n{\n  Int32 retVal = *retVal_ref;\n  s->tt = strm->bzalloc(strm->opaque, (s->blockSize100k * 100000) * (sizeof(Int32)), 1);\n  if (s->tt == 0)\n  {\n    retVal = -3;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "strm->bzalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_27_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s",
                "bz_stream * const strm"
            ],
            "definition": "void helper_helper_BZ2_decompress_27_2(Int32 * const retVal_ref, DState * const s, bz_stream * const strm)\n{\n  Int32 retVal = *retVal_ref;\n  s->ll16 = strm->bzalloc(strm->opaque, (s->blockSize100k * 100000) * (sizeof(UInt16)), 1);\n  s->ll4 = strm->bzalloc(strm->opaque, ((1 + (s->blockSize100k * 100000)) >> 1) * (sizeof(UChar)), 1);\n  if ((s->ll16 == 0) || (s->ll4 == 0))\n  {\n    retVal = -3;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [
                "strm->bzalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_27_3",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_27_3(Int32 * const retVal_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    s->blockSize100k = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_28_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_28_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_28_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_28_2(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  case 28:\n    s->state = 28;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_BZ2_decompress_28_2_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 1)\n  {\n    s->inUse16[i] = (Bool) 1;\n  }\n  else\n    s->inUse16[i] = (Bool) 0;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_28_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_28_3",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_28_3(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const j_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  for (j = 0; j < 16; j += 1)\n  {\n    helper_helper_helper_BZ2_decompress_28_3_1(&uc, &retVal, &i, &j, s);\n  }\n\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_28_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s",
                "Int32 i",
                "Int32 nblock"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_1(Int32 * const retVal_ref, DState * const s, Int32 i, Int32 nblock)\n{\n  Int32 retVal = *retVal_ref;\n  if ((s->cftab[i] < 0) || (s->cftab[i] > nblock))\n  {\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n  }\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "DState * const s",
                "Int32 i"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_2(Int32 * const retVal_ref, DState * const s, Int32 i)\n{\n  Int32 retVal = *retVal_ref;\n  if (s->cftab[i - 1] > s->cftab[i])\n  {\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n  }\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_3",
            "header": "",
            "params": [
                "Int32 * const minLen_ref",
                "Int32 * const maxLen_ref",
                "Int32 * const i_ref",
                "Int32 * const t_ref",
                "DState * const s",
                "Int32 alphaSize"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_3(Int32 * const minLen_ref, Int32 * const maxLen_ref, Int32 * const i_ref, Int32 * const t_ref, DState * const s, Int32 alphaSize)\n{\n  Int32 minLen = *minLen_ref;\n  Int32 maxLen = *maxLen_ref;\n  Int32 i = *i_ref;\n  Int32 t = *t_ref;\n  minLen = 32;\n  maxLen = 0;\n  for (i = 0; i < alphaSize; i += 1)\n  {\n    if (s->len[t][i] > maxLen)\n    {\n      maxLen = s->len[t][i];\n    }\n    if (s->len[t][i] < minLen)\n    {\n      minLen = s->len[t][i];\n    }\n  }\n\n  BZ2_hbCreateDecodeTables(&s->limit[t][0], &s->base[t][0], &s->perm[t][0], &s->len[t][0], minLen, maxLen, alphaSize);\n  s->minLens[t] = minLen;\n  *minLen_ref = minLen;\n  *maxLen_ref = maxLen;\n  *i_ref = i;\n  *t_ref = t;\n}\n\n",
            "calle": [
                "BZ2_hbCreateDecodeTables"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "minLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const maxLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 minLen = *minLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxLen",
                        "type": "Int32",
                        "definition": [
                            "Int32 maxLen = *maxLen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_4",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_4(DState * const s)\n{\n  Int32 ii;\n  Int32 jj;\n  Int32 kk;\n  kk = 4096 - 1;\n  for (ii = (256 / 16) - 1; ii >= 0; ii -= 1)\n  {\n    for (jj = 16 - 1; jj >= 0; jj -= 1)\n    {\n      s->mtfa[kk] = (UChar) ((ii * 16) + jj);\n      kk -= 1;\n    }\n\n    s->mtfbase[ii] = kk + 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "Int32",
                        "definition": [
                            "Int32 ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "Int32",
                        "definition": [
                            "Int32 jj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kk",
                        "type": "Int32",
                        "definition": [
                            "Int32 kk"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_5",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "DState * const s",
                "Int32 nGroups",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_5(Int32 * const i_ref, DState * const s, Int32 nGroups, Int32 nSelectors)\n{\n  Int32 i = *i_ref;\n  UChar pos[6];\n  UChar tmp;\n  UChar v;\n  for (v = 0; v < nGroups; v += 1)\n    pos[v] = v;\n\n  for (i = 0; i < nSelectors; i += 1)\n  {\n    v = s->selectorMtf[i];\n    tmp = pos[v];\n    while (v > 0)\n    {\n      pos[v] = pos[v - 1];\n      v -= 1;\n    }\n\n    pos[0] = tmp;\n    s->selector[i] = tmp;\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "UChar [6]",
                        "definition": [
                            "UChar pos[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "UChar",
                        "definition": [
                            "UChar tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UChar",
                        "definition": [
                            "UChar v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_6",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const nSelectors_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_6(Int32 * const retVal_ref, Int32 * const nSelectors_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 nSelectors = *nSelectors_ref;\n  if (s->bsLive >= 15)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 15)) & ((1 << 15) - 1);\n    s->bsLive -= 15;\n    nSelectors = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *nSelectors_ref = nSelectors;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors = *nSelectors_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_7",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_7(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 8)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n    s->bsLive -= 8;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_8",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const i_ref",
                "DState * const s",
                "Int32 nblock"
            ],
            "definition": "Int32 helper_helper_BZ2_decompress_29_8(UChar * const uc_ref, Int32 * const i_ref, DState * const s, Int32 nblock)\n{\n  UChar uc = *uc_ref;\n  Int32 i = *i_ref;\n  for (i = 0; i < nblock; i += 1)\n  {\n    uc = (UChar) (s->tt[i] & 0xff);\n    s->tt[s->cftab[uc]] |= i << 8;\n    s->cftab[uc] += 1;\n  }\n\n  s->tPos = s->tt[s->origPtr] >> 8;\n  s->nblock_used = 0;\n  if (s->blockRandomised)\n  {\n    helper_helper_helper_BZ2_decompress_29_8_2(s);\n  }\n  else\n  {\n    helper_helper_helper_BZ2_decompress_29_8_1(s);\n  }\n  *uc_ref = uc;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_8_1",
                "helper_helper_helper_BZ2_decompress_29_8_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_9",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "DState * const s",
                "Int32 nGroups"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_9(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const j_ref, DState * const s, Int32 nGroups)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  j = 0;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_BZ2_decompress_29_9_1(&uc, &retVal, &j, s, nGroups);\n  }\n\n  if (i < (2 + (900000 / 50)))\n  {\n    s->selectorMtf[i] = j;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_9_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_10",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "DState * const s",
                "Int32 nblock"
            ],
            "definition": "Int32 helper_helper_BZ2_decompress_29_10(UChar * const uc_ref, Int32 * const i_ref, Int32 * const j_ref, DState * const s, Int32 nblock)\n{\n  UChar uc = *uc_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  for (i = 0; i <= 256; i += 1)\n    s->cftabCopy[i] = s->cftab[i];\n\n  for (i = 0; i < nblock; i += 1)\n  {\n    helper_helper_helper_BZ2_decompress_29_10_2(&uc, &i, s);\n  }\n\n  i = s->origPtr;\n  j = ((UInt32) s->ll16[i]) | (((((UInt32) s->ll4[i >> 1]) >> ((i << 2) & 0x4)) & 0xF) << 16);\n  do\n  {\n    helper_helper_helper_BZ2_decompress_29_10_3(&i, &j, s);\n  }\n  while (i != s->origPtr);\n  s->tPos = s->origPtr;\n  s->nblock_used = 0;\n  if (s->blockRandomised)\n  {\n    helper_helper_helper_BZ2_decompress_29_10_4(s);\n  }\n  else\n  {\n    helper_helper_helper_BZ2_decompress_29_10_1(s);\n  }\n  *uc_ref = uc;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_10_1",
                "helper_helper_helper_BZ2_decompress_29_10_2",
                "helper_helper_helper_BZ2_decompress_29_10_3",
                "helper_helper_helper_BZ2_decompress_29_10_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_11",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_11(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (groupPos == 0)\n  {\n    helper_helper_helper_BZ2_decompress_29_11_1(&retVal, &groupNo, &groupPos, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, nSelectors);\n  }\n  groupPos -= 1;\n  zn = gMinlen;\n  case 36:\n    s->state = 36;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_BZ2_decompress_29_11_2(&retVal, &zvec, s, zn);\n  }\n\n  ;\n  while (1)\n  {\n    helper_helper_helper_BZ2_decompress_29_11_3(&retVal, &zn, &zvec, &zj, s, gLimit, gLimit_idx);\n  }\n\n  ;\n  if (((zvec - gBase[zn + gBase_idx]) < 0) || ((zvec - gBase[zn + gBase_idx]) >= 258))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  nextSym = gPerm[(zvec - gBase[zn + gBase_idx]) + gPerm_idx];\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_11_1",
                "helper_helper_helper_BZ2_decompress_29_11_2",
                "helper_helper_helper_BZ2_decompress_29_11_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_12",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const t_ref",
                "Int32 * const curr_ref",
                "DState * const s",
                "Int32 alphaSize"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_12(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const t_ref, Int32 * const curr_ref, DState * const s, Int32 alphaSize)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 t = *t_ref;\n  Int32 curr = *curr_ref;\n  case 33:\n    s->state = 33;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_BZ2_decompress_29_12_1(&retVal, &curr, s);\n  }\n\n  ;\n  for (i = 0; i < alphaSize; i += 1)\n  {\n    helper_helper_helper_BZ2_decompress_29_12_2(&uc, &retVal, &i, &t, &curr, s);\n  }\n\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *t_ref = t;\n  *curr_ref = curr;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_12_1",
                "helper_helper_helper_BZ2_decompress_29_12_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alphaSize",
                        "type": "Int32",
                        "definition": [
                            "Int32 alphaSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = *curr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_decompress_29_13",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const nblock_ref",
                "Int32 * const es_ref",
                "Int32 * const N_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors",
                "Int32 EOB",
                "Int32 nblockMAX"
            ],
            "definition": "void helper_helper_BZ2_decompress_29_13(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const nblock_ref, Int32 * const es_ref, Int32 * const N_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors, Int32 EOB, Int32 nblockMAX)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 es = *es_ref;\n  Int32 N = *N_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (nextSym == EOB)\n  {\n    break;\n  }\n  if ((nextSym == 0) || (nextSym == 1))\n  {\n    helper_helper_helper_BZ2_decompress_29_13_1(&uc, &retVal, &groupNo, &groupPos, &nextSym, &nblock, &es, &N, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors, nblockMAX);\n  }\n  else\n  {\n    helper_helper_helper_BZ2_decompress_29_13_2(&uc, &retVal, &groupNo, &groupPos, &nextSym, &nblock, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors, nblockMAX);\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *nblock_ref = nblock;\n  *es_ref = es;\n  *N_ref = N;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_BZ2_decompress_29_13_1",
                "helper_helper_helper_BZ2_decompress_29_13_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "EOB",
                        "type": "Int32",
                        "definition": [
                            "Int32 EOB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "Int32",
                        "definition": [
                            "Int32 N = *N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_28_2_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_28_2_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_28_3_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_28_3_1(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const j_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  case 29:\n    s->state = 29;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_BZ2_decompress_28_3_1_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 1)\n  {\n    s->inUse[(i * 16) + j] = (Bool) 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_28_3_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_8_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Int32 helper_helper_helper_BZ2_decompress_29_8_1(DState * const s)\n{\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  s->k0 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  s->nblock_used += 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_8_2",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Int32 helper_helper_helper_BZ2_decompress_29_8_2(DState * const s)\n{\n  s->rNToGo = 0;\n  s->rTPos = 0;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  s->k0 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  s->nblock_used += 1;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  s->k0 ^= (s->rNToGo == 1) ? (1) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_rNums",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_9_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const j_ref",
                "DState * const s",
                "Int32 nGroups"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_9_1(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const j_ref, DState * const s, Int32 nGroups)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 j = *j_ref;\n  case 32:\n    s->state = 32;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_9_1_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 0)\n  {\n    break;\n  }\n  j += 1;\n  if (j >= nGroups)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_29_9_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nGroups",
                        "type": "Int32",
                        "definition": [
                            "Int32 nGroups"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_10_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Int32 helper_helper_helper_BZ2_decompress_29_10_1(DState * const s)\n{\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n}\n\n",
            "calle": [
                "BZ2_indexIntoF"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_10_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const i_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_10_2(UChar * const uc_ref, Int32 * const i_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 i = *i_ref;\n  uc = (UChar) s->ll16[i];\n  {\n    s->ll16[i] = (UInt16) (s->cftabCopy[uc] & 0x0000ffff);\n    {\n      if ((i & 0x1) == 0)\n      {\n        s->ll4[i >> 1] = (s->ll4[i >> 1] & 0xf0) | (s->cftabCopy[uc] >> 16);\n      }\n      else\n        s->ll4[i >> 1] = (s->ll4[i >> 1] & 0x0f) | ((s->cftabCopy[uc] >> 16) << 4);\n    }\n    ;\n  }\n  ;\n  s->cftabCopy[uc] += 1;\n  *uc_ref = uc;\n  *i_ref = i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_10_3",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_10_3(Int32 * const i_ref, Int32 * const j_ref, DState * const s)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 tmp = ((UInt32) s->ll16[j]) | (((((UInt32) s->ll4[j >> 1]) >> ((j << 2) & 0x4)) & 0xF) << 16);\n  {\n    s->ll16[j] = (UInt16) (i & 0x0000ffff);\n    {\n      if ((j & 0x1) == 0)\n      {\n        s->ll4[j >> 1] = (s->ll4[j >> 1] & 0xf0) | (i >> 16);\n      }\n      else\n        s->ll4[j >> 1] = (s->ll4[j >> 1] & 0x0f) | ((i >> 16) << 4);\n    }\n    ;\n  }\n  ;\n  i = j;\n  j = tmp;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Int32",
                        "definition": [
                            "Int32 tmp = ((UInt32) s->ll16[j]) | (((((UInt32) s->ll4[j >> 1]) >> ((j << 2) & 0x4)) & 0xF) << 16)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_10_4",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Int32 helper_helper_helper_BZ2_decompress_29_10_4(DState * const s)\n{\n  s->rNToGo = 0;\n  s->rTPos = 0;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  s->k0 ^= (s->rNToGo == 1) ? (1) : (0);\n}\n\n",
            "calle": [
                "BZ2_indexIntoF"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_rNums",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_11_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_11_1(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  groupNo += 1;\n  if (groupNo >= nSelectors)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  groupPos = 50;\n  gSel = s->selector[groupNo];\n  gMinlen = s->minLens[gSel];\n  gLimit_idx = &s->limit[gSel][0];\n  gPerm_idx = &s->perm[gSel][0];\n  gBase_idx = &s->base[gSel][0];\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_11_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const zvec_ref",
                "DState * const s",
                "Int32 zn"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_11_2(Int32 * const retVal_ref, Int32 * const zvec_ref, DState * const s, Int32 zn)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 zvec = *zvec_ref;\n  if (s->bsLive >= zn)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n    s->bsLive -= zn;\n    zvec = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *zvec_ref = zvec;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_11_3",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "unsigned int gLimit_idx"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_11_3(Int32 * const retVal_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, DState * const s, Int32 * const gLimit, unsigned int gLimit_idx)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  if (zn > 20)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  if (zvec <= gLimit[zn + gLimit_idx])\n  {\n    break;\n  }\n  zn += 1;\n  case 37:\n    s->state = 37;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_11_3_1(&retVal, &zj, s);\n  }\n\n  ;\n  zvec = (zvec << 1) | zj;\n  *retVal_ref = retVal;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_29_11_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_12_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const curr_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_12_1(Int32 * const retVal_ref, Int32 * const curr_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 curr = *curr_ref;\n  if (s->bsLive >= 5)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 5)) & ((1 << 5) - 1);\n    s->bsLive -= 5;\n    curr = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *curr_ref = curr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = *curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_12_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const i_ref",
                "Int32 * const t_ref",
                "Int32 * const curr_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_12_2(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const i_ref, Int32 * const t_ref, Int32 * const curr_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 i = *i_ref;\n  Int32 t = *t_ref;\n  Int32 curr = *curr_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_12_2_1(&uc, &retVal, &curr, s);\n  }\n\n  s->len[t][i] = curr;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *i_ref = i;\n  *t_ref = t;\n  *curr_ref = curr;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_29_12_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "Int32",
                        "definition": [
                            "Int32 t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = *curr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_13_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const nblock_ref",
                "Int32 * const es_ref",
                "Int32 * const N_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors",
                "Int32 nblockMAX"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_13_1(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const nblock_ref, Int32 * const es_ref, Int32 * const N_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors, Int32 nblockMAX)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 es = *es_ref;\n  Int32 N = *N_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  es = -1;\n  N = 1;\n  do\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_13_1_3(&retVal, &groupNo, &groupPos, &nextSym, &es, &N, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors);\n  }\n  while ((nextSym == 0) || (nextSym == 1));\n  es += 1;\n  uc = s->seqToUnseq[s->mtfa[s->mtfbase[0]]];\n  s->unzftab[uc] += es;\n  if (s->smallDecompress)\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_13_1_2(&retVal, &nblock, &es, s, nblockMAX, uc);\n  }\n  else\n    while (es > 0)\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_13_1_1(&retVal, &nblock, &es, s, nblockMAX, uc);\n  }\n\n  ;\n  continue;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *nblock_ref = nblock;\n  *es_ref = es;\n  *N_ref = N;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_29_13_1_1",
                "helper_helper_helper_helper_BZ2_decompress_29_13_1_2",
                "helper_helper_helper_helper_BZ2_decompress_29_13_1_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "Int32",
                        "definition": [
                            "Int32 N = *N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_decompress_29_13_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const nblock_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors",
                "Int32 nblockMAX"
            ],
            "definition": "void helper_helper_helper_BZ2_decompress_29_13_2(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const nblock_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors, Int32 nblockMAX)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (nblock >= nblockMAX)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_13_2_1(&uc, s, nextSym);\n  }\n  s->unzftab[s->seqToUnseq[uc]] += 1;\n  if (s->smallDecompress)\n  {\n    s->ll16[nblock] = (UInt16) s->seqToUnseq[uc];\n  }\n  else\n    s->tt[nblock] = (UInt32) s->seqToUnseq[uc];\n  nblock += 1;\n  {\n    helper_helper_helper_helper_BZ2_decompress_29_13_2_2(&retVal, &groupNo, &groupPos, &nextSym, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors);\n  }\n  ;\n  continue;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *nblock_ref = nblock;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_BZ2_decompress_29_13_2_1",
                "helper_helper_helper_helper_BZ2_decompress_29_13_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_28_3_1_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_28_3_1_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_9_1_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_9_1_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_11_3_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const zj_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_11_3_1(Int32 * const retVal_ref, Int32 * const zj_ref, DState * const s)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 zj = *zj_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    zj = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *zj_ref = zj;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_12_2_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "Int32 * const curr_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_12_2_1(UChar * const uc_ref, Int32 * const retVal_ref, Int32 * const curr_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  Int32 curr = *curr_ref;\n  if ((curr < 1) || (curr > 20))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  case 34:\n    s->state = 34;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_1(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 0)\n  {\n    break;\n  }\n  case 35:\n    s->state = 35;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_2(&uc, &retVal, s);\n  }\n\n  ;\n  if (uc == 0)\n  {\n    curr += 1;\n  }\n  else\n    curr--;\n  curr -= 1;\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n  *curr_ref = curr;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_1",
                "helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "Int32",
                        "definition": [
                            "Int32 curr = *curr_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_13_1_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const nblock_ref",
                "Int32 * const es_ref",
                "DState * const s",
                "Int32 nblockMAX",
                "UChar uc"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_13_1_1(Int32 * const retVal_ref, Int32 * const nblock_ref, Int32 * const es_ref, DState * const s, Int32 nblockMAX, UChar uc)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 es = *es_ref;\n  if (nblock >= nblockMAX)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->tt[nblock] = (UInt32) uc;\n  nblock += 1;\n  es -= 1;\n  *retVal_ref = retVal;\n  *nblock_ref = nblock;\n  *es_ref = es;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_13_1_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const nblock_ref",
                "Int32 * const es_ref",
                "DState * const s",
                "Int32 nblockMAX",
                "UChar uc"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_13_1_2(Int32 * const retVal_ref, Int32 * const nblock_ref, Int32 * const es_ref, DState * const s, Int32 nblockMAX, UChar uc)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 nblock = *nblock_ref;\n  Int32 es = *es_ref;\n  while (es > 0)\n  {\n    if (nblock >= nblockMAX)\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    s->ll16[nblock] = (UInt16) uc;\n    nblock += 1;\n    es -= 1;\n  }\n\n  *retVal_ref = retVal;\n  *nblock_ref = nblock;\n  *es_ref = es;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblockMAX",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblockMAX"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "Int32",
                        "definition": [
                            "Int32 nblock = *nblock_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_13_1_3",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const es_ref",
                "Int32 * const N_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_13_1_3(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const es_ref, Int32 * const N_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 es = *es_ref;\n  Int32 N = *N_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (N >= ((2 * 1024) * 1024))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  if (nextSym == 0)\n  {\n    es = es + ((0 + 1) * N);\n  }\n  else\n    if (nextSym == 1)\n  {\n    es = es + ((1 + 1) * N);\n  }\n  N = N * 2;\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_1_3_1(&retVal, &groupNo, &groupPos, &nextSym, &zn, &zvec, &zj, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, gLimit, gBase, gPerm, nSelectors);\n  }\n  ;\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *es_ref = es;\n  *N_ref = N;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_1_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "es",
                        "type": "Int32",
                        "definition": [
                            "Int32 es = *es_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "Int32",
                        "definition": [
                            "Int32 N = *N_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_13_2_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "DState * const s",
                "Int32 nextSym"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_13_2_1(UChar * const uc_ref, DState * const s, Int32 nextSym)\n{\n  UChar uc = *uc_ref;\n  Int32 ii;\n  Int32 jj;\n  Int32 kk;\n  Int32 pp;\n  Int32 lno;\n  Int32 off;\n  UInt32 nn;\n  nn = (UInt32) (nextSym - 1);\n  if (nn < 16)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_1(&uc, &pp, &nn, s);\n  }\n  else\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_2(&uc, &ii, &jj, &kk, &pp, &lno, &off, s, nn);\n  }\n  *uc_ref = uc;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_1",
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "Int32",
                        "definition": [
                            "Int32 ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "Int32",
                        "definition": [
                            "Int32 jj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kk",
                        "type": "Int32",
                        "definition": [
                            "Int32 kk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "Int32",
                        "definition": [
                            "Int32 pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lno",
                        "type": "Int32",
                        "definition": [
                            "Int32 lno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "Int32",
                        "definition": [
                            "Int32 off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nn",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_BZ2_decompress_29_13_2_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_helper_helper_BZ2_decompress_29_13_2_2(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (groupPos == 0)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_1(&retVal, &groupNo, &groupPos, &gSel, &gMinlen, &gLimit_idx, &gBase_idx, &gPerm_idx, s, nSelectors);\n  }\n  groupPos -= 1;\n  zn = gMinlen;\n  case 40:\n    s->state = 40;\n\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_2(&retVal, &zvec, s, zn);\n  }\n\n  ;\n  while (1)\n  {\n    helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_3(&retVal, &zn, &zvec, &zj, s, gLimit, gLimit_idx);\n  }\n\n  ;\n  if (((zvec - gBase[zn + gBase_idx]) < 0) || ((zvec - gBase[zn + gBase_idx]) >= 258))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  nextSym = gPerm[(zvec - gBase[zn + gBase_idx]) + gPerm_idx];\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_1",
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_2",
                "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_1(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const retVal_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_12_2_1_2(UChar * const uc_ref, Int32 * const retVal_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 retVal = *retVal_ref;\n  if (s->bsLive >= 1)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n    s->bsLive -= 1;\n    uc = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *uc_ref = uc;\n  *retVal_ref = retVal;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_1_3_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const nextSym_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "Int32 * const gBase",
                "Int32 * const gPerm",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_1_3_1(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const nextSym_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 * const gLimit, Int32 * const gBase, Int32 * const gPerm, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 nextSym = *nextSym_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  if (groupPos == 0)\n  {\n    groupNo += 1;\n    if (groupNo >= nSelectors)\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    groupPos = 50;\n    gSel = s->selector[groupNo];\n    gMinlen = s->minLens[gSel];\n    gLimit_idx = &s->limit[gSel][0];\n    gPerm_idx = &s->perm[gSel][0];\n    gBase_idx = &s->base[gSel][0];\n  }\n  groupPos -= 1;\n  zn = gMinlen;\n  case 38:\n    s->state = 38;\n\n  while ((Bool) 1)\n  {\n    if (s->bsLive >= zn)\n    {\n      UInt32 v;\n      v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n      s->bsLive -= zn;\n      zvec = v;\n      break;\n    }\n    if (s->strm->avail_in == 0)\n    {\n      retVal = 0;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n    s->bsLive += 8;\n    s->strm->next_in += 1;\n    s->strm->avail_in -= 1;\n    s->strm->total_in_lo32 += 1;\n    if (s->strm->total_in_lo32 == 0)\n    {\n      s->strm->total_in_hi32 += 1;\n    }\n  }\n\n  ;\n  while (1)\n  {\n    if (zn > 20)\n    {\n      retVal = -4;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    if (zvec <= gLimit[zn + gLimit_idx])\n    {\n      break;\n    }\n    zn += 1;\n    case 39:\n      s->state = 39;\n\n    while ((Bool) 1)\n    {\n      if (s->bsLive >= 1)\n      {\n        UInt32 v;\n        v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n        s->bsLive -= 1;\n        zj = v;\n        break;\n      }\n      if (s->strm->avail_in == 0)\n      {\n        retVal = 0;\n        goto save_state_and_return;\n      }\n      ;\n      ;\n      s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n      s->bsLive += 8;\n      s->strm->next_in += 1;\n      s->strm->avail_in -= 1;\n      s->strm->total_in_lo32 += 1;\n      if (s->strm->total_in_lo32 == 0)\n      {\n        s->strm->total_in_hi32 += 1;\n      }\n    }\n\n    ;\n    zvec = (zvec << 1) | zj;\n  }\n\n  ;\n  if (((zvec - gBase[zn + gBase_idx]) < 0) || ((zvec - gBase[zn + gBase_idx]) >= 258))\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  nextSym = gPerm[(zvec - gBase[zn + gBase_idx]) + gPerm_idx];\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *nextSym_ref = nextSym;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gBase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gPerm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextSym",
                        "type": "Int32",
                        "definition": [
                            "Int32 nextSym = *nextSym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_1",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const pp_ref",
                "UInt32 * const nn_ref",
                "DState * const s"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_1(UChar * const uc_ref, Int32 * const pp_ref, UInt32 * const nn_ref, DState * const s)\n{\n  UChar uc = *uc_ref;\n  Int32 pp = *pp_ref;\n  UInt32 nn = *nn_ref;\n  pp = s->mtfbase[0];\n  uc = s->mtfa[pp + nn];\n  while (nn > 3)\n  {\n    Int32 z = pp + nn;\n    s->mtfa[z] = s->mtfa[z - 1];\n    s->mtfa[z - 1] = s->mtfa[z - 2];\n    s->mtfa[z - 2] = s->mtfa[z - 3];\n    s->mtfa[z - 3] = s->mtfa[z - 4];\n    nn -= 4;\n  }\n\n  while (nn > 0)\n  {\n    s->mtfa[pp + nn] = s->mtfa[(pp + nn) - 1];\n    nn -= 1;\n  }\n\n  ;\n  s->mtfa[pp] = uc;\n  *uc_ref = uc;\n  *pp_ref = pp;\n  *nn_ref = nn;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nn_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const nn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "Int32",
                        "definition": [
                            "Int32 pp = *pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nn",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nn = *nn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "Int32",
                        "definition": [
                            "Int32 z = pp + nn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_2",
            "header": "",
            "params": [
                "UChar * const uc_ref",
                "Int32 * const ii_ref",
                "Int32 * const jj_ref",
                "Int32 * const kk_ref",
                "Int32 * const pp_ref",
                "Int32 * const lno_ref",
                "Int32 * const off_ref",
                "DState * const s",
                "UInt32 nn"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_1_2(UChar * const uc_ref, Int32 * const ii_ref, Int32 * const jj_ref, Int32 * const kk_ref, Int32 * const pp_ref, Int32 * const lno_ref, Int32 * const off_ref, DState * const s, UInt32 nn)\n{\n  UChar uc = *uc_ref;\n  Int32 ii = *ii_ref;\n  Int32 jj = *jj_ref;\n  Int32 kk = *kk_ref;\n  Int32 pp = *pp_ref;\n  Int32 lno = *lno_ref;\n  Int32 off = *off_ref;\n  lno = nn / 16;\n  off = nn % 16;\n  pp = s->mtfbase[lno] + off;\n  uc = s->mtfa[pp];\n  while (pp > s->mtfbase[lno])\n  {\n    s->mtfa[pp] = s->mtfa[pp - 1];\n    pp -= 1;\n  }\n\n  ;\n  s->mtfbase[lno] += 1;\n  while (lno > 0)\n  {\n    s->mtfbase[lno] -= 1;\n    s->mtfa[s->mtfbase[lno]] = s->mtfa[(s->mtfbase[lno - 1] + 16) - 1];\n    lno -= 1;\n  }\n\n  s->mtfbase[0] -= 1;\n  s->mtfa[s->mtfbase[0]] = uc;\n  if (s->mtfbase[0] == 0)\n  {\n    kk = 4096 - 1;\n    for (ii = (256 / 16) - 1; ii >= 0; ii -= 1)\n    {\n      for (jj = 16 - 1; jj >= 0; jj -= 1)\n      {\n        s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];\n        kk -= 1;\n      }\n\n      s->mtfbase[ii] = kk + 1;\n    }\n\n  }\n  *uc_ref = uc;\n  *ii_ref = ii;\n  *jj_ref = jj;\n  *kk_ref = kk;\n  *pp_ref = pp;\n  *lno_ref = lno;\n  *off_ref = off;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "uc_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ii_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const jj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kk_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const kk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lno_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const lno_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nn",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "UChar",
                        "definition": [
                            "UChar uc = *uc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "Int32",
                        "definition": [
                            "Int32 ii = *ii_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "Int32",
                        "definition": [
                            "Int32 jj = *jj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kk",
                        "type": "Int32",
                        "definition": [
                            "Int32 kk = *kk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "Int32",
                        "definition": [
                            "Int32 pp = *pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lno",
                        "type": "Int32",
                        "definition": [
                            "Int32 lno = *lno_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "Int32",
                        "definition": [
                            "Int32 off = *off_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_1",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const groupNo_ref",
                "Int32 * const groupPos_ref",
                "Int32 * const gSel_ref",
                "Int32 * const gMinlen_ref",
                "unsigned int * const gLimit_idx_ref",
                "unsigned int * const gBase_idx_ref",
                "unsigned int * const gPerm_idx_ref",
                "DState * const s",
                "Int32 nSelectors"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_1(Int32 * const retVal_ref, Int32 * const groupNo_ref, Int32 * const groupPos_ref, Int32 * const gSel_ref, Int32 * const gMinlen_ref, unsigned int * const gLimit_idx_ref, unsigned int * const gBase_idx_ref, unsigned int * const gPerm_idx_ref, DState * const s, Int32 nSelectors)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 groupNo = *groupNo_ref;\n  Int32 groupPos = *groupPos_ref;\n  Int32 gSel = *gSel_ref;\n  Int32 gMinlen = *gMinlen_ref;\n  unsigned int gLimit_idx = *gLimit_idx_ref;\n  unsigned int gBase_idx = *gBase_idx_ref;\n  unsigned int gPerm_idx = *gPerm_idx_ref;\n  groupNo += 1;\n  if (groupNo >= nSelectors)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  groupPos = 50;\n  gSel = s->selector[groupNo];\n  gMinlen = s->minLens[gSel];\n  gLimit_idx = &s->limit[gSel][0];\n  gPerm_idx = &s->perm[gSel][0];\n  gBase_idx = &s->base[gSel][0];\n  *retVal_ref = retVal;\n  *groupNo_ref = groupNo;\n  *groupPos_ref = groupPos;\n  *gSel_ref = gSel;\n  *gMinlen_ref = gMinlen;\n  *gLimit_idx_ref = gLimit_idx;\n  *gBase_idx_ref = gBase_idx;\n  *gPerm_idx_ref = gPerm_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gPerm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nSelectors",
                        "type": "Int32",
                        "definition": [
                            "Int32 nSelectors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupNo = *groupNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "groupPos",
                        "type": "Int32",
                        "definition": [
                            "Int32 groupPos = *groupPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gSel",
                        "type": "Int32",
                        "definition": [
                            "Int32 gSel = *gSel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gMinlen",
                        "type": "Int32",
                        "definition": [
                            "Int32 gMinlen = *gMinlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx = *gLimit_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gBase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gBase_idx = *gBase_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gPerm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gPerm_idx = *gPerm_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_2",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const zvec_ref",
                "DState * const s",
                "Int32 zn"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_2(Int32 * const retVal_ref, Int32 * const zvec_ref, DState * const s, Int32 zn)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 zvec = *zvec_ref;\n  if (s->bsLive >= zn)\n  {\n    UInt32 v;\n    v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n    s->bsLive -= zn;\n    zvec = v;\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    retVal = 0;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n  s->bsLive += 8;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *retVal_ref = retVal;\n  *zvec_ref = zvec;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_3",
            "header": "",
            "params": [
                "Int32 * const retVal_ref",
                "Int32 * const zn_ref",
                "Int32 * const zvec_ref",
                "Int32 * const zj_ref",
                "DState * const s",
                "Int32 * const gLimit",
                "unsigned int gLimit_idx"
            ],
            "definition": "void helper_helper_helper_helper_helper_BZ2_decompress_29_13_2_2_3(Int32 * const retVal_ref, Int32 * const zn_ref, Int32 * const zvec_ref, Int32 * const zj_ref, DState * const s, Int32 * const gLimit, unsigned int gLimit_idx)\n{\n  Int32 retVal = *retVal_ref;\n  Int32 zn = *zn_ref;\n  Int32 zvec = *zvec_ref;\n  Int32 zj = *zj_ref;\n  if (zn > 20)\n  {\n    retVal = -4;\n    goto save_state_and_return;\n  }\n  ;\n  ;\n  if (zvec <= gLimit[zn + gLimit_idx])\n  {\n    break;\n  }\n  zn += 1;\n  case 41:\n    s->state = 41;\n\n  while ((Bool) 1)\n  {\n    if (s->bsLive >= 1)\n    {\n      UInt32 v;\n      v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n      s->bsLive -= 1;\n      zj = v;\n      break;\n    }\n    if (s->strm->avail_in == 0)\n    {\n      retVal = 0;\n      goto save_state_and_return;\n    }\n    ;\n    ;\n    s->bsBuff = (s->bsBuff << 8) | ((UInt32) (*((UChar *) s->strm->next_in)));\n    s->bsLive += 8;\n    s->strm->next_in += 1;\n    s->strm->avail_in -= 1;\n    s->strm->total_in_lo32 += 1;\n    if (s->strm->total_in_lo32 == 0)\n    {\n      s->strm->total_in_hi32 += 1;\n    }\n  }\n\n  ;\n  zvec = (zvec << 1) | zj;\n  *retVal_ref = retVal;\n  *zn_ref = zn;\n  *zvec_ref = zvec;\n  *zj_ref = zj;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const gLimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gLimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gLimit_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = *retVal_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zn",
                        "type": "Int32",
                        "definition": [
                            "Int32 zn = *zn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zvec",
                        "type": "Int32",
                        "definition": [
                            "Int32 zvec = *zvec_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zj",
                        "type": "Int32",
                        "definition": [
                            "Int32 zj = *zj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzCompressInit",
            "header": "extern int BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity, int workFactor)",
            "params": [
                "bz_stream *strm",
                "int blockSize100k",
                "int verbosity",
                "int workFactor"
            ],
            "definition": "int BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity, int workFactor)\n{\n  Int32 n;\n  EState *s;\n  unsigned int s_idx = 0;\n  if (!bz_config_ok())\n  {\n    return -9;\n  }\n  if (((((strm == 0) || (blockSize100k < 1)) || (blockSize100k > 9)) || (workFactor < 0)) || (workFactor > 250))\n  {\n    return -2;\n  }\n  if (workFactor == 0)\n  {\n    workFactor = 30;\n  }\n  if (strm->bzalloc == 0)\n  {\n    strm->bzalloc = default_bzalloc;\n  }\n  if (strm->bzfree == 0)\n  {\n    strm->bzfree = default_bzfree;\n  }\n  s_idx = strm->bzalloc(strm->opaque, sizeof(EState), 1);\n  if ((&s[s_idx]) == 0)\n  {\n    return -3;\n  }\n  s->strm = strm;\n  s->arr1 = 0;\n  s->arr2 = 0;\n  s->ftab = 0;\n  n = 100000 * blockSize100k;\n  s->arr1 = strm->bzalloc(strm->opaque, n * (sizeof(UInt32)), 1);\n  s->arr2 = strm->bzalloc(strm->opaque, (n + (((2 + 12) + 18) + 2)) * (sizeof(UInt32)), 1);\n  s->ftab = strm->bzalloc(strm->opaque, 65537 * (sizeof(UInt32)), 1);\n  if (((s->arr1 == 0) || (s->arr2 == 0)) || (s->ftab == 0))\n  {\n    helper_BZ2_bzCompressInit_1(strm, s, s_idx);\n  }\n  s->blockNo = 0;\n  s->state = 2;\n  s->mode = 2;\n  s->combinedCRC = 0;\n  s->blockSize100k = blockSize100k;\n  s->nblockMAX = (100000 * blockSize100k) - 19;\n  s->verbosity = verbosity;\n  s->workFactor = workFactor;\n  s->block = (UChar *) s->arr2;\n  s->mtfv = (UInt16 *) s->arr1;\n  s->zbits = 0;\n  s->ptr = (UInt32 *) s->arr1;\n  strm->state = &s[s_idx];\n  strm->total_in_lo32 = 0;\n  strm->total_in_hi32 = 0;\n  strm->total_out_lo32 = 0;\n  strm->total_out_hi32 = 0;\n  init_RL(s);\n  prepare_new_block(s);\n  return 0;\n}\n\n",
            "calle": [
                "bz_config_ok",
                "default_bzalloc",
                "default_bzfree",
                "helper_BZ2_bzCompressInit_1",
                "init_RL",
                "prepare_new_block",
                "strm->bzalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "int",
                        "definition": [
                            "int blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "int",
                        "definition": [
                            "int workFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzCompress",
            "header": "extern int BZ2_bzCompress(bz_stream *strm, int action)",
            "params": [
                "bz_stream *strm",
                "int action"
            ],
            "definition": "int BZ2_bzCompress(bz_stream *strm, int action)\n{\n  Bool progress;\n  EState *s;\n  unsigned int s_idx = 0;\n  if (strm == 0)\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if ((&s[s_idx]) == 0)\n  {\n    return -2;\n  }\n  if (s->strm != strm)\n  {\n    return -2;\n  }\n  preswitch:\n  switch (s->mode)\n  {\n    case 1:\n    {\n      return -1;\n    }\n\n    case 2:\n    {\n      helper_BZ2_bzCompress_1(&progress, strm, action, s);\n    }\n\n    case 3:\n    {\n      helper_BZ2_bzCompress_2(&progress, strm, action, s);\n    }\n\n    case 4:\n    {\n      helper_BZ2_bzCompress_3(&progress, strm, action, s);\n    }\n\n  }\n\n\n  return 0;\n}\n\n",
            "calle": [
                "helper_BZ2_bzCompress_1",
                "helper_BZ2_bzCompress_2",
                "helper_BZ2_bzCompress_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "int",
                        "definition": [
                            "int action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "Bool",
                        "definition": [
                            "Bool progress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzCompressEnd",
            "header": "extern int BZ2_bzCompressEnd(bz_stream *strm)",
            "params": [
                "bz_stream *strm"
            ],
            "definition": "int BZ2_bzCompressEnd(bz_stream *strm)\n{\n  EState *s;\n  unsigned int s_idx = 0;\n  if (strm == 0)\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if ((&s[s_idx]) == 0)\n  {\n    return -2;\n  }\n  if (s->strm != strm)\n  {\n    return -2;\n  }\n  if (s->arr1 != 0)\n  {\n    strm->bzfree(strm->opaque, s->arr1);\n  }\n  if (s->arr2 != 0)\n  {\n    strm->bzfree(strm->opaque, s->arr2);\n  }\n  if (s->ftab != 0)\n  {\n    strm->bzfree(strm->opaque, s->ftab);\n  }\n  strm->bzfree(strm->opaque, strm->state);\n  strm->state = 0;\n  return 0;\n}\n\n",
            "calle": [
                "strm->bzfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzDecompressInit",
            "header": "extern int BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small)",
            "params": [
                "bz_stream *strm",
                "int verbosity",
                "int small"
            ],
            "definition": "int BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small)\n{\n  DState *s;\n  unsigned int s_idx = 0;\n  if (!bz_config_ok())\n  {\n    return -9;\n  }\n  if (strm == 0)\n  {\n    return -2;\n  }\n  if ((small != 0) && (small != 1))\n  {\n    return -2;\n  }\n  if ((verbosity < 0) || (verbosity > 4))\n  {\n    return -2;\n  }\n  if (strm->bzalloc == 0)\n  {\n    strm->bzalloc = default_bzalloc;\n  }\n  if (strm->bzfree == 0)\n  {\n    strm->bzfree = default_bzfree;\n  }\n  s_idx = strm->bzalloc(strm->opaque, sizeof(DState), 1);\n  if ((&s[s_idx]) == 0)\n  {\n    return -3;\n  }\n  s->strm = strm;\n  strm->state = &s[s_idx];\n  s->state = 10;\n  s->bsLive = 0;\n  s->bsBuff = 0;\n  s->calculatedCombinedCRC = 0;\n  strm->total_in_lo32 = 0;\n  strm->total_in_hi32 = 0;\n  strm->total_out_lo32 = 0;\n  strm->total_out_hi32 = 0;\n  s->smallDecompress = (Bool) small;\n  s->ll4 = 0;\n  s->ll16 = 0;\n  s->tt = 0;\n  s->currBlockNo = 0;\n  s->verbosity = verbosity;\n  return 0;\n}\n\n",
            "calle": [
                "bz_config_ok",
                "default_bzalloc",
                "default_bzfree",
                "strm->bzalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "small",
                        "type": "int",
                        "definition": [
                            "int small"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzDecompress",
            "header": "extern int BZ2_bzDecompress(bz_stream *strm)",
            "params": [
                "bz_stream *strm"
            ],
            "definition": "int BZ2_bzDecompress(bz_stream *strm)\n{\n  Bool corrupt;\n  DState *s;\n  unsigned int s_idx = 0;\n  if (strm == 0)\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if ((&s[s_idx]) == 0)\n  {\n    return -2;\n  }\n  if (s->strm != strm)\n  {\n    return -2;\n  }\n  while ((Bool) 1)\n  {\n    helper_BZ2_bzDecompress_1(&corrupt, s);\n  }\n\n  {\n    if (!0)\n    {\n      BZ2_bz__AssertH__fail(6001);\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "BZ2_bz__AssertH__fail",
                "helper_BZ2_bzDecompress_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "corrupt",
                        "type": "Bool",
                        "definition": [
                            "Bool corrupt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzDecompressEnd",
            "header": "extern int BZ2_bzDecompressEnd(bz_stream *strm)",
            "params": [
                "bz_stream *strm"
            ],
            "definition": "int BZ2_bzDecompressEnd(bz_stream *strm)\n{\n  DState *s;\n  unsigned int s_idx = 0;\n  if (strm == 0)\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if ((&s[s_idx]) == 0)\n  {\n    return -2;\n  }\n  if (s->strm != strm)\n  {\n    return -2;\n  }\n  if (s->tt != 0)\n  {\n    strm->bzfree(strm->opaque, s->tt);\n  }\n  if (s->ll16 != 0)\n  {\n    strm->bzfree(strm->opaque, s->ll16);\n  }\n  if (s->ll4 != 0)\n  {\n    strm->bzfree(strm->opaque, s->ll4);\n  }\n  strm->bzfree(strm->opaque, strm->state);\n  strm->state = 0;\n  return 0;\n}\n\n",
            "calle": [
                "strm->bzfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzReadOpen",
            "header": "extern BZFILE *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused)",
            "params": [
                "int *bzerror",
                "FILE *f",
                "int verbosity",
                "int small",
                "void *unused",
                "int nUnused"
            ],
            "definition": "BZFILE *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused)\n{\n  unsigned int unused_idx = 0;\n  bzFile *bzf = 0;\n  unsigned int bzf_idx = 0;\n  int ret;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  if (((((f == 0) || ((small != 0) && (small != 1))) || ((verbosity < 0) || (verbosity > 4))) || (((&unused[unused_idx]) == 0) && (nUnused != 0))) || (((&unused[unused_idx]) != 0) && ((nUnused < 0) || (nUnused > 5000))))\n  {\n    helper_BZ2_bzReadOpen_1(bzerror, bzf, bzf_idx);\n  }\n  ;\n  if (ferror(f))\n  {\n    helper_BZ2_bzReadOpen_2(bzerror, bzf, bzf_idx);\n  }\n  ;\n  bzf_idx = malloc(sizeof(bzFile));\n  if ((&bzf[bzf_idx]) == 0)\n  {\n    helper_BZ2_bzReadOpen_3(bzerror, bzf, bzf_idx);\n  }\n  ;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  bzf->initialisedOk = (Bool) 0;\n  bzf->handle = f;\n  bzf->bufN = 0;\n  bzf->writing = (Bool) 0;\n  bzf->strm.bzalloc = 0;\n  bzf->strm.bzfree = 0;\n  bzf->strm.opaque = 0;\n  while (nUnused > 0)\n  {\n    bzf->buf[bzf->bufN] = *((UChar *) unused);\n    bzf->bufN += 1;\n    unused_idx = (void *) (1 + ((UChar *) unused_idx));\n    nUnused -= 1;\n  }\n\n  ret = BZ2_bzDecompressInit(&bzf->strm, verbosity, small);\n  if (ret != 0)\n  {\n    helper_BZ2_bzReadOpen_4(bzerror, bzf, bzf_idx, ret);\n  }\n  ;\n  bzf->strm.avail_in = bzf->bufN;\n  bzf->strm.next_in = bzf->buf;\n  bzf->initialisedOk = (Bool) 1;\n  return bzf;\n}\n\n",
            "calle": [
                "BZ2_bzDecompressInit",
                "ferror",
                "helper_BZ2_bzReadOpen_1",
                "helper_BZ2_bzReadOpen_2",
                "helper_BZ2_bzReadOpen_3",
                "helper_BZ2_bzReadOpen_4",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "small",
                        "type": "int",
                        "definition": [
                            "int small"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "void *",
                        "definition": [
                            "void *unused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "int",
                        "definition": [
                            "int nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int unused_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzReadClose",
            "header": "extern void BZ2_bzReadClose(int *bzerror, BZFILE *b)",
            "params": [
                "int *bzerror",
                "BZFILE *b"
            ],
            "definition": "void BZ2_bzReadClose(int *bzerror, BZFILE *b)\n{\n  bzFile *bzf = (bzFile *) b;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  if (bzf == 0)\n  {\n    helper_BZ2_bzReadClose_1(bzerror, bzf);\n  }\n  ;\n  if (bzf->writing)\n  {\n    helper_BZ2_bzReadClose_2(bzerror, bzf);\n  }\n  ;\n  if (bzf->initialisedOk)\n  {\n    (void) BZ2_bzDecompressEnd(&bzf->strm);\n  }\n  free(bzf);\n}\n\n",
            "calle": [
                "BZ2_bzDecompressEnd",
                "free",
                "helper_BZ2_bzReadClose_1",
                "helper_BZ2_bzReadClose_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = (bzFile *) b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzReadGetUnused",
            "header": "extern void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused)",
            "params": [
                "int *bzerror",
                "BZFILE *b",
                "void **unused",
                "int *nUnused"
            ],
            "definition": "void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused)\n{\n  bzFile *bzf = (bzFile *) b;\n  if (bzf == 0)\n  {\n    helper_BZ2_bzReadGetUnused_1(bzerror, bzf);\n  }\n  ;\n  if (bzf->lastErr != 4)\n  {\n    helper_BZ2_bzReadGetUnused_2(bzerror, bzf);\n  }\n  ;\n  if ((unused == 0) || (nUnused == 0))\n  {\n    helper_BZ2_bzReadGetUnused_3(bzerror, bzf);\n  }\n  ;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  *nUnused = bzf->strm.avail_in;\n  *unused = bzf->strm.next_in;\n}\n\n",
            "calle": [
                "helper_BZ2_bzReadGetUnused_1",
                "helper_BZ2_bzReadGetUnused_2",
                "helper_BZ2_bzReadGetUnused_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "void **",
                        "definition": [
                            "void **unused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "int *",
                        "definition": [
                            "int *nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = (bzFile *) b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzRead",
            "header": "extern int BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)",
            "params": [
                "int *bzerror",
                "BZFILE *b",
                "void *buf",
                "int len"
            ],
            "definition": "int BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)\n{\n  Int32 n;\n  Int32 ret;\n  bzFile *bzf = (bzFile *) b;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  if (((bzf == 0) || (buf == 0)) || (len < 0))\n  {\n    helper_BZ2_bzRead_1(bzerror, bzf);\n  }\n  ;\n  if (bzf->writing)\n  {\n    helper_BZ2_bzRead_2(bzerror, bzf);\n  }\n  ;\n  if (len == 0)\n  {\n    helper_BZ2_bzRead_3(bzerror, bzf);\n  }\n  ;\n  bzf->strm.avail_out = len;\n  bzf->strm.next_out = buf;\n  while ((Bool) 1)\n  {\n    helper_BZ2_bzRead_4(&n, &ret, bzerror, len, bzf);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "helper_BZ2_bzRead_1",
                "helper_BZ2_bzRead_2",
                "helper_BZ2_bzRead_3",
                "helper_BZ2_bzRead_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "void *",
                        "definition": [
                            "void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = (bzFile *) b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzWriteOpen",
            "header": "extern BZFILE *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor)",
            "params": [
                "int *bzerror",
                "FILE *f",
                "int blockSize100k",
                "int verbosity",
                "int workFactor"
            ],
            "definition": "BZFILE *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor)\n{\n  Int32 ret;\n  bzFile *bzf = 0;\n  unsigned int bzf_idx = 0;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  if ((((f == 0) || ((blockSize100k < 1) || (blockSize100k > 9))) || ((workFactor < 0) || (workFactor > 250))) || ((verbosity < 0) || (verbosity > 4)))\n  {\n    helper_BZ2_bzWriteOpen_1(bzerror, bzf, bzf_idx);\n  }\n  ;\n  if (ferror(f))\n  {\n    helper_BZ2_bzWriteOpen_2(bzerror, bzf, bzf_idx);\n  }\n  ;\n  bzf_idx = malloc(sizeof(bzFile));\n  if ((&bzf[bzf_idx]) == 0)\n  {\n    helper_BZ2_bzWriteOpen_3(bzerror, bzf, bzf_idx);\n  }\n  ;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  bzf->initialisedOk = (Bool) 0;\n  bzf->bufN = 0;\n  bzf->handle = f;\n  bzf->writing = (Bool) 1;\n  bzf->strm.bzalloc = 0;\n  bzf->strm.bzfree = 0;\n  bzf->strm.opaque = 0;\n  if (workFactor == 0)\n  {\n    workFactor = 30;\n  }\n  ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);\n  if (ret != 0)\n  {\n    helper_BZ2_bzWriteOpen_4(bzerror, ret, bzf, bzf_idx);\n  }\n  ;\n  bzf->strm.avail_in = 0;\n  bzf->initialisedOk = (Bool) 1;\n  return bzf;\n}\n\n",
            "calle": [
                "BZ2_bzCompressInit",
                "ferror",
                "helper_BZ2_bzWriteOpen_1",
                "helper_BZ2_bzWriteOpen_2",
                "helper_BZ2_bzWriteOpen_3",
                "helper_BZ2_bzWriteOpen_4",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "int",
                        "definition": [
                            "int blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "int",
                        "definition": [
                            "int workFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzWrite",
            "header": "extern void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)",
            "params": [
                "int *bzerror",
                "BZFILE *b",
                "void *buf",
                "int len"
            ],
            "definition": "void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)\n{\n  Int32 n;\n  Int32 n2;\n  Int32 ret;\n  bzFile *bzf = (bzFile *) b;\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  if (((bzf == 0) || (buf == 0)) || (len < 0))\n  {\n    helper_BZ2_bzWrite_1(bzerror, bzf);\n  }\n  ;\n  if (!bzf->writing)\n  {\n    helper_BZ2_bzWrite_2(bzerror, bzf);\n  }\n  ;\n  if (ferror(bzf->handle))\n  {\n    helper_BZ2_bzWrite_3(bzerror, bzf);\n  }\n  ;\n  if (len == 0)\n  {\n    helper_BZ2_bzWrite_4(bzerror, bzf);\n  }\n  ;\n  bzf->strm.avail_in = len;\n  bzf->strm.next_in = buf;\n  while ((Bool) 1)\n  {\n    helper_BZ2_bzWrite_5(&n, &n2, &ret, bzerror, bzf);\n  }\n\n}\n\n",
            "calle": [
                "ferror",
                "helper_BZ2_bzWrite_1",
                "helper_BZ2_bzWrite_2",
                "helper_BZ2_bzWrite_3",
                "helper_BZ2_bzWrite_4",
                "helper_BZ2_bzWrite_5"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "void *",
                        "definition": [
                            "void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = (bzFile *) b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzWriteClose",
            "header": "extern void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out)",
            "params": [
                "int *bzerror",
                "BZFILE *b",
                "int abandon",
                "unsigned int *nbytes_in",
                "unsigned int *nbytes_out"
            ],
            "definition": "void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out)\n{\n  BZ2_bzWriteClose64(bzerror, b, abandon, nbytes_in, 0, nbytes_out, 0);\n}\n\n",
            "calle": [
                "BZ2_bzWriteClose64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "abandon",
                        "type": "int",
                        "definition": [
                            "int abandon"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_out"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzWriteClose64",
            "header": "extern void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in_lo32, unsigned int *nbytes_in_hi32, unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32)",
            "params": [
                "int *bzerror",
                "BZFILE *b",
                "int abandon",
                "unsigned int *nbytes_in_lo32",
                "unsigned int *nbytes_in_hi32",
                "unsigned int *nbytes_out_lo32",
                "unsigned int *nbytes_out_hi32"
            ],
            "definition": "void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in_lo32, unsigned int *nbytes_in_hi32, unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32)\n{\n  Int32 n;\n  Int32 n2;\n  Int32 ret;\n  bzFile *bzf = (bzFile *) b;\n  if (bzf == 0)\n  {\n    helper_BZ2_bzWriteClose64_1(bzerror, bzf);\n  }\n  ;\n  if (!bzf->writing)\n  {\n    helper_BZ2_bzWriteClose64_2(bzerror, bzf);\n  }\n  ;\n  if (ferror(bzf->handle))\n  {\n    helper_BZ2_bzWriteClose64_3(bzerror, bzf);\n  }\n  ;\n  if (nbytes_in_lo32 != 0)\n  {\n    *nbytes_in_lo32 = 0;\n  }\n  if (nbytes_in_hi32 != 0)\n  {\n    *nbytes_in_hi32 = 0;\n  }\n  if (nbytes_out_lo32 != 0)\n  {\n    *nbytes_out_lo32 = 0;\n  }\n  if (nbytes_out_hi32 != 0)\n  {\n    *nbytes_out_hi32 = 0;\n  }\n  if ((!abandon) && (bzf->lastErr == 0))\n  {\n    helper_BZ2_bzWriteClose64_5(&n, &n2, &ret, bzerror, bzf);\n  }\n  if ((!abandon) && (!ferror(bzf->handle)))\n  {\n    helper_BZ2_bzWriteClose64_4(bzerror, bzf);\n  }\n  if (nbytes_in_lo32 != 0)\n  {\n    *nbytes_in_lo32 = bzf->strm.total_in_lo32;\n  }\n  if (nbytes_in_hi32 != 0)\n  {\n    *nbytes_in_hi32 = bzf->strm.total_in_hi32;\n  }\n  if (nbytes_out_lo32 != 0)\n  {\n    *nbytes_out_lo32 = bzf->strm.total_out_lo32;\n  }\n  if (nbytes_out_hi32 != 0)\n  {\n    *nbytes_out_hi32 = bzf->strm.total_out_hi32;\n  }\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  BZ2_bzCompressEnd(&bzf->strm);\n  free(bzf);\n}\n\n",
            "calle": [
                "BZ2_bzCompressEnd",
                "ferror",
                "free",
                "helper_BZ2_bzWriteClose64_1",
                "helper_BZ2_bzWriteClose64_2",
                "helper_BZ2_bzWriteClose64_3",
                "helper_BZ2_bzWriteClose64_4",
                "helper_BZ2_bzWriteClose64_5"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int *",
                        "definition": [
                            "int *bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "abandon",
                        "type": "int",
                        "definition": [
                            "int abandon"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_lo32",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_in_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_hi32",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_in_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_lo32",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_out_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_hi32",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nbytes_out_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile *",
                        "definition": [
                            "bzFile *bzf = (bzFile *) b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzBuffToBuffCompress",
            "header": "extern int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)",
            "params": [
                "char *dest",
                "unsigned int *destLen",
                "char *source",
                "unsigned int sourceLen",
                "int blockSize100k",
                "int verbosity",
                "int workFactor"
            ],
            "definition": "int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)\n{\n  bz_stream strm;\n  int ret;\n  if (((((((((dest == 0) || (destLen == 0)) || (source == 0)) || (blockSize100k < 1)) || (blockSize100k > 9)) || (verbosity < 0)) || (verbosity > 4)) || (workFactor < 0)) || (workFactor > 250))\n  {\n    return -2;\n  }\n  if (workFactor == 0)\n  {\n    workFactor = 30;\n  }\n  strm.bzalloc = 0;\n  strm.bzfree = 0;\n  strm.opaque = 0;\n  ret = BZ2_bzCompressInit(&strm, blockSize100k, verbosity, workFactor);\n  if (ret != 0)\n  {\n    return ret;\n  }\n  strm.next_in = source;\n  strm.next_out = dest;\n  strm.avail_in = sourceLen;\n  strm.avail_out = *destLen;\n  ret = BZ2_bzCompress(&strm, 2);\n  if (ret == 3)\n  {\n    goto output_overflow;\n  }\n  if (ret != 4)\n  {\n    goto errhandler;\n  }\n  *destLen -= strm.avail_out;\n  BZ2_bzCompressEnd(&strm);\n  return 0;\n  output_overflow:\n  BZ2_bzCompressEnd(&strm);\n\n  return -8;\n  errhandler:\n  BZ2_bzCompressEnd(&strm);\n\n  return ret;\n}\n\n",
            "calle": [
                "BZ2_bzCompress",
                "BZ2_bzCompressEnd",
                "BZ2_bzCompressInit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "char *",
                        "definition": [
                            "char *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "char *",
                        "definition": [
                            "char *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sourceLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "int",
                        "definition": [
                            "int blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "int",
                        "definition": [
                            "int workFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream",
                        "definition": [
                            "bz_stream strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzBuffToBuffDecompress",
            "header": "extern int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)",
            "params": [
                "char *dest",
                "unsigned int *destLen",
                "char *source",
                "unsigned int sourceLen",
                "int small",
                "int verbosity"
            ],
            "definition": "int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)\n{\n  bz_stream strm;\n  int ret;\n  if ((((((dest == 0) || (destLen == 0)) || (source == 0)) || ((small != 0) && (small != 1))) || (verbosity < 0)) || (verbosity > 4))\n  {\n    return -2;\n  }\n  strm.bzalloc = 0;\n  strm.bzfree = 0;\n  strm.opaque = 0;\n  ret = BZ2_bzDecompressInit(&strm, verbosity, small);\n  if (ret != 0)\n  {\n    return ret;\n  }\n  strm.next_in = source;\n  strm.next_out = dest;\n  strm.avail_in = sourceLen;\n  strm.avail_out = *destLen;\n  ret = BZ2_bzDecompress(&strm);\n  if (ret == 0)\n  {\n    goto output_overflow_or_eof;\n  }\n  if (ret != 4)\n  {\n    goto errhandler;\n  }\n  *destLen -= strm.avail_out;\n  BZ2_bzDecompressEnd(&strm);\n  return 0;\n  output_overflow_or_eof:\n  if (strm.avail_out > 0)\n  {\n    BZ2_bzDecompressEnd(&strm);\n    return -7;\n  }\n  else\n  {\n    BZ2_bzDecompressEnd(&strm);\n    return -8;\n  }\n\n  ;\n  errhandler:\n  BZ2_bzDecompressEnd(&strm);\n\n  return ret;\n}\n\n",
            "calle": [
                "BZ2_bzDecompress",
                "BZ2_bzDecompressEnd",
                "BZ2_bzDecompressInit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "char *",
                        "definition": [
                            "char *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "char *",
                        "definition": [
                            "char *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sourceLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "small",
                        "type": "int",
                        "definition": [
                            "int small"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream",
                        "definition": [
                            "bz_stream strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzlibVersion",
            "header": "extern const char *BZ2_bzlibVersion(void)",
            "params": [
                "void"
            ],
            "definition": "const char *BZ2_bzlibVersion(void)\n{\n  return \"1.1.0\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzopen",
            "header": "extern BZFILE *BZ2_bzopen(const char *path, const char *mode)",
            "params": [
                "const char *path",
                "const char *mode"
            ],
            "definition": "BZFILE *BZ2_bzopen(const char *path, const char *mode)\n{\n  return bzopen_or_bzdopen(path, -1, mode, 0);\n}\n\n",
            "calle": [
                "bzopen_or_bzdopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzdopen",
            "header": "extern BZFILE *BZ2_bzdopen(int fd, const char *mode)",
            "params": [
                "int fd",
                "const char *mode"
            ],
            "definition": "BZFILE *BZ2_bzdopen(int fd, const char *mode)\n{\n  return bzopen_or_bzdopen(0, fd, mode, 1);\n}\n\n",
            "calle": [
                "bzopen_or_bzdopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzread",
            "header": "extern int BZ2_bzread(BZFILE *b, void *buf, int len)",
            "params": [
                "BZFILE *b",
                "void *buf",
                "int len"
            ],
            "definition": "int BZ2_bzread(BZFILE *b, void *buf, int len)\n{\n  int bzerr;\n  int nread;\n  if (((bzFile *) b)->lastErr == 4)\n  {\n    return 0;\n  }\n  nread = BZ2_bzRead(&bzerr, b, buf, len);\n  if ((bzerr == 0) || (bzerr == 4))\n  {\n    return nread;\n  }\n  else\n  {\n    return -1;\n  }\n}\n\n",
            "calle": [
                "BZ2_bzRead"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "void *",
                        "definition": [
                            "void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "int",
                        "definition": [
                            "int bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread",
                        "type": "int",
                        "definition": [
                            "int nread"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzwrite",
            "header": "extern int BZ2_bzwrite(BZFILE *b, void *buf, int len)",
            "params": [
                "BZFILE *b",
                "void *buf",
                "int len"
            ],
            "definition": "int BZ2_bzwrite(BZFILE *b, void *buf, int len)\n{\n  int bzerr;\n  BZ2_bzWrite(&bzerr, b, buf, len);\n  if (bzerr == 0)\n  {\n    return len;\n  }\n  else\n  {\n    return -1;\n  }\n}\n\n",
            "calle": [
                "BZ2_bzWrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "void *",
                        "definition": [
                            "void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "int",
                        "definition": [
                            "int bzerr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzflush",
            "header": "extern int BZ2_bzflush(BZFILE *b)",
            "params": [
                "BZFILE *b"
            ],
            "definition": "int BZ2_bzflush(BZFILE *b)\n{\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzclose",
            "header": "extern void BZ2_bzclose(BZFILE *b)",
            "params": [
                "BZFILE *b"
            ],
            "definition": "void BZ2_bzclose(BZFILE *b)\n{\n  int bzerr;\n  FILE *fp;\n  unsigned int fp_idx = 0;\n  if (b == 0)\n  {\n    return;\n  }\n  fp_idx = ((bzFile *) b)->handle;\n  if (((bzFile *) b)->writing)\n  {\n    BZ2_bzWriteClose(&bzerr, b, 0, 0, 0);\n    if (bzerr != 0)\n    {\n      BZ2_bzWriteClose(0, b, 1, 0, 0);\n    }\n  }\n  else\n  {\n    BZ2_bzReadClose(&bzerr, b);\n  }\n  if (((&fp[fp_idx]) != stdin) && ((&fp[fp_idx]) != stdout))\n  {\n    fclose(fp);\n  }\n}\n\n",
            "calle": [
                "BZ2_bzReadClose",
                "BZ2_bzWriteClose",
                "fclose"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "int",
                        "definition": [
                            "int bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fp_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bzerror",
            "header": "extern const char *BZ2_bzerror(BZFILE *b, int *errnum)",
            "params": [
                "BZFILE *b",
                "int *errnum"
            ],
            "definition": "const char *BZ2_bzerror(BZFILE *b, int *errnum)\n{\n  int err = ((bzFile *) b)->lastErr;\n  if (err > 0)\n  {\n    err = 0;\n  }\n  *errnum = err;\n  return bzerrorstrings[err * (-1)];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errnum",
                        "type": "int *",
                        "definition": [
                            "int *errnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((bzFile *) b)->lastErr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerrorstrings",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_bz__AssertH__fail",
            "header": "extern void BZ2_bz__AssertH__fail(int errcode)",
            "params": [
                "int errcode"
            ],
            "definition": "void BZ2_bz__AssertH__fail(int errcode)\n{\n  fprintf(stderr, \"\\n\\nbzip2/libbzip2: internal error number %d.\\nThis is a bug in bzip2/libbzip2, %s.\\nPlease report it at: https://gitlab.com/bzip2/bzip2/-/issues\\nIf this happened when you were using some program which uses\\nlibbzip2 as a component, you should also report this bug to\\nthe author(s) of that program.\\nPlease make an effort to report this bug;\\ntimely and accurate bug reports eventually lead to higher\\nquality software.  Thanks.\\n\\n\", errcode, BZ2_bzlibVersion());\n  if (errcode == 1007)\n  {\n    fprintf(stderr, \"\\n*** A special note about internal error number 1007 ***\\n\\nExperience suggests that a common cause of i.e. 1007\\nis unreliable memory or other hardware.  The 1007 assertion\\njust happens to cross-check the results of huge numbers of\\nmemory reads/writes, and so acts (unintendedly) as a stress\\ntest of your memory system.\\n\\nI suggest the following: try compressing the file again,\\npossibly monitoring progress in detail with the -vv flag.\\n\\n* If the error cannot be reproduced, and/or happens at different\\n  points in compression, you may have a flaky memory system.\\n  Try a memory-test program.  I have used Memtest86\\n  (www.memtest86.com).  At the time of writing it is free (GPLd).\\n  Memtest86 tests memory much more thorougly than your BIOSs\\n  power-on test, and may find failures that the BIOS doesn't.\\n\\n* If the error can be repeatably reproduced, this is a bug in\\n  bzip2, and I would very much like to hear about it.  Please\\n  let me know, and, ideally, save a copy of the file causing the\\n  problem -- without which I will be unable to investigate it.\\n\\n\");\n  }\n  exit(3);\n}\n\n",
            "calle": [
                "BZ2_bzlibVersion",
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "errcode",
                        "type": "int",
                        "definition": [
                            "int errcode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BZ2_indexIntoF",
            "header": "extern Int32 BZ2_indexIntoF(Int32, Int32 *)",
            "params": [
                "Int32 indx",
                "Int32 *cftab"
            ],
            "definition": "Int32 BZ2_indexIntoF(Int32 indx, Int32 *cftab)\n{\n  Int32 nb;\n  Int32 na;\n  Int32 mid;\n  nb = 0;\n  na = 256;\n  do\n  {\n    mid = (nb + na) >> 1;\n    if (indx >= cftab[mid])\n    {\n      nb = mid;\n    }\n    else\n      na = mid;\n  }\n  while ((na - nb) != 1);\n  return nb;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "indx",
                        "type": "Int32",
                        "definition": [
                            "Int32 indx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cftab",
                        "type": "Int32 *",
                        "definition": [
                            "Int32 *cftab"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "Int32",
                        "definition": [
                            "Int32 nb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "na",
                        "type": "Int32",
                        "definition": [
                            "Int32 na"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mid",
                        "type": "Int32",
                        "definition": [
                            "Int32 mid"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bz_config_ok",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static int bz_config_ok(void)\n{\n  if ((sizeof(int)) != 4)\n  {\n    return 0;\n  }\n  if ((sizeof(short)) != 2)\n  {\n    return 0;\n  }\n  if ((sizeof(char)) != 1)\n  {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "default_bzalloc",
            "header": "",
            "params": [
                "void *opaque",
                "Int32 items",
                "Int32 size"
            ],
            "definition": "static void *default_bzalloc(void *opaque, Int32 items, Int32 size)\n{\n  void *v = malloc(items * size);\n  return v;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "items",
                        "type": "Int32",
                        "definition": [
                            "Int32 items"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "Int32",
                        "definition": [
                            "Int32 size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "void *",
                        "definition": [
                            "void *v = malloc(items * size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "default_bzfree",
            "header": "",
            "params": [
                "void *opaque",
                "void *addr"
            ],
            "definition": "static void default_bzfree(void *opaque, void *addr)\n{\n  if (addr != 0)\n  {\n    free(addr);\n  }\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "addr",
                        "type": "void *",
                        "definition": [
                            "void *addr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prepare_new_block",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void prepare_new_block(EState *s)\n{\n  Int32 i;\n  s->nblock = 0;\n  s->numZ = 0;\n  s->state_out_pos = 0;\n  {\n    s->blockCRC = 0xffffffffL;\n  }\n  ;\n  for (i = 0; i < 256; i += 1)\n    s->inUse[i] = (Bool) 0;\n\n  s->blockNo += 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "init_RL",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void init_RL(EState *s)\n{\n  s->state_in_ch = 256;\n  s->state_in_len = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "isempty_RL",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static Bool isempty_RL(EState *s)\n{\n  if ((s->state_in_ch < 256) && (s->state_in_len > 0))\n  {\n    return (Bool) 0;\n  }\n  else\n    return (Bool) 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "add_pair_to_block",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void add_pair_to_block(EState *s)\n{\n  Int32 i;\n  UChar ch = (UChar) s->state_in_ch;\n  for (i = 0; i < s->state_in_len; i += 1)\n  {\n    {\n      s->blockCRC = (s->blockCRC << 8) ^ BZ2_crc32Table[(s->blockCRC >> 24) ^ ((UChar) ch)];\n    }\n    ;\n  }\n\n  s->inUse[s->state_in_ch] = (Bool) 1;\n  switch (s->state_in_len)\n  {\n    case 1:\n    {\n      s->block[s->nblock] = (UChar) ch;\n      s->nblock += 1;\n      break;\n    }\n\n    case 2:\n    {\n      s->block[s->nblock] = (UChar) ch;\n      s->nblock += 1;\n      s->block[s->nblock] = (UChar) ch;\n      s->nblock += 1;\n      break;\n    }\n\n    case 3:\n    {\n      helper_add_pair_to_block_1(s, ch);\n    }\n\n    default:\n    {\n      helper_add_pair_to_block_2(s, ch);\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "helper_add_pair_to_block_1",
                "helper_add_pair_to_block_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "UChar",
                        "definition": [
                            "UChar ch = (UChar) s->state_in_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "flush_RL",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static void flush_RL(EState *s)\n{\n  if (s->state_in_ch < 256)\n  {\n    add_pair_to_block(s);\n  }\n  init_RL(s);\n}\n\n",
            "calle": [
                "add_pair_to_block",
                "init_RL"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_input_until_stop",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static Bool copy_input_until_stop(EState *s)\n{\n  Bool progress_in = (Bool) 0;\n  if (s->mode == 2)\n  {\n    helper_copy_input_until_stop_1(&progress_in, s);\n  }\n  else\n  {\n    helper_copy_input_until_stop_2(&progress_in, s);\n  }\n  return progress_in;\n}\n\n",
            "calle": [
                "helper_copy_input_until_stop_1",
                "helper_copy_input_until_stop_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = (Bool) 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_output_until_stop",
            "header": "",
            "params": [
                "EState *s"
            ],
            "definition": "static Bool copy_output_until_stop(EState *s)\n{\n  Bool progress_out = (Bool) 0;\n  while ((Bool) 1)\n  {\n    if (s->strm->avail_out == 0)\n    {\n      break;\n    }\n    if (s->state_out_pos >= s->numZ)\n    {\n      break;\n    }\n    progress_out = (Bool) 1;\n    *s->strm->next_out = s->zbits[s->state_out_pos];\n    s->state_out_pos += 1;\n    s->strm->avail_out -= 1;\n    s->strm->next_out += 1;\n    s->strm->total_out_lo32 += 1;\n    if (s->strm->total_out_lo32 == 0)\n    {\n      s->strm->total_out_hi32 += 1;\n    }\n  }\n\n  return progress_out;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_out",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_out = (Bool) 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "handle_compress",
            "header": "",
            "params": [
                "bz_stream *strm"
            ],
            "definition": "static Bool handle_compress(bz_stream *strm)\n{\n  Bool progress_in = (Bool) 0;\n  Bool progress_out = (Bool) 0;\n  EState *s = strm->state;\n  while ((Bool) 1)\n  {\n    if (s->state == 1)\n    {\n      progress_out |= copy_output_until_stop(s);\n      if (s->state_out_pos < s->numZ)\n      {\n        break;\n      }\n      if (((s->mode == 4) && (s->avail_in_expect == 0)) && isempty_RL(s))\n      {\n        break;\n      }\n      prepare_new_block(s);\n      s->state = 2;\n      if (((s->mode == 3) && (s->avail_in_expect == 0)) && isempty_RL(s))\n      {\n        break;\n      }\n    }\n    if (s->state == 2)\n    {\n      progress_in |= copy_input_until_stop(s);\n      if ((s->mode != 2) && (s->avail_in_expect == 0))\n      {\n        flush_RL(s);\n        BZ2_compressBlock(s, (Bool) (s->mode == 4));\n        s->state = 1;\n      }\n      else\n        if (s->nblock >= s->nblockMAX)\n      {\n        BZ2_compressBlock(s, (Bool) 0);\n        s->state = 1;\n      }\n      else\n        if (s->strm->avail_in == 0)\n      {\n        break;\n      }\n    }\n  }\n\n  return progress_in || progress_out;\n}\n\n",
            "calle": [
                "BZ2_compressBlock",
                "copy_input_until_stop",
                "copy_output_until_stop",
                "flush_RL",
                "isempty_RL",
                "prepare_new_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream *",
                        "definition": [
                            "bz_stream *strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = (Bool) 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_out",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_out = (Bool) 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState *",
                        "definition": [
                            "EState *s = strm->state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "unRLE_obuf_to_output_FAST",
            "header": "",
            "params": [
                "DState *s"
            ],
            "definition": "static Bool unRLE_obuf_to_output_FAST(DState *s)\n{\n  UChar k1;\n  if (s->blockRandomised)\n  {\n    helper_unRLE_obuf_to_output_FAST_2(&k1, s);\n  }\n  else\n  {\n    helper_unRLE_obuf_to_output_FAST_1(&k1, s);\n  }\n  return (Bool) 0;\n}\n\n",
            "calle": [
                "helper_unRLE_obuf_to_output_FAST_1",
                "helper_unRLE_obuf_to_output_FAST_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "unRLE_obuf_to_output_SMALL",
            "header": "",
            "params": [
                "DState *s"
            ],
            "definition": "static Bool unRLE_obuf_to_output_SMALL(DState *s)\n{\n  UChar k1;\n  if (s->blockRandomised)\n  {\n    helper_unRLE_obuf_to_output_SMALL_2(&k1, s);\n  }\n  else\n  {\n    helper_unRLE_obuf_to_output_SMALL_1(&k1, s);\n  }\n}\n\n",
            "calle": [
                "helper_unRLE_obuf_to_output_SMALL_1",
                "helper_unRLE_obuf_to_output_SMALL_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState *",
                        "definition": [
                            "DState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "myfeof",
            "header": "",
            "params": [
                "FILE *f"
            ],
            "definition": "static Bool myfeof(FILE *f)\n{\n  Int32 c = fgetc(f);\n  if (c == EOF)\n  {\n    return (Bool) 1;\n  }\n  ungetc(c, f);\n  return (Bool) 0;\n}\n\n",
            "calle": [
                "fgetc",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "Int32",
                        "definition": [
                            "Int32 c = fgetc(f)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bzopen_or_bzdopen",
            "header": "",
            "params": [
                "const char *path",
                "int fd",
                "const char *mode",
                "int open_mode"
            ],
            "definition": "static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode, int open_mode)\n{\n  unsigned int mode_idx = 0;\n  int bzerr;\n  char unused[5000];\n  int blockSize100k = 9;\n  int writing = 0;\n  char mode2[10] = \"\";\n  FILE *fp = 0;\n  unsigned int fp_idx = 0;\n  BZFILE *bzfp = 0;\n  unsigned int bzfp_idx = 0;\n  int verbosity = 0;\n  int workFactor = 30;\n  int smallMode = 0;\n  int nUnused = 0;\n  if ((&mode[mode_idx]) == 0)\n  {\n    return 0;\n  }\n  while (mode[mode_idx])\n  {\n    helper_bzopen_or_bzdopen_1(&mode_idx, &blockSize100k, &writing, &smallMode, mode);\n  }\n\n  strcat(mode2, (writing) ? (\"wb\") : (\"rb\"));\n  if (open_mode == 0)\n  {\n    strcat(mode2, (writing) ? (\"e\") : (\"e\"));\n  }\n  if (open_mode == 0)\n  {\n    if ((path == 0) || (strcmp(path, \"\") == 0))\n    {\n      fp_idx = (writing) ? (stdout) : (stdin);\n      ;\n    }\n    else\n    {\n      fp_idx = fopen(path, mode2);\n    }\n  }\n  else\n  {\n    fp_idx = fdopen(fd, mode2);\n  }\n  if ((&fp[fp_idx]) == 0)\n  {\n    return 0;\n  }\n  if (writing)\n  {\n    if (blockSize100k < 1)\n    {\n      blockSize100k = 1;\n    }\n    if (blockSize100k > 9)\n    {\n      blockSize100k = 9;\n    }\n    bzfp_idx = BZ2_bzWriteOpen(&bzerr, fp, blockSize100k, verbosity, workFactor);\n  }\n  else\n  {\n    bzfp_idx = BZ2_bzReadOpen(&bzerr, fp, verbosity, smallMode, unused, nUnused);\n  }\n  if ((&bzfp[bzfp_idx]) == 0)\n  {\n    if (((&fp[fp_idx]) != stdin) && ((&fp[fp_idx]) != stdout))\n    {\n      fclose(fp);\n    }\n    return 0;\n  }\n  return bzfp;\n}\n\n",
            "calle": [
                "BZ2_bzReadOpen",
                "BZ2_bzWriteOpen",
                "fclose",
                "fdopen",
                "fopen",
                "helper_bzopen_or_bzdopen_1",
                "strcat",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open_mode",
                        "type": "int",
                        "definition": [
                            "int open_mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int mode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "int",
                        "definition": [
                            "int bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "char [5000]",
                        "definition": [
                            "char unused[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "int",
                        "definition": [
                            "int blockSize100k = 9"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writing",
                        "type": "int",
                        "definition": [
                            "int writing = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode2",
                        "type": "char [10]",
                        "definition": [
                            "char mode2[10] = \"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzfp",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *bzfp = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzfp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzfp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "int",
                        "definition": [
                            "int workFactor = 30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "int",
                        "definition": [
                            "int smallMode = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "int",
                        "definition": [
                            "int nUnused = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzCompressInit_1",
            "header": "",
            "params": [
                "bz_stream * const strm",
                "EState * const s",
                "unsigned int s_idx"
            ],
            "definition": "int helper_BZ2_bzCompressInit_1(bz_stream * const strm, EState * const s, unsigned int s_idx)\n{\n  if (s->arr1 != 0)\n  {\n    strm->bzfree(strm->opaque, s->arr1);\n  }\n  if (s->arr2 != 0)\n  {\n    strm->bzfree(strm->opaque, s->arr2);\n  }\n  if (s->ftab != 0)\n  {\n    strm->bzfree(strm->opaque, s->ftab);\n  }\n  if ((&s[s_idx]) != 0)\n  {\n    strm->bzfree(strm->opaque, s);\n  }\n  return -3;\n}\n\n",
            "calle": [
                "strm->bzfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_add_pair_to_block_1",
            "header": "",
            "params": [
                "EState * const s",
                "UChar ch"
            ],
            "definition": "void helper_add_pair_to_block_1(EState * const s, UChar ch)\n{\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "UChar",
                        "definition": [
                            "UChar ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_add_pair_to_block_2",
            "header": "",
            "params": [
                "EState * const s",
                "UChar ch"
            ],
            "definition": "void helper_add_pair_to_block_2(EState * const s, UChar ch)\n{\n  s->inUse[s->state_in_len - 4] = (Bool) 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) ch;\n  s->nblock += 1;\n  s->block[s->nblock] = (UChar) (s->state_in_len - 4);\n  s->nblock += 1;\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "UChar",
                        "definition": [
                            "UChar ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_copy_input_until_stop_1",
            "header": "",
            "params": [
                "Bool * const progress_in_ref",
                "EState * const s"
            ],
            "definition": "void helper_copy_input_until_stop_1(Bool * const progress_in_ref, EState * const s)\n{\n  Bool progress_in = *progress_in_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_copy_input_until_stop_1_1(&progress_in, s);\n  }\n\n  *progress_in_ref = progress_in;\n}\n\n",
            "calle": [
                "helper_helper_copy_input_until_stop_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_in_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_in_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = *progress_in_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_copy_input_until_stop_2",
            "header": "",
            "params": [
                "Bool * const progress_in_ref",
                "EState * const s"
            ],
            "definition": "void helper_copy_input_until_stop_2(Bool * const progress_in_ref, EState * const s)\n{\n  Bool progress_in = *progress_in_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_copy_input_until_stop_2_1(&progress_in, s);\n  }\n\n  *progress_in_ref = progress_in;\n}\n\n",
            "calle": [
                "helper_helper_copy_input_until_stop_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_in_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_in_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = *progress_in_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzCompress_1",
            "header": "",
            "params": [
                "Bool * const progress_ref",
                "bz_stream * const strm",
                "int action",
                "EState * const s"
            ],
            "definition": "int helper_BZ2_bzCompress_1(Bool * const progress_ref, bz_stream * const strm, int action, EState * const s)\n{\n  Bool progress = *progress_ref;\n  if (action == 0)\n  {\n    progress = handle_compress(strm);\n    return (progress) ? (1) : (-2);\n  }\n  else\n    if (action == 1)\n  {\n    s->avail_in_expect = strm->avail_in;\n    s->mode = 3;\n    goto preswitch;\n  }\n  else\n    if (action == 2)\n  {\n    s->avail_in_expect = strm->avail_in;\n    s->mode = 4;\n    goto preswitch;\n  }\n  else\n    return -2;\n  *progress_ref = progress;\n}\n\n",
            "calle": [
                "handle_compress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "int",
                        "definition": [
                            "int action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "Bool",
                        "definition": [
                            "Bool progress = *progress_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzCompress_2",
            "header": "",
            "params": [
                "Bool * const progress_ref",
                "bz_stream * const strm",
                "int action",
                "EState * const s"
            ],
            "definition": "int helper_BZ2_bzCompress_2(Bool * const progress_ref, bz_stream * const strm, int action, EState * const s)\n{\n  Bool progress = *progress_ref;\n  if (action != 1)\n  {\n    return -1;\n  }\n  if (s->avail_in_expect != s->strm->avail_in)\n  {\n    return -1;\n  }\n  progress = handle_compress(strm);\n  if (((s->avail_in_expect > 0) || (!isempty_RL(s))) || (s->state_out_pos < s->numZ))\n  {\n    return 2;\n  }\n  s->mode = 2;\n  return 1;\n  *progress_ref = progress;\n}\n\n",
            "calle": [
                "handle_compress",
                "isempty_RL"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "int",
                        "definition": [
                            "int action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "Bool",
                        "definition": [
                            "Bool progress = *progress_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzCompress_3",
            "header": "",
            "params": [
                "Bool * const progress_ref",
                "bz_stream * const strm",
                "int action",
                "EState * const s"
            ],
            "definition": "int helper_BZ2_bzCompress_3(Bool * const progress_ref, bz_stream * const strm, int action, EState * const s)\n{\n  Bool progress = *progress_ref;\n  if (action != 2)\n  {\n    return -1;\n  }\n  if (s->avail_in_expect != s->strm->avail_in)\n  {\n    return -1;\n  }\n  progress = handle_compress(strm);\n  if (!progress)\n  {\n    return -1;\n  }\n  if (((s->avail_in_expect > 0) || (!isempty_RL(s))) || (s->state_out_pos < s->numZ))\n  {\n    return 3;\n  }\n  s->mode = 1;\n  return 4;\n  *progress_ref = progress;\n}\n\n",
            "calle": [
                "handle_compress",
                "isempty_RL"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "bz_stream * const",
                        "definition": [
                            "bz_stream * const strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "int",
                        "definition": [
                            "int action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "Bool",
                        "definition": [
                            "Bool progress = *progress_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_unRLE_obuf_to_output_FAST_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_unRLE_obuf_to_output_FAST_1(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  UInt32 c_calculatedBlockCRC = s->calculatedBlockCRC;\n  UChar c_state_out_ch = s->state_out_ch;\n  Int32 c_state_out_len = s->state_out_len;\n  Int32 c_nblock_used = s->nblock_used;\n  Int32 c_k0 = s->k0;\n  UInt32 *c_tt = s->tt;\n  UInt32 c_tPos = s->tPos;\n  char *cs_next_out = s->strm->next_out;\n  unsigned int cs_next_out_idx = 0;\n  unsigned int cs_avail_out = s->strm->avail_out;\n  Int32 ro_blockSize100k = s->blockSize100k;\n  UInt32 avail_out_INIT = cs_avail_out;\n  Int32 s_save_nblockPP = s->save_nblock + 1;\n  unsigned int total_out_lo32_old;\n  while ((Bool) 1)\n  {\n    helper_helper_unRLE_obuf_to_output_FAST_1_1(&k1, &c_calculatedBlockCRC, &c_state_out_ch, &c_state_out_len, &c_nblock_used, &c_k0, &c_tPos, &cs_next_out_idx, &cs_avail_out, c_tt, cs_next_out, ro_blockSize100k, s_save_nblockPP);\n  }\n\n  return_notr:\n  total_out_lo32_old = s->strm->total_out_lo32;\n\n  s->strm->total_out_lo32 += avail_out_INIT - cs_avail_out;\n  if (s->strm->total_out_lo32 < total_out_lo32_old)\n  {\n    s->strm->total_out_hi32 += 1;\n  }\n  s->calculatedBlockCRC = c_calculatedBlockCRC;\n  s->state_out_ch = c_state_out_ch;\n  s->state_out_len = c_state_out_len;\n  s->nblock_used = c_nblock_used;\n  s->k0 = c_k0;\n  s->tt = c_tt;\n  s->tPos = c_tPos;\n  s->strm->next_out = &cs_next_out[cs_next_out_idx];\n  s->strm->avail_out = cs_avail_out;\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "helper_helper_unRLE_obuf_to_output_FAST_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_calculatedBlockCRC = s->calculatedBlockCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar c_state_out_ch = s->state_out_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_state_out_len = s->state_out_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_nblock_used",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_nblock_used = s->nblock_used"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_k0",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_k0 = s->k0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_tt",
                        "type": "UInt32 *",
                        "definition": [
                            "UInt32 *c_tt = s->tt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_tPos",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_tPos = s->tPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out",
                        "type": "char *",
                        "definition": [
                            "char *cs_next_out = s->strm->next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_next_out_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_avail_out = s->strm->avail_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ro_blockSize100k",
                        "type": "Int32",
                        "definition": [
                            "Int32 ro_blockSize100k = s->blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out_INIT",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 avail_out_INIT = cs_avail_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_save_nblockPP",
                        "type": "Int32",
                        "definition": [
                            "Int32 s_save_nblockPP = s->save_nblock + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_out_lo32_old",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int total_out_lo32_old"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_unRLE_obuf_to_output_FAST_2",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_unRLE_obuf_to_output_FAST_2(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_unRLE_obuf_to_output_FAST_2_1(&k1, s);\n  }\n\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "helper_helper_unRLE_obuf_to_output_FAST_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_unRLE_obuf_to_output_SMALL_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_unRLE_obuf_to_output_SMALL_1(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_unRLE_obuf_to_output_SMALL_1_1(&k1, s);\n  }\n\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "helper_helper_unRLE_obuf_to_output_SMALL_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_unRLE_obuf_to_output_SMALL_2",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_unRLE_obuf_to_output_SMALL_2(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_unRLE_obuf_to_output_SMALL_2_1(&k1, s);\n  }\n\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "helper_helper_unRLE_obuf_to_output_SMALL_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzDecompress_1",
            "header": "",
            "params": [
                "Bool * const corrupt_ref",
                "DState * const s"
            ],
            "definition": "int helper_BZ2_bzDecompress_1(Bool * const corrupt_ref, DState * const s)\n{\n  Bool corrupt = *corrupt_ref;\n  if (s->state == 1)\n  {\n    return -1;\n  }\n  if (s->state == 2)\n  {\n    helper_helper_BZ2_bzDecompress_1_2(&corrupt, s);\n  }\n  if (s->state >= 10)\n  {\n    helper_helper_BZ2_bzDecompress_1_1(s);\n  }\n  *corrupt_ref = corrupt;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_bzDecompress_1_1",
                "helper_helper_BZ2_bzDecompress_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "corrupt_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const corrupt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "corrupt",
                        "type": "Bool",
                        "definition": [
                            "Bool corrupt = *corrupt_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteOpen_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzWriteOpen_1(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteOpen_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzWriteOpen_2(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -6;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -6;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteOpen_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzWriteOpen_3(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -3;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -3;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteOpen_4",
            "header": "",
            "params": [
                "int * const bzerror",
                "Int32 ret",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzWriteOpen_4(int * const bzerror, Int32 ret, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = ret;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = ret;\n    }\n  }\n  ;\n  free(bzf);\n  return 0;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWrite_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWrite_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWrite_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWrite_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -1;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -1;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWrite_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWrite_3(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -6;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -6;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWrite_4",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWrite_4(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWrite_5",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const n2_ref",
                "Int32 * const ret_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWrite_5(Int32 * const n_ref, Int32 * const n2_ref, Int32 * const ret_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 n2 = *n2_ref;\n  Int32 ret = *ret_ref;\n  bzf->strm.avail_out = 5000;\n  bzf->strm.next_out = bzf->buf;\n  ret = BZ2_bzCompress(&bzf->strm, 0);\n  if (ret != 1)\n  {\n    helper_helper_BZ2_bzWrite_5_1(bzerror, bzf, ret);\n  }\n  ;\n  if (bzf->strm.avail_out < 5000)\n  {\n    helper_helper_BZ2_bzWrite_5_3(&n, &n2, bzerror, bzf);\n  }\n  if (bzf->strm.avail_in == 0)\n  {\n    helper_helper_BZ2_bzWrite_5_2(bzerror, bzf);\n  }\n  ;\n  *n_ref = n;\n  *n2_ref = n2;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "BZ2_bzCompress",
                "helper_helper_BZ2_bzWrite_5_1",
                "helper_helper_BZ2_bzWrite_5_2",
                "helper_helper_BZ2_bzWrite_5_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteClose64_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWriteClose64_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteClose64_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWriteClose64_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -1;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -1;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteClose64_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWriteClose64_3(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -6;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -6;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteClose64_4",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWriteClose64_4(int * const bzerror, bzFile * const bzf)\n{\n  fflush(bzf->handle);\n  if (ferror(bzf->handle))\n  {\n    {\n      if (bzerror != 0)\n      {\n        *bzerror = -6;\n      }\n      if (bzf != 0)\n      {\n        bzf->lastErr = -6;\n      }\n    }\n    ;\n    return;\n  }\n  ;\n}\n\n",
            "calle": [
                "ferror",
                "fflush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzWriteClose64_5",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const n2_ref",
                "Int32 * const ret_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzWriteClose64_5(Int32 * const n_ref, Int32 * const n2_ref, Int32 * const ret_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 n2 = *n2_ref;\n  Int32 ret = *ret_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_BZ2_bzWriteClose64_5_1(&n, &n2, &ret, bzerror, bzf);\n  }\n\n  *n_ref = n;\n  *n2_ref = n2;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_BZ2_bzWriteClose64_5_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadOpen_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzReadOpen_1(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadOpen_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzReadOpen_2(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -6;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -6;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadOpen_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx"
            ],
            "definition": "BZFILE *helper_BZ2_bzReadOpen_3(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -3;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = -3;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadOpen_4",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "unsigned int bzf_idx",
                "int ret"
            ],
            "definition": "BZFILE *helper_BZ2_bzReadOpen_4(int * const bzerror, bzFile * const bzf, unsigned int bzf_idx, int ret)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = ret;\n    }\n    if ((&bzf[bzf_idx]) != 0)\n    {\n      bzf->lastErr = ret;\n    }\n  }\n  ;\n  free(bzf);\n  return 0;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadClose_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzReadClose_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadClose_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzReadClose_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -1;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -1;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzRead_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_BZ2_bzRead_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzRead_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_BZ2_bzRead_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -1;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -1;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzRead_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_BZ2_bzRead_3(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzRead_4",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const ret_ref",
                "int * const bzerror",
                "int len",
                "bzFile * const bzf"
            ],
            "definition": "int helper_BZ2_bzRead_4(Int32 * const n_ref, Int32 * const ret_ref, int * const bzerror, int len, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 ret = *ret_ref;\n  if (ferror(bzf->handle))\n  {\n    helper_helper_BZ2_bzRead_4_1(bzerror, bzf);\n  }\n  ;\n  if ((bzf->strm.avail_in == 0) && (!myfeof(bzf->handle)))\n  {\n    helper_helper_BZ2_bzRead_4_6(&n, bzerror, bzf);\n  }\n  ret = BZ2_bzDecompress(&bzf->strm);\n  if ((ret != 0) && (ret != 4))\n  {\n    helper_helper_BZ2_bzRead_4_2(bzerror, bzf, ret);\n  }\n  ;\n  if ((((ret == 0) && myfeof(bzf->handle)) && (bzf->strm.avail_in == 0)) && (bzf->strm.avail_out > 0))\n  {\n    helper_helper_BZ2_bzRead_4_3(bzerror, bzf);\n  }\n  ;\n  if (ret == 4)\n  {\n    helper_helper_BZ2_bzRead_4_4(bzerror, len, bzf);\n  }\n  ;\n  if (bzf->strm.avail_out == 0)\n  {\n    helper_helper_BZ2_bzRead_4_5(bzerror, len, bzf);\n  }\n  ;\n  *n_ref = n;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "BZ2_bzDecompress",
                "ferror",
                "helper_helper_BZ2_bzRead_4_1",
                "helper_helper_BZ2_bzRead_4_2",
                "helper_helper_BZ2_bzRead_4_3",
                "helper_helper_BZ2_bzRead_4_4",
                "helper_helper_BZ2_bzRead_4_5",
                "helper_helper_BZ2_bzRead_4_6",
                "myfeof"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadGetUnused_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzReadGetUnused_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadGetUnused_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzReadGetUnused_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -1;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -1;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_BZ2_bzReadGetUnused_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_BZ2_bzReadGetUnused_3(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -2;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -2;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_bzopen_or_bzdopen_1",
            "header": "",
            "params": [
                "unsigned int * const mode_idx_ref",
                "int * const blockSize100k_ref",
                "int * const writing_ref",
                "int * const smallMode_ref",
                "const char * const mode"
            ],
            "definition": "void helper_bzopen_or_bzdopen_1(unsigned int * const mode_idx_ref, int * const blockSize100k_ref, int * const writing_ref, int * const smallMode_ref, const char * const mode)\n{\n  unsigned int mode_idx = *mode_idx_ref;\n  int blockSize100k = *blockSize100k_ref;\n  int writing = *writing_ref;\n  int smallMode = *smallMode_ref;\n  switch (mode[mode_idx])\n  {\n    case 'r':\n    {\n      writing = 0;\n      break;\n    }\n\n    case 'w':\n    {\n      writing = 1;\n      break;\n    }\n\n    case 's':\n    {\n      smallMode = 1;\n      break;\n    }\n\n    default:\n    {\n      if (isdigit((int) mode[mode_idx]))\n      {\n        blockSize100k = mode[mode_idx] - 0x30;\n      }\n    }\n\n  }\n\n  mode_idx += 1;\n  *mode_idx_ref = mode_idx;\n  *blockSize100k_ref = blockSize100k;\n  *writing_ref = writing;\n  *smallMode_ref = smallMode;\n}\n\n",
            "calle": [
                "isdigit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const mode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const blockSize100k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writing_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const writing_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallMode_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const smallMode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char * const",
                        "definition": [
                            "const char * const mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int mode_idx = *mode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "int",
                        "definition": [
                            "int blockSize100k = *blockSize100k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writing",
                        "type": "int",
                        "definition": [
                            "int writing = *writing_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "int",
                        "definition": [
                            "int smallMode = *smallMode_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_copy_input_until_stop_1_1",
            "header": "",
            "params": [
                "Bool * const progress_in_ref",
                "EState * const s"
            ],
            "definition": "void helper_helper_copy_input_until_stop_1_1(Bool * const progress_in_ref, EState * const s)\n{\n  Bool progress_in = *progress_in_ref;\n  if (s->nblock >= s->nblockMAX)\n  {\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    break;\n  }\n  progress_in = (Bool) 1;\n  {\n    helper_helper_helper_copy_input_until_stop_1_1_1(s);\n  }\n  ;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  *progress_in_ref = progress_in;\n}\n\n",
            "calle": [
                "helper_helper_helper_copy_input_until_stop_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_in_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_in_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = *progress_in_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_copy_input_until_stop_2_1",
            "header": "",
            "params": [
                "Bool * const progress_in_ref",
                "EState * const s"
            ],
            "definition": "void helper_helper_copy_input_until_stop_2_1(Bool * const progress_in_ref, EState * const s)\n{\n  Bool progress_in = *progress_in_ref;\n  if (s->nblock >= s->nblockMAX)\n  {\n    break;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    break;\n  }\n  if (s->avail_in_expect == 0)\n  {\n    break;\n  }\n  progress_in = (Bool) 1;\n  {\n    helper_helper_helper_copy_input_until_stop_2_1_1(s);\n  }\n  ;\n  s->strm->next_in += 1;\n  s->strm->avail_in -= 1;\n  s->strm->total_in_lo32 += 1;\n  if (s->strm->total_in_lo32 == 0)\n  {\n    s->strm->total_in_hi32 += 1;\n  }\n  s->avail_in_expect -= 1;\n  *progress_in_ref = progress_in;\n}\n\n",
            "calle": [
                "helper_helper_helper_copy_input_until_stop_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress_in_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const progress_in_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_in",
                        "type": "Bool",
                        "definition": [
                            "Bool progress_in = *progress_in_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_unRLE_obuf_to_output_FAST_1_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "UInt32 * const c_calculatedBlockCRC_ref",
                "UChar * const c_state_out_ch_ref",
                "Int32 * const c_state_out_len_ref",
                "Int32 * const c_nblock_used_ref",
                "Int32 * const c_k0_ref",
                "UInt32 * const c_tPos_ref",
                "unsigned int * const cs_next_out_idx_ref",
                "unsigned int * const cs_avail_out_ref",
                "UInt32 * const c_tt",
                "char * const cs_next_out",
                "Int32 ro_blockSize100k",
                "Int32 s_save_nblockPP"
            ],
            "definition": "Bool helper_helper_unRLE_obuf_to_output_FAST_1_1(UChar * const k1_ref, UInt32 * const c_calculatedBlockCRC_ref, UChar * const c_state_out_ch_ref, Int32 * const c_state_out_len_ref, Int32 * const c_nblock_used_ref, Int32 * const c_k0_ref, UInt32 * const c_tPos_ref, unsigned int * const cs_next_out_idx_ref, unsigned int * const cs_avail_out_ref, UInt32 * const c_tt, char * const cs_next_out, Int32 ro_blockSize100k, Int32 s_save_nblockPP)\n{\n  UChar k1 = *k1_ref;\n  UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref;\n  UChar c_state_out_ch = *c_state_out_ch_ref;\n  Int32 c_state_out_len = *c_state_out_len_ref;\n  Int32 c_nblock_used = *c_nblock_used_ref;\n  Int32 c_k0 = *c_k0_ref;\n  UInt32 c_tPos = *c_tPos_ref;\n  unsigned int cs_next_out_idx = *cs_next_out_idx_ref;\n  unsigned int cs_avail_out = *cs_avail_out_ref;\n  if (c_state_out_len > 0)\n  {\n    helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1(&c_calculatedBlockCRC, &c_state_out_len, &cs_next_out_idx, &cs_avail_out, cs_next_out, c_state_out_ch);\n  }\n  if (c_nblock_used > s_save_nblockPP)\n  {\n    return (Bool) 1;\n  }\n  if (c_nblock_used == s_save_nblockPP)\n  {\n    c_state_out_len = 0;\n    goto return_notr;\n  }\n  ;\n  c_state_out_ch = c_k0;\n  if (c_tPos >= (((UInt32) 100000) * ((UInt32) ro_blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  c_tPos = c_tt[c_tPos];\n  k1 = (UChar) (c_tPos & 0xff);\n  c_tPos >>= 8;\n  ;\n  c_nblock_used += 1;\n  if (k1 != c_k0)\n  {\n    c_k0 = k1;\n    goto s_state_out_len_eq_one;\n  }\n  ;\n  if (c_nblock_used == s_save_nblockPP)\n  {\n    goto s_state_out_len_eq_one;\n  }\n  c_state_out_len = 2;\n  if (c_tPos >= (((UInt32) 100000) * ((UInt32) ro_blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  c_tPos = c_tt[c_tPos];\n  k1 = (UChar) (c_tPos & 0xff);\n  c_tPos >>= 8;\n  ;\n  c_nblock_used += 1;\n  if (c_nblock_used == s_save_nblockPP)\n  {\n    continue;\n  }\n  if (k1 != c_k0)\n  {\n    c_k0 = k1;\n    continue;\n  }\n  ;\n  c_state_out_len = 3;\n  if (c_tPos >= (((UInt32) 100000) * ((UInt32) ro_blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  c_tPos = c_tt[c_tPos];\n  k1 = (UChar) (c_tPos & 0xff);\n  c_tPos >>= 8;\n  ;\n  c_nblock_used += 1;\n  if (c_nblock_used == s_save_nblockPP)\n  {\n    continue;\n  }\n  if (k1 != c_k0)\n  {\n    c_k0 = k1;\n    continue;\n  }\n  ;\n  if (c_tPos >= (((UInt32) 100000) * ((UInt32) ro_blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  c_tPos = c_tt[c_tPos];\n  k1 = (UChar) (c_tPos & 0xff);\n  c_tPos >>= 8;\n  ;\n  c_nblock_used += 1;\n  c_state_out_len = ((Int32) k1) + 4;\n  if (c_tPos >= (((UInt32) 100000) * ((UInt32) ro_blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  c_tPos = c_tt[c_tPos];\n  c_k0 = (UChar) (c_tPos & 0xff);\n  c_tPos >>= 8;\n  ;\n  c_nblock_used += 1;\n  *k1_ref = k1;\n  *c_calculatedBlockCRC_ref = c_calculatedBlockCRC;\n  *c_state_out_ch_ref = c_state_out_ch;\n  *c_state_out_len_ref = c_state_out_len;\n  *c_nblock_used_ref = c_nblock_used;\n  *c_k0_ref = c_k0;\n  *c_tPos_ref = c_tPos;\n  *cs_next_out_idx_ref = cs_next_out_idx;\n  *cs_avail_out_ref = cs_avail_out;\n}\n\n",
            "calle": [
                "helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const c_state_out_ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_nblock_used_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_nblock_used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_k0_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_k0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_tPos_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_tPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_tt",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_tt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out",
                        "type": "char * const",
                        "definition": [
                            "char * const cs_next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ro_blockSize100k",
                        "type": "Int32",
                        "definition": [
                            "Int32 ro_blockSize100k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_save_nblockPP",
                        "type": "Int32",
                        "definition": [
                            "Int32 s_save_nblockPP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar c_state_out_ch = *c_state_out_ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_state_out_len = *c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_nblock_used",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_nblock_used = *c_nblock_used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_k0",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_k0 = *c_k0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_tPos",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_tPos = *c_tPos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_next_out_idx = *cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_avail_out = *cs_avail_out_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_unRLE_obuf_to_output_FAST_2_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_helper_unRLE_obuf_to_output_FAST_2_1(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_unRLE_obuf_to_output_FAST_2_1_1(s);\n  }\n\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    return (Bool) 0;\n  }\n  if (s->nblock_used > (s->save_nblock + 1))\n  {\n    return (Bool) 1;\n  }\n  s->state_out_len = 1;\n  s->state_out_ch = s->k0;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  k1 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 2;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  k1 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 3;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  k1 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  k1 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  s->state_out_len = ((Int32) k1) + 4;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->tPos = s->tt[s->tPos];\n  s->k0 = (UChar) (s->tPos & 0xff);\n  s->tPos >>= 8;\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  s->k0 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "helper_helper_helper_unRLE_obuf_to_output_FAST_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_rNums",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_unRLE_obuf_to_output_SMALL_1_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_helper_unRLE_obuf_to_output_SMALL_1_1(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_unRLE_obuf_to_output_SMALL_1_1_1(s);\n  }\n\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    return (Bool) 0;\n  }\n  if (s->nblock_used > (s->save_nblock + 1))\n  {\n    return (Bool) 1;\n  }\n  s->state_out_len = 1;\n  s->state_out_ch = s->k0;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 2;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 3;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  s->state_out_len = ((Int32) k1) + 4;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  s->nblock_used += 1;\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "BZ2_indexIntoF",
                "helper_helper_helper_unRLE_obuf_to_output_SMALL_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_unRLE_obuf_to_output_SMALL_2_1",
            "header": "",
            "params": [
                "UChar * const k1_ref",
                "DState * const s"
            ],
            "definition": "Bool helper_helper_unRLE_obuf_to_output_SMALL_2_1(UChar * const k1_ref, DState * const s)\n{\n  UChar k1 = *k1_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_unRLE_obuf_to_output_SMALL_2_1_1(s);\n  }\n\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    return (Bool) 0;\n  }\n  if (s->nblock_used > (s->save_nblock + 1))\n  {\n    return (Bool) 1;\n  }\n  s->state_out_len = 1;\n  s->state_out_ch = s->k0;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 2;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  s->state_out_len = 3;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  if (s->nblock_used == (s->save_nblock + 1))\n  {\n    continue;\n  }\n  if (k1 != s->k0)\n  {\n    s->k0 = k1;\n    continue;\n  }\n  ;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  k1 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  k1 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  s->state_out_len = ((Int32) k1) + 4;\n  if (s->tPos >= (((UInt32) 100000) * ((UInt32) s->blockSize100k)))\n  {\n    return (Bool) 1;\n  }\n  s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n  s->tPos = ((UInt32) s->ll16[s->tPos]) | (((((UInt32) s->ll4[s->tPos >> 1]) >> ((s->tPos << 2) & 0x4)) & 0xF) << 16);\n  ;\n  if (s->rNToGo == 0)\n  {\n    s->rNToGo = BZ2_rNums[s->rTPos];\n    s->rTPos += 1;\n    if (s->rTPos == 512)\n    {\n      s->rTPos = 0;\n    }\n  }\n  s->rNToGo -= 1;\n  ;\n  s->k0 ^= (s->rNToGo == 1) ? (1) : (0);\n  s->nblock_used += 1;\n  *k1_ref = k1;\n}\n\n",
            "calle": [
                "BZ2_indexIntoF",
                "helper_helper_helper_unRLE_obuf_to_output_SMALL_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1_ref",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "UChar",
                        "definition": [
                            "UChar k1 = *k1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_rNums",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzDecompress_1_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "int helper_helper_BZ2_bzDecompress_1_1(DState * const s)\n{\n  Int32 r = BZ2_decompress(s);\n  if (r == 4)\n  {\n    if (s->verbosity >= 3)\n    {\n      fprintf(stderr, \"\\n    combined CRCs: stored = 0x%08x, computed = 0x%08x\", s->storedCombinedCRC, s->calculatedCombinedCRC);\n    }\n    if (s->calculatedCombinedCRC != s->storedCombinedCRC)\n    {\n      return -4;\n    }\n    return r;\n  }\n  if (s->state != 2)\n  {\n    return r;\n  }\n}\n\n",
            "calle": [
                "BZ2_decompress",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "Int32",
                        "definition": [
                            "Int32 r = BZ2_decompress(s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzDecompress_1_2",
            "header": "",
            "params": [
                "Bool * const corrupt_ref",
                "DState * const s"
            ],
            "definition": "int helper_helper_BZ2_bzDecompress_1_2(Bool * const corrupt_ref, DState * const s)\n{\n  Bool corrupt = *corrupt_ref;\n  if (s->smallDecompress)\n  {\n    corrupt = unRLE_obuf_to_output_SMALL(s);\n  }\n  else\n    corrupt = unRLE_obuf_to_output_FAST(s);\n  if (corrupt)\n  {\n    return -4;\n  }\n  if ((s->nblock_used == (s->save_nblock + 1)) && (s->state_out_len == 0))\n  {\n    {\n      s->calculatedBlockCRC = ~s->calculatedBlockCRC;\n    }\n    ;\n    if (s->verbosity >= 3)\n    {\n      fprintf(stderr, \" {0x%08x, 0x%08x}\", s->storedBlockCRC, s->calculatedBlockCRC);\n    }\n    if (s->verbosity >= 2)\n    {\n      fprintf(stderr, \"]\");\n    }\n    if (s->calculatedBlockCRC != s->storedBlockCRC)\n    {\n      return -4;\n    }\n    s->calculatedCombinedCRC = (s->calculatedCombinedCRC << 1) | (s->calculatedCombinedCRC >> 31);\n    s->calculatedCombinedCRC ^= s->calculatedBlockCRC;\n    s->state = 14;\n  }\n  else\n  {\n    return 0;\n  }\n  *corrupt_ref = corrupt;\n}\n\n",
            "calle": [
                "fprintf",
                "unRLE_obuf_to_output_FAST",
                "unRLE_obuf_to_output_SMALL"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "corrupt_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const corrupt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "corrupt",
                        "type": "Bool",
                        "definition": [
                            "Bool corrupt = *corrupt_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzWrite_5_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "Int32 ret"
            ],
            "definition": "void helper_helper_BZ2_bzWrite_5_1(int * const bzerror, bzFile * const bzf, Int32 ret)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = ret;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = ret;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzWrite_5_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_helper_BZ2_bzWrite_5_2(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzWrite_5_3",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const n2_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_helper_BZ2_bzWrite_5_3(Int32 * const n_ref, Int32 * const n2_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 n2 = *n2_ref;\n  n = 5000 - bzf->strm.avail_out;\n  n2 = fwrite((void *) bzf->buf, sizeof(UChar), n, bzf->handle);\n  if ((n != n2) || ferror(bzf->handle))\n  {\n    {\n      if (bzerror != 0)\n      {\n        *bzerror = -6;\n      }\n      if (bzf != 0)\n      {\n        bzf->lastErr = -6;\n      }\n    }\n    ;\n    return;\n  }\n  ;\n  *n_ref = n;\n  *n2_ref = n2;\n}\n\n",
            "calle": [
                "ferror",
                "fwrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzWriteClose64_5_1",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const n2_ref",
                "Int32 * const ret_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_helper_BZ2_bzWriteClose64_5_1(Int32 * const n_ref, Int32 * const n2_ref, Int32 * const ret_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 n2 = *n2_ref;\n  Int32 ret = *ret_ref;\n  bzf->strm.avail_out = 5000;\n  bzf->strm.next_out = bzf->buf;\n  ret = BZ2_bzCompress(&bzf->strm, 2);\n  if ((ret != 3) && (ret != 4))\n  {\n    helper_helper_helper_BZ2_bzWriteClose64_5_1_1(bzerror, bzf, ret);\n  }\n  ;\n  if (bzf->strm.avail_out < 5000)\n  {\n    helper_helper_helper_BZ2_bzWriteClose64_5_1_2(&n, &n2, bzerror, bzf);\n  }\n  if (ret == 4)\n  {\n    break;\n  }\n  *n_ref = n;\n  *n2_ref = n2;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "BZ2_bzCompress",
                "helper_helper_helper_BZ2_bzWriteClose64_5_1_1",
                "helper_helper_helper_BZ2_bzWriteClose64_5_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_1(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -6;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -6;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_2",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "Int32 ret"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_2(int * const bzerror, bzFile * const bzf, Int32 ret)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = ret;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = ret;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_3",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_3(int * const bzerror, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = -7;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = -7;\n    }\n  }\n  ;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_4",
            "header": "",
            "params": [
                "int * const bzerror",
                "int len",
                "bzFile * const bzf"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_4(int * const bzerror, int len, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 4;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 4;\n    }\n  }\n  ;\n  return len - bzf->strm.avail_out;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_5",
            "header": "",
            "params": [
                "int * const bzerror",
                "int len",
                "bzFile * const bzf"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_5(int * const bzerror, int len, bzFile * const bzf)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = 0;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = 0;\n    }\n  }\n  ;\n  return len;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_BZ2_bzRead_4_6",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "int helper_helper_BZ2_bzRead_4_6(Int32 * const n_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  n = fread(bzf->buf, sizeof(UChar), 5000, bzf->handle);\n  if (ferror(bzf->handle))\n  {\n    {\n      if (bzerror != 0)\n      {\n        *bzerror = -6;\n      }\n      if (bzf != 0)\n      {\n        bzf->lastErr = -6;\n      }\n    }\n    ;\n    return 0;\n  }\n  ;\n  bzf->bufN = n;\n  bzf->strm.avail_in = bzf->bufN;\n  bzf->strm.next_in = bzf->buf;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "ferror",
                "fread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_copy_input_until_stop_1_1_1",
            "header": "",
            "params": [
                "EState * const s"
            ],
            "definition": "void helper_helper_helper_copy_input_until_stop_1_1_1(EState * const s)\n{\n  UInt32 zchh = (UInt32) ((UInt32) (*((UChar *) s->strm->next_in)));\n  if ((zchh != s->state_in_ch) && (s->state_in_len == 1))\n  {\n    UChar ch = (UChar) s->state_in_ch;\n    {\n      s->blockCRC = (s->blockCRC << 8) ^ BZ2_crc32Table[(s->blockCRC >> 24) ^ ((UChar) ch)];\n    }\n    ;\n    s->inUse[s->state_in_ch] = (Bool) 1;\n    s->block[s->nblock] = (UChar) ch;\n    s->nblock += 1;\n    s->state_in_ch = zchh;\n  }\n  else\n    if ((zchh != s->state_in_ch) || (s->state_in_len == 255))\n  {\n    if (s->state_in_ch < 256)\n    {\n      add_pair_to_block(s);\n    }\n    s->state_in_ch = zchh;\n    s->state_in_len = 1;\n  }\n  else\n  {\n    s->state_in_len += 1;\n  }\n}\n\n",
            "calle": [
                "add_pair_to_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zchh",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 zchh = (UInt32) ((UInt32) (*((UChar *) s->strm->next_in)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "UChar",
                        "definition": [
                            "UChar ch = (UChar) s->state_in_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_copy_input_until_stop_2_1_1",
            "header": "",
            "params": [
                "EState * const s"
            ],
            "definition": "void helper_helper_helper_copy_input_until_stop_2_1_1(EState * const s)\n{\n  UInt32 zchh = (UInt32) ((UInt32) (*((UChar *) s->strm->next_in)));\n  if ((zchh != s->state_in_ch) && (s->state_in_len == 1))\n  {\n    UChar ch = (UChar) s->state_in_ch;\n    {\n      s->blockCRC = (s->blockCRC << 8) ^ BZ2_crc32Table[(s->blockCRC >> 24) ^ ((UChar) ch)];\n    }\n    ;\n    s->inUse[s->state_in_ch] = (Bool) 1;\n    s->block[s->nblock] = (UChar) ch;\n    s->nblock += 1;\n    s->state_in_ch = zchh;\n  }\n  else\n    if ((zchh != s->state_in_ch) || (s->state_in_len == 255))\n  {\n    if (s->state_in_ch < 256)\n    {\n      add_pair_to_block(s);\n    }\n    s->state_in_ch = zchh;\n    s->state_in_len = 1;\n  }\n  else\n  {\n    s->state_in_len += 1;\n  }\n}\n\n",
            "calle": [
                "add_pair_to_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "EState * const",
                        "definition": [
                            "EState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zchh",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 zchh = (UInt32) ((UInt32) (*((UChar *) s->strm->next_in)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "UChar",
                        "definition": [
                            "UChar ch = (UChar) s->state_in_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1",
            "header": "",
            "params": [
                "UInt32 * const c_calculatedBlockCRC_ref",
                "Int32 * const c_state_out_len_ref",
                "unsigned int * const cs_next_out_idx_ref",
                "unsigned int * const cs_avail_out_ref",
                "char * const cs_next_out",
                "UChar c_state_out_ch"
            ],
            "definition": "void helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1(UInt32 * const c_calculatedBlockCRC_ref, Int32 * const c_state_out_len_ref, unsigned int * const cs_next_out_idx_ref, unsigned int * const cs_avail_out_ref, char * const cs_next_out, UChar c_state_out_ch)\n{\n  UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref;\n  Int32 c_state_out_len = *c_state_out_len_ref;\n  unsigned int cs_next_out_idx = *cs_next_out_idx_ref;\n  unsigned int cs_avail_out = *cs_avail_out_ref;\n  while ((Bool) 1)\n  {\n    helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_2(&c_calculatedBlockCRC, &c_state_out_len, &cs_next_out_idx, &cs_avail_out, cs_next_out, c_state_out_ch);\n  }\n\n  s_state_out_len_eq_one:\n  {\n    helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_1(&c_calculatedBlockCRC, &c_state_out_len, &cs_next_out_idx, &cs_avail_out, cs_next_out, c_state_out_ch);\n  }\n\n  *c_calculatedBlockCRC_ref = c_calculatedBlockCRC;\n  *c_state_out_len_ref = c_state_out_len;\n  *cs_next_out_idx_ref = cs_next_out_idx;\n  *cs_avail_out_ref = cs_avail_out;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_1",
                "helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out",
                        "type": "char * const",
                        "definition": [
                            "char * const cs_next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar c_state_out_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_state_out_len = *c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_next_out_idx = *cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_avail_out = *cs_avail_out_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_unRLE_obuf_to_output_FAST_2_1_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Bool helper_helper_helper_unRLE_obuf_to_output_FAST_2_1_1(DState * const s)\n{\n  if (s->strm->avail_out == 0)\n  {\n    return (Bool) 0;\n  }\n  if (s->state_out_len == 0)\n  {\n    break;\n  }\n  *((UChar *) s->strm->next_out) = s->state_out_ch;\n  {\n    s->calculatedBlockCRC = (s->calculatedBlockCRC << 8) ^ BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^ ((UChar) s->state_out_ch)];\n  }\n  ;\n  s->state_out_len -= 1;\n  s->strm->next_out += 1;\n  s->strm->avail_out -= 1;\n  s->strm->total_out_lo32 += 1;\n  if (s->strm->total_out_lo32 == 0)\n  {\n    s->strm->total_out_hi32 += 1;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_unRLE_obuf_to_output_SMALL_1_1_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Bool helper_helper_helper_unRLE_obuf_to_output_SMALL_1_1_1(DState * const s)\n{\n  if (s->strm->avail_out == 0)\n  {\n    return (Bool) 0;\n  }\n  if (s->state_out_len == 0)\n  {\n    break;\n  }\n  *((UChar *) s->strm->next_out) = s->state_out_ch;\n  {\n    s->calculatedBlockCRC = (s->calculatedBlockCRC << 8) ^ BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^ ((UChar) s->state_out_ch)];\n  }\n  ;\n  s->state_out_len -= 1;\n  s->strm->next_out += 1;\n  s->strm->avail_out -= 1;\n  s->strm->total_out_lo32 += 1;\n  if (s->strm->total_out_lo32 == 0)\n  {\n    s->strm->total_out_hi32 += 1;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_unRLE_obuf_to_output_SMALL_2_1_1",
            "header": "",
            "params": [
                "DState * const s"
            ],
            "definition": "Bool helper_helper_helper_unRLE_obuf_to_output_SMALL_2_1_1(DState * const s)\n{\n  if (s->strm->avail_out == 0)\n  {\n    return (Bool) 0;\n  }\n  if (s->state_out_len == 0)\n  {\n    break;\n  }\n  *((UChar *) s->strm->next_out) = s->state_out_ch;\n  {\n    s->calculatedBlockCRC = (s->calculatedBlockCRC << 8) ^ BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^ ((UChar) s->state_out_ch)];\n  }\n  ;\n  s->state_out_len -= 1;\n  s->strm->next_out += 1;\n  s->strm->avail_out -= 1;\n  s->strm->total_out_lo32 += 1;\n  if (s->strm->total_out_lo32 == 0)\n  {\n    s->strm->total_out_hi32 += 1;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "DState * const",
                        "definition": [
                            "DState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_bzWriteClose64_5_1_1",
            "header": "",
            "params": [
                "int * const bzerror",
                "bzFile * const bzf",
                "Int32 ret"
            ],
            "definition": "void helper_helper_helper_BZ2_bzWriteClose64_5_1_1(int * const bzerror, bzFile * const bzf, Int32 ret)\n{\n  {\n    if (bzerror != 0)\n    {\n      *bzerror = ret;\n    }\n    if (bzf != 0)\n    {\n      bzf->lastErr = ret;\n    }\n  }\n  ;\n  return;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_BZ2_bzWriteClose64_5_1_2",
            "header": "",
            "params": [
                "Int32 * const n_ref",
                "Int32 * const n2_ref",
                "int * const bzerror",
                "bzFile * const bzf"
            ],
            "definition": "void helper_helper_helper_BZ2_bzWriteClose64_5_1_2(Int32 * const n_ref, Int32 * const n2_ref, int * const bzerror, bzFile * const bzf)\n{\n  Int32 n = *n_ref;\n  Int32 n2 = *n2_ref;\n  n = 5000 - bzf->strm.avail_out;\n  n2 = fwrite((void *) bzf->buf, sizeof(UChar), n, bzf->handle);\n  if ((n != n2) || ferror(bzf->handle))\n  {\n    {\n      if (bzerror != 0)\n      {\n        *bzerror = -6;\n      }\n      if (bzf != 0)\n      {\n        bzf->lastErr = -6;\n      }\n    }\n    ;\n    return;\n  }\n  ;\n  *n_ref = n;\n  *n2_ref = n2;\n}\n\n",
            "calle": [
                "ferror",
                "fwrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const n2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerror",
                        "type": "int * const",
                        "definition": [
                            "int * const bzerror"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "bzFile * const",
                        "definition": [
                            "bzFile * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "Int32",
                        "definition": [
                            "Int32 n2 = *n2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_1",
            "header": "",
            "params": [
                "UInt32 * const c_calculatedBlockCRC_ref",
                "Int32 * const c_state_out_len_ref",
                "unsigned int * const cs_next_out_idx_ref",
                "unsigned int * const cs_avail_out_ref",
                "char * const cs_next_out",
                "UChar c_state_out_ch"
            ],
            "definition": "void helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_1(UInt32 * const c_calculatedBlockCRC_ref, Int32 * const c_state_out_len_ref, unsigned int * const cs_next_out_idx_ref, unsigned int * const cs_avail_out_ref, char * const cs_next_out, UChar c_state_out_ch)\n{\n  UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref;\n  Int32 c_state_out_len = *c_state_out_len_ref;\n  unsigned int cs_next_out_idx = *cs_next_out_idx_ref;\n  unsigned int cs_avail_out = *cs_avail_out_ref;\n  if (cs_avail_out == 0)\n  {\n    c_state_out_len = 1;\n    goto return_notr;\n  }\n  ;\n  *((UChar *) cs_next_out) = c_state_out_ch;\n  {\n    c_calculatedBlockCRC = (c_calculatedBlockCRC << 8) ^ BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^ ((UChar) c_state_out_ch)];\n  }\n  ;\n  cs_next_out_idx += 1;\n  cs_avail_out -= 1;\n  *c_calculatedBlockCRC_ref = c_calculatedBlockCRC;\n  *c_state_out_len_ref = c_state_out_len;\n  *cs_next_out_idx_ref = cs_next_out_idx;\n  *cs_avail_out_ref = cs_avail_out;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out",
                        "type": "char * const",
                        "definition": [
                            "char * const cs_next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar c_state_out_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_state_out_len = *c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_next_out_idx = *cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_avail_out = *cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_2",
            "header": "",
            "params": [
                "UInt32 * const c_calculatedBlockCRC_ref",
                "Int32 * const c_state_out_len_ref",
                "unsigned int * const cs_next_out_idx_ref",
                "unsigned int * const cs_avail_out_ref",
                "char * const cs_next_out",
                "UChar c_state_out_ch"
            ],
            "definition": "void helper_helper_helper_helper_unRLE_obuf_to_output_FAST_1_1_1_2(UInt32 * const c_calculatedBlockCRC_ref, Int32 * const c_state_out_len_ref, unsigned int * const cs_next_out_idx_ref, unsigned int * const cs_avail_out_ref, char * const cs_next_out, UChar c_state_out_ch)\n{\n  UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref;\n  Int32 c_state_out_len = *c_state_out_len_ref;\n  unsigned int cs_next_out_idx = *cs_next_out_idx_ref;\n  unsigned int cs_avail_out = *cs_avail_out_ref;\n  if (cs_avail_out == 0)\n  {\n    goto return_notr;\n  }\n  if (c_state_out_len == 1)\n  {\n    break;\n  }\n  *((UChar *) cs_next_out) = c_state_out_ch;\n  {\n    c_calculatedBlockCRC = (c_calculatedBlockCRC << 8) ^ BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^ ((UChar) c_state_out_ch)];\n  }\n  ;\n  c_state_out_len -= 1;\n  cs_next_out_idx += 1;\n  cs_avail_out -= 1;\n  *c_calculatedBlockCRC_ref = c_calculatedBlockCRC;\n  *c_state_out_len_ref = c_state_out_len;\n  *cs_next_out_idx_ref = cs_next_out_idx;\n  *cs_avail_out_ref = cs_avail_out;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC_ref",
                        "type": "UInt32 * const",
                        "definition": [
                            "UInt32 * const c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out",
                        "type": "char * const",
                        "definition": [
                            "char * const cs_next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_ch",
                        "type": "UChar",
                        "definition": [
                            "UChar c_state_out_ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_calculatedBlockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 c_calculatedBlockCRC = *c_calculatedBlockCRC_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_state_out_len",
                        "type": "Int32",
                        "definition": [
                            "Int32 c_state_out_len = *c_state_out_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_next_out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_next_out_idx = *cs_next_out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs_avail_out",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cs_avail_out = *cs_avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BZ2_crc32Table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "panic",
            "header": "static void panic(const Char *)",
            "params": [
                "const Char *s"
            ],
            "definition": "static void panic(const Char *s)\n{\n  fprintf(stderr, \"\\n%s: PANIC -- internal consistency error:\\n\\t%s\\n\\tThis is a BUG.  Please report it at:\\n\\thttps://gitlab.com/bzip2/bzip2/-/issues\\n\", progName, s);\n  showFileNames();\n  cleanUpAndFail(3);\n}\n\n",
            "calle": [
                "cleanUpAndFail",
                "fprintf",
                "showFileNames"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const Char *",
                        "definition": [
                            "const Char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ioError",
            "header": "static void ioError(void)",
            "params": [
                "void"
            ],
            "definition": "static void ioError(void)\n{\n  fprintf(stderr, \"\\n%s: I/O or other error, bailing out.  Possible reason follows.\\n\", progName);\n  perror(progName);\n  showFileNames();\n  cleanUpAndFail(1);\n}\n\n",
            "calle": [
                "cleanUpAndFail",
                "fprintf",
                "perror",
                "showFileNames"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "outOfMemory",
            "header": "static void outOfMemory(void)",
            "params": [
                "void"
            ],
            "definition": "static void outOfMemory(void)\n{\n  fprintf(stderr, \"\\n%s: couldn't allocate enough memory\\n\", progName);\n  showFileNames();\n  cleanUpAndFail(1);\n}\n\n",
            "calle": [
                "cleanUpAndFail",
                "fprintf",
                "showFileNames"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "configError",
            "header": "static void configError(void)",
            "params": [
                "void"
            ],
            "definition": "static void configError(void)\n{\n  fprintf(stderr, \"bzip2: I'm not configured correctly for this platform!\\n\\tI require Int32, Int16 and Char to have sizes\\n\\tof 4, 2 and 1 bytes to run properly, and they don't.\\n\\tProbably you can fix this by defining them correctly,\\n\\tand recompiling.  Bye!\\n\");\n  setExit(3);\n  exit(exitValue);\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "setExit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crcError",
            "header": "static void crcError(void)",
            "params": [
                "void"
            ],
            "definition": "static void crcError(void)\n{\n  fprintf(stderr, \"\\n%s: Data integrity error when decompressing.\\n\", progName);\n  showFileNames();\n  cadvise();\n  cleanUpAndFail(2);\n}\n\n",
            "calle": [
                "cadvise",
                "cleanUpAndFail",
                "fprintf",
                "showFileNames"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "cleanUpAndFail",
            "header": "static void cleanUpAndFail(Int32)",
            "params": [
                "Int32 ec"
            ],
            "definition": "static void cleanUpAndFail(Int32 ec)\n{\n  IntNative retVal;\n  struct MY_STAT statBuf;\n  if (((srcMode == 3) && (opMode != 3)) && deleteOutputOnInterrupt)\n  {\n    retVal = MY_STAT(inName, &statBuf);\n    if (retVal == 0)\n    {\n      if (noisy)\n      {\n        fprintf(stderr, \"%s: Deleting output file %s, if it exists.\\n\", progName, outName);\n      }\n      if (outputHandleJustInCase != 0)\n      {\n        fclose(outputHandleJustInCase);\n      }\n      retVal = remove(outName);\n      if (retVal != 0)\n      {\n        fprintf(stderr, \"%s: WARNING: deletion of output file (apparently) failed.\\n\", progName);\n      }\n    }\n    else\n    {\n      fprintf(stderr, \"%s: WARNING: deletion of output file suppressed\\n\", progName);\n      fprintf(stderr, \"%s:    since input file no longer exists.  Output file\\n\", progName);\n      fprintf(stderr, \"%s:    `%s' may be incomplete.\\n\", progName, outName);\n      fprintf(stderr, \"%s:    I suggest doing an integrity test (bzip2 -tv) of it.\\n\", progName);\n    }\n  }\n  if ((noisy && (numFileNames > 0)) && (numFilesProcessed < numFileNames))\n  {\n    fprintf(stderr, \"%s: WARNING: some files have not been processed:\\n%s:    %d specified on command line, %d not processed yet.\\n\\n\", progName, progName, numFileNames, numFileNames - numFilesProcessed);\n  }\n  setExit(ec);\n  exit(exitValue);\n}\n\n",
            "calle": [
                "MY_STAT",
                "exit",
                "fclose",
                "fprintf",
                "remove",
                "setExit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ec",
                        "type": "Int32",
                        "definition": [
                            "Int32 ec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "IntNative",
                        "definition": [
                            "IntNative retVal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "opMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFileNames",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFilesProcessed",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compressedStreamEOF",
            "header": "static void compressedStreamEOF(void)",
            "params": [
                "void"
            ],
            "definition": "static void compressedStreamEOF(void)\n{\n  if (noisy)\n  {\n    fprintf(stderr, \"\\n%s: Compressed file ends unexpectedly;\\n\\tperhaps it is corrupted?  *Possible* reason follows.\\n\", progName);\n    perror(progName);\n    showFileNames();\n    cadvise();\n  }\n  cleanUpAndFail(2);\n}\n\n",
            "calle": [
                "cadvise",
                "cleanUpAndFail",
                "fprintf",
                "perror",
                "showFileNames"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copyFileName",
            "header": "static void copyFileName(Char *, Char *)",
            "params": [
                "Char *to",
                "Char *from"
            ],
            "definition": "static void copyFileName(Char *to, Char *from)\n{\n  if (strlen(from) > (1034 - 10))\n  {\n    fprintf(stderr, \"bzip2: file name\\n`%s'\\nis suspiciously (more than %d chars) long.\\nTry using a reasonable file name instead.  Sorry! :-)\\n\", from, 1034 - 10);\n    setExit(1);\n    exit(exitValue);\n  }\n  strncpy(to, from, 1034 - 10);\n  to[1034 - 10] = '\\0';\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "setExit",
                "strlen",
                "strncpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "to",
                        "type": "Char *",
                        "definition": [
                            "Char *to"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "Char *",
                        "definition": [
                            "Char *from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "myMalloc",
            "header": "static void *myMalloc(Int32)",
            "params": [
                "Int32 n"
            ],
            "definition": "static void *myMalloc(Int32 n)\n{\n  void *p;\n  unsigned int p_idx = 0;\n  p_idx = malloc((size_t) n);\n  if ((&p[p_idx]) == 0)\n  {\n    outOfMemory();\n  }\n  return p;\n}\n\n",
            "calle": [
                "malloc",
                "outOfMemory"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "applySavedFileAttrToOutputFile",
            "header": "static void applySavedFileAttrToOutputFile(IntNative fd)",
            "params": [
                "IntNative fd"
            ],
            "definition": "static void applySavedFileAttrToOutputFile(IntNative fd)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "IntNative",
                        "definition": [
                            "IntNative fd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uInt64_from_UInt32s",
            "header": "",
            "params": [
                "UInt64 *n",
                "UInt32 lo32",
                "UInt32 hi32"
            ],
            "definition": "static void uInt64_from_UInt32s(UInt64 *n, UInt32 lo32, UInt32 hi32)\n{\n  n->b[7] = (UChar) ((hi32 >> 24) & 0xFF);\n  n->b[6] = (UChar) ((hi32 >> 16) & 0xFF);\n  n->b[5] = (UChar) ((hi32 >> 8) & 0xFF);\n  n->b[4] = (UChar) (hi32 & 0xFF);\n  n->b[3] = (UChar) ((lo32 >> 24) & 0xFF);\n  n->b[2] = (UChar) ((lo32 >> 16) & 0xFF);\n  n->b[1] = (UChar) ((lo32 >> 8) & 0xFF);\n  n->b[0] = (UChar) (lo32 & 0xFF);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "UInt64 *",
                        "definition": [
                            "UInt64 *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lo32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hi32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 hi32"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uInt64_to_double",
            "header": "",
            "params": [
                "UInt64 *n"
            ],
            "definition": "static double uInt64_to_double(UInt64 *n)\n{\n  Int32 i;\n  double base = 1.0;\n  double sum = 0.0;\n  for (i = 0; i < 8; i += 1)\n  {\n    sum += base * ((double) n->b[i]);\n    base *= 256.0;\n  }\n\n  return sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "UInt64 *",
                        "definition": [
                            "UInt64 *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "double",
                        "definition": [
                            "double base = 1.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0.0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uInt64_isZero",
            "header": "",
            "params": [
                "UInt64 *n"
            ],
            "definition": "static Bool uInt64_isZero(UInt64 *n)\n{\n  Int32 i;\n  for (i = 0; i < 8; i += 1)\n    if (n->b[i] != 0)\n  {\n    return 0;\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "UInt64 *",
                        "definition": [
                            "UInt64 *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uInt64_qrm10",
            "header": "",
            "params": [
                "UInt64 *n"
            ],
            "definition": "static Int32 uInt64_qrm10(UInt64 *n)\n{\n  UInt32 rem;\n  UInt32 tmp;\n  Int32 i;\n  rem = 0;\n  for (i = 7; i >= 0; i -= 1)\n  {\n    tmp = (rem * 256) + n->b[i];\n    n->b[i] = tmp / 10;\n    rem = tmp % 10;\n  }\n\n  return rem;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "UInt64 *",
                        "definition": [
                            "UInt64 *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rem",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 rem"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uInt64_toAscii",
            "header": "",
            "params": [
                "char *outbuf",
                "UInt64 *n"
            ],
            "definition": "static void uInt64_toAscii(char *outbuf, UInt64 *n)\n{\n  Int32 i;\n  Int32 q;\n  UChar buf[32];\n  Int32 nBuf = 0;\n  UInt64 n_copy = *n;\n  do\n  {\n    q = uInt64_qrm10(&n_copy);\n    buf[nBuf] = q + '0';\n    nBuf += 1;\n  }\n  while (!uInt64_isZero(&n_copy));\n  outbuf[nBuf] = 0;\n  for (i = 0; i < nBuf; i += 1)\n    outbuf[i] = buf[(nBuf - i) - 1];\n\n}\n\n",
            "calle": [
                "uInt64_isZero",
                "uInt64_qrm10"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "outbuf",
                        "type": "char *",
                        "definition": [
                            "char *outbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "UInt64 *",
                        "definition": [
                            "UInt64 *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "Int32",
                        "definition": [
                            "Int32 q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "UChar [32]",
                        "definition": [
                            "UChar buf[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBuf",
                        "type": "Int32",
                        "definition": [
                            "Int32 nBuf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_copy",
                        "type": "UInt64",
                        "definition": [
                            "UInt64 n_copy = *n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compressStream",
            "header": "",
            "params": [
                "FILE *stream",
                "FILE *zStream"
            ],
            "definition": "static void compressStream(FILE *stream, FILE *zStream)\n{\n  BZFILE *bzf = 0;\n  unsigned int bzf_idx = 0;\n  UChar ibuf[5000];\n  Int32 nIbuf;\n  UInt32 nbytes_in_lo32;\n  UInt32 nbytes_in_hi32;\n  UInt32 nbytes_out_lo32;\n  UInt32 nbytes_out_hi32;\n  Int32 bzerr;\n  Int32 bzerr_dummy;\n  Int32 ret;\n  SET_BINARY_MODE(stream);\n  SET_BINARY_MODE(zStream);\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n  bzf_idx = BZ2_bzWriteOpen(&bzerr, zStream, blockSize100k, verbosity, workFactor);\n  if (bzerr != 0)\n  {\n    goto errhandler;\n  }\n  if (verbosity >= 2)\n  {\n    fprintf(stderr, \"\\n\");\n  }\n  while ((Bool) 1)\n  {\n    helper_compressStream_2(&nIbuf, stream, bzf, ibuf, bzerr);\n  }\n\n  BZ2_bzWriteClose64(&bzerr, bzf, 0, &nbytes_in_lo32, &nbytes_in_hi32, &nbytes_out_lo32, &nbytes_out_hi32);\n  if (bzerr != 0)\n  {\n    goto errhandler;\n  }\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n  ret = fflush(zStream);\n  if (ret == EOF)\n  {\n    goto errhandler_io;\n  }\n  if (zStream != stdout)\n  {\n    helper_compressStream_1(&ret, zStream);\n  }\n  outputHandleJustInCase = 0;\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  ret = fclose(stream);\n  if (ret == EOF)\n  {\n    goto errhandler_io;\n  }\n  if (verbosity >= 1)\n  {\n    helper_compressStream_3(nbytes_in_lo32, nbytes_in_hi32, nbytes_out_lo32, nbytes_out_hi32);\n  }\n  return;\n  errhandler:\n  BZ2_bzWriteClose64(&bzerr_dummy, bzf, 1, &nbytes_in_lo32, &nbytes_in_hi32, &nbytes_out_lo32, &nbytes_out_hi32);\n\n  switch (bzerr)\n  {\n    case -9:\n    {\n      configError();\n      break;\n    }\n\n    case -3:\n    {\n      outOfMemory();\n      break;\n    }\n\n    case -6:\n    {\n      errhandler_io:\n      ioError();\n\n      break;\n    }\n\n    default:\n    {\n      panic(\"compress:unexpected error\");\n    }\n\n  }\n\n  panic(\"compress:end\");\n}\n\n",
            "calle": [
                "BZ2_bzWriteClose64",
                "BZ2_bzWriteOpen",
                "SET_BINARY_MODE",
                "configError",
                "fclose",
                "ferror",
                "fflush",
                "fprintf",
                "helper_compressStream_1",
                "helper_compressStream_2",
                "helper_compressStream_3",
                "ioError",
                "outOfMemory",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *bzf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ibuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar ibuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nIbuf",
                        "type": "Int32",
                        "definition": [
                            "Int32 nIbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_lo32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_in_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_hi32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_in_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_lo32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_out_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_hi32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_out_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr_dummy",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr_dummy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uncompressStream",
            "header": "",
            "params": [
                "FILE *zStream",
                "FILE *stream"
            ],
            "definition": "static Bool uncompressStream(FILE *zStream, FILE *stream)\n{\n  BZFILE *bzf = 0;\n  unsigned int bzf_idx = 0;\n  Int32 bzerr;\n  Int32 bzerr_dummy;\n  Int32 ret;\n  Int32 nread;\n  Int32 streamNo;\n  Int32 i;\n  UChar obuf[5000];\n  UChar unused[5000];\n  Int32 nUnused;\n  void *unusedTmpV;\n  UChar *unusedTmp;\n  unsigned int unusedTmp_idx = 0;\n  nUnused = 0;\n  streamNo = 0;\n  SET_BINARY_MODE(stream);\n  SET_BINARY_MODE(zStream);\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n  while ((Bool) 1)\n  {\n    helper_uncompressStream_3(&bzf_idx, &nread, &streamNo, &i, &unusedTmp_idx, zStream, stream, bzf, bzerr, obuf, unused, nUnused, unusedTmpV, unusedTmp);\n  }\n\n  closeok:\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n\n  if (stream != stdout)\n  {\n    Int32 fd = fileno(stream);\n    if (fd < 0)\n    {\n      goto errhandler_io;\n    }\n    applySavedFileAttrToOutputFile(fd);\n  }\n  ret = fclose(zStream);\n  if (ret == EOF)\n  {\n    goto errhandler_io;\n  }\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  ret = fflush(stream);\n  if (ret != 0)\n  {\n    goto errhandler_io;\n  }\n  if (stream != stdout)\n  {\n    ret = fclose(stream);\n    outputHandleJustInCase = 0;\n    if (ret == EOF)\n    {\n      goto errhandler_io;\n    }\n  }\n  outputHandleJustInCase = 0;\n  if (verbosity >= 2)\n  {\n    fprintf(stderr, \"\\n    \");\n  }\n  return (Bool) 1;\n  trycat:\n  if (forceOverwrite)\n  {\n    helper_uncompressStream_2(&nread, zStream, stream, obuf);\n  }\n\n  errhandler:\n  BZ2_bzReadClose(&bzerr_dummy, bzf);\n\n  switch (bzerr)\n  {\n    case -9:\n    {\n      configError();\n      break;\n    }\n\n    case -6:\n    {\n      errhandler_io:\n      ioError();\n\n      break;\n    }\n\n    case -4:\n    {\n      crcError();\n    }\n\n    case -3:\n    {\n      outOfMemory();\n    }\n\n    case -7:\n    {\n      compressedStreamEOF();\n    }\n\n    case -5:\n    {\n      helper_uncompressStream_1(zStream, stream, streamNo);\n    }\n\n    default:\n    {\n      panic(\"decompress:unexpected error\");\n    }\n\n  }\n\n  panic(\"decompress:end\");\n  return (Bool) 1;\n}\n\n",
            "calle": [
                "BZ2_bzReadClose",
                "SET_BINARY_MODE",
                "applySavedFileAttrToOutputFile",
                "compressedStreamEOF",
                "configError",
                "crcError",
                "fclose",
                "ferror",
                "fflush",
                "fileno",
                "fprintf",
                "helper_uncompressStream_1",
                "helper_uncompressStream_2",
                "helper_uncompressStream_3",
                "ioError",
                "outOfMemory",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *bzf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr_dummy",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr_dummy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread",
                        "type": "Int32",
                        "definition": [
                            "Int32 nread"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar unused[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "Int32",
                        "definition": [
                            "Int32 nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmpV",
                        "type": "void *",
                        "definition": [
                            "void *unusedTmpV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp",
                        "type": "UChar *",
                        "definition": [
                            "UChar *unusedTmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int unusedTmp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "Int32",
                        "definition": [
                            "Int32 fd = fileno(stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "testStream",
            "header": "",
            "params": [
                "FILE *zStream"
            ],
            "definition": "static Bool testStream(FILE *zStream)\n{\n  BZFILE *bzf = 0;\n  unsigned int bzf_idx = 0;\n  Int32 bzerr;\n  Int32 bzerr_dummy;\n  Int32 ret;\n  Int32 streamNo;\n  Int32 i;\n  UChar obuf[5000];\n  UChar unused[5000];\n  Int32 nUnused;\n  void *unusedTmpV;\n  UChar *unusedTmp;\n  unsigned int unusedTmp_idx = 0;\n  nUnused = 0;\n  streamNo = 0;\n  SET_BINARY_MODE(zStream);\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n  while ((Bool) 1)\n  {\n    helper_testStream_2(&bzf_idx, &streamNo, &i, &unusedTmp_idx, zStream, bzf, bzerr, obuf, unused, nUnused, unusedTmpV, unusedTmp);\n  }\n\n  if (ferror(zStream))\n  {\n    goto errhandler_io;\n  }\n  ret = fclose(zStream);\n  if (ret == EOF)\n  {\n    goto errhandler_io;\n  }\n  if (verbosity >= 2)\n  {\n    fprintf(stderr, \"\\n    \");\n  }\n  return (Bool) 1;\n  errhandler:\n  BZ2_bzReadClose(&bzerr_dummy, bzf);\n\n  if (verbosity == 0)\n  {\n    fprintf(stderr, \"%s: %s: \", progName, inName);\n  }\n  switch (bzerr)\n  {\n    case -9:\n    {\n      configError();\n      break;\n    }\n\n    case -6:\n    {\n      errhandler_io:\n      ioError();\n\n      break;\n    }\n\n    case -4:\n    {\n      fprintf(stderr, \"data integrity (CRC) error in data\\n\");\n      return (Bool) 0;\n    }\n\n    case -3:\n    {\n      outOfMemory();\n    }\n\n    case -7:\n    {\n      fprintf(stderr, \"file ends unexpectedly\\n\");\n      return (Bool) 0;\n    }\n\n    case -5:\n    {\n      helper_testStream_1(zStream, streamNo);\n    }\n\n    default:\n    {\n      panic(\"test:unexpected error\");\n    }\n\n  }\n\n  panic(\"test:end\");\n  return (Bool) 1;\n}\n\n",
            "calle": [
                "BZ2_bzReadClose",
                "SET_BINARY_MODE",
                "configError",
                "fclose",
                "ferror",
                "fprintf",
                "helper_testStream_1",
                "helper_testStream_2",
                "ioError",
                "outOfMemory",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE *",
                        "definition": [
                            "BZFILE *bzf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr_dummy",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr_dummy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar unused[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "Int32",
                        "definition": [
                            "Int32 nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmpV",
                        "type": "void *",
                        "definition": [
                            "void *unusedTmpV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp",
                        "type": "UChar *",
                        "definition": [
                            "UChar *unusedTmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int unusedTmp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "setExit",
            "header": "",
            "params": [
                "Int32 v"
            ],
            "definition": "static void setExit(Int32 v)\n{\n  if (v > exitValue)\n  {\n    exitValue = v;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v",
                        "type": "Int32",
                        "definition": [
                            "Int32 v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "cadvise",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void cadvise(void)\n{\n  if (noisy)\n  {\n    fprintf(stderr, \"\\nIt is possible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n  }\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "showFileNames",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void showFileNames(void)\n{\n  if (noisy)\n  {\n    fprintf(stderr, \"\\tInput file = %s, output file = %s\\n\", inName, outName);\n  }\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mySignalCatcher",
            "header": "",
            "params": [
                "IntNative n"
            ],
            "definition": "static void mySignalCatcher(IntNative n)\n{\n  fprintf(stderr, \"\\n%s: Control-C or similar caught, quitting.\\n\", progName);\n  cleanUpAndFail(1);\n}\n\n",
            "calle": [
                "cleanUpAndFail",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "IntNative",
                        "definition": [
                            "IntNative n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mySIGSEGVorSIGBUScatcher",
            "header": "",
            "params": [
                "IntNative n"
            ],
            "definition": "static void mySIGSEGVorSIGBUScatcher(IntNative n)\n{\n  const char *msg;\n  unsigned int msg_idx = 0;\n  if (opMode == 1)\n  {\n    msg_idx = \": Caught a SIGSEGV or SIGBUS whilst compressing.\\n\\n   Possible causes are (most likely first):\\n   (1) This computer has unreliable memory or cache hardware\\n       (a surprisingly common problem; try a different machine.)\\n   (2) A bug in the compiler used to create this executable\\n       (unlikely, if you didn't compile bzip2 yourself.)\\n   (3) A real bug in bzip2 -- I hope this should never be the case.\\n   The user's manual, Section 4.3, has more info on (1) and (2).\\n   \\n   If you suspect this is a bug in bzip2, or are unsure about (1)\\n   or (2), report it at: https://gitlab.com/bzip2/bzip2/-/issues\\n   Section 4.3 of the user's manual describes the info a useful\\n   bug report should have.  If the manual is available on your\\n   system, please try and read it before mailing me.  If you don't\\n   have the manual or can't be bothered to read it, mail me anyway.\\n\\n\";\n  }\n  else\n    msg_idx = \": Caught a SIGSEGV or SIGBUS whilst decompressing.\\n\\n   Possible causes are (most likely first):\\n   (1) The compressed data is corrupted, and bzip2's usual checks\\n       failed to detect this.  Try bzip2 -tvv my_file.bz2.\\n   (2) This computer has unreliable memory or cache hardware\\n       (a surprisingly common problem; try a different machine.)\\n   (3) A bug in the compiler used to create this executable\\n       (unlikely, if you didn't compile bzip2 yourself.)\\n   (4) A real bug in bzip2 -- I hope this should never be the case.\\n   The user's manual, Section 4.3, has more info on (2) and (3).\\n   \\n   If you suspect this is a bug in bzip2, or are unsure about (2)\\n   or (3), report it at: https://gitlab.com/bzip2/bzip2/-/issues\\n   Section 4.3 of the user's manual describes the info a useful\\n   bug report should have.  If the manual is available on your\\n   system, please try and read it before mailing me.  If you don't\\n   have the manual or can't be bothered to read it, mail me anyway.\\n\\n\";\n  write(STDERR_FILENO, \"\\n\", 1);\n  write(STDERR_FILENO, progName, strlen(progName));\n  write(STDERR_FILENO, msg, strlen(msg));\n  msg_idx = \"\\tInput file = \";\n  write(STDERR_FILENO, msg, strlen(msg));\n  write(STDERR_FILENO, inName, strlen(inName));\n  write(STDERR_FILENO, \"\\n\", 1);\n  msg_idx = \"\\tOutput file = \";\n  write(STDERR_FILENO, msg, strlen(msg));\n  write(STDERR_FILENO, outName, strlen(outName));\n  write(STDERR_FILENO, \"\\n\", 1);\n  if (opMode == 1)\n  {\n    setExit(3);\n  }\n  else\n    setExit(2);\n  _exit(exitValue);\n}\n\n",
            "calle": [
                "_exit",
                "setExit",
                "strlen",
                "write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "IntNative",
                        "definition": [
                            "IntNative n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int msg_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pad",
            "header": "",
            "params": [
                "Char *s"
            ],
            "definition": "static void pad(Char *s)\n{\n  Int32 i;\n  if (((Int32) strlen(s)) >= longestFileName)\n  {\n    return;\n  }\n  for (i = 1; i <= (longestFileName - ((Int32) strlen(s))); i += 1)\n    fprintf(stderr, \" \");\n\n}\n\n",
            "calle": [
                "fprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "Char *",
                        "definition": [
                            "Char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "longestFileName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fileExists",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static Bool fileExists(Char *name)\n{\n  FILE *tmp = fopen(name, \"rb\");\n  Bool exists = tmp != 0;\n  if (tmp != 0)\n  {\n    fclose(tmp);\n  }\n  return exists;\n}\n\n",
            "calle": [
                "fclose",
                "fopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *tmp = fopen(name, \"rb\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exists",
                        "type": "Bool",
                        "definition": [
                            "Bool exists = tmp != 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fopen_output_safely",
            "header": "",
            "params": [
                "Char *name",
                "const char *mode"
            ],
            "definition": "static FILE *fopen_output_safely(Char *name, const char *mode)\n{\n  return fopen(name, mode);\n}\n\n",
            "calle": [
                "fopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "notAStandardFile",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static Bool notAStandardFile(Char *name)\n{\n  IntNative i;\n  struct MY_STAT statBuf;\n  i = MY_LSTAT(name, &statBuf);\n  if (i != 0)\n  {\n    return (Bool) 1;\n  }\n  if (MY_S_ISREG(statBuf.st_mode))\n  {\n    return (Bool) 0;\n  }\n  return (Bool) 1;\n}\n\n",
            "calle": [
                "MY_LSTAT",
                "MY_S_ISREG"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "IntNative",
                        "definition": [
                            "IntNative i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "countHardLinks",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static Int32 countHardLinks(Char *name)\n{\n  IntNative i;\n  struct MY_STAT statBuf;\n  i = MY_LSTAT(name, &statBuf);\n  if (i != 0)\n  {\n    return 0;\n  }\n  return statBuf.st_nlink - 1;\n}\n\n",
            "calle": [
                "MY_LSTAT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "IntNative",
                        "definition": [
                            "IntNative i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "saveInputFileMetaInfo",
            "header": "",
            "params": [
                "Char *srcName"
            ],
            "definition": "static void saveInputFileMetaInfo(Char *srcName)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "srcName",
                        "type": "Char *",
                        "definition": [
                            "Char *srcName"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "applySavedTimeInfoToOutputFile",
            "header": "",
            "params": [
                "Char *dstName"
            ],
            "definition": "static void applySavedTimeInfoToOutputFile(Char *dstName)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dstName",
                        "type": "Char *",
                        "definition": [
                            "Char *dstName"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "containsDubiousChars",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static Bool containsDubiousChars(Char *name)\n{\n  unsigned int name_idx = 0;\n  for (; name[name_idx] != '\\0'; name_idx += 1)\n    if ((name[name_idx] == '?') || (name[name_idx] == '*'))\n  {\n    return (Bool) 1;\n  }\n\n  return (Bool) 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int name_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hasSuffix",
            "header": "",
            "params": [
                "Char *s",
                "const Char *suffix"
            ],
            "definition": "static Bool hasSuffix(Char *s, const Char *suffix)\n{\n  Int32 ns = strlen(s);\n  Int32 nx = strlen(suffix);\n  if (ns < nx)\n  {\n    return (Bool) 0;\n  }\n  if (strcmp((s + ns) - nx, suffix) == 0)\n  {\n    return (Bool) 1;\n  }\n  return (Bool) 0;\n}\n\n",
            "calle": [
                "strcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "Char *",
                        "definition": [
                            "Char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix",
                        "type": "const Char *",
                        "definition": [
                            "const Char *suffix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ns",
                        "type": "Int32",
                        "definition": [
                            "Int32 ns = strlen(s)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nx",
                        "type": "Int32",
                        "definition": [
                            "Int32 nx = strlen(suffix)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mapSuffix",
            "header": "",
            "params": [
                "Char *name",
                "const Char *oldSuffix",
                "const Char *newSuffix"
            ],
            "definition": "static Bool mapSuffix(Char *name, const Char *oldSuffix, const Char *newSuffix)\n{\n  if (!hasSuffix(name, oldSuffix))\n  {\n    return (Bool) 0;\n  }\n  name[strlen(name) - strlen(oldSuffix)] = 0;\n  strcat(name, newSuffix);\n  return (Bool) 1;\n}\n\n",
            "calle": [
                "hasSuffix",
                "strcat",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldSuffix",
                        "type": "const Char *",
                        "definition": [
                            "const Char *oldSuffix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newSuffix",
                        "type": "const Char *",
                        "definition": [
                            "const Char *newSuffix"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compress",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static void compress(Char *name)\n{\n  FILE *inStr;\n  unsigned int inStr_idx = 0;\n  FILE *outStr;\n  unsigned int outStr_idx = 0;\n  Int32 n;\n  Int32 i;\n  struct MY_STAT statBuf;\n  deleteOutputOnInterrupt = (Bool) 0;\n  if ((name == 0) && (srcMode != 1))\n  {\n    panic(\"compress: bad modes\\n\");\n  }\n  switch (srcMode)\n  {\n    case 1:\n    {\n      copyFileName(inName, (Char *) \"(stdin)\");\n      copyFileName(outName, (Char *) \"(stdout)\");\n      break;\n    }\n\n    case 3:\n    {\n      copyFileName(inName, name);\n      copyFileName(outName, name);\n      strcat(outName, \".bz2\");\n      break;\n    }\n\n    case 2:\n    {\n      copyFileName(inName, name);\n      copyFileName(outName, (Char *) \"(stdout)\");\n      break;\n    }\n\n  }\n\n  if ((srcMode != 1) && containsDubiousChars(inName))\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: There are no files matching `%s'.\\n\", progName, inName);\n    }\n    setExit(1);\n    return;\n  }\n  if ((srcMode != 1) && (!fileExists(inName)))\n  {\n    fprintf(stderr, \"%s: Can't open input file %s: %s.\\n\", progName, inName, strerror(errno));\n    setExit(1);\n    return;\n  }\n  for (i = 0; i < 4; i += 1)\n  {\n    if (hasSuffix(inName, zSuffix[i]))\n    {\n      if (noisy)\n      {\n        fprintf(stderr, \"%s: Input file %s already has %s suffix.\\n\", progName, inName, zSuffix[i]);\n      }\n      setExit(1);\n      return;\n    }\n  }\n\n  if ((srcMode == 3) || (srcMode == 2))\n  {\n    MY_STAT(inName, &statBuf);\n    if (MY_S_ISDIR(statBuf.st_mode))\n    {\n      fprintf(stderr, \"%s: Input file %s is a directory.\\n\", progName, inName);\n      setExit(1);\n      return;\n    }\n  }\n  if (((srcMode == 3) && (!forceOverwrite)) && notAStandardFile(inName))\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: Input file %s is not a normal file.\\n\", progName, inName);\n    }\n    setExit(1);\n    return;\n  }\n  if ((srcMode == 3) && fileExists(outName))\n  {\n    if (forceOverwrite)\n    {\n      remove(outName);\n    }\n    else\n    {\n      fprintf(stderr, \"%s: Output file %s already exists.\\n\", progName, outName);\n      setExit(1);\n      return;\n    }\n  }\n  if (((srcMode == 3) && (!forceOverwrite)) && ((n = countHardLinks(inName)) > 0))\n  {\n    fprintf(stderr, \"%s: Input file %s has %d other link%s.\\n\", progName, inName, n, (n > 1) ? (\"s\") : (\"\"));\n    setExit(1);\n    return;\n  }\n  if (srcMode == 3)\n  {\n    saveInputFileMetaInfo(inName);\n  }\n  switch (srcMode)\n  {\n    case 1:\n    {\n      helper_compress_2(&inStr_idx, &outStr_idx);\n    }\n\n    case 2:\n    {\n      helper_compress_3(&inStr_idx, &outStr_idx, inStr);\n    }\n\n    case 3:\n    {\n      helper_compress_4(&inStr_idx, &outStr_idx, inStr, outStr);\n    }\n\n    default:\n    {\n      panic(\"compress: bad srcMode\");\n      break;\n    }\n\n  }\n\n  if (verbosity >= 1)\n  {\n    fprintf(stderr, \"  %s: \", inName);\n    pad(inName);\n    fflush(stderr);\n  }\n  outputHandleJustInCase = &outStr[outStr_idx];\n  deleteOutputOnInterrupt = (Bool) 1;\n  compressStream(inStr, outStr);\n  outputHandleJustInCase = 0;\n  if (srcMode == 3)\n  {\n    helper_compress_1();\n  }\n  deleteOutputOnInterrupt = (Bool) 0;\n}\n\n",
            "calle": [
                "MY_STAT",
                "MY_S_ISDIR",
                "compressStream",
                "containsDubiousChars",
                "copyFileName",
                "countHardLinks",
                "fflush",
                "fileExists",
                "fprintf",
                "hasSuffix",
                "helper_compress_1",
                "helper_compress_2",
                "helper_compress_3",
                "helper_compress_4",
                "notAStandardFile",
                "pad",
                "panic",
                "remove",
                "saveInputFileMetaInfo",
                "setExit",
                "strcat",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *outStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zSuffix",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uncompress",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static void uncompress(Char *name)\n{\n  FILE *inStr;\n  unsigned int inStr_idx = 0;\n  FILE *outStr;\n  unsigned int outStr_idx = 0;\n  Int32 n;\n  Int32 i;\n  Bool magicNumberOK;\n  Bool cantGuess;\n  struct MY_STAT statBuf;\n  deleteOutputOnInterrupt = (Bool) 0;\n  if ((name == 0) && (srcMode != 1))\n  {\n    panic(\"uncompress: bad modes\\n\");\n  }\n  cantGuess = (Bool) 0;\n  switch (srcMode)\n  {\n    case 1:\n    {\n      copyFileName(inName, (Char *) \"(stdin)\");\n      copyFileName(outName, (Char *) \"(stdout)\");\n      break;\n    }\n\n    case 3:\n    {\n      helper_uncompress_1(&i, &cantGuess, name);\n    }\n\n    case 2:\n    {\n      copyFileName(inName, name);\n      copyFileName(outName, (Char *) \"(stdout)\");\n      break;\n    }\n\n  }\n\n  zzz:\n  if ((srcMode != 1) && containsDubiousChars(inName))\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: There are no files matching `%s'.\\n\", progName, inName);\n    }\n    setExit(1);\n    return;\n  }\n\n  if ((srcMode != 1) && (!fileExists(inName)))\n  {\n    fprintf(stderr, \"%s: Can't open input file %s: %s.\\n\", progName, inName, strerror(errno));\n    setExit(1);\n    return;\n  }\n  if ((srcMode == 3) || (srcMode == 2))\n  {\n    MY_STAT(inName, &statBuf);\n    if (MY_S_ISDIR(statBuf.st_mode))\n    {\n      fprintf(stderr, \"%s: Input file %s is a directory.\\n\", progName, inName);\n      setExit(1);\n      return;\n    }\n  }\n  if (((srcMode == 3) && (!forceOverwrite)) && notAStandardFile(inName))\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: Input file %s is not a normal file.\\n\", progName, inName);\n    }\n    setExit(1);\n    return;\n  }\n  if (cantGuess)\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: Can't guess original name for %s -- using %s\\n\", progName, inName, outName);\n    }\n  }\n  if ((srcMode == 3) && fileExists(outName))\n  {\n    if (forceOverwrite)\n    {\n      remove(outName);\n    }\n    else\n    {\n      fprintf(stderr, \"%s: Output file %s already exists.\\n\", progName, outName);\n      setExit(1);\n      return;\n    }\n  }\n  if (((srcMode == 3) && (!forceOverwrite)) && ((n = countHardLinks(inName)) > 0))\n  {\n    fprintf(stderr, \"%s: Input file %s has %d other link%s.\\n\", progName, inName, n, (n > 1) ? (\"s\") : (\"\"));\n    setExit(1);\n    return;\n  }\n  if (srcMode == 3)\n  {\n    saveInputFileMetaInfo(inName);\n  }\n  switch (srcMode)\n  {\n    case 1:\n    {\n      helper_uncompress_3(&inStr_idx, &outStr_idx);\n    }\n\n    case 2:\n    {\n      helper_uncompress_5(&inStr_idx, &outStr_idx, inStr);\n    }\n\n    case 3:\n    {\n      helper_uncompress_6(&inStr_idx, &outStr_idx, inStr, outStr);\n    }\n\n    default:\n    {\n      panic(\"uncompress: bad srcMode\");\n      break;\n    }\n\n  }\n\n  if (verbosity >= 1)\n  {\n    fprintf(stderr, \"  %s: \", inName);\n    pad(inName);\n    fflush(stderr);\n  }\n  outputHandleJustInCase = &outStr[outStr_idx];\n  deleteOutputOnInterrupt = (Bool) 1;\n  magicNumberOK = uncompressStream(inStr, outStr);\n  outputHandleJustInCase = 0;\n  if (magicNumberOK)\n  {\n    helper_uncompress_4();\n  }\n  else\n  {\n    helper_uncompress_2();\n  }\n  deleteOutputOnInterrupt = (Bool) 0;\n  if (magicNumberOK)\n  {\n    if (verbosity >= 1)\n    {\n      fprintf(stderr, \"done\\n\");\n    }\n  }\n  else\n  {\n    setExit(2);\n    if (verbosity >= 1)\n    {\n      fprintf(stderr, \"not a bzip2 file.\\n\");\n    }\n    else\n      fprintf(stderr, \"%s: %s is not a bzip2 file.\\n\", progName, inName);\n  }\n}\n\n",
            "calle": [
                "MY_STAT",
                "MY_S_ISDIR",
                "containsDubiousChars",
                "copyFileName",
                "countHardLinks",
                "fflush",
                "fileExists",
                "fprintf",
                "helper_uncompress_1",
                "helper_uncompress_2",
                "helper_uncompress_3",
                "helper_uncompress_4",
                "helper_uncompress_5",
                "helper_uncompress_6",
                "notAStandardFile",
                "pad",
                "panic",
                "remove",
                "saveInputFileMetaInfo",
                "setExit",
                "strerror",
                "uncompressStream"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *outStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "magicNumberOK",
                        "type": "Bool",
                        "definition": [
                            "Bool magicNumberOK"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cantGuess",
                        "type": "Bool",
                        "definition": [
                            "Bool cantGuess"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "testf",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static void testf(Char *name)\n{\n  FILE *inStr;\n  unsigned int inStr_idx = 0;\n  Bool allOK;\n  struct MY_STAT statBuf;\n  deleteOutputOnInterrupt = (Bool) 0;\n  if ((name == 0) && (srcMode != 1))\n  {\n    panic(\"testf: bad modes\\n\");\n  }\n  copyFileName(outName, (Char *) \"(none)\");\n  switch (srcMode)\n  {\n    case 1:\n    {\n      copyFileName(inName, (Char *) \"(stdin)\");\n      break;\n    }\n\n    case 3:\n    {\n      copyFileName(inName, name);\n      break;\n    }\n\n    case 2:\n    {\n      copyFileName(inName, name);\n      break;\n    }\n\n  }\n\n  if ((srcMode != 1) && containsDubiousChars(inName))\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"%s: There are no files matching `%s'.\\n\", progName, inName);\n    }\n    setExit(1);\n    return;\n  }\n  if ((srcMode != 1) && (!fileExists(inName)))\n  {\n    fprintf(stderr, \"%s: Can't open input %s: %s.\\n\", progName, inName, strerror(errno));\n    setExit(1);\n    return;\n  }\n  if (srcMode != 1)\n  {\n    MY_STAT(inName, &statBuf);\n    if (MY_S_ISDIR(statBuf.st_mode))\n    {\n      fprintf(stderr, \"%s: Input file %s is a directory.\\n\", progName, inName);\n      setExit(1);\n      return;\n    }\n  }\n  switch (srcMode)\n  {\n    case 1:\n    {\n      helper_testf_2(&inStr_idx);\n    }\n\n    case 2:\n\n    case 3:\n    {\n      helper_testf_1(&inStr_idx, inStr);\n    }\n\n    default:\n    {\n      panic(\"testf: bad srcMode\");\n      break;\n    }\n\n  }\n\n  if (verbosity >= 1)\n  {\n    fprintf(stderr, \"  %s: \", inName);\n    pad(inName);\n    fflush(stderr);\n  }\n  outputHandleJustInCase = 0;\n  allOK = testStream(inStr);\n  if (allOK && (verbosity >= 1))\n  {\n    fprintf(stderr, \"ok\\n\");\n  }\n  if (!allOK)\n  {\n    testFailsExist = (Bool) 1;\n  }\n}\n\n",
            "calle": [
                "MY_STAT",
                "MY_S_ISDIR",
                "containsDubiousChars",
                "copyFileName",
                "fflush",
                "fileExists",
                "fprintf",
                "helper_testf_1",
                "helper_testf_2",
                "pad",
                "panic",
                "setExit",
                "strerror",
                "testStream"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allOK",
                        "type": "Bool",
                        "definition": [
                            "Bool allOK"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statBuf",
                        "type": "struct MY_STAT",
                        "definition": [
                            "struct MY_STAT statBuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "testFailsExist",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "license",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void license(void)\n{\n  fprintf(stdout, \"bzip2, a block-sorting file compressor.  Version %s.\\n   \\n   Copyright (C) 1996-2010 by Julian Seward.\\n   \\n   This program is free software; you can redistribute it and/or modify\\n   it under the terms set out in the LICENSE file, which is included\\n   in the bzip2-1.0.6 source distribution.\\n   \\n   This program is distributed in the hope that it will be useful,\\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n   LICENSE file for more details.\\n   \\n\", BZ2_bzlibVersion());\n}\n\n",
            "calle": [
                "BZ2_bzlibVersion",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "usage",
            "header": "",
            "params": [
                "Char *fullProgName"
            ],
            "definition": "static void usage(Char *fullProgName)\n{\n  fprintf(stderr, \"bzip2, a block-sorting file compressor.  Version %s.\\n\\n   usage: %s [flags and input files in any order]\\n\\n   -h --help           print this message\\n   -d --decompress     force decompression\\n   -z --compress       force compression\\n   -k --keep           keep (don't delete) input files\\n   -f --force          overwrite existing output files\\n   -t --test           test compressed file integrity\\n   -c --stdout         output to standard out\\n   -q --quiet          suppress noncritical error messages\\n   -v --verbose        be verbose (a 2nd -v gives more)\\n   -L --license        display software version & license\\n   -V --version        display software version & license\\n   -s --small          use less memory (at most 2500k)\\n   -1 .. -9            set block size to 100k .. 900k\\n   --fast              alias for -1\\n   --best              alias for -9\\n\\n   If invoked as `bzip2', default action is to compress.\\n              as `bunzip2',  default action is to decompress.\\n              as `bzcat', default action is to decompress to stdout.\\n\\n   If no file names are given, bzip2 compresses or decompresses\\n   from standard input to standard output.  You can combine\\n   short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\", BZ2_bzlibVersion(), fullProgName);\n}\n\n",
            "calle": [
                "BZ2_bzlibVersion",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fullProgName",
                        "type": "Char *",
                        "definition": [
                            "Char *fullProgName"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "redundant",
            "header": "",
            "params": [
                "Char *flag"
            ],
            "definition": "static void redundant(Char *flag)\n{\n  fprintf(stderr, \"%s: %s is redundant in versions 0.9.5 and above\\n\", progName, flag);\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "flag",
                        "type": "Char *",
                        "definition": [
                            "Char *flag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mkCell",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static Cell *mkCell(void)\n{\n  Cell *c;\n  unsigned int c_idx = 0;\n  c_idx = (Cell *) myMalloc(sizeof(Cell));\n  c->name = 0;\n  c->link = 0;\n  return c;\n}\n\n",
            "calle": [
                "myMalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "Cell *",
                        "definition": [
                            "Cell *c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int c_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "snocString",
            "header": "",
            "params": [
                "Cell *root",
                "Char *name"
            ],
            "definition": "static Cell *snocString(Cell *root, Char *name)\n{\n  if (root == 0)\n  {\n    Cell *tmp = mkCell();\n    unsigned int tmp_idx = 0;\n    tmp->name = (Char *) myMalloc(5 + strlen(name));\n    strcpy(tmp->name, name);\n    return tmp;\n  }\n  else\n  {\n    Cell *tmp = root;\n    unsigned int tmp_idx = 0;\n    while (tmp->link != 0)\n      tmp_idx = tmp_idx->link;\n\n    tmp->link = snocString(tmp->link, name);\n    return root;\n  }\n}\n\n",
            "calle": [
                "mkCell",
                "myMalloc",
                "snocString",
                "strcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "root",
                        "type": "Cell *",
                        "definition": [
                            "Cell *root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Cell *",
                        "definition": [
                            "Cell *tmp = mkCell()",
                            "Cell *tmp = root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "addFlagsFromEnvVar",
            "header": "",
            "params": [
                "Cell **argList",
                "Char *varName"
            ],
            "definition": "static void addFlagsFromEnvVar(Cell **argList, Char *varName)\n{\n  Int32 i;\n  Int32 j;\n  Int32 k;\n  Char *envbase;\n  unsigned int envbase_idx = 0;\n  Char *p;\n  unsigned int p_idx = 0;\n  envbase_idx = getenv(varName);\n  if ((&envbase[envbase_idx]) != 0)\n  {\n    helper_addFlagsFromEnvVar_1(&i, &j, &k, &p_idx, argList, envbase, envbase_idx, p);\n  }\n}\n\n",
            "calle": [
                "getenv",
                "helper_addFlagsFromEnvVar_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell **",
                        "definition": [
                            "Cell **argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varName",
                        "type": "Char *",
                        "definition": [
                            "Char *varName"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "envbase",
                        "type": "Char *",
                        "definition": [
                            "Char *envbase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "envbase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int envbase_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "Char *",
                        "definition": [
                            "Char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#bzip2",
            "header": "",
            "params": [
                "IntNative argc",
                "Char *argv[]"
            ],
            "definition": "IntNative main(IntNative argc, Char *argv[])\n{\n  Int32 i;\n  Int32 j;\n  Char *tmp;\n  unsigned int tmp_idx = 0;\n  Cell *argList;\n  unsigned int argList_idx = 0;\n  Cell *aa;\n  unsigned int aa_idx = 0;\n  Bool decode;\n  if (((((((sizeof(Int32)) != 4) || ((sizeof(UInt32)) != 4)) || ((sizeof(Int16)) != 2)) || ((sizeof(UInt16)) != 2)) || ((sizeof(Char)) != 1)) || ((sizeof(UChar)) != 1))\n  {\n    configError();\n  }\n  outputHandleJustInCase = 0;\n  smallMode = (Bool) 0;\n  keepInputFiles = (Bool) 0;\n  forceOverwrite = (Bool) 0;\n  noisy = (Bool) 1;\n  verbosity = 0;\n  blockSize100k = 9;\n  testFailsExist = (Bool) 0;\n  unzFailsExist = (Bool) 0;\n  numFileNames = 0;\n  numFilesProcessed = 0;\n  workFactor = 30;\n  deleteOutputOnInterrupt = (Bool) 0;\n  exitValue = 0;\n  i = (j = 0);\n  signal(SIGSEGV, mySIGSEGVorSIGBUScatcher);\n  copyFileName(inName, (Char *) \"(none)\");\n  copyFileName(outName, (Char *) \"(none)\");\n  copyFileName(progNameReally, argv[0]);\n  progName = &progNameReally[0];\n  for (tmp_idx = &progNameReally[0]; tmp[tmp_idx] != '\\0'; tmp_idx += 1)\n    if (tmp[tmp_idx] == PATH_SEP)\n  {\n    progName = (&tmp[tmp_idx]) + 1;\n  }\n\n  argList_idx = 0;\n  addFlagsFromEnvVar(&(&argList[argList_idx]), (Char *) \"BZIP2\");\n  addFlagsFromEnvVar(&(&argList[argList_idx]), (Char *) \"BZIP\");\n  for (i = 1; i <= (argc - 1); i += 1)\n    APPEND_FILESPEC(argList, argv[i]);\n\n  longestFileName = 7;\n  numFileNames = 0;\n  decode = (Bool) 1;\n  for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n  {\n    helper_main_1(&decode, aa);\n  }\n\n  if (numFileNames == 0)\n  {\n    srcMode = 1;\n  }\n  else\n    srcMode = 3;\n  opMode = 1;\n  if ((strstr(progName, \"unzip\") != 0) || (strstr(progName, \"UNZIP\") != 0))\n  {\n    opMode = 2;\n  }\n  if ((((strstr(progName, \"z2cat\") != 0) || (strstr(progName, \"Z2CAT\") != 0)) || (strstr(progName, \"zcat\") != 0)) || (strstr(progName, \"ZCAT\") != 0))\n  {\n    opMode = 2;\n    srcMode = (numFileNames == 0) ? (1) : (2);\n  }\n  for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n  {\n    helper_main_6(&j, aa);\n  }\n\n  for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n  {\n    helper_main_5(aa);\n  }\n\n  if (verbosity > 4)\n  {\n    verbosity = 4;\n  }\n  if (((opMode == 1) && smallMode) && (blockSize100k > 2))\n  {\n    blockSize100k = 2;\n  }\n  if ((opMode == 3) && (srcMode == 2))\n  {\n    fprintf(stderr, \"%s: -c and -t cannot be used together.\\n\", progName);\n    exit(1);\n  }\n  if ((srcMode == 2) && (numFileNames == 0))\n  {\n    srcMode = 1;\n  }\n  if (opMode != 1)\n  {\n    blockSize100k = 0;\n  }\n  if (srcMode == 3)\n  {\n    signal(SIGINT, mySignalCatcher);\n    signal(SIGTERM, mySignalCatcher);\n  }\n  if (opMode == 1)\n  {\n    helper_main_2(&aa_idx, &decode, argList, argList_idx, aa);\n  }\n  else\n    if (opMode == 2)\n  {\n    helper_main_3(&aa_idx, &decode, argList, argList_idx, aa);\n  }\n  else\n  {\n    helper_main_4(&aa_idx, &decode, argList, argList_idx, aa);\n  }\n  aa_idx = &argList[argList_idx];\n  while ((&aa[aa_idx]) != 0)\n  {\n    Cell *aa2 = aa->link;\n    if (aa->name != 0)\n    {\n      free(aa->name);\n    }\n    free(aa);\n    aa_idx = aa2;\n  }\n\n  return exitValue;\n}\n\n",
            "calle": [
                "APPEND_FILESPEC",
                "addFlagsFromEnvVar",
                "configError",
                "copyFileName",
                "exit",
                "fprintf",
                "free",
                "helper_main_1",
                "helper_main_2",
                "helper_main_3",
                "helper_main_4",
                "helper_main_5",
                "helper_main_6",
                "mySIGSEGVorSIGBUScatcher",
                "mySignalCatcher",
                "signal",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "IntNative",
                        "definition": [
                            "IntNative argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "Char *[]",
                        "definition": [
                            "Char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "Char *",
                        "definition": [
                            "Char *tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell *",
                        "definition": [
                            "Cell *argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argList_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell *",
                        "definition": [
                            "Cell *aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int aa_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode",
                        "type": "Bool",
                        "definition": [
                            "Bool decode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa2",
                        "type": "Cell *",
                        "definition": [
                            "Cell *aa2 = aa->link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "keepInputFiles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "testFailsExist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "unzFailsExist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFileNames",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFilesProcessed",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progNameReally",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "longestFileName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "opMode",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compressStream_1",
            "header": "",
            "params": [
                "Int32 * const ret_ref",
                "FILE * const zStream"
            ],
            "definition": "void helper_compressStream_1(Int32 * const ret_ref, FILE * const zStream)\n{\n  Int32 ret = *ret_ref;\n  Int32 fd = fileno(zStream);\n  if (fd < 0)\n  {\n    goto errhandler_io;\n  }\n  applySavedFileAttrToOutputFile(fd);\n  ret = fclose(zStream);\n  outputHandleJustInCase = 0;\n  if (ret == EOF)\n  {\n    goto errhandler_io;\n  }\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "applySavedFileAttrToOutputFile",
                "fclose",
                "fileno"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "Int32",
                        "definition": [
                            "Int32 ret = *ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "Int32",
                        "definition": [
                            "Int32 fd = fileno(zStream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputHandleJustInCase",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compressStream_2",
            "header": "",
            "params": [
                "Int32 * const nIbuf_ref",
                "FILE * const stream",
                "BZFILE * const bzf",
                "UChar ibuf[5000]",
                "Int32 bzerr"
            ],
            "definition": "void helper_compressStream_2(Int32 * const nIbuf_ref, FILE * const stream, BZFILE * const bzf, UChar ibuf[5000], Int32 bzerr)\n{\n  Int32 nIbuf = *nIbuf_ref;\n  if (myfeof(stream))\n  {\n    break;\n  }\n  nIbuf = fread(ibuf, sizeof(UChar), 5000, stream);\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  if (nIbuf > 0)\n  {\n    BZ2_bzWrite(&bzerr, bzf, (void *) ibuf, nIbuf);\n  }\n  if (bzerr != 0)\n  {\n    goto errhandler;\n  }\n  *nIbuf_ref = nIbuf;\n}\n\n",
            "calle": [
                "BZ2_bzWrite",
                "ferror",
                "fread",
                "myfeof"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nIbuf_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nIbuf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE * const",
                        "definition": [
                            "BZFILE * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ibuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar ibuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nIbuf",
                        "type": "Int32",
                        "definition": [
                            "Int32 nIbuf = *nIbuf_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compressStream_3",
            "header": "",
            "params": [
                "UInt32 nbytes_in_lo32",
                "UInt32 nbytes_in_hi32",
                "UInt32 nbytes_out_lo32",
                "UInt32 nbytes_out_hi32"
            ],
            "definition": "void helper_compressStream_3(UInt32 nbytes_in_lo32, UInt32 nbytes_in_hi32, UInt32 nbytes_out_lo32, UInt32 nbytes_out_hi32)\n{\n  if ((nbytes_in_lo32 == 0) && (nbytes_in_hi32 == 0))\n  {\n    fprintf(stderr, \" no data compressed.\\n\");\n  }\n  else\n  {\n    Char buf_nin[32];\n    Char buf_nout[32];\n    UInt64 nbytes_in;\n    UInt64 nbytes_out;\n    double nbytes_in_d;\n    double nbytes_out_d;\n    uInt64_from_UInt32s(&nbytes_in, nbytes_in_lo32, nbytes_in_hi32);\n    uInt64_from_UInt32s(&nbytes_out, nbytes_out_lo32, nbytes_out_hi32);\n    nbytes_in_d = uInt64_to_double(&nbytes_in);\n    nbytes_out_d = uInt64_to_double(&nbytes_out);\n    uInt64_toAscii(buf_nin, &nbytes_in);\n    uInt64_toAscii(buf_nout, &nbytes_out);\n    fprintf(stderr, \"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\", nbytes_in_d / nbytes_out_d, (8.0 * nbytes_out_d) / nbytes_in_d, 100.0 * (1.0 - (nbytes_out_d / nbytes_in_d)), buf_nin, buf_nout);\n  }\n}\n\n",
            "calle": [
                "fprintf",
                "uInt64_from_UInt32s",
                "uInt64_toAscii",
                "uInt64_to_double"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nbytes_in_lo32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_in_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_hi32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_in_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_lo32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_out_lo32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_hi32",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 nbytes_out_hi32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_nin",
                        "type": "Char [32]",
                        "definition": [
                            "Char buf_nin[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_nout",
                        "type": "Char [32]",
                        "definition": [
                            "Char buf_nout[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in",
                        "type": "UInt64",
                        "definition": [
                            "UInt64 nbytes_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out",
                        "type": "UInt64",
                        "definition": [
                            "UInt64 nbytes_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_in_d",
                        "type": "double",
                        "definition": [
                            "double nbytes_in_d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes_out_d",
                        "type": "double",
                        "definition": [
                            "double nbytes_out_d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompressStream_1",
            "header": "",
            "params": [
                "FILE * const zStream",
                "FILE * const stream",
                "Int32 streamNo"
            ],
            "definition": "Bool helper_uncompressStream_1(FILE * const zStream, FILE * const stream, Int32 streamNo)\n{\n  if (zStream != stdin)\n  {\n    fclose(zStream);\n  }\n  if (stream != stdout)\n  {\n    fclose(stream);\n  }\n  if (streamNo == 1)\n  {\n    return (Bool) 0;\n  }\n  else\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"\\n%s: %s: trailing garbage after EOF ignored\\n\", progName, inName);\n    }\n    return (Bool) 1;\n  }\n}\n\n",
            "calle": [
                "fclose",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompressStream_2",
            "header": "",
            "params": [
                "Int32 * const nread_ref",
                "FILE * const zStream",
                "FILE * const stream",
                "UChar obuf[5000]"
            ],
            "definition": "void helper_uncompressStream_2(Int32 * const nread_ref, FILE * const zStream, FILE * const stream, UChar obuf[5000])\n{\n  Int32 nread = *nread_ref;\n  rewind(zStream);\n  while ((Bool) 1)\n  {\n    if (myfeof(zStream))\n    {\n      break;\n    }\n    nread = fread(obuf, sizeof(UChar), 5000, zStream);\n    if (ferror(zStream))\n    {\n      goto errhandler_io;\n    }\n    if (nread > 0)\n    {\n      fwrite(obuf, sizeof(UChar), nread, stream);\n    }\n    if (ferror(stream))\n    {\n      goto errhandler_io;\n    }\n  }\n\n  goto closeok;\n  *nread_ref = nread;\n}\n\n",
            "calle": [
                "ferror",
                "fread",
                "fwrite",
                "myfeof",
                "rewind"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nread_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nread_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread",
                        "type": "Int32",
                        "definition": [
                            "Int32 nread = *nread_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompressStream_3",
            "header": "",
            "params": [
                "unsigned int * const bzf_idx_ref",
                "Int32 * const nread_ref",
                "Int32 * const streamNo_ref",
                "Int32 * const i_ref",
                "unsigned int * const unusedTmp_idx_ref",
                "FILE * const zStream",
                "FILE * const stream",
                "BZFILE * const bzf",
                "Int32 bzerr",
                "UChar obuf[5000]",
                "UChar unused[5000]",
                "Int32 nUnused",
                "void * const unusedTmpV",
                "UChar * const unusedTmp"
            ],
            "definition": "void helper_uncompressStream_3(unsigned int * const bzf_idx_ref, Int32 * const nread_ref, Int32 * const streamNo_ref, Int32 * const i_ref, unsigned int * const unusedTmp_idx_ref, FILE * const zStream, FILE * const stream, BZFILE * const bzf, Int32 bzerr, UChar obuf[5000], UChar unused[5000], Int32 nUnused, void * const unusedTmpV, UChar * const unusedTmp)\n{\n  unsigned int bzf_idx = *bzf_idx_ref;\n  Int32 nread = *nread_ref;\n  Int32 streamNo = *streamNo_ref;\n  Int32 i = *i_ref;\n  unsigned int unusedTmp_idx = *unusedTmp_idx_ref;\n  bzf_idx = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int) smallMode, unused, nUnused);\n  if (((&bzf[bzf_idx]) == 0) || (bzerr != 0))\n  {\n    goto errhandler;\n  }\n  streamNo += 1;\n  while (bzerr == 0)\n  {\n    helper_helper_uncompressStream_3_1(&nread, stream, bzf, bzerr, obuf);\n  }\n\n  if (bzerr != 4)\n  {\n    goto errhandler;\n  }\n  BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n  if (bzerr != 0)\n  {\n    panic(\"decompress:bzReadGetUnused\");\n  }\n  unusedTmp_idx = (UChar *) unusedTmpV;\n  for (i = 0; i < nUnused; i += 1)\n    unused[i] = unusedTmp[i + unusedTmp_idx];\n\n  BZ2_bzReadClose(&bzerr, bzf);\n  if (bzerr != 0)\n  {\n    panic(\"decompress:bzReadGetUnused\");\n  }\n  if ((nUnused == 0) && myfeof(zStream))\n  {\n    break;\n  }\n  *bzf_idx_ref = bzf_idx;\n  *nread_ref = nread;\n  *streamNo_ref = streamNo;\n  *i_ref = i;\n  *unusedTmp_idx_ref = unusedTmp_idx;\n}\n\n",
            "calle": [
                "BZ2_bzReadClose",
                "BZ2_bzReadGetUnused",
                "BZ2_bzReadOpen",
                "helper_helper_uncompressStream_3_1",
                "myfeof",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const bzf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nread_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const streamNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const unusedTmp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE * const",
                        "definition": [
                            "BZFILE * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar unused[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "Int32",
                        "definition": [
                            "Int32 nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmpV",
                        "type": "void * const",
                        "definition": [
                            "void * const unusedTmpV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const unusedTmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = *bzf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread",
                        "type": "Int32",
                        "definition": [
                            "Int32 nread = *nread_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo = *streamNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int unusedTmp_idx = *unusedTmp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_testStream_1",
            "header": "",
            "params": [
                "FILE * const zStream",
                "Int32 streamNo"
            ],
            "definition": "Bool helper_testStream_1(FILE * const zStream, Int32 streamNo)\n{\n  if (zStream != stdin)\n  {\n    fclose(zStream);\n  }\n  if (streamNo == 1)\n  {\n    fprintf(stderr, \"bad magic number (file not created by bzip2)\\n\");\n    return (Bool) 0;\n  }\n  else\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"trailing garbage after EOF ignored\\n\");\n    }\n    return (Bool) 1;\n  }\n}\n\n",
            "calle": [
                "fclose",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_testStream_2",
            "header": "",
            "params": [
                "unsigned int * const bzf_idx_ref",
                "Int32 * const streamNo_ref",
                "Int32 * const i_ref",
                "unsigned int * const unusedTmp_idx_ref",
                "FILE * const zStream",
                "BZFILE * const bzf",
                "Int32 bzerr",
                "UChar obuf[5000]",
                "UChar unused[5000]",
                "Int32 nUnused",
                "void * const unusedTmpV",
                "UChar * const unusedTmp"
            ],
            "definition": "void helper_testStream_2(unsigned int * const bzf_idx_ref, Int32 * const streamNo_ref, Int32 * const i_ref, unsigned int * const unusedTmp_idx_ref, FILE * const zStream, BZFILE * const bzf, Int32 bzerr, UChar obuf[5000], UChar unused[5000], Int32 nUnused, void * const unusedTmpV, UChar * const unusedTmp)\n{\n  unsigned int bzf_idx = *bzf_idx_ref;\n  Int32 streamNo = *streamNo_ref;\n  Int32 i = *i_ref;\n  unsigned int unusedTmp_idx = *unusedTmp_idx_ref;\n  bzf_idx = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int) smallMode, unused, nUnused);\n  if (((&bzf[bzf_idx]) == 0) || (bzerr != 0))\n  {\n    goto errhandler;\n  }\n  streamNo += 1;\n  while (bzerr == 0)\n  {\n    BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n    if (bzerr == (-5))\n    {\n      goto errhandler;\n    }\n  }\n\n  if (bzerr != 4)\n  {\n    goto errhandler;\n  }\n  BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n  if (bzerr != 0)\n  {\n    panic(\"test:bzReadGetUnused\");\n  }\n  unusedTmp_idx = (UChar *) unusedTmpV;\n  for (i = 0; i < nUnused; i += 1)\n    unused[i] = unusedTmp[i + unusedTmp_idx];\n\n  BZ2_bzReadClose(&bzerr, bzf);\n  if (bzerr != 0)\n  {\n    panic(\"test:bzReadGetUnused\");\n  }\n  if ((nUnused == 0) && myfeof(zStream))\n  {\n    break;\n  }\n  *bzf_idx_ref = bzf_idx;\n  *streamNo_ref = streamNo;\n  *i_ref = i;\n  *unusedTmp_idx_ref = unusedTmp_idx;\n}\n\n",
            "calle": [
                "BZ2_bzRead",
                "BZ2_bzReadClose",
                "BZ2_bzReadGetUnused",
                "BZ2_bzReadOpen",
                "myfeof",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bzf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const bzf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const streamNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const unusedTmp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zStream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const zStream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE * const",
                        "definition": [
                            "BZFILE * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar unused[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nUnused",
                        "type": "Int32",
                        "definition": [
                            "Int32 nUnused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmpV",
                        "type": "void * const",
                        "definition": [
                            "void * const unusedTmpV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp",
                        "type": "UChar * const",
                        "definition": [
                            "UChar * const unusedTmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bzf_idx = *bzf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "streamNo",
                        "type": "Int32",
                        "definition": [
                            "Int32 streamNo = *streamNo_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unusedTmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int unusedTmp_idx = *unusedTmp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_1",
            "header": "",
            "params": [],
            "definition": "void helper_compress_1()\n{\n  applySavedTimeInfoToOutputFile(outName);\n  deleteOutputOnInterrupt = (Bool) 0;\n  if (!keepInputFiles)\n  {\n    IntNative retVal = remove(inName);\n    {\n      if (retVal != 0)\n      {\n        ioError();\n      }\n    }\n    ;\n  }\n}\n\n",
            "calle": [
                "applySavedTimeInfoToOutputFile",
                "ioError",
                "remove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "IntNative",
                        "definition": [
                            "IntNative retVal = remove(inName)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "keepInputFiles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_2",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref"
            ],
            "definition": "void helper_compress_2(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = stdin;\n  outStr_idx = stdout;\n  if (isatty(fileno(stdout)))\n  {\n    fprintf(stderr, \"%s: I won't write compressed data to a terminal.\\n\", progName);\n    fprintf(stderr, \"%s: For help, type: `%s --help'.\\n\", progName, progName);\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fileno",
                "fprintf",
                "isatty",
                "setExit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_3",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref",
                "FILE * const inStr"
            ],
            "definition": "void helper_compress_3(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref, FILE * const inStr)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = fopen(inName, \"rb\");\n  outStr_idx = stdout;\n  if (isatty(fileno(stdout)))\n  {\n    fprintf(stderr, \"%s: I won't write compressed data to a terminal.\\n\", progName);\n    fprintf(stderr, \"%s: For help, type: `%s --help'.\\n\", progName, progName);\n    if ((&inStr[inStr_idx]) != 0)\n    {\n      fclose(inStr);\n    }\n    setExit(1);\n    return;\n  }\n  ;\n  if ((&inStr[inStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't open input file %s: %s.\\n\", progName, inName, strerror(errno));\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fclose",
                "fileno",
                "fopen",
                "fprintf",
                "isatty",
                "setExit",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_4",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref",
                "FILE * const inStr",
                "FILE * const outStr"
            ],
            "definition": "void helper_compress_4(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref, FILE * const inStr, FILE * const outStr)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = fopen(inName, \"rb\");\n  outStr_idx = fopen_output_safely(outName, \"wb\");\n  if ((&outStr[outStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't create output file %s: %s.\\n\", progName, outName, strerror(errno));\n    if ((&inStr[inStr_idx]) != 0)\n    {\n      fclose(inStr);\n    }\n    setExit(1);\n    return;\n  }\n  if ((&inStr[inStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't open input file %s: %s.\\n\", progName, inName, strerror(errno));\n    if ((&outStr[outStr_idx]) != 0)\n    {\n      fclose(outStr);\n    }\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fopen_output_safely",
                "fprintf",
                "setExit",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const outStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Bool * const cantGuess_ref",
                "Char * const name"
            ],
            "definition": "void helper_uncompress_1(Int32 * const i_ref, Bool * const cantGuess_ref, Char * const name)\n{\n  Int32 i = *i_ref;\n  Bool cantGuess = *cantGuess_ref;\n  copyFileName(inName, name);\n  copyFileName(outName, name);\n  for (i = 0; i < 4; i += 1)\n    if (mapSuffix(outName, zSuffix[i], unzSuffix[i]))\n  {\n    goto zzz;\n  }\n\n  cantGuess = (Bool) 1;\n  strcat(outName, \".out\");\n  break;\n  *i_ref = i;\n  *cantGuess_ref = cantGuess;\n}\n\n",
            "calle": [
                "copyFileName",
                "mapSuffix",
                "strcat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cantGuess_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const cantGuess_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char * const",
                        "definition": [
                            "Char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cantGuess",
                        "type": "Bool",
                        "definition": [
                            "Bool cantGuess = *cantGuess_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zSuffix",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "unzSuffix",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_2",
            "header": "",
            "params": [],
            "definition": "void helper_uncompress_2()\n{\n  unzFailsExist = (Bool) 1;\n  deleteOutputOnInterrupt = (Bool) 0;\n  if (srcMode == 3)\n  {\n    IntNative retVal = remove(outName);\n    {\n      if (retVal != 0)\n      {\n        ioError();\n      }\n    }\n    ;\n  }\n}\n\n",
            "calle": [
                "ioError",
                "remove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "IntNative",
                        "definition": [
                            "IntNative retVal = remove(outName)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unzFailsExist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_3",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref"
            ],
            "definition": "void helper_uncompress_3(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = stdin;\n  outStr_idx = stdout;\n  if (isatty(fileno(stdin)))\n  {\n    fprintf(stderr, \"%s: I won't read compressed data from a terminal.\\n\", progName);\n    fprintf(stderr, \"%s: For help, type: `%s --help'.\\n\", progName, progName);\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fileno",
                "fprintf",
                "isatty",
                "setExit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_4",
            "header": "",
            "params": [],
            "definition": "void helper_uncompress_4()\n{\n  if (srcMode == 3)\n  {\n    applySavedTimeInfoToOutputFile(outName);\n    deleteOutputOnInterrupt = (Bool) 0;\n    if (!keepInputFiles)\n    {\n      IntNative retVal = remove(inName);\n      {\n        if (retVal != 0)\n        {\n          ioError();\n        }\n      }\n      ;\n    }\n  }\n}\n\n",
            "calle": [
                "applySavedTimeInfoToOutputFile",
                "ioError",
                "remove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "IntNative",
                        "definition": [
                            "IntNative retVal = remove(inName)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "deleteOutputOnInterrupt",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "keepInputFiles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_5",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref",
                "FILE * const inStr"
            ],
            "definition": "void helper_uncompress_5(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref, FILE * const inStr)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = fopen(inName, \"rb\");\n  outStr_idx = stdout;\n  if ((&inStr[inStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't open input file %s:%s.\\n\", progName, inName, strerror(errno));\n    if ((&inStr[inStr_idx]) != 0)\n    {\n      fclose(inStr);\n    }\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fprintf",
                "setExit",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_uncompress_6",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "unsigned int * const outStr_idx_ref",
                "FILE * const inStr",
                "FILE * const outStr"
            ],
            "definition": "void helper_uncompress_6(unsigned int * const inStr_idx_ref, unsigned int * const outStr_idx_ref, FILE * const inStr, FILE * const outStr)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  unsigned int outStr_idx = *outStr_idx_ref;\n  inStr_idx = fopen(inName, \"rb\");\n  outStr_idx = fopen_output_safely(outName, \"wb\");\n  if ((&outStr[outStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't create output file %s: %s.\\n\", progName, outName, strerror(errno));\n    if ((&inStr[inStr_idx]) != 0)\n    {\n      fclose(inStr);\n    }\n    setExit(1);\n    return;\n  }\n  if ((&inStr[inStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't open input file %s: %s.\\n\", progName, inName, strerror(errno));\n    if ((&outStr[outStr_idx]) != 0)\n    {\n      fclose(outStr);\n    }\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n  *outStr_idx_ref = outStr_idx;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fopen_output_safely",
                "fprintf",
                "setExit",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const outStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStr_idx = *outStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_testf_1",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref",
                "FILE * const inStr"
            ],
            "definition": "void helper_testf_1(unsigned int * const inStr_idx_ref, FILE * const inStr)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  inStr_idx = fopen(inName, \"rb\");\n  if ((&inStr[inStr_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: Can't open input file %s:%s.\\n\", progName, inName, strerror(errno));\n    setExit(1);\n    return;\n  }\n  ;\n  break;\n  *inStr_idx_ref = inStr_idx;\n}\n\n",
            "calle": [
                "fopen",
                "fprintf",
                "setExit",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const inStr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_testf_2",
            "header": "",
            "params": [
                "unsigned int * const inStr_idx_ref"
            ],
            "definition": "void helper_testf_2(unsigned int * const inStr_idx_ref)\n{\n  unsigned int inStr_idx = *inStr_idx_ref;\n  if (isatty(fileno(stdin)))\n  {\n    fprintf(stderr, \"%s: I won't read compressed data from a terminal.\\n\", progName);\n    fprintf(stderr, \"%s: For help, type: `%s --help'.\\n\", progName, progName);\n    setExit(1);\n    return;\n  }\n  ;\n  inStr_idx = stdin;\n  break;\n  *inStr_idx_ref = inStr_idx;\n}\n\n",
            "calle": [
                "fileno",
                "fprintf",
                "isatty",
                "setExit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "inStr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inStr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inStr_idx = *inStr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_addFlagsFromEnvVar_1",
            "header": "",
            "params": [
                "Int32 * const i_ref",
                "Int32 * const j_ref",
                "Int32 * const k_ref",
                "unsigned int * const p_idx_ref",
                "Cell ** const argList",
                "Char * const envbase",
                "unsigned int envbase_idx",
                "Char * const p"
            ],
            "definition": "void helper_addFlagsFromEnvVar_1(Int32 * const i_ref, Int32 * const j_ref, Int32 * const k_ref, unsigned int * const p_idx_ref, Cell ** const argList, Char * const envbase, unsigned int envbase_idx, Char * const p)\n{\n  Int32 i = *i_ref;\n  Int32 j = *j_ref;\n  Int32 k = *k_ref;\n  unsigned int p_idx = *p_idx_ref;\n  p_idx = &envbase[envbase_idx];\n  i = 0;\n  while ((Bool) 1)\n  {\n    if (p[i + p_idx] == 0)\n    {\n      break;\n    }\n    p_idx += i;\n    i = 0;\n    while (isspace((Int32) p[0 + p_idx]))\n      (&p[p_idx])++;\n\n    p_idx += 1;\n    while ((p[i + p_idx] != 0) && (!isspace((Int32) p[i + p_idx])))\n      i++;\n\n    i += 1;\n    if (i > 0)\n    {\n      k = i;\n      if (k > (1034 - 10))\n        k = 1034 - 10;\n      for (j = 0; j < k; j++)\n        tmpName[j] = p[j + p_idx];\n\n      tmpName[k] = 0;\n      APPEND_FLAG(*argList, tmpName);\n    }\n  }\n\n  *i_ref = i;\n  *j_ref = j;\n  *k_ref = k;\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [
                "APPEND_FLAG",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell ** const",
                        "definition": [
                            "Cell ** const argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "envbase",
                        "type": "Char * const",
                        "definition": [
                            "Char * const envbase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "envbase_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int envbase_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "Char * const",
                        "definition": [
                            "Char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "Int32",
                        "definition": [
                            "Int32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmpName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "Bool * const decode_ref",
                "Cell * const aa"
            ],
            "definition": "void helper_main_1(Bool * const decode_ref, Cell * const aa)\n{\n  Bool decode = *decode_ref;\n  if (strcmp(aa->name, \"--\") == 0)\n  {\n    decode = (Bool) 0;\n    continue;\n  }\n  if ((aa->name[0] == '-') && decode)\n  {\n    continue;\n  }\n  numFileNames += 1;\n  if (longestFileName < ((Int32) strlen(aa->name)))\n  {\n    longestFileName = (Int32) strlen(aa->name);\n  }\n  *decode_ref = decode;\n}\n\n",
            "calle": [
                "strcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "decode_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode",
                        "type": "Bool",
                        "definition": [
                            "Bool decode = *decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numFileNames",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "longestFileName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_2",
            "header": "",
            "params": [
                "unsigned int * const aa_idx_ref",
                "Bool * const decode_ref",
                "Cell * const argList",
                "unsigned int argList_idx",
                "Cell * const aa"
            ],
            "definition": "void helper_main_2(unsigned int * const aa_idx_ref, Bool * const decode_ref, Cell * const argList, unsigned int argList_idx, Cell * const aa)\n{\n  unsigned int aa_idx = *aa_idx_ref;\n  Bool decode = *decode_ref;\n  if (srcMode == 1)\n  {\n    compress(0);\n  }\n  else\n  {\n    decode = (Bool) 1;\n    for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n    {\n      if (strcmp(aa->name, \"--\") == 0)\n      {\n        decode = (Bool) 0;\n        continue;\n      }\n      if ((aa->name[0] == '-') && decode)\n      {\n        continue;\n      }\n      numFilesProcessed += 1;\n      compress(aa->name);\n    }\n\n  }\n  *aa_idx_ref = aa_idx;\n  *decode_ref = decode;\n}\n\n",
            "calle": [
                "compress",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aa_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argList_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int aa_idx = *aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode",
                        "type": "Bool",
                        "definition": [
                            "Bool decode = *decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFilesProcessed",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_3",
            "header": "",
            "params": [
                "unsigned int * const aa_idx_ref",
                "Bool * const decode_ref",
                "Cell * const argList",
                "unsigned int argList_idx",
                "Cell * const aa"
            ],
            "definition": "void helper_main_3(unsigned int * const aa_idx_ref, Bool * const decode_ref, Cell * const argList, unsigned int argList_idx, Cell * const aa)\n{\n  unsigned int aa_idx = *aa_idx_ref;\n  Bool decode = *decode_ref;\n  unzFailsExist = (Bool) 0;\n  if (srcMode == 1)\n  {\n    uncompress(0);\n  }\n  else\n  {\n    decode = (Bool) 1;\n    for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n    {\n      if (strcmp(aa->name, \"--\") == 0)\n      {\n        decode = (Bool) 0;\n        continue;\n      }\n      if ((aa->name[0] == '-') && decode)\n      {\n        continue;\n      }\n      numFilesProcessed += 1;\n      uncompress(aa->name);\n    }\n\n  }\n  if (unzFailsExist)\n  {\n    setExit(2);\n    exit(exitValue);\n  }\n  *aa_idx_ref = aa_idx;\n  *decode_ref = decode;\n}\n\n",
            "calle": [
                "exit",
                "setExit",
                "strcmp",
                "uncompress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aa_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argList_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int aa_idx = *aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode",
                        "type": "Bool",
                        "definition": [
                            "Bool decode = *decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unzFailsExist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFilesProcessed",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_4",
            "header": "",
            "params": [
                "unsigned int * const aa_idx_ref",
                "Bool * const decode_ref",
                "Cell * const argList",
                "unsigned int argList_idx",
                "Cell * const aa"
            ],
            "definition": "void helper_main_4(unsigned int * const aa_idx_ref, Bool * const decode_ref, Cell * const argList, unsigned int argList_idx, Cell * const aa)\n{\n  unsigned int aa_idx = *aa_idx_ref;\n  Bool decode = *decode_ref;\n  testFailsExist = (Bool) 0;\n  if (srcMode == 1)\n  {\n    testf(0);\n  }\n  else\n  {\n    decode = (Bool) 1;\n    for (aa_idx = &argList[argList_idx]; (&aa[aa_idx]) != 0; aa_idx = aa_idx->link)\n    {\n      if (strcmp(aa->name, \"--\") == 0)\n      {\n        decode = (Bool) 0;\n        continue;\n      }\n      if ((aa->name[0] == '-') && decode)\n      {\n        continue;\n      }\n      numFilesProcessed += 1;\n      testf(aa->name);\n    }\n\n  }\n  if (testFailsExist)\n  {\n    if (noisy)\n    {\n      fprintf(stderr, \"\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n    }\n    setExit(2);\n    exit(exitValue);\n  }\n  *aa_idx_ref = aa_idx;\n  *decode_ref = decode;\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "setExit",
                "strcmp",
                "testf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aa_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_ref",
                        "type": "Bool * const",
                        "definition": [
                            "Bool * const decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const argList"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argList_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argList_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int aa_idx = *aa_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode",
                        "type": "Bool",
                        "definition": [
                            "Bool decode = *decode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testFailsExist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "numFilesProcessed",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exitValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_5",
            "header": "",
            "params": [
                "Cell * const aa"
            ],
            "definition": "void helper_main_5(Cell * const aa)\n{\n  if (strcmp(aa->name, \"--\") == 0)\n  {\n    break;\n  }\n  if (strcmp(aa->name, \"--stdout\") == 0)\n  {\n    srcMode = 2;\n  }\n  else\n    if (strcmp(aa->name, \"--decompress\") == 0)\n  {\n    opMode = 2;\n  }\n  else\n    if (strcmp(aa->name, \"--compress\") == 0)\n  {\n    opMode = 1;\n  }\n  else\n    if (strcmp(aa->name, \"--force\") == 0)\n  {\n    forceOverwrite = (Bool) 1;\n  }\n  else\n    if (strcmp(aa->name, \"--test\") == 0)\n  {\n    opMode = 3;\n  }\n  else\n    if (strcmp(aa->name, \"--keep\") == 0)\n  {\n    keepInputFiles = (Bool) 1;\n  }\n  else\n    if (strcmp(aa->name, \"--small\") == 0)\n  {\n    smallMode = (Bool) 1;\n  }\n  else\n    if (strcmp(aa->name, \"--quiet\") == 0)\n  {\n    noisy = (Bool) 0;\n  }\n  else\n    if (strcmp(aa->name, \"--version\") == 0)\n  {\n    license();\n    exit(0);\n  }\n  else\n    if (strcmp(aa->name, \"--license\") == 0)\n  {\n    license();\n    exit(0);\n  }\n  else\n    if (strcmp(aa->name, \"--exponential\") == 0)\n  {\n    workFactor = 1;\n  }\n  else\n    if (strcmp(aa->name, \"--repetitive-best\") == 0)\n  {\n    redundant(aa->name);\n  }\n  else\n    if (strcmp(aa->name, \"--repetitive-fast\") == 0)\n  {\n    redundant(aa->name);\n  }\n  else\n    if (strcmp(aa->name, \"--fast\") == 0)\n  {\n    blockSize100k = 1;\n  }\n  else\n    if (strcmp(aa->name, \"--best\") == 0)\n  {\n    blockSize100k = 9;\n  }\n  else\n    if (strcmp(aa->name, \"--verbose\") == 0)\n  {\n    verbosity += 1;\n  }\n  else\n    if (strcmp(aa->name, \"--help\") == 0)\n  {\n    usage(progName);\n    exit(0);\n  }\n  else\n    if (strncmp(aa->name, \"--\", 2) == 0)\n  {\n    fprintf(stderr, \"%s: Bad flag `%s'\\n\", progName, aa->name);\n    usage(progName);\n    exit(1);\n  }\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "license",
                "redundant",
                "strcmp",
                "strncmp",
                "usage"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "opMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "keepInputFiles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "workFactor",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_6",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Cell * const aa"
            ],
            "definition": "void helper_main_6(Int32 * const j_ref, Cell * const aa)\n{\n  Int32 j = *j_ref;\n  if (strcmp(aa->name, \"--\") == 0)\n  {\n    break;\n  }\n  if ((aa->name[0] == '-') && (aa->name[1] != '-'))\n  {\n    helper_helper_main_6_1(&j, aa);\n  }\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_main_6_1",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_uncompressStream_3_1",
            "header": "",
            "params": [
                "Int32 * const nread_ref",
                "FILE * const stream",
                "BZFILE * const bzf",
                "Int32 bzerr",
                "UChar obuf[5000]"
            ],
            "definition": "void helper_helper_uncompressStream_3_1(Int32 * const nread_ref, FILE * const stream, BZFILE * const bzf, Int32 bzerr, UChar obuf[5000])\n{\n  Int32 nread = *nread_ref;\n  nread = BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n  if (bzerr == (-5))\n  {\n    goto trycat;\n  }\n  if (((bzerr == 0) || (bzerr == 4)) && (nread > 0))\n  {\n    fwrite(obuf, sizeof(UChar), nread, stream);\n  }\n  if (ferror(stream))\n  {\n    goto errhandler_io;\n  }\n  *nread_ref = nread;\n}\n\n",
            "calle": [
                "BZ2_bzRead",
                "ferror",
                "fwrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nread_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const nread_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzf",
                        "type": "BZFILE * const",
                        "definition": [
                            "BZFILE * const bzf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bzerr",
                        "type": "Int32",
                        "definition": [
                            "Int32 bzerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obuf",
                        "type": "UChar [5000]",
                        "definition": [
                            "UChar obuf[5000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nread",
                        "type": "Int32",
                        "definition": [
                            "Int32 nread = *nread_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_6_1",
            "header": "",
            "params": [
                "Int32 * const j_ref",
                "Cell * const aa"
            ],
            "definition": "void helper_helper_main_6_1(Int32 * const j_ref, Cell * const aa)\n{\n  Int32 j = *j_ref;\n  for (j = 1; aa->name[j] != '\\0'; j += 1)\n  {\n    helper_helper_helper_main_6_1_1(aa, j);\n  }\n\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_main_6_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "Int32 * const",
                        "definition": [
                            "Int32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_main_6_1_1",
            "header": "",
            "params": [
                "Cell * const aa",
                "Int32 j"
            ],
            "definition": "void helper_helper_helper_main_6_1_1(Cell * const aa, Int32 j)\n{\n  switch (aa->name[j])\n  {\n    case 'c':\n    {\n      srcMode = 2;\n      break;\n    }\n\n    case 'd':\n    {\n      opMode = 2;\n      break;\n    }\n\n    case 'z':\n    {\n      opMode = 1;\n      break;\n    }\n\n    case 'f':\n    {\n      forceOverwrite = (Bool) 1;\n      break;\n    }\n\n    case 't':\n    {\n      opMode = 3;\n      break;\n    }\n\n    case 'k':\n    {\n      keepInputFiles = (Bool) 1;\n      break;\n    }\n\n    case 's':\n    {\n      smallMode = (Bool) 1;\n      break;\n    }\n\n    case 'q':\n    {\n      noisy = (Bool) 0;\n      break;\n    }\n\n    case '1':\n    {\n      blockSize100k = 1;\n      break;\n    }\n\n    case '2':\n    {\n      blockSize100k = 2;\n      break;\n    }\n\n    case '3':\n    {\n      blockSize100k = 3;\n      break;\n    }\n\n    case '4':\n    {\n      blockSize100k = 4;\n      break;\n    }\n\n    case '5':\n    {\n      blockSize100k = 5;\n      break;\n    }\n\n    case '6':\n    {\n      blockSize100k = 6;\n      break;\n    }\n\n    case '7':\n    {\n      blockSize100k = 7;\n      break;\n    }\n\n    case '8':\n    {\n      blockSize100k = 8;\n      break;\n    }\n\n    case '9':\n    {\n      blockSize100k = 9;\n      break;\n    }\n\n    case 'V':\n\n    case 'L':\n    {\n      license();\n      exit(0);\n      break;\n    }\n\n    case 'v':\n    {\n      verbosity += 1;\n      break;\n    }\n\n    case 'h':\n    {\n      usage(progName);\n      exit(0);\n      break;\n    }\n\n    default:\n    {\n      fprintf(stderr, \"%s: Bad flag `%s'\\n\", progName, aa->name);\n      usage(progName);\n      exit(1);\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "license",
                "usage"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aa",
                        "type": "Cell * const",
                        "definition": [
                            "Cell * const aa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "Int32",
                        "definition": [
                            "Int32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "opMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "forceOverwrite",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "keepInputFiles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smallMode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "noisy",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "blockSize100k",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "readError",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void readError(void)\n{\n  fprintf(stderr, \"%s: I/O error reading `%s', possible reason follows.\\n\", progName, inFileName);\n  perror(progName);\n  fprintf(stderr, \"%s: warning: output file(s) may be incomplete.\\n\", progName);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "perror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inFileName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "writeError",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void writeError(void)\n{\n  fprintf(stderr, \"%s: I/O error reading `%s', possible reason follows.\\n\", progName, inFileName);\n  perror(progName);\n  fprintf(stderr, \"%s: warning: output file(s) may be incomplete.\\n\", progName);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "perror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inFileName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mallocFail",
            "header": "",
            "params": [
                "Int32 n"
            ],
            "definition": "static void mallocFail(Int32 n)\n{\n  fprintf(stderr, \"%s: malloc failed on request for %d bytes.\\n\", progName, n);\n  fprintf(stderr, \"%s: warning: output file(s) may be incomplete.\\n\", progName);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tooManyBlocks",
            "header": "",
            "params": [
                "Int32 max_handled_blocks"
            ],
            "definition": "static void tooManyBlocks(Int32 max_handled_blocks)\n{\n  fprintf(stderr, \"%s: `%s' appears to contain more than %d blocks\\n\", progName, inFileName, max_handled_blocks);\n  fprintf(stderr, \"%s: and cannot be handled.  To fix, increase\\n\", progName);\n  fprintf(stderr, \"%s: BZ_MAX_HANDLED_BLOCKS in bzip2recover.c, and recompile.\\n\", progName);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "max_handled_blocks",
                        "type": "Int32",
                        "definition": [
                            "Int32 max_handled_blocks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inFileName",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsOpenReadStream",
            "header": "",
            "params": [
                "FILE *stream"
            ],
            "definition": "static BitStream *bsOpenReadStream(FILE *stream)\n{\n  BitStream *bs = malloc(sizeof(BitStream));\n  if (bs == 0)\n  {\n    mallocFail(sizeof(BitStream));\n  }\n  bs->handle = stream;\n  bs->buffer = 0;\n  bs->buffLive = 0;\n  bs->mode = 'r';\n  return bs;\n}\n\n",
            "calle": [
                "malloc",
                "mallocFail"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bs",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bs = malloc(sizeof(BitStream))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsOpenWriteStream",
            "header": "",
            "params": [
                "FILE *stream"
            ],
            "definition": "static BitStream *bsOpenWriteStream(FILE *stream)\n{\n  BitStream *bs = malloc(sizeof(BitStream));\n  if (bs == 0)\n  {\n    mallocFail(sizeof(BitStream));\n  }\n  bs->handle = stream;\n  bs->buffer = 0;\n  bs->buffLive = 0;\n  bs->mode = 'w';\n  return bs;\n}\n\n",
            "calle": [
                "malloc",
                "mallocFail"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bs",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bs = malloc(sizeof(BitStream))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsPutBit",
            "header": "",
            "params": [
                "BitStream *bs",
                "Int32 bit"
            ],
            "definition": "static void bsPutBit(BitStream *bs, Int32 bit)\n{\n  if (bs->buffLive == 8)\n  {\n    Int32 retVal = putc((UChar) bs->buffer, bs->handle);\n    if (retVal == EOF)\n    {\n      writeError();\n    }\n    bytesOut += 1;\n    bs->buffLive = 1;\n    bs->buffer = bit & 0x1;\n  }\n  else\n  {\n    bs->buffer = (bs->buffer << 1) | (bit & 0x1);\n    bs->buffLive += 1;\n  }\n  ;\n}\n\n",
            "calle": [
                "putc",
                "writeError"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bs",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "Int32",
                        "definition": [
                            "Int32 bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = putc((UChar) bs->buffer, bs->handle)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytesOut",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsGetBit",
            "header": "",
            "params": [
                "BitStream *bs"
            ],
            "definition": "static Int32 bsGetBit(BitStream *bs)\n{\n  if (bs->buffLive > 0)\n  {\n    bs->buffLive -= 1;\n    return (bs->buffer >> bs->buffLive) & 0x1;\n  }\n  else\n  {\n    Int32 retVal = getc(bs->handle);\n    if (retVal == EOF)\n    {\n      if (errno != 0)\n      {\n        readError();\n      }\n      return 2;\n    }\n    bs->buffLive = 7;\n    bs->buffer = retVal;\n    return (bs->buffer >> 7) & 0x1;\n  }\n}\n\n",
            "calle": [
                "getc",
                "readError"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bs",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal = getc(bs->handle)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bsClose",
            "header": "",
            "params": [
                "BitStream *bs"
            ],
            "definition": "static void bsClose(BitStream *bs)\n{\n  Int32 retVal;\n  if (bs->mode == 'w')\n  {\n    while (bs->buffLive < 8)\n    {\n      bs->buffLive += 1;\n      bs->buffer <<= 1;\n    }\n\n    ;\n    retVal = putc((UChar) bs->buffer, bs->handle);\n    if (retVal == EOF)\n    {\n      writeError();\n    }\n    bytesOut += 1;\n    retVal = fflush(bs->handle);\n    if (retVal == EOF)\n    {\n      writeError();\n    }\n  }\n  retVal = fclose(bs->handle);\n  if (retVal == EOF)\n  {\n    if (bs->mode == 'w')\n    {\n      writeError();\n    }\n    else\n      readError();\n  }\n  free(bs);\n}\n\n",
            "calle": [
                "fclose",
                "fflush",
                "free",
                "putc",
                "readError",
                "writeError"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bs",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retVal",
                        "type": "Int32",
                        "definition": [
                            "Int32 retVal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytesOut",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "endsInBz2",
            "header": "",
            "params": [
                "Char *name"
            ],
            "definition": "static Bool endsInBz2(Char *name)\n{\n  Int32 n = strlen(name);\n  if (n <= 4)\n  {\n    return (Bool) 0;\n  }\n  return (((name[n - 4] == '.') && (name[n - 3] == 'b')) && (name[n - 2] == 'z')) && (name[n - 1] == '2');\n}\n\n",
            "calle": [
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "Char *",
                        "definition": [
                            "Char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "Int32",
                        "definition": [
                            "Int32 n = strlen(name)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#bzip2recover",
            "header": "",
            "params": [
                "Int32 argc",
                "Char **argv"
            ],
            "definition": "Int32 main(Int32 argc, Char **argv)\n{\n  FILE *inFile;\n  unsigned int inFile_idx = 0;\n  FILE *outFile;\n  unsigned int outFile_idx = 0;\n  BitStream *bsIn;\n  unsigned int bsIn_idx = 0;\n  BitStream *bsWr;\n  unsigned int bsWr_idx = 0;\n  Int32 b;\n  Int32 wrBlock;\n  Int32 currBlock;\n  Int32 rbCtr;\n  MaybeUInt64 bitsRead;\n  UInt32 buffHi;\n  UInt32 buffLo;\n  UInt32 blockCRC;\n  Char *p;\n  unsigned int p_idx = 0;\n  strncpy(progName, argv[0], 2000 - 1);\n  progName[2000 - 1] = '\\0';\n  inFileName[0] = (outFileName[0] = 0);\n  fprintf(stderr, \"bzip2recover 1.0.6: extracts blocks from damaged .bz2 files.\\n\");\n  if (argc != 2)\n  {\n    fprintf(stderr, \"%s: usage is `%s damaged_file_name'.\\n\", progName, progName);\n    switch (sizeof(MaybeUInt64))\n    {\n      case 8:\n        fprintf(stderr, \"\\trestrictions on size of recovered file: None\\n\");\n        break;\n\n      case 4:\n        fprintf(stderr, \"\\trestrictions on size of recovered file: 512 MB\\n\");\n        fprintf(stderr, \"\\tto circumvent, recompile with MaybeUInt64 as an\\n\\tunsigned 64-bit int.\\n\");\n        break;\n\n      default:\n        fprintf(stderr, \"\\tsizeof(MaybeUInt64) is not 4 or 8 -- configuration error.\\n\");\n        break;\n\n    }\n\n    exit(1);\n  }\n  if (strlen(argv[1]) >= (2000 - 20))\n  {\n    fprintf(stderr, \"%s: supplied filename is suspiciously (>= %d chars) long.  Bye!\\n\", progName, (int) strlen(argv[1]));\n    exit(1);\n  }\n  strcpy(inFileName, argv[1]);\n  inFile_idx = fopen(inFileName, \"rb\");\n  if ((&inFile[inFile_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: can't read `%s'\\n\", progName, inFileName);\n    exit(1);\n  }\n  bsIn_idx = bsOpenReadStream(inFile);\n  fprintf(stderr, \"%s: searching for block boundaries ...\\n\", progName);\n  bitsRead = 0;\n  buffHi = (buffLo = 0);\n  currBlock = 0;\n  bStart[currBlock] = 0;\n  rbCtr = 0;\n  while ((Bool) 1)\n  {\n    b = bsGetBit(bsIn);\n    bitsRead += 1;\n    if (b == 2)\n    {\n      if ((bitsRead >= bStart[currBlock]) && ((bitsRead - bStart[currBlock]) >= 40))\n      {\n        bEnd[currBlock] = bitsRead - 1;\n        if (currBlock > 0)\n        {\n          fprintf(stderr, \"   block %d runs from %Lu to %Lu (incomplete)\\n\", currBlock, bStart[currBlock], bEnd[currBlock]);\n        }\n      }\n      else\n        currBlock--;\n      currBlock -= 1;\n      break;\n    }\n    buffHi = (buffHi << 1) | (buffLo >> 31);\n    buffLo = (buffLo << 1) | (b & 1);\n    if ((((buffHi & 0x0000ffff) == 0x00003141UL) && (buffLo == 0x59265359UL)) || (((buffHi & 0x0000ffff) == 0x00001772UL) && (buffLo == 0x45385090UL)))\n    {\n      if (bitsRead > 49)\n      {\n        bEnd[currBlock] = bitsRead - 49;\n      }\n      else\n      {\n        bEnd[currBlock] = 0;\n      }\n      if ((currBlock > 0) && ((bEnd[currBlock] - bStart[currBlock]) >= 130))\n      {\n        fprintf(stderr, \"   block %d runs from %Lu to %Lu\\n\", rbCtr + 1, bStart[currBlock], bEnd[currBlock]);\n        rbStart[rbCtr] = bStart[currBlock];\n        rbEnd[rbCtr] = bEnd[currBlock];\n        rbCtr += 1;\n      }\n      if (currBlock >= 50000)\n      {\n        tooManyBlocks(50000);\n      }\n      currBlock += 1;\n      bStart[currBlock] = bitsRead;\n    }\n  }\n\n  bsClose(bsIn);\n  if (rbCtr < 1)\n  {\n    fprintf(stderr, \"%s: sorry, I couldn't find any block boundaries.\\n\", progName);\n    exit(1);\n  }\n  ;\n  fprintf(stderr, \"%s: splitting into blocks\\n\", progName);\n  inFile_idx = fopen(inFileName, \"rb\");\n  if ((&inFile[inFile_idx]) == 0)\n  {\n    fprintf(stderr, \"%s: can't open `%s'\\n\", progName, inFileName);\n    exit(1);\n  }\n  bsIn_idx = bsOpenReadStream(inFile);\n  blockCRC = 0;\n  bsWr_idx = 0;\n  bitsRead = 0;\n  outFile_idx = 0;\n  wrBlock = 0;\n  while ((Bool) 1)\n  {\n    b = bsGetBit(bsIn);\n    if (b == 2)\n    {\n      break;\n    }\n    buffHi = (buffHi << 1) | (buffLo >> 31);\n    buffLo = (buffLo << 1) | (b & 1);\n    if (bitsRead == (47 + rbStart[wrBlock]))\n    {\n      blockCRC = (buffHi << 16) | (buffLo >> 16);\n    }\n    if ((((&outFile[outFile_idx]) != 0) && (bitsRead >= rbStart[wrBlock])) && (bitsRead <= rbEnd[wrBlock]))\n    {\n      bsPutBit(bsWr, b);\n    }\n    bitsRead += 1;\n    if (bitsRead == (rbEnd[wrBlock] + 1))\n    {\n      if ((&outFile[outFile_idx]) != 0)\n      {\n        bsPutUChar(bsWr, 0x17);\n        bsPutUChar(bsWr, 0x72);\n        bsPutUChar(bsWr, 0x45);\n        bsPutUChar(bsWr, 0x38);\n        bsPutUChar(bsWr, 0x50);\n        bsPutUChar(bsWr, 0x90);\n        bsPutUInt32(bsWr, blockCRC);\n        bsClose(bsWr);\n        outFile_idx = 0;\n      }\n      if (wrBlock >= rbCtr)\n      {\n        break;\n      }\n      wrBlock += 1;\n    }\n    else\n      if (bitsRead == rbStart[wrBlock])\n    {\n      Char *split;\n      unsigned int split_idx = 0;\n      Int32 ofs;\n      Int32 k;\n      for (k = 0; k < 2000; k += 1)\n        outFileName[k] = 0;\n\n      strcpy(outFileName, inFileName);\n      split_idx = strrchr(outFileName, '/');\n      if ((&split[split_idx]) == 0)\n      {\n        split_idx = outFileName;\n      }\n      else\n      {\n        split_idx += 1;\n      }\n      ofs = (&split[split_idx]) - outFileName;\n      sprintf(split, \"rec%5d\", wrBlock + 1);\n      for (p_idx = &split[split_idx]; p[p_idx] != 0; p_idx += 1)\n        if (p[p_idx] == ' ')\n      {\n        p[p_idx] = '0';\n      }\n\n      strcat(outFileName, inFileName + ofs);\n      if (!endsInBz2(outFileName))\n      {\n        strcat(outFileName, \".bz2\");\n      }\n      fprintf(stderr, \"   writing block %d to `%s' ...\\n\", wrBlock + 1, outFileName);\n      outFile_idx = fopen_output_safely(outFileName, \"wb\");\n      if ((&outFile[outFile_idx]) == 0)\n      {\n        fprintf(stderr, \"%s: can't write `%s'\\n\", progName, outFileName);\n        exit(1);\n      }\n      bsWr_idx = bsOpenWriteStream(outFile);\n      bsPutUChar(bsWr, 0x42);\n      bsPutUChar(bsWr, 0x5a);\n      bsPutUChar(bsWr, 0x68);\n      bsPutUChar(bsWr, 0x30 + 9);\n      bsPutUChar(bsWr, 0x31);\n      bsPutUChar(bsWr, 0x41);\n      bsPutUChar(bsWr, 0x59);\n      bsPutUChar(bsWr, 0x26);\n      bsPutUChar(bsWr, 0x53);\n      bsPutUChar(bsWr, 0x59);\n    }\n  }\n\n  fprintf(stderr, \"%s: finished\\n\", progName);\n  return 0;\n}\n\n",
            "calle": [
                "bsClose",
                "bsGetBit",
                "bsOpenReadStream",
                "bsOpenWriteStream",
                "bsPutBit",
                "bsPutUChar",
                "bsPutUInt32",
                "endsInBz2",
                "exit",
                "fopen",
                "fopen_output_safely",
                "fprintf",
                "sprintf",
                "strcat",
                "strcpy",
                "strlen",
                "strncpy",
                "strrchr",
                "tooManyBlocks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "Int32",
                        "definition": [
                            "Int32 argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "Char **",
                        "definition": [
                            "Char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inFile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *inFile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inFile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inFile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outFile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *outFile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outFile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outFile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsIn",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bsIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsIn_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bsIn_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsWr",
                        "type": "BitStream *",
                        "definition": [
                            "BitStream *bsWr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bsWr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bsWr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "Int32",
                        "definition": [
                            "Int32 b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrBlock",
                        "type": "Int32",
                        "definition": [
                            "Int32 wrBlock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currBlock",
                        "type": "Int32",
                        "definition": [
                            "Int32 currBlock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rbCtr",
                        "type": "Int32",
                        "definition": [
                            "Int32 rbCtr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitsRead",
                        "type": "MaybeUInt64",
                        "definition": [
                            "MaybeUInt64 bitsRead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffHi",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 buffHi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffLo",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 buffLo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockCRC",
                        "type": "UInt32",
                        "definition": [
                            "UInt32 blockCRC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "Char *",
                        "definition": [
                            "Char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "split",
                        "type": "Char *",
                        "definition": [
                            "Char *split"
                        ]
                    },
                    {
                        "path": null,
                        "name": "split_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int split_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ofs",
                        "type": "Int32",
                        "definition": [
                            "Int32 ofs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "Int32",
                        "definition": [
                            "Int32 k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "inFileName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outFileName",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "bStart",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "bEnd",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "rbStart",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "rbEnd",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef void BZFILE",
        "typedef char Char",
        "typedef unsigned char Bool",
        "typedef unsigned char UChar",
        "typedef int Int32",
        "typedef unsigned int UInt32",
        "typedef short Int16",
        "typedef unsigned short UInt16",
        "typedef int IntNative",
        "typedef unsigned long long int MaybeUInt64"
    ]
}