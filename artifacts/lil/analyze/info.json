{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_value_t\n{\n  size_t l;\n  char *d;\n}",
            "name": "_lil_value_t",
            "names": [
                "typedef struct _lil_value_t *lil_value_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "l",
                        "type": "size_t",
                        "definition": [
                            "size_t l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "char *",
                        "definition": [
                            "char *d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_value_t *lil_value_t",
            "name": "lil_value_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_value_t\n{\n  size_t l;\n  char *d;\n}",
                        "name": "_lil_value_t",
                        "names": [
                            "typedef struct _lil_value_t *lil_value_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "l",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t l"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "d",
                                    "type": "char *",
                                    "definition": [
                                        "char *d"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_func_t\n{\n  char *name;\n  lil_value_t code;\n  lil_list_t argnames;\n  lil_func_proc_t proc;\n}",
            "name": "_lil_func_t",
            "names": [
                "typedef struct _lil_func_t *lil_func_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argnames",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t argnames"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_func_proc_t",
                        "definition": [
                            "lil_func_proc_t proc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_func_t *lil_func_t",
            "name": "lil_func_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_func_t\n{\n  char *name;\n  lil_value_t code;\n  lil_list_t argnames;\n  lil_func_proc_t proc;\n}",
                        "name": "_lil_func_t",
                        "names": [
                            "typedef struct _lil_func_t *lil_func_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "char *",
                                    "definition": [
                                        "char *name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "code",
                                    "type": "lil_value_t",
                                    "definition": [
                                        "lil_value_t code"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "argnames",
                                    "type": "lil_list_t",
                                    "definition": [
                                        "lil_list_t argnames"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "proc",
                                    "type": "lil_func_proc_t",
                                    "definition": [
                                        "lil_func_proc_t proc"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_var_t\n{\n  char *n;\n  char *w;\n  struct _lil_env_t *env;\n  lil_value_t v;\n}",
            "name": "_lil_var_t",
            "names": [
                "typedef struct _lil_var_t *lil_var_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "char *",
                        "definition": [
                            "char *n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "char *",
                        "definition": [
                            "char *w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct _lil_env_t",
                        "type": "struct _lil_env_t *",
                        "definition": [
                            "struct _lil_env_t *env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_var_t *lil_var_t",
            "name": "lil_var_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_var_t\n{\n  char *n;\n  char *w;\n  struct _lil_env_t *env;\n  lil_value_t v;\n}",
                        "name": "_lil_var_t",
                        "names": [
                            "typedef struct _lil_var_t *lil_var_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "n",
                                    "type": "char *",
                                    "definition": [
                                        "char *n"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "w",
                                    "type": "char *",
                                    "definition": [
                                        "char *w"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "struct _lil_env_t",
                                    "type": "struct _lil_env_t *",
                                    "definition": [
                                        "struct _lil_env_t *env"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "v",
                                    "type": "lil_value_t",
                                    "definition": [
                                        "lil_value_t v"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_env_t\n{\n  struct _lil_env_t *parent;\n  lil_func_t func;\n  lil_value_t catcher_for;\n  lil_var_t *var;\n  size_t vars;\n  hashmap_t varmap;\n  lil_value_t retval;\n  int retval_set;\n  int breakrun;\n}",
            "name": "_lil_env_t",
            "names": [
                "typedef struct _lil_env_t *lil_env_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct _lil_env_t",
                        "type": "struct _lil_env_t *",
                        "definition": [
                            "struct _lil_env_t *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t func"
                        ]
                    },
                    {
                        "path": null,
                        "name": "catcher_for",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t catcher_for"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var",
                        "type": "lil_var_t *",
                        "definition": [
                            "lil_var_t *var"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vars",
                        "type": "size_t",
                        "definition": [
                            "size_t vars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varmap",
                        "type": "hashmap_t",
                        "definition": [
                            "hashmap_t varmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval_set",
                        "type": "int",
                        "definition": [
                            "int retval_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "breakrun",
                        "type": "int",
                        "definition": [
                            "int breakrun"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_env_t *lil_env_t",
            "name": "lil_env_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_env_t\n{\n  struct _lil_env_t *parent;\n  lil_func_t func;\n  lil_value_t catcher_for;\n  lil_var_t *var;\n  size_t vars;\n  hashmap_t varmap;\n  lil_value_t retval;\n  int retval_set;\n  int breakrun;\n}",
                        "name": "_lil_env_t",
                        "names": [
                            "typedef struct _lil_env_t *lil_env_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "struct _lil_env_t",
                                    "type": "struct _lil_env_t *",
                                    "definition": [
                                        "struct _lil_env_t *parent"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "func",
                                    "type": "lil_func_t",
                                    "definition": [
                                        "lil_func_t func"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "catcher_for",
                                    "type": "lil_value_t",
                                    "definition": [
                                        "lil_value_t catcher_for"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "var",
                                    "type": "lil_var_t *",
                                    "definition": [
                                        "lil_var_t *var"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vars",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t vars"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "varmap",
                                    "type": "hashmap_t",
                                    "definition": [
                                        "hashmap_t varmap"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "retval",
                                    "type": "lil_value_t",
                                    "definition": [
                                        "lil_value_t retval"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "retval_set",
                                    "type": "int",
                                    "definition": [
                                        "int retval_set"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "breakrun",
                                    "type": "int",
                                    "definition": [
                                        "int breakrun"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_list_t\n{\n  lil_value_t *v;\n  size_t c;\n  size_t cap;\n}",
            "name": "_lil_list_t",
            "names": [
                "typedef struct _lil_list_t *lil_list_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "size_t",
                        "definition": [
                            "size_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cap",
                        "type": "size_t",
                        "definition": [
                            "size_t cap"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_list_t *lil_list_t",
            "name": "lil_list_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_list_t\n{\n  lil_value_t *v;\n  size_t c;\n  size_t cap;\n}",
                        "name": "_lil_list_t",
                        "names": [
                            "typedef struct _lil_list_t *lil_list_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "v",
                                    "type": "lil_value_t *",
                                    "definition": [
                                        "lil_value_t *v"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "c",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t c"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "cap",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t cap"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct _lil_t\n{\n  const char *code;\n  const char *rootcode;\n  size_t clen;\n  size_t head;\n  int ignoreeol;\n  lil_func_t *cmd;\n  size_t cmds;\n  size_t syscmds;\n  hashmap_t cmdmap;\n  char *catcher;\n  int in_catcher;\n  char *dollarprefix;\n  lil_env_t env;\n  lil_env_t rootenv;\n  lil_env_t downenv;\n  lil_value_t empty;\n  int error;\n  size_t err_head;\n  char *err_msg;\n  lil_callback_proc_t callback[8];\n  size_t parse_depth;\n  void *data;\n  char *embed;\n  size_t embedlen;\n}",
            "name": "_lil_t",
            "names": [
                "typedef struct _lil_t *lil_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char *",
                        "definition": [
                            "const char *code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rootcode",
                        "type": "const char *",
                        "definition": [
                            "const char *rootcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clen",
                        "type": "size_t",
                        "definition": [
                            "size_t clen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ignoreeol",
                        "type": "int",
                        "definition": [
                            "int ignoreeol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t *",
                        "definition": [
                            "lil_func_t *cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmds",
                        "type": "size_t",
                        "definition": [
                            "size_t cmds"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syscmds",
                        "type": "size_t",
                        "definition": [
                            "size_t syscmds"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmdmap",
                        "type": "hashmap_t",
                        "definition": [
                            "hashmap_t cmdmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "catcher",
                        "type": "char *",
                        "definition": [
                            "char *catcher"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_catcher",
                        "type": "int",
                        "definition": [
                            "int in_catcher"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dollarprefix",
                        "type": "char *",
                        "definition": [
                            "char *dollarprefix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rootenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t rootenv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t downenv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t empty"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_head",
                        "type": "size_t",
                        "definition": [
                            "size_t err_head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_msg",
                        "type": "char *",
                        "definition": [
                            "char *err_msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "callback",
                        "type": "lil_callback_proc_t [8]",
                        "definition": [
                            "lil_callback_proc_t callback[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parse_depth",
                        "type": "size_t",
                        "definition": [
                            "size_t parse_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "embed",
                        "type": "char *",
                        "definition": [
                            "char *embed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "embedlen",
                        "type": "size_t",
                        "definition": [
                            "size_t embedlen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _lil_t *lil_t",
            "name": "lil_t",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct _lil_t\n{\n  const char *code;\n  const char *rootcode;\n  size_t clen;\n  size_t head;\n  int ignoreeol;\n  lil_func_t *cmd;\n  size_t cmds;\n  size_t syscmds;\n  hashmap_t cmdmap;\n  char *catcher;\n  int in_catcher;\n  char *dollarprefix;\n  lil_env_t env;\n  lil_env_t rootenv;\n  lil_env_t downenv;\n  lil_value_t empty;\n  int error;\n  size_t err_head;\n  char *err_msg;\n  lil_callback_proc_t callback[8];\n  size_t parse_depth;\n  void *data;\n  char *embed;\n  size_t embedlen;\n}",
                        "name": "_lil_t",
                        "names": [
                            "typedef struct _lil_t *lil_t"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "code",
                                    "type": "const char *",
                                    "definition": [
                                        "const char *code"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rootcode",
                                    "type": "const char *",
                                    "definition": [
                                        "const char *rootcode"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "clen",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t clen"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "head",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t head"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "ignoreeol",
                                    "type": "int",
                                    "definition": [
                                        "int ignoreeol"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "cmd",
                                    "type": "lil_func_t *",
                                    "definition": [
                                        "lil_func_t *cmd"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "cmds",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t cmds"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "syscmds",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t syscmds"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "cmdmap",
                                    "type": "hashmap_t",
                                    "definition": [
                                        "hashmap_t cmdmap"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "catcher",
                                    "type": "char *",
                                    "definition": [
                                        "char *catcher"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "in_catcher",
                                    "type": "int",
                                    "definition": [
                                        "int in_catcher"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "dollarprefix",
                                    "type": "char *",
                                    "definition": [
                                        "char *dollarprefix"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "env",
                                    "type": "lil_env_t",
                                    "definition": [
                                        "lil_env_t env"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rootenv",
                                    "type": "lil_env_t",
                                    "definition": [
                                        "lil_env_t rootenv"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "downenv",
                                    "type": "lil_env_t",
                                    "definition": [
                                        "lil_env_t downenv"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "empty",
                                    "type": "lil_value_t",
                                    "definition": [
                                        "lil_value_t empty"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "error",
                                    "type": "int",
                                    "definition": [
                                        "int error"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "err_head",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t err_head"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "err_msg",
                                    "type": "char *",
                                    "definition": [
                                        "char *err_msg"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "callback",
                                    "type": "lil_callback_proc_t [8]",
                                    "definition": [
                                        "lil_callback_proc_t callback[8]"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "parse_depth",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t parse_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "void *",
                                    "definition": [
                                        "void *data"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "embed",
                                    "type": "char *",
                                    "definition": [
                                        "char *embed"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "embedlen",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t embedlen"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef lil_value_t (*lil_func_proc_t)(lil_t lil, size_t argc, lil_value_t *argv)",
            "name": "lil_func_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*lil_exit_callback_proc_t)(lil_t lil, lil_value_t arg)",
            "name": "lil_exit_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*lil_write_callback_proc_t)(lil_t lil, const char *msg)",
            "name": "lil_write_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef char *(*lil_read_callback_proc_t)(lil_t lil, const char *name)",
            "name": "lil_read_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef char *(*lil_source_callback_proc_t)(lil_t lil, const char *name)",
            "name": "lil_source_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*lil_store_callback_proc_t)(lil_t lil, const char *name, const char *data)",
            "name": "lil_store_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const char *",
                        "definition": [
                            "const char *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*lil_error_callback_proc_t)(lil_t lil, size_t pos, const char *msg)",
            "name": "lil_error_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*lil_setvar_callback_proc_t)(lil_t lil, const char *name, lil_value_t *value)",
            "name": "lil_setvar_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*lil_getvar_callback_proc_t)(lil_t lil, const char *name, lil_value_t *value)",
            "name": "lil_getvar_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*lil_callback_proc_t)(void)",
            "name": "lil_callback_proc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct hashentry_t\n{\n  char *k;\n  void *v;\n}",
            "name": "hashentry_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "char *",
                        "definition": [
                            "char *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "void *",
                        "definition": [
                            "void *v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct hashcell_t\n{\n  struct hashentry_t *e;\n  size_t c;\n}",
            "name": "hashcell_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct hashentry_t",
                        "type": "struct hashentry_t *",
                        "definition": [
                            "struct hashentry_t *e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "size_t",
                        "definition": [
                            "size_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _hashmap_t\n{\n  struct hashcell_t cell[256];\n} hashmap_t",
            "name": "hashmap_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cell",
                        "type": "struct hashcell_t [256]",
                        "definition": [
                            "struct hashcell_t cell[256]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _expreval_t\n{\n  const char *code;\n  size_t len;\n  size_t head;\n  lilint_t ival;\n  double dval;\n  int type;\n  int error;\n} expreval_t",
            "name": "expreval_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char *",
                        "definition": [
                            "const char *code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t ival"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dval",
                        "type": "double",
                        "definition": [
                            "double dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "running",
            "type": "int",
            "definition": [
                "static int running = 1"
            ]
        },
        {
            "path": null,
            "name": "exit_code",
            "type": "int",
            "definition": [
                "static int exit_code = 0"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "lil_new",
            "header": "lil_t lil_new(void)",
            "params": [
                "void"
            ],
            "definition": "lil_t lil_new(void)\n{\n  lil_t lil = calloc(1, sizeof(struct _lil_t));\n  lil->rootenv = (lil->env = lil_alloc_env(0));\n  lil->empty = alloc_value(0);\n  lil->dollarprefix = strclone(\"set \");\n  hm_init(&lil->cmdmap);\n  register_stdcmds(lil);\n  return lil;\n}\n\n",
            "calle": [
                "alloc_value",
                "calloc",
                "hm_init",
                "lil_alloc_env",
                "register_stdcmds",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = calloc(1, sizeof(struct _lil_t))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_free",
            "header": "void lil_free(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "void lil_free(lil_t lil)\n{\n  size_t i;\n  if (!lil)\n  {\n    return;\n  }\n  free(lil->err_msg);\n  lil_free_value(lil->empty);\n  while (lil->env)\n  {\n    lil_env_t next = lil->env->parent;\n    lil_free_env(lil->env);\n    lil->env = next;\n  }\n\n  for (i = 0; i < lil->cmds; i += 1)\n  {\n    if (lil->cmd[i]->argnames)\n    {\n      lil_free_list(lil->cmd[i]->argnames);\n    }\n    lil_free_value(lil->cmd[i]->code);\n    free(lil->cmd[i]->name);\n    free(lil->cmd[i]);\n  }\n\n  hm_destroy(&lil->cmdmap);\n  free(lil->cmd);\n  free(lil->dollarprefix);\n  free(lil->catcher);\n  free(lil);\n}\n\n",
            "calle": [
                "free",
                "hm_destroy",
                "lil_free_env",
                "lil_free_list",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t next = lil->env->parent"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_register",
            "header": "int lil_register(lil_t lil, const char *name, lil_func_proc_t proc)",
            "params": [
                "lil_t lil",
                "const char *name",
                "lil_func_proc_t proc"
            ],
            "definition": "int lil_register(lil_t lil, const char *name, lil_func_proc_t proc)\n{\n  lil_func_t cmd = add_func(lil, name);\n  if (!cmd)\n  {\n    return 0;\n  }\n  cmd->proc = proc;\n  return 1;\n}\n\n",
            "calle": [
                "add_func"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_func_proc_t",
                        "definition": [
                            "lil_func_proc_t proc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd = add_func(lil, name)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_parse",
            "header": "lil_value_t lil_parse(lil_t lil, const char *code, size_t codelen, int funclevel)",
            "params": [
                "lil_t lil",
                "const char *code",
                "size_t codelen",
                "int funclevel"
            ],
            "definition": "lil_value_t lil_parse(lil_t lil, const char *code, size_t codelen, int funclevel)\n{\n  const char *save_code = lil->code;\n  size_t save_clen = lil->clen;\n  size_t save_head = lil->head;\n  lil_value_t val = 0;\n  lil_list_t words = 0;\n  if (!save_code)\n  {\n    lil->rootcode = code;\n  }\n  lil->code = code;\n  lil->clen = (codelen) ? (codelen) : (strlen(code));\n  lil->head = 0;\n  skip_spaces(lil);\n  lil->parse_depth += 1;\n  if (lil->parse_depth == 1)\n  {\n    lil->error = 0;\n  }\n  if (funclevel)\n  {\n    lil->env->breakrun = 0;\n  }\n  while ((lil->head < lil->clen) && (!lil->error))\n  {\n    helper_lil_parse_2(&lil, &val, &words);\n  }\n\n  cleanup:\n  if ((lil->error && lil->callback[5]) && (lil->parse_depth == 1))\n  {\n    lil_error_callback_proc_t proc = (lil_error_callback_proc_t) lil->callback[5];\n    proc(lil, lil->err_head, lil->err_msg);\n  }\n\n  if (words)\n  {\n    lil_free_list(words);\n  }\n  lil->code = save_code;\n  lil->clen = save_clen;\n  lil->head = save_head;\n  if (funclevel && lil->env->retval_set)\n  {\n    helper_lil_parse_1(&lil, &val);\n  }\n  lil->parse_depth -= 1;\n  return (val) ? (val) : (alloc_value(0));\n}\n\n",
            "calle": [
                "alloc_value",
                "helper_lil_parse_1",
                "helper_lil_parse_2",
                "lil_free_list",
                "proc",
                "skip_spaces",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char *",
                        "definition": [
                            "const char *code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codelen",
                        "type": "size_t",
                        "definition": [
                            "size_t codelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "funclevel",
                        "type": "int",
                        "definition": [
                            "int funclevel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_code",
                        "type": "const char *",
                        "definition": [
                            "const char *save_code = lil->code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_clen",
                        "type": "size_t",
                        "definition": [
                            "size_t save_clen = lil->clen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_head",
                        "type": "size_t",
                        "definition": [
                            "size_t save_head = lil->head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_error_callback_proc_t",
                        "definition": [
                            "lil_error_callback_proc_t proc = (lil_error_callback_proc_t) lil->callback[5]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_parse_value",
            "header": "lil_value_t lil_parse_value(lil_t lil, lil_value_t val, int funclevel)",
            "params": [
                "lil_t lil",
                "lil_value_t val",
                "int funclevel"
            ],
            "definition": "lil_value_t lil_parse_value(lil_t lil, lil_value_t val, int funclevel)\n{\n  if (((!val) || (!val->d)) || (!val->l))\n  {\n    return alloc_value(0);\n  }\n  return lil_parse(lil, val->d, val->l, funclevel);\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "funclevel",
                        "type": "int",
                        "definition": [
                            "int funclevel"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_call",
            "header": "lil_value_t lil_call(lil_t lil, const char *funcname, size_t argc, lil_value_t *argv)",
            "params": [
                "lil_t lil",
                "const char *funcname",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "lil_value_t lil_call(lil_t lil, const char *funcname, size_t argc, lil_value_t *argv)\n{\n  lil_func_t cmd = find_cmd(lil, funcname);\n  lil_value_t r = 0;\n  if (cmd)\n  {\n    if (cmd->proc)\n    {\n      r = cmd->proc(lil, argc, argv);\n    }\n    else\n    {\n      size_t i;\n      lil_push_env(lil);\n      lil->env->func = cmd;\n      if ((cmd->argnames->c == 1) && (!strcmp(lil_to_string(cmd->argnames->v[0]), \"args\")))\n      {\n        lil_list_t args = lil_alloc_list();\n        lil_value_t argsval;\n        for (i = 0; i < argc; i += 1)\n          lil_list_append(args, lil_clone_value(argv[i]));\n\n        argsval = lil_list_to_value(args, 0);\n        lil_set_var(lil, \"args\", argsval, 2);\n        lil_free_value(argsval);\n        lil_free_list(args);\n      }\n      else\n      {\n        for (i = 0; i < cmd->argnames->c; i += 1)\n          lil_set_var(lil, lil_to_string(cmd->argnames->v[i]), (i < argc) ? (argv[i]) : (0), 2);\n\n      }\n      r = lil_parse_value(lil, cmd->code, 1);\n      lil_pop_env(lil);\n    }\n  }\n  return r;\n}\n\n",
            "calle": [
                "cmd->proc",
                "find_cmd",
                "lil_alloc_list",
                "lil_clone_value",
                "lil_free_list",
                "lil_free_value",
                "lil_list_append",
                "lil_list_to_value",
                "lil_parse_value",
                "lil_pop_env",
                "lil_push_env",
                "lil_set_var",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "funcname",
                        "type": "const char *",
                        "definition": [
                            "const char *funcname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd = find_cmd(lil, funcname)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t args = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t argsval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_callback",
            "header": "void lil_callback(lil_t lil, int cb, lil_callback_proc_t proc)",
            "params": [
                "lil_t lil",
                "int cb",
                "lil_callback_proc_t proc"
            ],
            "definition": "void lil_callback(lil_t lil, int cb, lil_callback_proc_t proc)\n{\n  if ((cb < 0) || (cb > 8))\n  {\n    return;\n  }\n  lil->callback[cb] = proc;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int",
                        "definition": [
                            "int cb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_callback_proc_t",
                        "definition": [
                            "lil_callback_proc_t proc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_set_error",
            "header": "void lil_set_error(lil_t lil, const char *msg)",
            "params": [
                "lil_t lil",
                "const char *msg"
            ],
            "definition": "void lil_set_error(lil_t lil, const char *msg)\n{\n  if (lil->error)\n  {\n    return;\n  }\n  free(lil->err_msg);\n  lil->error = 2;\n  lil->err_head = 0;\n  lil->err_msg = strclone((msg) ? (msg) : (\"\"));\n}\n\n",
            "calle": [
                "free",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_set_error_at",
            "header": "void lil_set_error_at(lil_t lil, size_t pos, const char *msg)",
            "params": [
                "lil_t lil",
                "size_t pos",
                "const char *msg"
            ],
            "definition": "void lil_set_error_at(lil_t lil, size_t pos, const char *msg)\n{\n  if (lil->error)\n  {\n    return;\n  }\n  free(lil->err_msg);\n  lil->error = 1;\n  lil->err_head = pos;\n  lil->err_msg = strclone((msg) ? (msg) : (\"\"));\n}\n\n",
            "calle": [
                "free",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_error",
            "header": "int lil_error(lil_t lil, const char **msg, size_t *pos)",
            "params": [
                "lil_t lil",
                "const char **msg",
                "size_t *pos"
            ],
            "definition": "int lil_error(lil_t lil, const char **msg, size_t *pos)\n{\n  if (!lil->error)\n  {\n    return 0;\n  }\n  *msg = lil->err_msg;\n  *pos = lil->err_head;\n  lil->error = 0;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char **",
                        "definition": [
                            "const char **msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t *",
                        "definition": [
                            "size_t *pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_to_string",
            "header": "const char *lil_to_string(lil_value_t val)",
            "params": [
                "lil_value_t val"
            ],
            "definition": "const char *lil_to_string(lil_value_t val)\n{\n  return (val && val->l) ? (val->d) : (\"\");\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_to_double",
            "header": "double lil_to_double(lil_value_t val)",
            "params": [
                "lil_value_t val"
            ],
            "definition": "double lil_to_double(lil_value_t val)\n{\n  return atof(lil_to_string(val));\n}\n\n",
            "calle": [
                "atof",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_to_integer",
            "header": "lilint_t lil_to_integer(lil_value_t val)",
            "params": [
                "lil_value_t val"
            ],
            "definition": "lilint_t lil_to_integer(lil_value_t val)\n{\n  return (lilint_t) atoll(lil_to_string(val));\n}\n\n",
            "calle": [
                "atoll",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_to_boolean",
            "header": "int lil_to_boolean(lil_value_t val)",
            "params": [
                "lil_value_t val"
            ],
            "definition": "int lil_to_boolean(lil_value_t val)\n{\n  const char *s = lil_to_string(val);\n  size_t i;\n  size_t dots = 0;\n  if (!s[0])\n  {\n    return 0;\n  }\n  for (i = 0; s[i]; i += 1)\n  {\n    if ((s[i] != '0') && (s[i] != '.'))\n    {\n      return 1;\n    }\n    if (s[i] == '.')\n    {\n      if (dots)\n      {\n        return 1;\n      }\n      dots = 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s = lil_to_string(val)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dots",
                        "type": "size_t",
                        "definition": [
                            "size_t dots = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_string",
            "header": "lil_value_t lil_alloc_string(const char *str)",
            "params": [
                "const char *str"
            ],
            "definition": "lil_value_t lil_alloc_string(const char *str)\n{\n  return alloc_value(str);\n}\n\n",
            "calle": [
                "alloc_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_double",
            "header": "lil_value_t lil_alloc_double(double num)",
            "params": [
                "double num"
            ],
            "definition": "lil_value_t lil_alloc_double(double num)\n{\n  char buff[128];\n  sprintf(buff, \"%f\", num);\n  return alloc_value(buff);\n}\n\n",
            "calle": [
                "alloc_value",
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num",
                        "type": "double",
                        "definition": [
                            "double num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "char [128]",
                        "definition": [
                            "char buff[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_integer",
            "header": "lil_value_t lil_alloc_integer(lilint_t num)",
            "params": [
                "lilint_t num"
            ],
            "definition": "lil_value_t lil_alloc_integer(lilint_t num)\n{\n  char buff[128];\n  sprintf(buff, \"%i\", num);\n  return alloc_value(buff);\n}\n\n",
            "calle": [
                "alloc_value",
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "char [128]",
                        "definition": [
                            "char buff[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_free_value",
            "header": "void lil_free_value(lil_value_t val)",
            "params": [
                "lil_value_t val"
            ],
            "definition": "void lil_free_value(lil_value_t val)\n{\n  if (!val)\n  {\n    return;\n  }\n  free(val->d);\n  free(val);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_clone_value",
            "header": "lil_value_t lil_clone_value(lil_value_t src)",
            "params": [
                "lil_value_t src"
            ],
            "definition": "lil_value_t lil_clone_value(lil_value_t src)\n{\n  lil_value_t val;\n  if (!src)\n  {\n    return 0;\n  }\n  val = calloc(1, sizeof(struct _lil_value_t));\n  if (!val)\n  {\n    return 0;\n  }\n  val->l = src->l;\n  if (src->l)\n  {\n    val->d = malloc(val->l + 1);\n    if (!val->d)\n    {\n      free(val);\n      return 0;\n    }\n    memcpy(val->d, src->d, val->l + 1);\n  }\n  else\n  {\n    val->d = 0;\n  }\n  return val;\n}\n\n",
            "calle": [
                "calloc",
                "free",
                "malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_append_char",
            "header": "int lil_append_char(lil_value_t val, char ch)",
            "params": [
                "lil_value_t val",
                "char ch"
            ],
            "definition": "int lil_append_char(lil_value_t val, char ch)\n{\n  char *new = realloc(val->d, val->l + 2);\n  if (!new)\n  {\n    return 0;\n  }\n  new[val->l++] = ch;\n  new[val->l] = 0;\n  val->d = new;\n  return 1;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "char",
                        "definition": [
                            "char ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new",
                        "type": "char *",
                        "definition": [
                            "char *new = realloc(val->d, val->l + 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_append_string",
            "header": "int lil_append_string(lil_value_t val, const char *s)",
            "params": [
                "lil_value_t val",
                "const char *s"
            ],
            "definition": "int lil_append_string(lil_value_t val, const char *s)\n{\n  return lil_append_string_len(val, s, strlen(s));\n}\n\n",
            "calle": [
                "lil_append_string_len",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_append_val",
            "header": "int lil_append_val(lil_value_t val, lil_value_t v)",
            "params": [
                "lil_value_t val",
                "lil_value_t v"
            ],
            "definition": "int lil_append_val(lil_value_t val, lil_value_t v)\n{\n  char *new;\n  unsigned int new_idx = 0;\n  if ((!v) || (!v->l))\n  {\n    return 1;\n  }\n  new_idx = realloc(val->d, (val->l + v->l) + 1);\n  if (!(&new[new_idx]))\n  {\n    return 0;\n  }\n  memcpy((&new[new_idx]) + val->l, v->d, v->l + 1);\n  val->d = &new[new_idx];\n  val->l += v->l;\n  return 1;\n}\n\n",
            "calle": [
                "memcpy",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new",
                        "type": "char *",
                        "definition": [
                            "char *new"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_list",
            "header": "lil_list_t lil_alloc_list(void)",
            "params": [
                "void"
            ],
            "definition": "lil_list_t lil_alloc_list(void)\n{\n  lil_list_t list;\n  list = calloc(1, sizeof(struct _lil_list_t));\n  list->v = 0;\n  return list;\n}\n\n",
            "calle": [
                "calloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_free_list",
            "header": "void lil_free_list(lil_list_t list)",
            "params": [
                "lil_list_t list"
            ],
            "definition": "void lil_free_list(lil_list_t list)\n{\n  size_t i;\n  if (!list)\n  {\n    return;\n  }\n  for (i = 0; i < list->c; i += 1)\n    lil_free_value(list->v[i]);\n\n  free(list->v);\n  free(list);\n}\n\n",
            "calle": [
                "free",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_list_append",
            "header": "void lil_list_append(lil_list_t list, lil_value_t val)",
            "params": [
                "lil_list_t list",
                "lil_value_t val"
            ],
            "definition": "void lil_list_append(lil_list_t list, lil_value_t val)\n{\n  if (list->c == list->cap)\n  {\n    size_t cap = (list->cap) ? (list->cap + (list->cap / 2)) : (32);\n    lil_value_t *nv = realloc(list->v, (sizeof(lil_value_t)) * cap);\n    if (!nv)\n    {\n      return;\n    }\n    list->cap = cap;\n    list->v = nv;\n  }\n  list->v[list->c++] = val;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cap",
                        "type": "size_t",
                        "definition": [
                            "size_t cap = (list->cap) ? (list->cap + (list->cap / 2)) : (32)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *nv = realloc(list->v, (sizeof(lil_value_t)) * cap)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_list_size",
            "header": "size_t lil_list_size(lil_list_t list)",
            "params": [
                "lil_list_t list"
            ],
            "definition": "size_t lil_list_size(lil_list_t list)\n{\n  return list->c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_list_get",
            "header": "lil_value_t lil_list_get(lil_list_t list, size_t index)",
            "params": [
                "lil_list_t list",
                "size_t index"
            ],
            "definition": "lil_value_t lil_list_get(lil_list_t list, size_t index)\n{\n  return (index >= list->c) ? (0) : (list->v[index]);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_list_to_value",
            "header": "lil_value_t lil_list_to_value(lil_list_t list, int do_escape)",
            "params": [
                "lil_list_t list",
                "int do_escape"
            ],
            "definition": "lil_value_t lil_list_to_value(lil_list_t list, int do_escape)\n{\n  lil_value_t val = alloc_value(0);\n  size_t i;\n  size_t j;\n  for (i = 0; i < list->c; i += 1)\n  {\n    int escape = (do_escape) ? (needs_escape(lil_to_string(list->v[i]))) : (0);\n    if (i)\n    {\n      lil_append_char(val, ' ');\n    }\n    if (escape)\n    {\n      lil_append_char(val, '{');\n      for (j = 0; j < list->v[i]->l; j += 1)\n      {\n        if (list->v[i]->d[j] == '{')\n        {\n          lil_append_string(val, \"}\\\"\\\\o\\\"{\");\n        }\n        else\n          if (list->v[i]->d[j] == '}')\n        {\n          lil_append_string(val, \"}\\\"\\\\c\\\"{\");\n        }\n        else\n          lil_append_char(val, list->v[i]->d[j]);\n      }\n\n      lil_append_char(val, '}');\n    }\n    else\n      lil_append_val(val, list->v[i]);\n  }\n\n  return val;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char",
                "lil_append_string",
                "lil_append_val",
                "lil_to_string",
                "needs_escape"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "do_escape",
                        "type": "int",
                        "definition": [
                            "int do_escape"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = alloc_value(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escape",
                        "type": "int",
                        "definition": [
                            "int escape = (do_escape) ? (needs_escape(lil_to_string(list->v[i]))) : (0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_subst_to_list",
            "header": "lil_list_t lil_subst_to_list(lil_t lil, lil_value_t code)",
            "params": [
                "lil_t lil",
                "lil_value_t code"
            ],
            "definition": "lil_list_t lil_subst_to_list(lil_t lil, lil_value_t code)\n{\n  const char *save_code = lil->code;\n  size_t save_clen = lil->clen;\n  size_t save_head = lil->head;\n  int save_igeol = lil->ignoreeol;\n  lil_list_t words;\n  lil->code = lil_to_string(code);\n  lil->clen = code->l;\n  lil->head = 0;\n  lil->ignoreeol = 1;\n  words = substitute(lil);\n  if (!words)\n  {\n    words = lil_alloc_list();\n  }\n  lil->code = save_code;\n  lil->clen = save_clen;\n  lil->head = save_head;\n  lil->ignoreeol = save_igeol;\n  return words;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_to_string",
                "substitute"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_code",
                        "type": "const char *",
                        "definition": [
                            "const char *save_code = lil->code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_clen",
                        "type": "size_t",
                        "definition": [
                            "size_t save_clen = lil->clen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_head",
                        "type": "size_t",
                        "definition": [
                            "size_t save_head = lil->head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_igeol",
                        "type": "int",
                        "definition": [
                            "int save_igeol = lil->ignoreeol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_subst_to_value",
            "header": "lil_value_t lil_subst_to_value(lil_t lil, lil_value_t code)",
            "params": [
                "lil_t lil",
                "lil_value_t code"
            ],
            "definition": "lil_value_t lil_subst_to_value(lil_t lil, lil_value_t code)\n{\n  lil_list_t words = lil_subst_to_list(lil, code);\n  lil_value_t val;\n  val = lil_list_to_value(words, 0);\n  lil_free_list(words);\n  return val;\n}\n\n",
            "calle": [
                "lil_free_list",
                "lil_list_to_value",
                "lil_subst_to_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words = lil_subst_to_list(lil, code)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_env",
            "header": "lil_env_t lil_alloc_env(lil_env_t parent)",
            "params": [
                "lil_env_t parent"
            ],
            "definition": "lil_env_t lil_alloc_env(lil_env_t parent)\n{\n  lil_env_t env;\n  env = calloc(1, sizeof(struct _lil_env_t));\n  env->parent = parent;\n  return env;\n}\n\n",
            "calle": [
                "calloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "parent",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_free_env",
            "header": "void lil_free_env(lil_env_t env)",
            "params": [
                "lil_env_t env"
            ],
            "definition": "void lil_free_env(lil_env_t env)\n{\n  size_t i;\n  if (!env)\n  {\n    return;\n  }\n  lil_free_value(env->retval);\n  hm_destroy(&env->varmap);\n  for (i = 0; i < env->vars; i += 1)\n  {\n    free(env->var[i]->n);\n    lil_free_value(env->var[i]->v);\n    free(env->var[i]->w);\n    free(env->var[i]);\n  }\n\n  free(env->var);\n  free(env);\n}\n\n",
            "calle": [
                "free",
                "hm_destroy",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_push_env",
            "header": "lil_env_t lil_push_env(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "lil_env_t lil_push_env(lil_t lil)\n{\n  lil_env_t env = lil_alloc_env(lil->env);\n  lil->env = env;\n  return env;\n}\n\n",
            "calle": [
                "lil_alloc_env"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = lil_alloc_env(lil->env)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_pop_env",
            "header": "void lil_pop_env(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "void lil_pop_env(lil_t lil)\n{\n  if (lil->env->parent)\n  {\n    lil_env_t next = lil->env->parent;\n    lil_free_env(lil->env);\n    lil->env = next;\n  }\n}\n\n",
            "calle": [
                "lil_free_env"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t next = lil->env->parent"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_set_var",
            "header": "lil_var_t lil_set_var(lil_t lil, const char *name, lil_value_t val, int local)",
            "params": [
                "lil_t lil",
                "const char *name",
                "lil_value_t val",
                "int local"
            ],
            "definition": "lil_var_t lil_set_var(lil_t lil, const char *name, lil_value_t val, int local)\n{\n  lil_var_t *nvar;\n  unsigned int nvar_idx = 0;\n  lil_env_t env = (local == 0) ? (lil->rootenv) : (lil->env);\n  int freeval = 0;\n  if (!name[0])\n  {\n    return 0;\n  }\n  if (local != 2)\n  {\n    helper_lil_set_var_1(&lil, &val, &env, &freeval, name, local);\n  }\n  nvar_idx = realloc(env->var, (sizeof(lil_var_t)) * (env->vars + 1));\n  if (!(&nvar[nvar_idx]))\n  {\n    return 0;\n  }\n  env->var = &nvar[nvar_idx];\n  nvar[env->vars + nvar_idx] = calloc(1, sizeof(struct _lil_var_t));\n  nvar[env->vars + nvar_idx]->n = strclone(name);\n  nvar[env->vars + nvar_idx]->w = 0;\n  nvar[env->vars + nvar_idx]->env = env;\n  nvar[env->vars + nvar_idx]->v = (freeval) ? (val) : (lil_clone_value(val));\n  hm_put(&env->varmap, name, nvar[env->vars + nvar_idx]);\n  return nvar[(env->vars++) + nvar_idx];\n}\n\n",
            "calle": [
                "calloc",
                "helper_lil_set_var_1",
                "hm_put",
                "lil_clone_value",
                "realloc",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "local",
                        "type": "int",
                        "definition": [
                            "int local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nvar",
                        "type": "lil_var_t *",
                        "definition": [
                            "lil_var_t *nvar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nvar_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nvar_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = (local == 0) ? (lil->rootenv) : (lil->env)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval",
                        "type": "int",
                        "definition": [
                            "int freeval = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_get_var",
            "header": "lil_value_t lil_get_var(lil_t lil, const char *name)",
            "params": [
                "lil_t lil",
                "const char *name"
            ],
            "definition": "lil_value_t lil_get_var(lil_t lil, const char *name)\n{\n  return lil_get_var_or(lil, name, lil->empty);\n}\n\n",
            "calle": [
                "lil_get_var_or"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_get_var_or",
            "header": "lil_value_t lil_get_var_or(lil_t lil, const char *name, lil_value_t defvalue)",
            "params": [
                "lil_t lil",
                "const char *name",
                "lil_value_t defvalue"
            ],
            "definition": "lil_value_t lil_get_var_or(lil_t lil, const char *name, lil_value_t defvalue)\n{\n  lil_var_t var = lil_find_var(lil, lil->env, name);\n  lil_value_t retval = (var) ? (var->v) : (defvalue);\n  if (lil->callback[7] && ((!var) || (var->env == lil->rootenv)))\n  {\n    lil_getvar_callback_proc_t proc = (lil_getvar_callback_proc_t) lil->callback[7];\n    lil_value_t newretval = retval;\n    if (proc(lil, name, &newretval))\n    {\n      retval = newretval;\n    }\n  }\n  return retval;\n}\n\n",
            "calle": [
                "lil_find_var",
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "defvalue",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t defvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t var = lil_find_var(lil, lil->env, name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t retval = (var) ? (var->v) : (defvalue)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_getvar_callback_proc_t",
                        "definition": [
                            "lil_getvar_callback_proc_t proc = (lil_getvar_callback_proc_t) lil->callback[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newretval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t newretval = retval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_eval_expr",
            "header": "lil_value_t lil_eval_expr(lil_t lil, lil_value_t code)",
            "params": [
                "lil_t lil",
                "lil_value_t code"
            ],
            "definition": "lil_value_t lil_eval_expr(lil_t lil, lil_value_t code)\n{\n  expreval_t ee;\n  code = lil_subst_to_value(lil, code);\n  if (lil->error)\n  {\n    return 0;\n  }\n  ee.code = lil_to_string(code);\n  if (!ee.code[0])\n  {\n    lil_free_value(code);\n    return lil_alloc_integer(0);\n  }\n  ee.head = 0;\n  ee.len = code->l;\n  ee.ival = 0;\n  ee.dval = 0;\n  ee.type = 0;\n  ee.error = 0;\n  ee_expr(&ee);\n  lil_free_value(code);\n  if (ee.error)\n  {\n    helper_lil_eval_expr_1(lil, ee);\n  }\n  if (ee.type == 0)\n  {\n    return lil_alloc_integer(ee.ival);\n  }\n  else\n    return lil_alloc_double(ee.dval);\n}\n\n",
            "calle": [
                "ee_expr",
                "helper_lil_eval_expr_1",
                "lil_alloc_double",
                "lil_alloc_integer",
                "lil_free_value",
                "lil_subst_to_value",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t",
                        "definition": [
                            "expreval_t ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_unused_name",
            "header": "lil_value_t lil_unused_name(lil_t lil, const char *part)",
            "params": [
                "lil_t lil",
                "const char *part"
            ],
            "definition": "lil_value_t lil_unused_name(lil_t lil, const char *part)\n{\n  char *name = malloc(strlen(part) + 64);\n  lil_value_t val;\n  size_t i;\n  for (i = 0; i < ((size_t) (-1)); i += 1)\n  {\n    sprintf(name, \"!!un!%s!%09u!nu!!\", part, (unsigned int) i);\n    if (find_cmd(lil, name))\n    {\n      continue;\n    }\n    if (lil_find_var(lil, lil->env, name))\n    {\n      continue;\n    }\n    val = lil_alloc_string(name);\n    free(name);\n    return val;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "find_cmd",
                "free",
                "lil_alloc_string",
                "lil_find_var",
                "malloc",
                "sprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "part",
                        "type": "const char *",
                        "definition": [
                            "const char *part"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name = malloc(strlen(part) + 64)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_arg",
            "header": "lil_value_t lil_arg(lil_value_t *argv, size_t index)",
            "params": [
                "lil_value_t *argv",
                "size_t index"
            ],
            "definition": "lil_value_t lil_arg(lil_value_t *argv, size_t index)\n{\n  return (argv) ? (argv[index]) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_set_data",
            "header": "void lil_set_data(lil_t lil, void *data)",
            "params": [
                "lil_t lil",
                "void *data"
            ],
            "definition": "void lil_set_data(lil_t lil, void *data)\n{\n  lil->data = data;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_get_data",
            "header": "void *lil_get_data(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "void *lil_get_data(lil_t lil)\n{\n  return lil->data;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_embedded",
            "header": "char *lil_embedded(lil_t lil, const char *code, unsigned int flags)",
            "params": [
                "lil_t lil",
                "const char *code",
                "unsigned int flags"
            ],
            "definition": "char *lil_embedded(lil_t lil, const char *code, unsigned int flags)\n{\n  char *prev_embed = lil->embed;\n  size_t prev_embedlen = lil->embedlen;\n  lil_callback_proc_t prev_write = lil->callback[1];\n  char *lilcode = 0;\n  unsigned int lilcode_idx = 0;\n  size_t lilcodelen = 0;\n  char *cont = 0;\n  unsigned int cont_idx = 0;\n  size_t contlen = 0;\n  size_t head = 0;\n  size_t codelen = strlen(code);\n  char *result;\n  unsigned int result_idx = 0;\n  lil->callback[1] = (lil_callback_proc_t) fnc_embed_write;\n  lil->embed = 0;\n  lil->embedlen = 0;\n  while (head < codelen)\n  {\n    helper_lil_embedded_2(&lilcode_idx, &lilcodelen, &cont_idx, &contlen, &head, code, lilcode, cont, codelen);\n  }\n\n  if (contlen)\n  {\n    helper_lil_embedded_1(&lilcode_idx, &lilcodelen, &contlen, lilcode, cont);\n  }\n  lilcode_idx = realloc(lilcode_idx, lilcodelen + 1);\n  lilcode[lilcodelen + lilcode_idx] = 0;\n  lil_free_value(lil_parse(lil, lilcode, 0, 1));\n  free(lilcode);\n  result_idx = (lil->embed) ? (lil->embed) : (strclone(\"\"));\n  lil->embed = prev_embed;\n  lil->embedlen = prev_embedlen;\n  lil->callback[1] = prev_write;\n  return result;\n}\n\n",
            "calle": [
                "fnc_embed_write",
                "free",
                "helper_lil_embedded_1",
                "helper_lil_embedded_2",
                "lil_free_value",
                "lil_parse",
                "realloc",
                "strclone",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char *",
                        "definition": [
                            "const char *code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_embed",
                        "type": "char *",
                        "definition": [
                            "char *prev_embed = lil->embed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_embedlen",
                        "type": "size_t",
                        "definition": [
                            "size_t prev_embedlen = lil->embedlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_write",
                        "type": "lil_callback_proc_t",
                        "definition": [
                            "lil_callback_proc_t prev_write = lil->callback[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char *",
                        "definition": [
                            "char *lilcode = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char *",
                        "definition": [
                            "char *cont = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cont_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codelen",
                        "type": "size_t",
                        "definition": [
                            "size_t codelen = strlen(code)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "char *",
                        "definition": [
                            "char *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_freemem",
            "header": "void lil_freemem(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "void lil_freemem(void *ptr)\n{\n  free(ptr);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_write",
            "header": "void lil_write(lil_t lil, const char *msg)",
            "params": [
                "lil_t lil",
                "const char *msg"
            ],
            "definition": "void lil_write(lil_t lil, const char *msg)\n{\n  if (lil->callback[1])\n  {\n    lil_write_callback_proc_t proc = (lil_write_callback_proc_t) lil->callback[1];\n    proc(lil, msg);\n  }\n  else\n    printf(\"%s\", msg);\n}\n\n",
            "calle": [
                "printf",
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_write_callback_proc_t",
                        "definition": [
                            "lil_write_callback_proc_t proc = (lil_write_callback_proc_t) lil->callback[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "next_word",
            "header": "static lil_value_t next_word(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "static lil_value_t next_word(lil_t lil)\n{\n  lil_value_t val;\n  size_t start;\n  skip_spaces(lil);\n  if (lil->code[lil->head] == '$')\n  {\n    val = get_dollarpart(lil);\n  }\n  else\n    if (lil->code[lil->head] == '{')\n  {\n    helper_next_word_1(&lil, &val);\n  }\n  else\n    if (lil->code[lil->head] == '[')\n  {\n    val = get_bracketpart(lil);\n  }\n  else\n    if ((lil->code[lil->head] == '\"') || (lil->code[lil->head] == '\\''))\n  {\n    helper_next_word_2(&lil, &val);\n  }\n  else\n  {\n    start = lil->head;\n    while (((lil->head < lil->clen) && (!isspace(lil->code[lil->head]))) && (!islilspecial(lil->code[lil->head])))\n    {\n      lil->head += 1;\n    }\n\n    val = alloc_value_len(lil->code + start, lil->head - start);\n  }\n  return (val) ? (val) : (alloc_value(0));\n}\n\n",
            "calle": [
                "alloc_value",
                "alloc_value_len",
                "get_bracketpart",
                "get_dollarpart",
                "helper_next_word_1",
                "helper_next_word_2",
                "islilspecial",
                "isspace",
                "skip_spaces"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "register_stdcmds",
            "header": "static void register_stdcmds(lil_t lil)",
            "params": [
                "lil_t lil"
            ],
            "definition": "static void register_stdcmds(lil_t lil)\n{\n  lil_register(lil, \"reflect\", fnc_reflect);\n  lil_register(lil, \"func\", fnc_func);\n  lil_register(lil, \"rename\", fnc_rename);\n  lil_register(lil, \"unusedname\", fnc_unusedname);\n  lil_register(lil, \"quote\", fnc_quote);\n  lil_register(lil, \"set\", fnc_set);\n  lil_register(lil, \"local\", fnc_local);\n  lil_register(lil, \"write\", fnc_write);\n  lil_register(lil, \"print\", fnc_print);\n  lil_register(lil, \"eval\", fnc_eval);\n  lil_register(lil, \"topeval\", fnc_topeval);\n  lil_register(lil, \"upeval\", fnc_upeval);\n  lil_register(lil, \"downeval\", fnc_downeval);\n  lil_register(lil, \"enveval\", fnc_enveval);\n  lil_register(lil, \"jaileval\", fnc_jaileval);\n  lil_register(lil, \"count\", fnc_count);\n  lil_register(lil, \"index\", fnc_index);\n  lil_register(lil, \"indexof\", fnc_indexof);\n  lil_register(lil, \"filter\", fnc_filter);\n  lil_register(lil, \"list\", fnc_list);\n  lil_register(lil, \"append\", fnc_append);\n  lil_register(lil, \"slice\", fnc_slice);\n  lil_register(lil, \"subst\", fnc_subst);\n  lil_register(lil, \"concat\", fnc_concat);\n  lil_register(lil, \"foreach\", fnc_foreach);\n  lil_register(lil, \"return\", fnc_return);\n  lil_register(lil, \"result\", fnc_result);\n  lil_register(lil, \"expr\", fnc_expr);\n  lil_register(lil, \"inc\", fnc_inc);\n  lil_register(lil, \"dec\", fnc_dec);\n  lil_register(lil, \"read\", fnc_read);\n  lil_register(lil, \"store\", fnc_store);\n  lil_register(lil, \"if\", fnc_if);\n  lil_register(lil, \"while\", fnc_while);\n  lil_register(lil, \"for\", fnc_for);\n  lil_register(lil, \"char\", fnc_char);\n  lil_register(lil, \"charat\", fnc_charat);\n  lil_register(lil, \"codeat\", fnc_codeat);\n  lil_register(lil, \"substr\", fnc_substr);\n  lil_register(lil, \"strpos\", fnc_strpos);\n  lil_register(lil, \"length\", fnc_length);\n  lil_register(lil, \"trim\", fnc_trim);\n  lil_register(lil, \"ltrim\", fnc_ltrim);\n  lil_register(lil, \"rtrim\", fnc_rtrim);\n  lil_register(lil, \"strcmp\", fnc_strcmp);\n  lil_register(lil, \"streq\", fnc_streq);\n  lil_register(lil, \"repstr\", fnc_repstr);\n  lil_register(lil, \"split\", fnc_split);\n  lil_register(lil, \"try\", fnc_try);\n  lil_register(lil, \"error\", fnc_error);\n  lil_register(lil, \"exit\", fnc_exit);\n  lil_register(lil, \"source\", fnc_source);\n  lil_register(lil, \"lmap\", fnc_lmap);\n  lil_register(lil, \"rand\", fnc_rand);\n  lil_register(lil, \"catcher\", fnc_catcher);\n  lil_register(lil, \"watch\", fnc_watch);\n  lil->syscmds = lil->cmds;\n}\n\n",
            "calle": [
                "fnc_append",
                "fnc_catcher",
                "fnc_char",
                "fnc_charat",
                "fnc_codeat",
                "fnc_concat",
                "fnc_count",
                "fnc_dec",
                "fnc_downeval",
                "fnc_enveval",
                "fnc_error",
                "fnc_eval",
                "fnc_exit",
                "fnc_expr",
                "fnc_filter",
                "fnc_for",
                "fnc_foreach",
                "fnc_func",
                "fnc_if",
                "fnc_inc",
                "fnc_index",
                "fnc_indexof",
                "fnc_jaileval",
                "fnc_length",
                "fnc_list",
                "fnc_lmap",
                "fnc_local",
                "fnc_ltrim",
                "fnc_print",
                "fnc_quote",
                "fnc_rand",
                "fnc_read",
                "fnc_reflect",
                "fnc_rename",
                "fnc_repstr",
                "fnc_result",
                "fnc_return",
                "fnc_rtrim",
                "fnc_set",
                "fnc_slice",
                "fnc_source",
                "fnc_split",
                "fnc_store",
                "fnc_strcmp",
                "fnc_streq",
                "fnc_strpos",
                "fnc_subst",
                "fnc_substr",
                "fnc_topeval",
                "fnc_trim",
                "fnc_try",
                "fnc_unusedname",
                "fnc_upeval",
                "fnc_watch",
                "fnc_while",
                "fnc_write",
                "lil_register"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "strclone",
            "header": "",
            "params": [
                "const char *s"
            ],
            "definition": "static char *strclone(const char *s)\n{\n  size_t len = strlen(s) + 1;\n  char *ns = malloc(len);\n  if (!ns)\n  {\n    return 0;\n  }\n  memcpy(ns, s, len);\n  return ns;\n}\n\n",
            "calle": [
                "malloc",
                "memcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(s) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ns",
                        "type": "char *",
                        "definition": [
                            "char *ns = malloc(len)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_hash",
            "header": "",
            "params": [
                "const char *key"
            ],
            "definition": "static unsigned long hm_hash(const char *key)\n{\n  unsigned long hash = 5381;\n  int c;\n  while (c = *(key++))\n    hash = ((hash << 5) + hash) + c;\n\n  return hash;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hash = 5381"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_init",
            "header": "",
            "params": [
                "hashmap_t *hm"
            ],
            "definition": "static void hm_init(hashmap_t *hm)\n{\n  memset(hm, 0, sizeof(hashmap_t));\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hm",
                        "type": "hashmap_t *",
                        "definition": [
                            "hashmap_t *hm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_destroy",
            "header": "",
            "params": [
                "hashmap_t *hm"
            ],
            "definition": "static void hm_destroy(hashmap_t *hm)\n{\n  size_t i;\n  size_t j;\n  for (i = 0; i < 256; i += 1)\n  {\n    for (j = 0; j < hm->cell[i].c; j += 1)\n      free(hm->cell[i].e[j].k);\n\n    free(hm->cell[i].e);\n  }\n\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hm",
                        "type": "hashmap_t *",
                        "definition": [
                            "hashmap_t *hm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_put",
            "header": "",
            "params": [
                "hashmap_t *hm",
                "const char *key",
                "void *value"
            ],
            "definition": "static void hm_put(hashmap_t *hm, const char *key, void *value)\n{\n  struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF);\n  size_t i;\n  for (i = 0; i < cell->c; i += 1)\n    if (!strcmp(key, cell->e[i].k))\n  {\n    cell->e[i].v = value;\n    return;\n  }\n\n  cell->e = realloc(cell->e, (sizeof(struct hashentry_t)) * (cell->c + 1));\n  cell->e[cell->c].k = strclone(key);\n  cell->e[cell->c].v = value;\n  cell->c += 1;\n}\n\n",
            "calle": [
                "hm_hash",
                "realloc",
                "strclone",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hm",
                        "type": "hashmap_t *",
                        "definition": [
                            "hashmap_t *hm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct hashcell_t",
                        "type": "struct hashcell_t *",
                        "definition": [
                            "struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_get",
            "header": "",
            "params": [
                "hashmap_t *hm",
                "const char *key"
            ],
            "definition": "static void *hm_get(hashmap_t *hm, const char *key)\n{\n  struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF);\n  size_t i;\n  for (i = 0; i < cell->c; i += 1)\n    if (!strcmp(key, cell->e[i].k))\n  {\n    return cell->e[i].v;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "hm_hash",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hm",
                        "type": "hashmap_t *",
                        "definition": [
                            "hashmap_t *hm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct hashcell_t",
                        "type": "struct hashcell_t *",
                        "definition": [
                            "struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hm_has",
            "header": "",
            "params": [
                "hashmap_t *hm",
                "const char *key"
            ],
            "definition": "static int hm_has(hashmap_t *hm, const char *key)\n{\n  struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF);\n  size_t i;\n  for (i = 0; i < cell->c; i += 1)\n    if (!strcmp(key, cell->e[i].k))\n  {\n    return 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "hm_hash",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hm",
                        "type": "hashmap_t *",
                        "definition": [
                            "hashmap_t *hm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct hashcell_t",
                        "type": "struct hashcell_t *",
                        "definition": [
                            "struct hashcell_t *cell = hm->cell + (hm_hash(key) & 0xFF)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "alloc_value_len",
            "header": "",
            "params": [
                "const char *str",
                "size_t len"
            ],
            "definition": "static lil_value_t alloc_value_len(const char *str, size_t len)\n{\n  lil_value_t val = calloc(1, sizeof(struct _lil_value_t));\n  if (!val)\n  {\n    return 0;\n  }\n  if (str)\n  {\n    val->l = len;\n    val->d = malloc(len + 1);\n    if (!val->d)\n    {\n      free(val);\n      return 0;\n    }\n    memcpy(val->d, str, len);\n    val->d[len] = 0;\n  }\n  else\n  {\n    val->l = 0;\n    val->d = 0;\n  }\n  return val;\n}\n\n",
            "calle": [
                "calloc",
                "free",
                "malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = calloc(1, sizeof(struct _lil_value_t))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "alloc_value",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static lil_value_t alloc_value(const char *str)\n{\n  return alloc_value_len(str, (str) ? (strlen(str)) : (0));\n}\n\n",
            "calle": [
                "alloc_value_len",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_append_string_len",
            "header": "",
            "params": [
                "lil_value_t val",
                "const char *s",
                "size_t len"
            ],
            "definition": "int lil_append_string_len(lil_value_t val, const char *s, size_t len)\n{\n  char *new;\n  unsigned int new_idx = 0;\n  if ((!s) || (!s[0]))\n  {\n    return 1;\n  }\n  new_idx = realloc(val->d, (val->l + len) + 1);\n  if (!(&new[new_idx]))\n  {\n    return 0;\n  }\n  memcpy((&new[new_idx]) + val->l, s, len + 1);\n  val->d = &new[new_idx];\n  val->l += len;\n  return 1;\n}\n\n",
            "calle": [
                "memcpy",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new",
                        "type": "char *",
                        "definition": [
                            "char *new"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "needs_escape",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static int needs_escape(const char *str)\n{\n  size_t i;\n  if ((!str) || (!str[0]))\n  {\n    return 1;\n  }\n  for (i = 0; str[i]; i += 1)\n    if (ispunct(str[i]) || isspace(str[i]))\n  {\n    return 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "ispunct",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_find_local_var",
            "header": "",
            "params": [
                "lil_t lil",
                "lil_env_t env",
                "const char *name"
            ],
            "definition": "static lil_var_t lil_find_local_var(lil_t lil, lil_env_t env, const char *name)\n{\n  return hm_get(&env->varmap, name);\n}\n\n",
            "calle": [
                "hm_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_find_var",
            "header": "",
            "params": [
                "lil_t lil",
                "lil_env_t env",
                "const char *name"
            ],
            "definition": "static lil_var_t lil_find_var(lil_t lil, lil_env_t env, const char *name)\n{\n  lil_var_t r = lil_find_local_var(lil, env, name);\n  return (r) ? (r) : ((env == lil->rootenv) ? (0) : (lil_find_var(lil, lil->rootenv, name)));\n}\n\n",
            "calle": [
                "lil_find_local_var",
                "lil_find_var"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t r = lil_find_local_var(lil, env, name)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "find_cmd",
            "header": "",
            "params": [
                "lil_t lil",
                "const char *name"
            ],
            "definition": "static lil_func_t find_cmd(lil_t lil, const char *name)\n{\n  return hm_get(&lil->cmdmap, name);\n}\n\n",
            "calle": [
                "hm_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "add_func",
            "header": "",
            "params": [
                "lil_t lil",
                "const char *name"
            ],
            "definition": "static lil_func_t add_func(lil_t lil, const char *name)\n{\n  lil_func_t cmd;\n  lil_func_t *ncmd;\n  unsigned int ncmd_idx = 0;\n  cmd = find_cmd(lil, name);\n  if (cmd)\n  {\n    if (cmd->argnames)\n    {\n      lil_free_list(cmd->argnames);\n    }\n    lil_free_value(cmd->code);\n    cmd->argnames = 0;\n    cmd->code = 0;\n    cmd->proc = 0;\n    return cmd;\n  }\n  cmd = calloc(1, sizeof(struct _lil_func_t));\n  cmd->name = strclone(name);\n  ncmd_idx = realloc(lil->cmd, (sizeof(lil_func_t)) * (lil->cmds + 1));\n  if (!(&ncmd[ncmd_idx]))\n  {\n    free(cmd);\n    return 0;\n  }\n  lil->cmd = &ncmd[ncmd_idx];\n  ncmd[(lil->cmds++) + ncmd_idx] = cmd;\n  hm_put(&lil->cmdmap, name, cmd);\n  return cmd;\n}\n\n",
            "calle": [
                "calloc",
                "find_cmd",
                "free",
                "hm_put",
                "lil_free_list",
                "lil_free_value",
                "realloc",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncmd",
                        "type": "lil_func_t *",
                        "definition": [
                            "lil_func_t *ncmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncmd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ncmd_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "del_func",
            "header": "",
            "params": [
                "lil_t lil",
                "lil_func_t cmd"
            ],
            "definition": "static void del_func(lil_t lil, lil_func_t cmd)\n{\n  size_t i;\n  size_t index = lil->cmds;\n  for (i = 0; i < lil->cmds; i += 1)\n    if (lil->cmd[i] == cmd)\n  {\n    index = i;\n    break;\n  }\n\n  if (index == lil->cmds)\n  {\n    return;\n  }\n  hm_put(&lil->cmdmap, cmd->name, 0);\n  if (cmd->argnames)\n  {\n    lil_free_list(cmd->argnames);\n  }\n  lil_free_value(cmd->code);\n  free(cmd->name);\n  free(cmd);\n  lil->cmds -= 1;\n  for (i = index; i < lil->cmds; i += 1)\n    lil->cmd[i] = lil->cmd[i + 1];\n\n}\n\n",
            "calle": [
                "free",
                "hm_put",
                "lil_free_list",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index = lil->cmds"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "islilspecial",
            "header": "",
            "params": [
                "char ch"
            ],
            "definition": "static int islilspecial(char ch)\n{\n  return (((((((ch == '$') || (ch == '{')) || (ch == '}')) || (ch == '[')) || (ch == ']')) || (ch == '\"')) || (ch == '\\'')) || (ch == ';');\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch",
                        "type": "char",
                        "definition": [
                            "char ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ateol",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "static int ateol(lil_t lil)\n{\n  return (!lil->ignoreeol) && (((lil->code[lil->head] == '\\n') || (lil->code[lil->head] == '\\r')) || (lil->code[lil->head] == ';'));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "skip_spaces",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "static void skip_spaces(lil_t lil)\n{\n  while (lil->head < lil->clen)\n  {\n    if (lil->code[lil->head] == '#')\n    {\n      if ((lil->code[lil->head + 1] == '#') && (lil->code[lil->head + 2] != '#'))\n      {\n        lil->head += 2;\n        while (lil->head < lil->clen)\n        {\n          if (((lil->code[lil->head] == '#') && (lil->code[lil->head + 1] == '#')) && (lil->code[lil->head + 2] != '#'))\n          {\n            lil->head += 2;\n            break;\n          }\n          lil->head += 1;\n        }\n\n      }\n      else\n      {\n        while ((lil->head < lil->clen) && (!ateol(lil)))\n          lil->head++;\n\n      }\n    }\n    else\n      if ((lil->code[lil->head] == '\\\\') && ((lil->code[lil->head + 1] == '\\r') || (lil->code[lil->head + 1] == '\\n')))\n    {\n      lil->head += 1;\n      while ((lil->head < lil->clen) && ateol(lil))\n        lil->head++;\n\n    }\n    else\n      if ((lil->code[lil->head] == '\\r') || (lil->code[lil->head] == '\\n'))\n    {\n      if (lil->ignoreeol)\n      {\n        lil->head += 1;\n      }\n      else\n        break;\n    }\n    else\n      if (isspace(lil->code[lil->head]))\n    {\n      lil->head += 1;\n    }\n    else\n      break;\n  }\n\n}\n\n",
            "calle": [
                "ateol",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_bracketpart",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "static lil_value_t get_bracketpart(lil_t lil)\n{\n  size_t cnt = 1;\n  lil_value_t val;\n  lil_value_t cmd = alloc_value(0);\n  lil->head += 1;\n  while (lil->head < lil->clen)\n  {\n    if (lil->code[lil->head] == '[')\n    {\n      lil->head += 1;\n      cnt += 1;\n      lil_append_char(cmd, '[');\n    }\n    else\n      if (lil->code[lil->head] == ']')\n    {\n      lil->head += 1;\n      if ((--cnt) == 0)\n      {\n        break;\n      }\n      else\n        lil_append_char(cmd, ']');\n    }\n    else\n    {\n      lil_append_char(cmd, lil->code[lil->head++]);\n    }\n  }\n\n  val = lil_parse_value(lil, cmd, 0);\n  lil_free_value(cmd);\n  return val;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char",
                "lil_free_value",
                "lil_parse_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnt",
                        "type": "size_t",
                        "definition": [
                            "size_t cnt = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t cmd = alloc_value(0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_dollarpart",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "static lil_value_t get_dollarpart(lil_t lil)\n{\n  lil_value_t val;\n  lil_value_t name;\n  lil_value_t tmp;\n  lil->head += 1;\n  name = next_word(lil);\n  tmp = alloc_value(lil->dollarprefix);\n  lil_append_val(tmp, name);\n  lil_free_value(name);\n  val = lil_parse_value(lil, tmp, 0);\n  lil_free_value(tmp);\n  return val;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_val",
                "lil_free_value",
                "lil_parse_value",
                "next_word"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "substitute",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "static lil_list_t substitute(lil_t lil)\n{\n  lil_list_t words = lil_alloc_list();\n  skip_spaces(lil);\n  while (((lil->head < lil->clen) && (!ateol(lil))) && (!lil->error))\n  {\n    lil_value_t w = alloc_value(0);\n    do\n    {\n      size_t head = lil->head;\n      lil_value_t wp = next_word(lil);\n      if (head == lil->head)\n      {\n        lil_free_value(w);\n        lil_free_value(wp);\n        lil_free_list(words);\n        return 0;\n      }\n      lil_append_val(w, wp);\n      lil_free_value(wp);\n    }\n    while ((((lil->head < lil->clen) && (!ateol(lil))) && (!isspace(lil->code[lil->head]))) && (!lil->error));\n    skip_spaces(lil);\n    lil_list_append(words, w);\n  }\n\n  return words;\n}\n\n",
            "calle": [
                "alloc_value",
                "ateol",
                "isspace",
                "lil_alloc_list",
                "lil_append_val",
                "lil_free_list",
                "lil_free_value",
                "lil_list_append",
                "next_word",
                "skip_spaces"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t w = alloc_value(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = lil->head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wp",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t wp = next_word(lil)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_expr",
            "header": "static void ee_expr(expreval_t *ee)",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_expr(expreval_t *ee)\n{\n  ee_logor(ee);\n  if (ee->error == 4)\n  {\n    ee->error = 0;\n    ee->ival = 1;\n  }\n}\n\n",
            "calle": [
                "ee_logor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_invalidpunct",
            "header": "",
            "params": [
                "int ch"
            ],
            "definition": "static int ee_invalidpunct(int ch)\n{\n  return (((((ispunct(ch) && (ch != '!')) && (ch != '~')) && (ch != '(')) && (ch != ')')) && (ch != '-')) && (ch != '+');\n}\n\n",
            "calle": [
                "ispunct"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_skip_spaces",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_skip_spaces(expreval_t *ee)\n{\n  while ((ee->head < ee->len) && isspace(ee->code[ee->head]))\n    ee->head++;\n\n}\n\n",
            "calle": [
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_numeric_element",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_numeric_element(expreval_t *ee)\n{\n  lilint_t fpart = 0;\n  lilint_t fpartlen = 1;\n  ee->type = 0;\n  ee_skip_spaces(ee);\n  ee->ival = 0;\n  ee->dval = 0;\n  while (ee->head < ee->len)\n  {\n    if (ee->code[ee->head] == '.')\n    {\n      if (ee->type == 1)\n      {\n        break;\n      }\n      ee->type = 1;\n      ee->head += 1;\n    }\n    else\n      if (!isdigit(ee->code[ee->head]))\n    {\n      break;\n    }\n    if (ee->type == 0)\n    {\n      ee->ival = (ee->ival * 10) + (ee->code[ee->head] - '0');\n    }\n    else\n    {\n      fpart = (fpart * 10) + (ee->code[ee->head] - '0');\n      fpartlen *= 10;\n    }\n    ee->head += 1;\n  }\n\n  if (ee->type == 1)\n  {\n    ee->dval = ee->ival + (((double) fpart) / ((double) fpartlen));\n  }\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "isdigit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fpart",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t fpart = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fpartlen",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t fpartlen = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_element",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_element(expreval_t *ee)\n{\n  if (isdigit(ee->code[ee->head]))\n  {\n    ee_numeric_element(ee);\n    return;\n  }\n  ee->type = 0;\n  ee->ival = 1;\n  ee->error = 4;\n}\n\n",
            "calle": [
                "ee_numeric_element",
                "isdigit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_paren",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_paren(expreval_t *ee)\n{\n  ee_skip_spaces(ee);\n  if (ee->code[ee->head] == '(')\n  {\n    ee->head += 1;\n    ee_expr(ee);\n    ee_skip_spaces(ee);\n    if (ee->code[ee->head] == ')')\n    {\n      ee->head += 1;\n    }\n    else\n      ee->error = 1;\n  }\n  else\n    ee_element(ee);\n}\n\n",
            "calle": [
                "ee_element",
                "ee_expr",
                "ee_skip_spaces"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_unary",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_unary(expreval_t *ee)\n{\n  ee_skip_spaces(ee);\n  if (((ee->head < ee->len) && (!ee->error)) && ((((ee->code[ee->head] == '-') || (ee->code[ee->head] == '+')) || (ee->code[ee->head] == '~')) || (ee->code[ee->head] == '!')))\n  {\n    helper_ee_unary_1(ee);\n  }\n  else\n  {\n    ee_paren(ee);\n  }\n}\n\n",
            "calle": [
                "ee_paren",
                "ee_skip_spaces",
                "helper_ee_unary_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_muldiv",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_muldiv(expreval_t *ee)\n{\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  ee_skip_spaces(ee);\n  while ((((ee->head < ee->len) && (!ee->error)) && (!ee_invalidpunct(ee->code[ee->head + 1]))) && ((((ee->code[ee->head] == '*') || (ee->code[ee->head] == '/')) || (ee->code[ee->head] == '\\\\')) || (ee->code[ee->head] == '%')))\n  {\n    helper_ee_muldiv_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_invalidpunct",
                "ee_skip_spaces",
                "ee_unary",
                "helper_ee_muldiv_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_addsub",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_addsub(expreval_t *ee)\n{\n  ee_muldiv(ee);\n  ee_skip_spaces(ee);\n  while ((((ee->head < ee->len) && (!ee->error)) && (!ee_invalidpunct(ee->code[ee->head + 1]))) && ((ee->code[ee->head] == '+') || (ee->code[ee->head] == '-')))\n  {\n    helper_ee_addsub_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_invalidpunct",
                "ee_muldiv",
                "ee_skip_spaces",
                "helper_ee_addsub_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_shift",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_shift(expreval_t *ee)\n{\n  ee_addsub(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && (((ee->code[ee->head] == '<') && (ee->code[ee->head + 1] == '<')) || ((ee->code[ee->head] == '>') && (ee->code[ee->head + 1] == '>'))))\n  {\n    helper_ee_shift_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_addsub",
                "ee_skip_spaces",
                "helper_ee_shift_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_compare",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_compare(expreval_t *ee)\n{\n  ee_shift(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && (((((ee->code[ee->head] == '<') && (!ee_invalidpunct(ee->code[ee->head + 1]))) || ((ee->code[ee->head] == '>') && (!ee_invalidpunct(ee->code[ee->head + 1])))) || ((ee->code[ee->head] == '<') && (ee->code[ee->head + 1] == '='))) || ((ee->code[ee->head] == '>') && (ee->code[ee->head + 1] == '='))))\n  {\n    helper_ee_compare_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_invalidpunct",
                "ee_shift",
                "ee_skip_spaces",
                "helper_ee_compare_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_equals",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_equals(expreval_t *ee)\n{\n  ee_compare(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && (((ee->code[ee->head] == '=') && (ee->code[ee->head + 1] == '=')) || ((ee->code[ee->head] == '!') && (ee->code[ee->head + 1] == '='))))\n  {\n    helper_ee_equals_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_compare",
                "ee_skip_spaces",
                "helper_ee_equals_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_bitand",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_bitand(expreval_t *ee)\n{\n  ee_equals(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && ((ee->code[ee->head] == '&') && (!ee_invalidpunct(ee->code[ee->head + 1]))))\n  {\n    helper_ee_bitand_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_equals",
                "ee_invalidpunct",
                "ee_skip_spaces",
                "helper_ee_bitand_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_bitor",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_bitor(expreval_t *ee)\n{\n  ee_bitand(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && ((ee->code[ee->head] == '|') && (!ee_invalidpunct(ee->code[ee->head + 1]))))\n  {\n    helper_ee_bitor_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_bitand",
                "ee_invalidpunct",
                "ee_skip_spaces",
                "helper_ee_bitor_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_logand",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_logand(expreval_t *ee)\n{\n  ee_bitor(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && ((ee->code[ee->head] == '&') && (ee->code[ee->head + 1] == '&')))\n  {\n    helper_ee_logand_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_bitor",
                "ee_skip_spaces",
                "helper_ee_logand_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ee_logor",
            "header": "",
            "params": [
                "expreval_t *ee"
            ],
            "definition": "static void ee_logor(expreval_t *ee)\n{\n  ee_logand(ee);\n  ee_skip_spaces(ee);\n  while (((ee->head < ee->len) && (!ee->error)) && ((ee->code[ee->head] == '|') && (ee->code[ee->head + 1] == '|')))\n  {\n    helper_ee_logor_1(ee);\n  }\n\n}\n\n",
            "calle": [
                "ee_logand",
                "ee_skip_spaces",
                "helper_ee_logor_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t *",
                        "definition": [
                            "expreval_t *ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lil_alloc_string_len",
            "header": "",
            "params": [
                "const char *str",
                "size_t len"
            ],
            "definition": "lil_value_t lil_alloc_string_len(const char *str, size_t len)\n{\n  return alloc_value_len(str, len);\n}\n\n",
            "calle": [
                "alloc_value_len"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_embed_write",
            "header": "",
            "params": [
                "lil_t lil",
                "const char *msg"
            ],
            "definition": "static void fnc_embed_write(lil_t lil, const char *msg)\n{\n  size_t len = strlen(msg) + 1;\n  lil->embed = realloc(lil->embed, lil->embedlen + len);\n  memcpy(lil->embed + lil->embedlen, msg, len);\n  lil->embedlen += len - 1;\n}\n\n",
            "calle": [
                "memcpy",
                "realloc",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(msg) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_reflect",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_reflect(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_func_t func;\n  const char *type;\n  unsigned int type_idx = 0;\n  size_t i;\n  lil_value_t r;\n  if (!argc)\n  {\n    return 0;\n  }\n  type_idx = lil_to_string(argv[0]);\n  if (!strcmp(type, \"version\"))\n  {\n    return lil_alloc_string(\"0.1\");\n  }\n  if (!strcmp(type, \"args\"))\n  {\n    helper_fnc_reflect_1(&func, lil, argc, argv);\n  }\n  if (!strcmp(type, \"body\"))\n  {\n    helper_fnc_reflect_2(&func, lil, argc, argv);\n  }\n  if (!strcmp(type, \"func-count\"))\n  {\n    return lil_alloc_integer(lil->cmds);\n  }\n  if (!strcmp(type, \"funcs\"))\n  {\n    lil_list_t funcs = lil_alloc_list();\n    for (i = 0; i < lil->cmds; i += 1)\n      lil_list_append(funcs, lil_alloc_string(lil->cmd[i]->name));\n\n    r = lil_list_to_value(funcs, 1);\n    lil_free_list(funcs);\n    return r;\n  }\n  if (!strcmp(type, \"vars\"))\n  {\n    helper_fnc_reflect_7(&i, &r, lil);\n  }\n  if (!strcmp(type, \"globals\"))\n  {\n    lil_list_t vars = lil_alloc_list();\n    for (i = 0; i < lil->rootenv->vars; i += 1)\n      lil_list_append(vars, lil_alloc_string(lil->rootenv->var[i]->n));\n\n    r = lil_list_to_value(vars, 1);\n    lil_free_list(vars);\n    return r;\n  }\n  if (!strcmp(type, \"has-func\"))\n  {\n    helper_fnc_reflect_3(lil, argc, argv);\n  }\n  if (!strcmp(type, \"has-var\"))\n  {\n    helper_fnc_reflect_9(lil, argc, argv);\n  }\n  if (!strcmp(type, \"has-global\"))\n  {\n    helper_fnc_reflect_8(&i, lil, argc, argv);\n  }\n  if (!strcmp(type, \"error\"))\n  {\n    return (lil->err_msg) ? (lil_alloc_string(lil->err_msg)) : (0);\n  }\n  if (!strcmp(type, \"dollar-prefix\"))\n  {\n    helper_fnc_reflect_4(&lil, argc, argv);\n  }\n  if (!strcmp(type, \"this\"))\n  {\n    helper_fnc_reflect_5(lil);\n  }\n  if (!strcmp(type, \"name\"))\n  {\n    helper_fnc_reflect_6(lil);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_fnc_reflect_1",
                "helper_fnc_reflect_2",
                "helper_fnc_reflect_3",
                "helper_fnc_reflect_4",
                "helper_fnc_reflect_5",
                "helper_fnc_reflect_6",
                "helper_fnc_reflect_7",
                "helper_fnc_reflect_8",
                "helper_fnc_reflect_9",
                "lil_alloc_integer",
                "lil_alloc_list",
                "lil_alloc_string",
                "lil_free_list",
                "lil_list_append",
                "lil_list_to_value",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t func"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "const char *",
                        "definition": [
                            "const char *type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int type_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "funcs",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t funcs = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t vars = lil_alloc_list()"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_func",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_func(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t name;\n  lil_func_t cmd;\n  lil_list_t fargs;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (argc >= 3)\n  {\n    name = lil_clone_value(argv[0]);\n    fargs = lil_subst_to_list(lil, argv[1]);\n    cmd = add_func(lil, lil_to_string(argv[0]));\n    cmd->argnames = fargs;\n    cmd->code = lil_clone_value(argv[2]);\n  }\n  else\n  {\n    name = lil_unused_name(lil, \"anonymous-function\");\n    if (argc < 2)\n    {\n      lil_value_t tmp = lil_alloc_string(\"args\");\n      fargs = lil_subst_to_list(lil, tmp);\n      lil_free_value(tmp);\n      cmd = add_func(lil, lil_to_string(name));\n      cmd->argnames = fargs;\n      cmd->code = lil_clone_value(argv[0]);\n    }\n    else\n    {\n      fargs = lil_subst_to_list(lil, argv[0]);\n      cmd = add_func(lil, lil_to_string(name));\n      cmd->argnames = fargs;\n      cmd->code = lil_clone_value(argv[1]);\n    }\n  }\n  return name;\n}\n\n",
            "calle": [
                "add_func",
                "lil_alloc_string",
                "lil_clone_value",
                "lil_free_value",
                "lil_subst_to_list",
                "lil_to_string",
                "lil_unused_name"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fargs",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t fargs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t tmp = lil_alloc_string(\"args\")"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_rename",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_rename(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t r;\n  lil_func_t func;\n  const char *oldname;\n  unsigned int oldname_idx = 0;\n  const char *newname;\n  unsigned int newname_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  oldname_idx = lil_to_string(argv[0]);\n  newname_idx = lil_to_string(argv[1]);\n  func = find_cmd(lil, oldname);\n  if (!func)\n  {\n    char *msg = malloc(24 + strlen(oldname));\n    sprintf(msg, \"unknown function '%s'\", oldname);\n    lil_set_error_at(lil, lil->head, msg);\n    free(msg);\n    return 0;\n  }\n  r = lil_alloc_string(func->name);\n  if (newname[0 + newname_idx])\n  {\n    hm_put(&lil->cmdmap, oldname, 0);\n    hm_put(&lil->cmdmap, newname, func);\n    free(func->name);\n    func->name = strclone(newname);\n  }\n  else\n  {\n    del_func(lil, func);\n  }\n  return r;\n}\n\n",
            "calle": [
                "del_func",
                "find_cmd",
                "free",
                "hm_put",
                "lil_alloc_string",
                "lil_set_error_at",
                "lil_to_string",
                "malloc",
                "sprintf",
                "strclone",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t func"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldname",
                        "type": "const char *",
                        "definition": [
                            "const char *oldname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int oldname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newname",
                        "type": "const char *",
                        "definition": [
                            "const char *newname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int newname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg = malloc(24 + strlen(oldname))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_unusedname",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_unusedname(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  return lil_unused_name(lil, (argc > 0) ? (lil_to_string(argv[0])) : (\"unusedname\"));\n}\n\n",
            "calle": [
                "lil_to_string",
                "lil_unused_name"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_quote",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_quote(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t r;\n  size_t i;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  r = alloc_value(0);\n  for (i = 0; i < argc; i += 1)\n  {\n    if (i)\n    {\n      lil_append_char(r, ' ');\n    }\n    lil_append_val(r, argv[i]);\n  }\n\n  return r;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char",
                "lil_append_val"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_set",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_set(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i = 0;\n  lil_var_t var = 0;\n  int access = 1;\n  if (!argc)\n  {\n    return 0;\n  }\n  if (!strcmp(lil_to_string(argv[0]), \"global\"))\n  {\n    i = 1;\n    access = 0;\n  }\n  while (i < argc)\n  {\n    if (argc == (i + 1))\n    {\n      return lil_clone_value(lil_get_var(lil, lil_to_string(argv[i])));\n    }\n    var = lil_set_var(lil, lil_to_string(argv[i]), argv[i + 1], access);\n    i += 2;\n  }\n\n  return (var) ? (lil_clone_value(var->v)) : (0);\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_get_var",
                "lil_set_var",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t var = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "access",
                        "type": "int",
                        "definition": [
                            "int access = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_local",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_local(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i;\n  for (i = 0; i < argc; i += 1)\n  {\n    const char *varname = lil_to_string(argv[i]);\n    if (!lil_find_local_var(lil, lil->env, varname))\n    {\n      lil_set_var(lil, varname, lil->empty, 2);\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lil_find_local_var",
                "lil_set_var",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char *",
                        "definition": [
                            "const char *varname = lil_to_string(argv[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_write",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_write(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i;\n  lil_value_t msg = lil_alloc_string(0);\n  for (i = 0; i < argc; i += 1)\n  {\n    if (i)\n    {\n      lil_append_char(msg, ' ');\n    }\n    lil_append_val(msg, argv[i]);\n  }\n\n  lil_write(lil, lil_to_string(msg));\n  lil_free_value(msg);\n  return 0;\n}\n\n",
            "calle": [
                "lil_alloc_string",
                "lil_append_char",
                "lil_append_val",
                "lil_free_value",
                "lil_to_string",
                "lil_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t msg = lil_alloc_string(0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_print",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_print(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  fnc_write(lil, argc, argv);\n  lil_write(lil, \"\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "fnc_write",
                "lil_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_eval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_eval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc == 1)\n  {\n    return lil_parse_value(lil, argv[0], 0);\n  }\n  if (argc > 1)\n  {\n    lil_value_t val = alloc_value(0);\n    lil_value_t r;\n    size_t i;\n    for (i = 0; i < argc; i += 1)\n    {\n      if (i)\n      {\n        lil_append_char(val, ' ');\n      }\n      lil_append_val(val, argv[i]);\n    }\n\n    r = lil_parse_value(lil, val, 0);\n    lil_free_value(val);\n    return r;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char",
                "lil_append_val",
                "lil_free_value",
                "lil_parse_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = alloc_value(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_topeval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_topeval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_env_t thisenv = lil->env;\n  lil_env_t thisdownenv = lil->downenv;\n  lil_value_t r;\n  lil->env = lil->rootenv;\n  lil->downenv = thisenv;\n  r = fnc_eval(lil, argc, argv);\n  lil->downenv = thisdownenv;\n  lil->env = thisenv;\n  return r;\n}\n\n",
            "calle": [
                "fnc_eval"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thisenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t thisenv = lil->env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thisdownenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t thisdownenv = lil->downenv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_upeval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_upeval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_env_t thisenv = lil->env;\n  lil_env_t thisdownenv = lil->downenv;\n  lil_value_t r;\n  if (lil->rootenv == thisenv)\n  {\n    return fnc_eval(lil, argc, argv);\n  }\n  lil->env = thisenv->parent;\n  lil->downenv = thisenv;\n  r = fnc_eval(lil, argc, argv);\n  lil->env = thisenv;\n  lil->downenv = thisdownenv;\n  return r;\n}\n\n",
            "calle": [
                "fnc_eval"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thisenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t thisenv = lil->env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thisdownenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t thisdownenv = lil->downenv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_downeval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_downeval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t r;\n  lil_env_t upenv = lil->env;\n  lil_env_t downenv = lil->downenv;\n  if (!downenv)\n  {\n    return fnc_eval(lil, argc, argv);\n  }\n  lil->downenv = 0;\n  lil->env = downenv;\n  r = fnc_eval(lil, argc, argv);\n  lil->downenv = downenv;\n  lil->env = upenv;\n  return r;\n}\n\n",
            "calle": [
                "fnc_eval"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t upenv = lil->env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downenv",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t downenv = lil->downenv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_enveval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_enveval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t r;\n  lil_list_t invars = 0;\n  lil_list_t outvars = 0;\n  lil_value_t *varvalues = 0;\n  unsigned int varvalues_idx = 0;\n  int codeindex;\n  size_t i;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (argc == 1)\n  {\n    codeindex = 0;\n  }\n  else\n    if (argc >= 2)\n  {\n    helper_fnc_enveval_1(&invars, &outvars, &varvalues_idx, &codeindex, &i, lil, argc, argv, varvalues);\n  }\n  lil_push_env(lil);\n  if (invars)\n  {\n    for (i = 0; i < lil_list_size(invars); i += 1)\n    {\n      lil_set_var(lil, lil_to_string(lil_list_get(invars, i)), varvalues[i + varvalues_idx], 2);\n      lil_free_value(varvalues[i + varvalues_idx]);\n    }\n\n  }\n  r = lil_parse_value(lil, argv[codeindex], 0);\n  if (invars || outvars)\n  {\n    if (outvars)\n    {\n      varvalues_idx = realloc(varvalues_idx, (sizeof(lil_value_t)) * lil_list_size(outvars));\n      for (i = 0; i < lil_list_size(outvars); i += 1)\n        varvalues[i + varvalues_idx] = lil_clone_value(lil_get_var(lil, lil_to_string(lil_list_get(outvars, i))));\n\n    }\n    else\n    {\n      for (i = 0; i < lil_list_size(invars); i += 1)\n        varvalues[i + varvalues_idx] = lil_clone_value(lil_get_var(lil, lil_to_string(lil_list_get(invars, i))));\n\n    }\n  }\n  lil_pop_env(lil);\n  if (invars)\n  {\n    helper_fnc_enveval_2(&i, lil, invars, outvars, varvalues, varvalues_idx);\n  }\n  return r;\n}\n\n",
            "calle": [
                "helper_fnc_enveval_1",
                "helper_fnc_enveval_2",
                "lil_clone_value",
                "lil_free_value",
                "lil_get_var",
                "lil_list_get",
                "lil_list_size",
                "lil_parse_value",
                "lil_pop_env",
                "lil_push_env",
                "lil_set_var",
                "lil_to_string",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t invars = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outvars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t outvars = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *varvalues = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varvalues_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeindex",
                        "type": "int",
                        "definition": [
                            "int codeindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_jaileval",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_jaileval(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i;\n  lil_t sublil;\n  lil_value_t r;\n  size_t base = 0;\n  if (!argc)\n  {\n    return 0;\n  }\n  if (!strcmp(lil_to_string(argv[0]), \"clean\"))\n  {\n    base = 1;\n    if (argc == 1)\n    {\n      return 0;\n    }\n  }\n  sublil = lil_new();\n  if (base != 1)\n  {\n    for (i = lil->syscmds; i < lil->cmds; i += 1)\n    {\n      lil_func_t fnc = lil->cmd[i];\n      if (!fnc->proc)\n      {\n        continue;\n      }\n      lil_register(sublil, fnc->name, fnc->proc);\n    }\n\n  }\n  r = lil_parse_value(sublil, argv[base], 1);\n  lil_free(sublil);\n  return r;\n}\n\n",
            "calle": [
                "lil_free",
                "lil_new",
                "lil_parse_value",
                "lil_register",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t sublil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "size_t",
                        "definition": [
                            "size_t base = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fnc",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t fnc = lil->cmd[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_count",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_count(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  char buff[64];\n  if (!argc)\n  {\n    return alloc_value(\"0\");\n  }\n  list = lil_subst_to_list(lil, argv[0]);\n  sprintf(buff, \"%u\", (unsigned int) list->c);\n  lil_free_list(list);\n  return alloc_value(buff);\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_free_list",
                "lil_subst_to_list",
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "char [64]",
                        "definition": [
                            "char buff[64]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_index",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_index(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  size_t index;\n  lil_value_t r;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  list = lil_subst_to_list(lil, argv[0]);\n  index = (size_t) lil_to_integer(argv[1]);\n  if (index >= list->c)\n  {\n    r = 0;\n  }\n  else\n    r = lil_clone_value(list->v[index]);\n  lil_free_list(list);\n  return r;\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_free_list",
                "lil_subst_to_list",
                "lil_to_integer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_indexof",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_indexof(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  size_t index;\n  lil_value_t r = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  list = lil_subst_to_list(lil, argv[0]);\n  for (index = 0; index < list->c; index += 1)\n    if (!strcmp(lil_to_string(list->v[index]), lil_to_string(argv[1])))\n  {\n    r = lil_alloc_integer(index);\n    break;\n  }\n\n  lil_free_list(list);\n  return r;\n}\n\n",
            "calle": [
                "lil_alloc_integer",
                "lil_free_list",
                "lil_subst_to_list",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_append",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_append(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  lil_value_t r;\n  size_t i;\n  size_t base = 1;\n  int access = 1;\n  const char *varname;\n  unsigned int varname_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  varname_idx = lil_to_string(argv[0]);\n  if (!strcmp(varname, \"global\"))\n  {\n    if (argc < 3)\n    {\n      return 0;\n    }\n    varname_idx = lil_to_string(argv[1]);\n    base = 2;\n    access = 0;\n  }\n  list = lil_subst_to_list(lil, lil_get_var(lil, varname));\n  for (i = base; i < argc; i += 1)\n    lil_list_append(list, lil_clone_value(argv[i]));\n\n  r = lil_list_to_value(list, 1);\n  lil_free_list(list);\n  lil_set_var(lil, varname, r, access);\n  return r;\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_free_list",
                "lil_get_var",
                "lil_list_append",
                "lil_list_to_value",
                "lil_set_var",
                "lil_subst_to_list",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "size_t",
                        "definition": [
                            "size_t base = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "access",
                        "type": "int",
                        "definition": [
                            "int access = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char *",
                        "definition": [
                            "const char *varname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varname_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_slice",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_slice(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  lil_list_t slice;\n  size_t i;\n  lilint_t from;\n  lilint_t to;\n  lil_value_t r;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (argc < 2)\n  {\n    return lil_clone_value(argv[0]);\n  }\n  from = lil_to_integer(argv[1]);\n  if (from < 0)\n  {\n    from = 0;\n  }\n  list = lil_subst_to_list(lil, argv[0]);\n  to = (argc > 2) ? (lil_to_integer(argv[2])) : ((lilint_t) list->c);\n  if (to > ((lilint_t) list->c))\n  {\n    to = list->c;\n  }\n  if (to < from)\n  {\n    to = from;\n  }\n  slice = lil_alloc_list();\n  for (i = (size_t) from; i < ((size_t) to); i += 1)\n    lil_list_append(slice, lil_clone_value(list->v[i]));\n\n  lil_free_list(list);\n  r = lil_list_to_value(slice, 1);\n  lil_free_list(slice);\n  return r;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_clone_value",
                "lil_free_list",
                "lil_list_append",
                "lil_list_to_value",
                "lil_subst_to_list",
                "lil_to_integer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slice",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t slice"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t to"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_filter",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_filter(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  lil_list_t filtered;\n  size_t i;\n  lil_value_t r;\n  const char *varname = \"x\";\n  unsigned int varname_idx = 0;\n  int base = 0;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (argc < 2)\n  {\n    return lil_clone_value(argv[0]);\n  }\n  if (argc > 2)\n  {\n    base = 1;\n    varname_idx = lil_to_string(argv[0]);\n  }\n  list = lil_subst_to_list(lil, argv[base]);\n  filtered = lil_alloc_list();\n  for (i = 0; (i < list->c) && (!lil->env->breakrun); i += 1)\n  {\n    lil_set_var(lil, varname, list->v[i], 3);\n    r = lil_eval_expr(lil, argv[base + 1]);\n    if (lil_to_boolean(r))\n    {\n      lil_list_append(filtered, lil_clone_value(list->v[i]));\n    }\n    lil_free_value(r);\n  }\n\n  lil_free_list(list);\n  r = lil_list_to_value(filtered, 1);\n  lil_free_list(filtered);\n  return r;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_clone_value",
                "lil_eval_expr",
                "lil_free_list",
                "lil_free_value",
                "lil_list_append",
                "lil_list_to_value",
                "lil_set_var",
                "lil_subst_to_list",
                "lil_to_boolean",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filtered",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t filtered"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char *",
                        "definition": [
                            "const char *varname = \"x\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_list",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_list(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list = lil_alloc_list();\n  lil_value_t r;\n  size_t i;\n  for (i = 0; i < argc; i += 1)\n    lil_list_append(list, lil_clone_value(argv[i]));\n\n  r = lil_list_to_value(list, 1);\n  lil_free_list(list);\n  return r;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_clone_value",
                "lil_free_list",
                "lil_list_append",
                "lil_list_to_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_subst",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_subst(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc < 1)\n  {\n    return 0;\n  }\n  return lil_subst_to_value(lil, argv[0]);\n}\n\n",
            "calle": [
                "lil_subst_to_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_concat",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_concat(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  lil_value_t r;\n  lil_value_t tmp;\n  size_t i;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  r = lil_alloc_string(\"\");\n  for (i = 0; i < argc; i += 1)\n  {\n    list = lil_subst_to_list(lil, argv[i]);\n    tmp = lil_list_to_value(list, 1);\n    lil_free_list(list);\n    lil_append_val(r, tmp);\n    lil_free_value(tmp);\n  }\n\n  return r;\n}\n\n",
            "calle": [
                "lil_alloc_string",
                "lil_append_val",
                "lil_free_list",
                "lil_free_value",
                "lil_list_to_value",
                "lil_subst_to_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_foreach",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_foreach(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  lil_list_t rlist;\n  lil_value_t r;\n  size_t i;\n  size_t listidx = 0;\n  size_t codeidx = 1;\n  const char *varname = \"i\";\n  unsigned int varname_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  if (argc >= 3)\n  {\n    varname_idx = lil_to_string(argv[0]);\n    listidx = 1;\n    codeidx = 2;\n  }\n  rlist = lil_alloc_list();\n  list = lil_subst_to_list(lil, argv[listidx]);\n  for (i = 0; i < list->c; i += 1)\n  {\n    helper_fnc_foreach_1(lil, argv, list, rlist, i, codeidx, varname);\n  }\n\n  r = lil_list_to_value(rlist, 1);\n  lil_free_list(list);\n  lil_free_list(rlist);\n  return r;\n}\n\n",
            "calle": [
                "helper_fnc_foreach_1",
                "lil_alloc_list",
                "lil_free_list",
                "lil_list_to_value",
                "lil_subst_to_list",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rlist",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t rlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "listidx",
                        "type": "size_t",
                        "definition": [
                            "size_t listidx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeidx",
                        "type": "size_t",
                        "definition": [
                            "size_t codeidx = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char *",
                        "definition": [
                            "const char *varname = \"i\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varname_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_return",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_return(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil->env->breakrun = 1;\n  lil_free_value(lil->env->retval);\n  lil->env->retval = (argc < 1) ? (0) : (lil_clone_value(argv[0]));\n  lil->env->retval_set = 1;\n  return (argc < 1) ? (0) : (lil_clone_value(argv[0]));\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_result",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_result(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc > 0)\n  {\n    lil_free_value(lil->env->retval);\n    lil->env->retval = lil_clone_value(argv[0]);\n    lil->env->retval_set = 1;\n  }\n  return (lil->env->retval_set) ? (lil_clone_value(lil->env->retval)) : (0);\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_expr",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_expr(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc == 1)\n  {\n    return lil_eval_expr(lil, argv[0]);\n  }\n  if (argc > 1)\n  {\n    lil_value_t val = alloc_value(0);\n    lil_value_t r;\n    size_t i;\n    for (i = 0; i < argc; i += 1)\n    {\n      if (i)\n      {\n        lil_append_char(val, ' ');\n      }\n      lil_append_val(val, argv[i]);\n    }\n\n    r = lil_eval_expr(lil, val);\n    lil_free_value(val);\n    return r;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char",
                "lil_append_val",
                "lil_eval_expr",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = alloc_value(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "real_inc",
            "header": "",
            "params": [
                "lil_t lil",
                "const char *varname",
                "float v"
            ],
            "definition": "static lil_value_t real_inc(lil_t lil, const char *varname, float v)\n{\n  lil_value_t pv = lil_get_var(lil, varname);\n  double dv = lil_to_double(pv) + v;\n  if (fmod(dv, 1))\n  {\n    pv = lil_alloc_double(dv);\n  }\n  else\n    pv = lil_alloc_integer((lilint_t) dv);\n  lil_set_var(lil, varname, pv, 1);\n  return pv;\n}\n\n",
            "calle": [
                "fmod",
                "lil_alloc_double",
                "lil_alloc_integer",
                "lil_get_var",
                "lil_set_var",
                "lil_to_double"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char *",
                        "definition": [
                            "const char *varname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pv",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t pv = lil_get_var(lil, varname)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dv",
                        "type": "double",
                        "definition": [
                            "double dv = lil_to_double(pv) + v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_inc",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_inc(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc < 1)\n  {\n    return 0;\n  }\n  return real_inc(lil, lil_to_string(argv[0]), (argc > 1) ? (lil_to_double(argv[1])) : (1));\n}\n\n",
            "calle": [
                "lil_to_double",
                "lil_to_string",
                "real_inc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_dec",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_dec(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc < 1)\n  {\n    return 0;\n  }\n  return real_inc(lil, lil_to_string(argv[0]), -((argc > 1) ? (lil_to_double(argv[1])) : (1)));\n}\n\n",
            "calle": [
                "lil_to_double",
                "lil_to_string",
                "real_inc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_read",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_read(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  FILE *f;\n  unsigned int f_idx = 0;\n  size_t size;\n  char *buffer;\n  unsigned int buffer_idx = 0;\n  lil_value_t r;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (lil->callback[2])\n  {\n    lil_read_callback_proc_t proc = (lil_read_callback_proc_t) lil->callback[2];\n    buffer_idx = proc(lil, lil_to_string(argv[0]));\n  }\n  else\n  {\n    f_idx = fopen(lil_to_string(argv[0]), \"rb\");\n    if (!(&f[f_idx]))\n    {\n      return 0;\n    }\n    fseek(f, 0, 2);\n    size = ftell(f);\n    fseek(f, 0, 0);\n    buffer_idx = malloc(size + 1);\n    fread(buffer, 1, size, f);\n    buffer[size + buffer_idx] = 0;\n    fclose(f);\n  }\n  r = lil_alloc_string(buffer);\n  free(buffer);\n  return r;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fread",
                "free",
                "fseek",
                "ftell",
                "lil_alloc_string",
                "lil_to_string",
                "malloc",
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_read_callback_proc_t",
                        "definition": [
                            "lil_read_callback_proc_t proc = (lil_read_callback_proc_t) lil->callback[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_store",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_store(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  FILE *f;\n  unsigned int f_idx = 0;\n  const char *buffer;\n  unsigned int buffer_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  if (lil->callback[3])\n  {\n    lil_store_callback_proc_t proc = (lil_store_callback_proc_t) lil->callback[3];\n    proc(lil, lil_to_string(argv[0]), lil_to_string(argv[1]));\n  }\n  else\n  {\n    f_idx = fopen(lil_to_string(argv[0]), \"wb\");\n    if (!(&f[f_idx]))\n    {\n      return 0;\n    }\n    buffer_idx = lil_to_string(argv[1]);\n    fwrite(buffer, 1, strlen(buffer), f);\n    fclose(f);\n  }\n  return lil_clone_value(argv[1]);\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fwrite",
                "lil_clone_value",
                "lil_to_string",
                "proc",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const char *",
                        "definition": [
                            "const char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_store_callback_proc_t",
                        "definition": [
                            "lil_store_callback_proc_t proc = (lil_store_callback_proc_t) lil->callback[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_if",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_if(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t val;\n  lil_value_t r = 0;\n  int base = 0;\n  int not = 0;\n  int v;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (!strcmp(lil_to_string(argv[0]), \"not\"))\n  {\n    base = (not = 1);\n  }\n  if (argc < (((size_t) base) + 2))\n  {\n    return 0;\n  }\n  val = lil_eval_expr(lil, argv[base]);\n  if ((!val) || lil->error)\n  {\n    return 0;\n  }\n  v = lil_to_boolean(val);\n  if (not)\n  {\n    v = !v;\n  }\n  if (v)\n  {\n    r = lil_parse_value(lil, argv[base + 1], 0);\n  }\n  else\n    if (argc > (((size_t) base) + 2))\n  {\n    r = lil_parse_value(lil, argv[base + 2], 0);\n  }\n  lil_free_value(val);\n  return r;\n}\n\n",
            "calle": [
                "lil_eval_expr",
                "lil_free_value",
                "lil_parse_value",
                "lil_to_boolean",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "not",
                        "type": "int",
                        "definition": [
                            "int not = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_while",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_while(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t val;\n  lil_value_t r = 0;\n  int base = 0;\n  int not = 0;\n  int v;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (!strcmp(lil_to_string(argv[0]), \"not\"))\n  {\n    base = (not = 1);\n  }\n  if (argc < (((size_t) base) + 2))\n  {\n    return 0;\n  }\n  while ((!lil->error) && (!lil->env->breakrun))\n  {\n    helper_fnc_while_1(&val, &r, &v, lil, argv, base, not);\n  }\n\n  return r;\n}\n\n",
            "calle": [
                "helper_fnc_while_1",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "not",
                        "type": "int",
                        "definition": [
                            "int not = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_for",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_for(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t val;\n  lil_value_t r = 0;\n  if (argc < 4)\n  {\n    return 0;\n  }\n  lil_free_value(lil_parse_value(lil, argv[0], 0));\n  while ((!lil->error) && (!lil->env->breakrun))\n  {\n    val = lil_eval_expr(lil, argv[1]);\n    if ((!val) || lil->error)\n    {\n      return 0;\n    }\n    if (!lil_to_boolean(val))\n    {\n      lil_free_value(val);\n      break;\n    }\n    if (r)\n    {\n      lil_free_value(r);\n    }\n    r = lil_parse_value(lil, argv[3], 0);\n    lil_free_value(val);\n    lil_free_value(lil_parse_value(lil, argv[2], 0));\n  }\n\n  return r;\n}\n\n",
            "calle": [
                "lil_eval_expr",
                "lil_free_value",
                "lil_parse_value",
                "lil_to_boolean"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_char",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_char(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  char s[2];\n  if (!argc)\n  {\n    return 0;\n  }\n  s[0] = (char) lil_to_integer(argv[0]);\n  s[1] = 0;\n  return lil_alloc_string(s);\n}\n\n",
            "calle": [
                "lil_alloc_string",
                "lil_to_integer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "char [2]",
                        "definition": [
                            "char s[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_charat",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_charat(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t index;\n  char chstr[2];\n  const char *str;\n  unsigned int str_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  str_idx = lil_to_string(argv[0]);\n  index = (size_t) lil_to_integer(argv[1]);\n  if (index >= strlen(str))\n  {\n    return 0;\n  }\n  chstr[0] = str[index + str_idx];\n  chstr[1] = 0;\n  return lil_alloc_string(chstr);\n}\n\n",
            "calle": [
                "lil_alloc_string",
                "lil_to_integer",
                "lil_to_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chstr",
                        "type": "char [2]",
                        "definition": [
                            "char chstr[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_codeat",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_codeat(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t index;\n  const char *str;\n  unsigned int str_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  str_idx = lil_to_string(argv[0]);\n  index = (size_t) lil_to_integer(argv[1]);\n  if (index >= strlen(str))\n  {\n    return 0;\n  }\n  return lil_alloc_integer(str[index + str_idx]);\n}\n\n",
            "calle": [
                "lil_alloc_integer",
                "lil_to_integer",
                "lil_to_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_substr",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_substr(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  const char *str;\n  unsigned int str_idx = 0;\n  lil_value_t r;\n  size_t start;\n  size_t end;\n  size_t i;\n  size_t slen;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  str_idx = lil_to_string(argv[0]);\n  if (!str[0 + str_idx])\n  {\n    return 0;\n  }\n  slen = strlen(str);\n  start = (size_t) atoll(lil_to_string(argv[1]));\n  end = (argc > 2) ? ((size_t) atoll(lil_to_string(argv[2]))) : (slen);\n  if (end > slen)\n  {\n    end = slen;\n  }\n  if (start >= end)\n  {\n    return 0;\n  }\n  r = lil_alloc_string(\"\");\n  for (i = start; i < end; i += 1)\n    lil_append_char(r, str[i + str_idx]);\n\n  return r;\n}\n\n",
            "calle": [
                "atoll",
                "lil_alloc_string",
                "lil_append_char",
                "lil_to_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slen",
                        "type": "size_t",
                        "definition": [
                            "size_t slen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_strpos",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_strpos(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  const char *hay;\n  unsigned int hay_idx = 0;\n  const char *str;\n  unsigned int str_idx = 0;\n  size_t min = 0;\n  if (argc < 2)\n  {\n    return lil_alloc_integer(-1);\n  }\n  hay_idx = lil_to_string(argv[0]);\n  if (argc > 2)\n  {\n    min = (size_t) atoll(lil_to_string(argv[2]));\n    if (min >= strlen(hay))\n    {\n      return lil_alloc_integer(-1);\n    }\n  }\n  str_idx = strstr((&hay[hay_idx]) + min, lil_to_string(argv[1]));\n  if (!(&str[str_idx]))\n  {\n    return lil_alloc_integer(-1);\n  }\n  return lil_alloc_integer((&str[str_idx]) - (&hay[hay_idx]));\n}\n\n",
            "calle": [
                "atoll",
                "lil_alloc_integer",
                "lil_to_string",
                "strlen",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hay",
                        "type": "const char *",
                        "definition": [
                            "const char *hay"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hay_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hay_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "size_t",
                        "definition": [
                            "size_t min = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_length",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_length(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i;\n  size_t total = 0;\n  for (i = 0; i < argc; i += 1)\n  {\n    if (i)\n    {\n      total += 1;\n    }\n    total += strlen(lil_to_string(argv[i]));\n  }\n\n  return lil_alloc_integer((lilint_t) total);\n}\n\n",
            "calle": [
                "lil_alloc_integer",
                "lil_to_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "size_t",
                        "definition": [
                            "size_t total = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "real_trim",
            "header": "",
            "params": [
                "const char *str",
                "const char *chars",
                "int left",
                "int right"
            ],
            "definition": "static lil_value_t real_trim(const char *str, const char *chars, int left, int right)\n{\n  int base = 0;\n  lil_value_t r = 0;\n  if (left)\n  {\n    while (str[base] && strchr(chars, str[base]))\n      base++;\n\n    base += 1;\n    if (!right)\n      r = lil_alloc_string((str[base]) ? (str + base) : (0));\n  }\n  if (right)\n  {\n    size_t len;\n    char *s;\n    unsigned int s_idx = 0;\n    s_idx = strclone(str + base);\n    len = strlen(s);\n    while (len && strchr(chars, s[(len - 1) + s_idx]))\n      len--;\n\n    len -= 1;\n    s[len + s_idx] = 0;\n    r = lil_alloc_string(s);\n    free(s);\n  }\n  return r;\n}\n\n",
            "calle": [
                "free",
                "lil_alloc_string",
                "strchr",
                "strclone",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "const char *",
                        "definition": [
                            "const char *chars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "int",
                        "definition": [
                            "int left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right",
                        "type": "int",
                        "definition": [
                            "int right"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "char *",
                        "definition": [
                            "char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_trim",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_trim(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (!argc)\n  {\n    return 0;\n  }\n  return real_trim(lil_to_string(argv[0]), (argc < 2) ? (\" \\f\\n\\r\\t\\v\") : (lil_to_string(argv[1])), 1, 1);\n}\n\n",
            "calle": [
                "lil_to_string",
                "real_trim"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_ltrim",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_ltrim(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (!argc)\n  {\n    return 0;\n  }\n  return real_trim(lil_to_string(argv[0]), (argc < 2) ? (\" \\f\\n\\r\\t\\v\") : (lil_to_string(argv[1])), 1, 0);\n}\n\n",
            "calle": [
                "lil_to_string",
                "real_trim"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_rtrim",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_rtrim(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (!argc)\n  {\n    return 0;\n  }\n  return real_trim(lil_to_string(argv[0]), (argc < 2) ? (\" \\f\\n\\r\\t\\v\") : (lil_to_string(argv[1])), 0, 1);\n}\n\n",
            "calle": [
                "lil_to_string",
                "real_trim"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_strcmp",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_strcmp(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc < 2)\n  {\n    return 0;\n  }\n  return lil_alloc_integer(strcmp(lil_to_string(argv[0]), lil_to_string(argv[1])));\n}\n\n",
            "calle": [
                "lil_alloc_integer",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_streq",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_streq(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc < 2)\n  {\n    return 0;\n  }\n  return lil_alloc_integer((strcmp(lil_to_string(argv[0]), lil_to_string(argv[1]))) ? (0) : (1));\n}\n\n",
            "calle": [
                "lil_alloc_integer",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_repstr",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_repstr(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  const char *from;\n  unsigned int from_idx = 0;\n  const char *to;\n  unsigned int to_idx = 0;\n  char *src;\n  unsigned int src_idx = 0;\n  const char *sub;\n  unsigned int sub_idx = 0;\n  size_t idx;\n  size_t fromlen;\n  size_t tolen;\n  size_t srclen;\n  lil_value_t r;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (argc < 3)\n  {\n    return lil_clone_value(argv[0]);\n  }\n  from_idx = lil_to_string(argv[1]);\n  to_idx = lil_to_string(argv[2]);\n  if (!from[0 + from_idx])\n  {\n    return 0;\n  }\n  src_idx = strclone(lil_to_string(argv[0]));\n  srclen = strlen(src);\n  fromlen = strlen(from);\n  tolen = strlen(to);\n  while (sub_idx = strstr(src, from))\n  {\n    helper_fnc_repstr_1(&src_idx, &idx, &srclen, to, src, sub, sub_idx, fromlen, tolen);\n  }\n\n  r = lil_alloc_string(src);\n  free(src);\n  return r;\n}\n\n",
            "calle": [
                "free",
                "helper_fnc_repstr_1",
                "lil_alloc_string",
                "lil_clone_value",
                "lil_to_string",
                "strclone",
                "strlen",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "const char *",
                        "definition": [
                            "const char *from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to",
                        "type": "const char *",
                        "definition": [
                            "const char *to"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int to_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "char *",
                        "definition": [
                            "char *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sub",
                        "type": "const char *",
                        "definition": [
                            "const char *sub"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sub_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sub_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fromlen",
                        "type": "size_t",
                        "definition": [
                            "size_t fromlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tolen",
                        "type": "size_t",
                        "definition": [
                            "size_t tolen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srclen",
                        "type": "size_t",
                        "definition": [
                            "size_t srclen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_split",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_split(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  const char *sep = \" \";\n  unsigned int sep_idx = 0;\n  size_t i;\n  lil_value_t val;\n  const char *str;\n  unsigned int str_idx = 0;\n  if (argc == 0)\n  {\n    return 0;\n  }\n  if (argc > 1)\n  {\n    sep_idx = lil_to_string(argv[1]);\n    if ((!(&sep[sep_idx])) || (!sep[0 + sep_idx]))\n    {\n      return lil_clone_value(argv[0]);\n    }\n  }\n  val = lil_alloc_string(\"\");\n  str_idx = lil_to_string(argv[0]);\n  list = lil_alloc_list();\n  for (i = 0; str[i + str_idx]; i += 1)\n  {\n    if (strchr(sep, str[i + str_idx]))\n    {\n      lil_list_append(list, val);\n      val = lil_alloc_string(\"\");\n    }\n    else\n    {\n      lil_append_char(val, str[i + str_idx]);\n    }\n  }\n\n  lil_list_append(list, val);\n  val = lil_list_to_value(list, 1);\n  lil_free_list(list);\n  return val;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_alloc_string",
                "lil_append_char",
                "lil_clone_value",
                "lil_free_list",
                "lil_list_append",
                "lil_list_to_value",
                "lil_to_string",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sep",
                        "type": "const char *",
                        "definition": [
                            "const char *sep = \" \""
                        ]
                    },
                    {
                        "path": null,
                        "name": "sep_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sep_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_try",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_try(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_value_t r;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (lil->error)\n  {\n    return 0;\n  }\n  r = lil_parse_value(lil, argv[0], 0);\n  if (lil->error)\n  {\n    lil->error = 0;\n    lil_free_value(r);\n    if (argc > 1)\n    {\n      r = lil_parse_value(lil, argv[1], 0);\n    }\n    else\n      r = 0;\n  }\n  return r;\n}\n\n",
            "calle": [
                "lil_free_value",
                "lil_parse_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_error",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_error(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_set_error(lil, (argc > 0) ? (lil_to_string(argv[0])) : (0));\n  return 0;\n}\n\n",
            "calle": [
                "lil_set_error",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_exit",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_exit(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (lil->callback[0])\n  {\n    lil_exit_callback_proc_t proc = (lil_exit_callback_proc_t) lil->callback[0];\n    proc(lil, (argc > 0) ? (argv[0]) : (0));\n  }\n  return 0;\n}\n\n",
            "calle": [
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_exit_callback_proc_t",
                        "definition": [
                            "lil_exit_callback_proc_t proc = (lil_exit_callback_proc_t) lil->callback[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_source",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_source(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  FILE *f;\n  unsigned int f_idx = 0;\n  size_t size;\n  char *buffer;\n  unsigned int buffer_idx = 0;\n  lil_value_t r;\n  if (argc < 1)\n  {\n    return 0;\n  }\n  if (lil->callback[4])\n  {\n    lil_source_callback_proc_t proc = (lil_source_callback_proc_t) lil->callback[4];\n    buffer_idx = proc(lil, lil_to_string(argv[0]));\n  }\n  else\n    if (lil->callback[2])\n  {\n    lil_read_callback_proc_t proc = (lil_read_callback_proc_t) lil->callback[2];\n    buffer_idx = proc(lil, lil_to_string(argv[0]));\n  }\n  else\n  {\n    helper_fnc_source_1(&f_idx, &size, &buffer_idx, argv, f, buffer);\n  }\n  r = lil_parse(lil, buffer, 0, 0);\n  free(buffer);\n  return r;\n}\n\n",
            "calle": [
                "free",
                "helper_fnc_source_1",
                "lil_parse",
                "lil_to_string",
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_source_callback_proc_t",
                        "definition": [
                            "lil_read_callback_proc_t proc = (lil_read_callback_proc_t) lil->callback[2]",
                            "lil_source_callback_proc_t proc = (lil_source_callback_proc_t) lil->callback[4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_lmap",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_lmap(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  lil_list_t list;\n  size_t i;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  list = lil_subst_to_list(lil, argv[0]);\n  for (i = 1; i < argc; i += 1)\n    lil_set_var(lil, lil_to_string(argv[i]), lil_list_get(list, i - 1), 1);\n\n  lil_free_list(list);\n  return 0;\n}\n\n",
            "calle": [
                "lil_free_list",
                "lil_list_get",
                "lil_set_var",
                "lil_subst_to_list",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_rand",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_rand(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  return lil_alloc_double(rand() / ((double) 32767));\n}\n\n",
            "calle": [
                "lil_alloc_double",
                "rand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_catcher",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_catcher(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (argc == 0)\n  {\n    return lil_alloc_string(lil->catcher);\n  }\n  else\n  {\n    const char *catcher = lil_to_string(argv[0]);\n    free(lil->catcher);\n    lil->catcher = (catcher[0]) ? (strclone(catcher)) : (0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "free",
                "lil_alloc_string",
                "lil_to_string",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "catcher",
                        "type": "const char *",
                        "definition": [
                            "const char *catcher = lil_to_string(argv[0])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_watch",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_watch(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t i;\n  const char *wcode;\n  unsigned int wcode_idx = 0;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  wcode_idx = lil_to_string(argv[argc - 1]);\n  for (i = 0; (i + 1) < argc; i += 1)\n  {\n    const char *vname = lil_to_string(argv[i]);\n    lil_var_t v;\n    if (!vname[0])\n    {\n      continue;\n    }\n    v = lil_find_var(lil, lil->env, lil_to_string(argv[i]));\n    if (!v)\n    {\n      v = lil_set_var(lil, vname, 0, 2);\n    }\n    free(v->w);\n    v->w = (wcode[0 + wcode_idx]) ? (strclone(wcode)) : (0);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "free",
                "lil_find_var",
                "lil_set_var",
                "lil_to_string",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wcode",
                        "type": "const char *",
                        "definition": [
                            "const char *wcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int wcode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vname",
                        "type": "const char *",
                        "definition": [
                            "const char *vname = lil_to_string(argv[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_set_var_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_env_t * const env_ref",
                "int * const freeval_ref",
                "const char * const name",
                "int local"
            ],
            "definition": "lil_var_t helper_lil_set_var_1(lil_t * const lil_ref, lil_value_t * const val_ref, lil_env_t * const env_ref, int * const freeval_ref, const char * const name, int local)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  lil_env_t env = *env_ref;\n  int freeval = *freeval_ref;\n  lil_var_t var = lil_find_var(lil, env, name);\n  if ((((local == 3) && var) && (var->env == lil->rootenv)) && (var->env != env))\n  {\n    var = 0;\n  }\n  if ((((!var) && (env == lil->rootenv)) || (var && (var->env == lil->rootenv))) && lil->callback[6])\n  {\n    helper_helper_lil_set_var_1_1(&val, &freeval, name, lil);\n  }\n  if (var)\n  {\n    helper_helper_lil_set_var_1_2(&lil, &var, val, freeval);\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n  *env_ref = env;\n  *freeval_ref = freeval;\n}\n\n",
            "calle": [
                "helper_helper_lil_set_var_1_1",
                "helper_helper_lil_set_var_1_2",
                "lil_find_var"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env_ref",
                        "type": "lil_env_t * const",
                        "definition": [
                            "lil_env_t * const env_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const freeval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "local",
                        "type": "int",
                        "definition": [
                            "int local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = *env_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval",
                        "type": "int",
                        "definition": [
                            "int freeval = *freeval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t var = lil_find_var(lil, env, name)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_next_word_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref"
            ],
            "definition": "void helper_next_word_1(lil_t * const lil_ref, lil_value_t * const val_ref)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  size_t cnt = 1;\n  lil->head += 1;\n  val = alloc_value(0);\n  while (lil->head < lil->clen)\n  {\n    if (lil->code[lil->head] == '{')\n    {\n      lil->head += 1;\n      cnt += 1;\n      lil_append_char(val, '{');\n    }\n    else\n      if (lil->code[lil->head] == '}')\n    {\n      lil->head += 1;\n      if ((--cnt) == 0)\n      {\n        break;\n      }\n      else\n        lil_append_char(val, '}');\n    }\n    else\n    {\n      lil_append_char(val, lil->code[lil->head++]);\n    }\n  }\n\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "alloc_value",
                "lil_append_char"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnt",
                        "type": "size_t",
                        "definition": [
                            "size_t cnt = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_next_word_2",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref"
            ],
            "definition": "void helper_next_word_2(lil_t * const lil_ref, lil_value_t * const val_ref)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  char sc = lil->code[lil->head++];\n  val = alloc_value(0);\n  while (lil->head < lil->clen)\n  {\n    helper_helper_next_word_2_1(&lil, val, sc);\n  }\n\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "alloc_value",
                "helper_helper_next_word_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sc",
                        "type": "char",
                        "definition": [
                            "char sc = lil->code[lil->head++]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_parse_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref"
            ],
            "definition": "void helper_lil_parse_1(lil_t * const lil_ref, lil_value_t * const val_ref)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  if (val)\n  {\n    lil_free_value(val);\n  }\n  val = lil->env->retval;\n  lil->env->retval = 0;\n  lil->env->retval_set = 0;\n  lil->env->breakrun = 0;\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_parse_2",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t * const words_ref"
            ],
            "definition": "void helper_lil_parse_2(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t * const words_ref)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  lil_list_t words = *words_ref;\n  if (words)\n  {\n    lil_free_list(words);\n  }\n  if (val)\n  {\n    lil_free_value(val);\n  }\n  val = 0;\n  words = substitute(lil);\n  if ((!words) || lil->error)\n  {\n    goto cleanup;\n  }\n  if (words->c)\n  {\n    helper_helper_lil_parse_2_1(&lil, &val, words);\n  }\n  if (lil->env->breakrun)\n  {\n    goto cleanup;\n  }\n  skip_spaces(lil);\n  while (ateol(lil))\n    lil->head++;\n\n  skip_spaces(lil);\n  *lil_ref = lil;\n  *val_ref = val;\n  *words_ref = words;\n}\n\n",
            "calle": [
                "ateol",
                "helper_helper_lil_parse_2_1",
                "lil_free_list",
                "lil_free_value",
                "skip_spaces",
                "substitute"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_ref",
                        "type": "lil_list_t * const",
                        "definition": [
                            "lil_list_t * const words_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words = *words_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_unary_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_unary_1(expreval_t * const ee)\n{\n  char op = ee->code[ee->head++];\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (op)\n  {\n    case '-':\n    {\n      helper_helper_ee_unary_1_1(ee);\n    }\n\n    case '+':\n    {\n      break;\n    }\n\n    case '~':\n    {\n      helper_helper_ee_unary_1_3(ee);\n    }\n\n    case '!':\n    {\n      helper_helper_ee_unary_1_2(ee);\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "ee_unary",
                "helper_helper_ee_unary_1_1",
                "helper_helper_ee_unary_1_2",
                "helper_helper_ee_unary_1_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "char",
                        "definition": [
                            "char op = ee->code[ee->head++]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_muldiv_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_muldiv_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  switch (ee->code[ee->head])\n  {\n    case '*':\n    {\n      helper_helper_ee_muldiv_1_1(ee, odval, oival);\n    }\n\n    case '%':\n    {\n      helper_helper_ee_muldiv_1_2(ee, odval, oival);\n    }\n\n    case '/':\n    {\n      helper_helper_ee_muldiv_1_3(ee, odval, oival);\n    }\n\n    case '\\\\':\n    {\n      helper_helper_ee_muldiv_1_4(ee, odval, oival);\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_muldiv_1_1",
                "helper_helper_ee_muldiv_1_2",
                "helper_helper_ee_muldiv_1_3",
                "helper_helper_ee_muldiv_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_addsub_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_addsub_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  switch (ee->code[ee->head])\n  {\n    case '+':\n    {\n      helper_helper_ee_addsub_1_1(ee, odval, oival);\n    }\n\n    case '-':\n    {\n      helper_helper_ee_addsub_1_2(ee, odval, oival);\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_addsub_1_1",
                "helper_helper_ee_addsub_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_shift_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_shift_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  ee->head += 1;\n  switch (ee->code[ee->head])\n  {\n    case '<':\n    {\n      helper_helper_ee_shift_1_1(ee, odval, oival);\n    }\n\n    case '>':\n    {\n      helper_helper_ee_shift_1_2(ee, odval, oival);\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_shift_1_1",
                "helper_helper_ee_shift_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_compare_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_compare_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  int op = 4;\n  if ((ee->code[ee->head] == '<') && (!ee_invalidpunct(ee->code[ee->head + 1])))\n  {\n    op = 1;\n  }\n  else\n    if ((ee->code[ee->head] == '>') && (!ee_invalidpunct(ee->code[ee->head + 1])))\n  {\n    op = 2;\n  }\n  else\n    if ((ee->code[ee->head] == '<') && (ee->code[ee->head + 1] == '='))\n  {\n    op = 3;\n  }\n  ee->head += (op > 2) ? (2) : (1);\n  switch (op)\n  {\n    case 1:\n    {\n      helper_helper_ee_compare_1_1(ee, odval, oival);\n    }\n\n    case 2:\n    {\n      helper_helper_ee_compare_1_2(ee, odval, oival);\n    }\n\n    case 3:\n    {\n      helper_helper_ee_compare_1_3(ee, odval, oival);\n    }\n\n    case 4:\n    {\n      helper_helper_ee_compare_1_4(ee, odval, oival);\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_invalidpunct",
                "ee_skip_spaces",
                "helper_helper_ee_compare_1_1",
                "helper_helper_ee_compare_1_2",
                "helper_helper_ee_compare_1_3",
                "helper_helper_ee_compare_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "int",
                        "definition": [
                            "int op = 4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_equals_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_equals_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  int op = (ee->code[ee->head] == '=') ? (1) : (2);\n  ee->head += 2;\n  switch (op)\n  {\n    case 1:\n    {\n      helper_helper_ee_equals_1_1(ee, odval, oival);\n    }\n\n    case 2:\n    {\n      helper_helper_ee_equals_1_2(ee, odval, oival);\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_equals_1_1",
                "helper_helper_ee_equals_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "int",
                        "definition": [
                            "int op = (ee->code[ee->head] == '=') ? (1) : (2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_bitand_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_bitand_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  ee->head += 1;\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_ee_bitand_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_ee_bitand_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_bitand_1_1",
                "helper_helper_ee_bitand_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_bitor_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_bitor_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  ee->head += 1;\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_ee_bitor_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_ee_bitor_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_bitor_1_1",
                "helper_helper_ee_bitor_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_logand_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_logand_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  ee->head += 2;\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_ee_logand_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_ee_logand_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_logand_1_1",
                "helper_helper_ee_logand_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ee_logor_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_ee_logor_1(expreval_t * const ee)\n{\n  double odval = ee->dval;\n  lilint_t oival = ee->ival;\n  ee->head += 2;\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_ee_logor_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_ee_logor_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  ee_skip_spaces(ee);\n}\n\n",
            "calle": [
                "ee_skip_spaces",
                "helper_helper_ee_logor_1_1",
                "helper_helper_ee_logor_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval = ee->dval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival = ee->ival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_eval_expr_1",
            "header": "",
            "params": [
                "lil_t lil",
                "expreval_t ee"
            ],
            "definition": "lil_value_t helper_lil_eval_expr_1(lil_t lil, expreval_t ee)\n{\n  switch (ee.error)\n  {\n    case 3:\n    {\n      lil_set_error(lil, \"division by zero in expression\");\n      break;\n    }\n\n    case 2:\n    {\n      lil_set_error(lil, \"mixing invalid types in expression\");\n      break;\n    }\n\n    case 1:\n    {\n      lil_set_error(lil, \"expression syntax error\");\n      break;\n    }\n\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lil_set_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t",
                        "definition": [
                            "expreval_t ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_embedded_1",
            "header": "",
            "params": [
                "unsigned int * const lilcode_idx_ref",
                "size_t * const lilcodelen_ref",
                "size_t * const contlen_ref",
                "char * const lilcode",
                "char * const cont"
            ],
            "definition": "void helper_lil_embedded_1(unsigned int * const lilcode_idx_ref, size_t * const lilcodelen_ref, size_t * const contlen_ref, char * const lilcode, char * const cont)\n{\n  unsigned int lilcode_idx = *lilcode_idx_ref;\n  size_t lilcodelen = *lilcodelen_ref;\n  size_t contlen = *contlen_ref;\n  lilcode_idx = realloc(lilcode_idx, (lilcodelen + contlen) + 10);\n  memcpy((&lilcode[lilcode_idx]) + lilcodelen, \"\\nwrite {\", 8);\n  memcpy(((&lilcode[lilcode_idx]) + lilcodelen) + 8, cont, contlen);\n  lilcode[((lilcodelen + contlen) + 8) + lilcode_idx] = '}';\n  lilcode[((lilcodelen + contlen) + 9) + lilcode_idx] = '\\n';\n  lilcodelen += contlen + 10;\n  free(cont);\n  *lilcode_idx_ref = lilcode_idx;\n  *lilcodelen_ref = lilcodelen;\n  *contlen_ref = contlen;\n}\n\n",
            "calle": [
                "free",
                "memcpy",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lilcode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char * const",
                        "definition": [
                            "char * const lilcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char * const",
                        "definition": [
                            "char * const cont"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = *lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = *lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = *contlen_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lil_embedded_2",
            "header": "",
            "params": [
                "unsigned int * const lilcode_idx_ref",
                "size_t * const lilcodelen_ref",
                "unsigned int * const cont_idx_ref",
                "size_t * const contlen_ref",
                "size_t * const head_ref",
                "const char * const code",
                "char * const lilcode",
                "char * const cont",
                "size_t codelen"
            ],
            "definition": "void helper_lil_embedded_2(unsigned int * const lilcode_idx_ref, size_t * const lilcodelen_ref, unsigned int * const cont_idx_ref, size_t * const contlen_ref, size_t * const head_ref, const char * const code, char * const lilcode, char * const cont, size_t codelen)\n{\n  unsigned int lilcode_idx = *lilcode_idx_ref;\n  size_t lilcodelen = *lilcodelen_ref;\n  unsigned int cont_idx = *cont_idx_ref;\n  size_t contlen = *contlen_ref;\n  size_t head = *head_ref;\n  if ((((((head < (codelen - 4)) && (code[head] == '<')) && (code[head + 1] == '?')) && (code[head + 2] == 'l')) && (code[head + 3] == 'i')) && (code[head + 4] == 'l'))\n  {\n    helper_helper_lil_embedded_2_2(&lilcode_idx, &lilcodelen, &cont_idx, &contlen, &head, code, lilcode, cont, codelen);\n  }\n  else\n  {\n    helper_helper_lil_embedded_2_1(&cont_idx, &contlen, &head, code, cont);\n  }\n  *lilcode_idx_ref = lilcode_idx;\n  *lilcodelen_ref = lilcodelen;\n  *cont_idx_ref = cont_idx;\n  *contlen_ref = contlen;\n  *head_ref = head;\n}\n\n",
            "calle": [
                "helper_helper_lil_embedded_2_1",
                "helper_helper_lil_embedded_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lilcode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char * const",
                        "definition": [
                            "const char * const code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char * const",
                        "definition": [
                            "char * const lilcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char * const",
                        "definition": [
                            "char * const cont"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codelen",
                        "type": "size_t",
                        "definition": [
                            "size_t codelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = *lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = *lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cont_idx = *cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = *contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = *head_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_1",
            "header": "",
            "params": [
                "lil_func_t * const func_ref",
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_1(lil_func_t * const func_ref, lil_t lil, size_t argc, lil_value_t * const argv)\n{\n  lil_func_t func = *func_ref;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  func = find_cmd(lil, lil_to_string(argv[1]));\n  if ((!func) || (!func->argnames))\n  {\n    return 0;\n  }\n  return lil_list_to_value(func->argnames, 1);\n  *func_ref = func;\n}\n\n",
            "calle": [
                "find_cmd",
                "lil_list_to_value",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "func_ref",
                        "type": "lil_func_t * const",
                        "definition": [
                            "lil_func_t * const func_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t func = *func_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_2",
            "header": "",
            "params": [
                "lil_func_t * const func_ref",
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_2(lil_func_t * const func_ref, lil_t lil, size_t argc, lil_value_t * const argv)\n{\n  lil_func_t func = *func_ref;\n  if (argc < 2)\n  {\n    return 0;\n  }\n  func = find_cmd(lil, lil_to_string(argv[1]));\n  if ((!func) || func->proc)\n  {\n    return 0;\n  }\n  return lil_clone_value(func->code);\n  *func_ref = func;\n}\n\n",
            "calle": [
                "find_cmd",
                "lil_clone_value",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "func_ref",
                        "type": "lil_func_t * const",
                        "definition": [
                            "lil_func_t * const func_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t func = *func_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_3",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_3(lil_t lil, size_t argc, lil_value_t * const argv)\n{\n  const char *target;\n  unsigned int target_idx = 0;\n  if (argc == 1)\n  {\n    return 0;\n  }\n  target_idx = lil_to_string(argv[1]);\n  return (hm_has(&lil->cmdmap, target)) ? (lil_alloc_string(\"1\")) : (0);\n}\n\n",
            "calle": [
                "hm_has",
                "lil_alloc_string",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "const char *",
                        "definition": [
                            "const char *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int target_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_4",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_4(lil_t * const lil_ref, size_t argc, lil_value_t * const argv)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t r;\n  if (argc == 1)\n  {\n    return lil_alloc_string(lil->dollarprefix);\n  }\n  r = lil_alloc_string(lil->dollarprefix);\n  free(lil->dollarprefix);\n  lil->dollarprefix = strclone(lil_to_string(argv[1]));\n  return r;\n  *lil_ref = lil;\n}\n\n",
            "calle": [
                "free",
                "lil_alloc_string",
                "lil_to_string",
                "strclone"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_5",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "lil_value_t helper_fnc_reflect_5(lil_t lil)\n{\n  lil_env_t env = lil->env;\n  while (((env != lil->rootenv) && (!env->catcher_for)) && (!env->func))\n    env = env->parent;\n\n  if (env->catcher_for)\n  {\n    return lil_alloc_string(lil->catcher);\n  }\n  if (env == lil->rootenv)\n  {\n    return lil_alloc_string(lil->rootcode);\n  }\n  return (env->func) ? (env->func->code) : (0);\n}\n\n",
            "calle": [
                "lil_alloc_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = lil->env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_6",
            "header": "",
            "params": [
                "lil_t lil"
            ],
            "definition": "lil_value_t helper_fnc_reflect_6(lil_t lil)\n{\n  lil_env_t env = lil->env;\n  while (((env != lil->rootenv) && (!env->catcher_for)) && (!env->func))\n    env = env->parent;\n\n  if (env->catcher_for)\n  {\n    return env->catcher_for;\n  }\n  if (env == lil->rootenv)\n  {\n    return 0;\n  }\n  return (env->func) ? (lil_alloc_string(env->func->name)) : (0);\n}\n\n",
            "calle": [
                "lil_alloc_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = lil->env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_7",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "lil_value_t * const r_ref",
                "lil_t lil"
            ],
            "definition": "lil_value_t helper_fnc_reflect_7(size_t * const i_ref, lil_value_t * const r_ref, lil_t lil)\n{\n  size_t i = *i_ref;\n  lil_value_t r = *r_ref;\n  lil_list_t vars = lil_alloc_list();\n  lil_env_t env = lil->env;\n  while (env)\n  {\n    for (i = 0; i < env->vars; i += 1)\n      lil_list_append(vars, lil_alloc_string(env->var[i]->n));\n\n    env = env->parent;\n  }\n\n  r = lil_list_to_value(vars, 1);\n  lil_free_list(vars);\n  return r;\n  *i_ref = i;\n  *r_ref = r;\n}\n\n",
            "calle": [
                "lil_alloc_list",
                "lil_alloc_string",
                "lil_free_list",
                "lil_list_append",
                "lil_list_to_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t vars = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = lil->env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_8",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_8(size_t * const i_ref, lil_t lil, size_t argc, lil_value_t * const argv)\n{\n  size_t i = *i_ref;\n  const char *target;\n  unsigned int target_idx = 0;\n  if (argc == 1)\n  {\n    return 0;\n  }\n  target_idx = lil_to_string(argv[1]);\n  for (i = 0; i < lil->rootenv->vars; i += 1)\n    if (!strcmp(target, lil->rootenv->var[i]->n))\n  {\n    return lil_alloc_string(\"1\");\n  }\n\n  return 0;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "lil_alloc_string",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "const char *",
                        "definition": [
                            "const char *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int target_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_reflect_9",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv"
            ],
            "definition": "lil_value_t helper_fnc_reflect_9(lil_t lil, size_t argc, lil_value_t * const argv)\n{\n  const char *target;\n  unsigned int target_idx = 0;\n  lil_env_t env = lil->env;\n  if (argc == 1)\n  {\n    return 0;\n  }\n  target_idx = lil_to_string(argv[1]);\n  while (env)\n  {\n    if (hm_has(&env->varmap, target))\n    {\n      return lil_alloc_string(\"1\");\n    }\n    env = env->parent;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "hm_has",
                "lil_alloc_string",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "const char *",
                        "definition": [
                            "const char *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int target_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t env = lil->env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_enveval_1",
            "header": "",
            "params": [
                "lil_list_t * const invars_ref",
                "lil_list_t * const outvars_ref",
                "unsigned int * const varvalues_idx_ref",
                "int * const codeindex_ref",
                "size_t * const i_ref",
                "lil_t lil",
                "size_t argc",
                "lil_value_t * const argv",
                "lil_value_t * const varvalues"
            ],
            "definition": "void helper_fnc_enveval_1(lil_list_t * const invars_ref, lil_list_t * const outvars_ref, unsigned int * const varvalues_idx_ref, int * const codeindex_ref, size_t * const i_ref, lil_t lil, size_t argc, lil_value_t * const argv, lil_value_t * const varvalues)\n{\n  lil_list_t invars = *invars_ref;\n  lil_list_t outvars = *outvars_ref;\n  unsigned int varvalues_idx = *varvalues_idx_ref;\n  int codeindex = *codeindex_ref;\n  size_t i = *i_ref;\n  invars = lil_subst_to_list(lil, argv[0]);\n  varvalues_idx = malloc((sizeof(lil_value_t)) * lil_list_size(invars));\n  for (i = 0; i < lil_list_size(invars); i += 1)\n    varvalues[i + varvalues_idx] = lil_clone_value(lil_get_var(lil, lil_to_string(lil_list_get(invars, i))));\n\n  if (argc > 2)\n  {\n    codeindex = 2;\n    outvars = lil_subst_to_list(lil, argv[1]);\n  }\n  else\n  {\n    codeindex = 1;\n  }\n  *invars_ref = invars;\n  *outvars_ref = outvars;\n  *varvalues_idx_ref = varvalues_idx;\n  *codeindex_ref = codeindex;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_get_var",
                "lil_list_get",
                "lil_list_size",
                "lil_subst_to_list",
                "lil_to_string",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "invars_ref",
                        "type": "lil_list_t * const",
                        "definition": [
                            "lil_list_t * const invars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outvars_ref",
                        "type": "lil_list_t * const",
                        "definition": [
                            "lil_list_t * const outvars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const varvalues_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeindex_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const codeindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const varvalues"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t invars = *invars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outvars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t outvars = *outvars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varvalues_idx = *varvalues_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeindex",
                        "type": "int",
                        "definition": [
                            "int codeindex = *codeindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_enveval_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "lil_t lil",
                "lil_list_t invars",
                "lil_list_t outvars",
                "lil_value_t * const varvalues",
                "unsigned int varvalues_idx"
            ],
            "definition": "void helper_fnc_enveval_2(size_t * const i_ref, lil_t lil, lil_list_t invars, lil_list_t outvars, lil_value_t * const varvalues, unsigned int varvalues_idx)\n{\n  size_t i = *i_ref;\n  if (outvars)\n  {\n    for (i = 0; i < lil_list_size(outvars); i += 1)\n    {\n      lil_set_var(lil, lil_to_string(lil_list_get(outvars, i)), varvalues[i + varvalues_idx], 1);\n      lil_free_value(varvalues[i + varvalues_idx]);\n    }\n\n  }\n  else\n  {\n    for (i = 0; i < lil_list_size(invars); i += 1)\n    {\n      lil_set_var(lil, lil_to_string(lil_list_get(invars, i)), varvalues[i + varvalues_idx], 1);\n      lil_free_value(varvalues[i + varvalues_idx]);\n    }\n\n  }\n  lil_free_list(invars);\n  if (outvars)\n  {\n    lil_free_list(outvars);\n  }\n  free(varvalues);\n  *i_ref = i;\n}\n\n",
            "calle": [
                "free",
                "lil_free_list",
                "lil_free_value",
                "lil_list_get",
                "lil_list_size",
                "lil_set_var",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t invars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outvars",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t outvars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const varvalues"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varvalues_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int varvalues_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_foreach_1",
            "header": "",
            "params": [
                "lil_t lil",
                "lil_value_t * const argv",
                "lil_list_t list",
                "lil_list_t rlist",
                "size_t i",
                "size_t codeidx",
                "const char * const varname"
            ],
            "definition": "void helper_fnc_foreach_1(lil_t lil, lil_value_t * const argv, lil_list_t list, lil_list_t rlist, size_t i, size_t codeidx, const char * const varname)\n{\n  lil_value_t rv;\n  lil_set_var(lil, varname, list->v[i], 3);\n  rv = lil_parse_value(lil, argv[codeidx], 0);\n  if (rv->l)\n  {\n    lil_list_append(rlist, rv);\n  }\n  else\n    lil_free_value(rv);\n  if (lil->env->breakrun || lil->error)\n  {\n    break;\n  }\n}\n\n",
            "calle": [
                "lil_free_value",
                "lil_list_append",
                "lil_parse_value",
                "lil_set_var"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rlist",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t rlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeidx",
                        "type": "size_t",
                        "definition": [
                            "size_t codeidx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "varname",
                        "type": "const char * const",
                        "definition": [
                            "const char * const varname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rv",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t rv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_while_1",
            "header": "",
            "params": [
                "lil_value_t * const val_ref",
                "lil_value_t * const r_ref",
                "int * const v_ref",
                "lil_t lil",
                "lil_value_t * const argv",
                "int base",
                "int not"
            ],
            "definition": "lil_value_t helper_fnc_while_1(lil_value_t * const val_ref, lil_value_t * const r_ref, int * const v_ref, lil_t lil, lil_value_t * const argv, int base, int not)\n{\n  lil_value_t val = *val_ref;\n  lil_value_t r = *r_ref;\n  int v = *v_ref;\n  val = lil_eval_expr(lil, argv[base]);\n  if ((!val) || lil->error)\n  {\n    return 0;\n  }\n  v = lil_to_boolean(val);\n  if (not)\n  {\n    v = !v;\n  }\n  if (!v)\n  {\n    lil_free_value(val);\n    break;\n  }\n  if (r)\n  {\n    lil_free_value(r);\n  }\n  r = lil_parse_value(lil, argv[base + 1], 0);\n  lil_free_value(val);\n  *val_ref = val;\n  *r_ref = r;\n  *v_ref = v;\n}\n\n",
            "calle": [
                "lil_eval_expr",
                "lil_free_value",
                "lil_parse_value",
                "lil_to_boolean"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "not",
                        "type": "int",
                        "definition": [
                            "int not"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v = *v_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_repstr_1",
            "header": "",
            "params": [
                "unsigned int * const src_idx_ref",
                "size_t * const idx_ref",
                "size_t * const srclen_ref",
                "const char * const to",
                "char * const src",
                "const char * const sub",
                "unsigned int sub_idx",
                "size_t fromlen",
                "size_t tolen"
            ],
            "definition": "void helper_fnc_repstr_1(unsigned int * const src_idx_ref, size_t * const idx_ref, size_t * const srclen_ref, const char * const to, char * const src, const char * const sub, unsigned int sub_idx, size_t fromlen, size_t tolen)\n{\n  unsigned int src_idx = *src_idx_ref;\n  size_t idx = *idx_ref;\n  size_t srclen = *srclen_ref;\n  char *newsrc = malloc(((srclen - fromlen) + tolen) + 1);\n  idx = (&sub[sub_idx]) - (&src[src_idx]);\n  if (idx)\n  {\n    memcpy(newsrc, src, idx);\n  }\n  memcpy(newsrc + idx, to, tolen);\n  memcpy((newsrc + idx) + tolen, ((&src[src_idx]) + idx) + fromlen, (srclen - idx) - fromlen);\n  srclen = (srclen - fromlen) + tolen;\n  free(src);\n  src_idx = newsrc;\n  src[srclen + src_idx] = 0;\n  *src_idx_ref = src_idx;\n  *idx_ref = idx;\n  *srclen_ref = srclen;\n}\n\n",
            "calle": [
                "free",
                "malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srclen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const srclen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to",
                        "type": "const char * const",
                        "definition": [
                            "const char * const to"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "char * const",
                        "definition": [
                            "char * const src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sub",
                        "type": "const char * const",
                        "definition": [
                            "const char * const sub"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sub_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sub_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fromlen",
                        "type": "size_t",
                        "definition": [
                            "size_t fromlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tolen",
                        "type": "size_t",
                        "definition": [
                            "size_t tolen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = *src_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx = *idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srclen",
                        "type": "size_t",
                        "definition": [
                            "size_t srclen = *srclen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newsrc",
                        "type": "char *",
                        "definition": [
                            "char *newsrc = malloc(((srclen - fromlen) + tolen) + 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fnc_source_1",
            "header": "",
            "params": [
                "unsigned int * const f_idx_ref",
                "size_t * const size_ref",
                "unsigned int * const buffer_idx_ref",
                "lil_value_t * const argv",
                "FILE * const f",
                "char * const buffer"
            ],
            "definition": "lil_value_t helper_fnc_source_1(unsigned int * const f_idx_ref, size_t * const size_ref, unsigned int * const buffer_idx_ref, lil_value_t * const argv, FILE * const f, char * const buffer)\n{\n  unsigned int f_idx = *f_idx_ref;\n  size_t size = *size_ref;\n  unsigned int buffer_idx = *buffer_idx_ref;\n  f_idx = fopen(lil_to_string(argv[0]), \"rb\");\n  if (!(&f[f_idx]))\n  {\n    return 0;\n  }\n  fseek(f, 0, 2);\n  size = ftell(f);\n  fseek(f, 0, 0);\n  buffer_idx = malloc(size + 1);\n  fread(buffer, 1, size, f);\n  buffer[size + buffer_idx] = 0;\n  fclose(f);\n  *f_idx_ref = f_idx;\n  *size_ref = size;\n  *buffer_idx_ref = buffer_idx;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fread",
                "fseek",
                "ftell",
                "lil_to_string",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "f_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const f_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = *f_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = *buffer_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lil_set_var_1_1",
            "header": "",
            "params": [
                "lil_value_t * const val_ref",
                "int * const freeval_ref",
                "const char * const name",
                "lil_t lil"
            ],
            "definition": "lil_var_t helper_helper_lil_set_var_1_1(lil_value_t * const val_ref, int * const freeval_ref, const char * const name, lil_t lil)\n{\n  lil_value_t val = *val_ref;\n  int freeval = *freeval_ref;\n  lil_setvar_callback_proc_t proc = (lil_setvar_callback_proc_t) lil->callback[6];\n  lil_value_t newval = val;\n  int r = proc(lil, name, &newval);\n  if (r < 0)\n  {\n    return 0;\n  }\n  if (r)\n  {\n    val = newval;\n    freeval = 1;\n  }\n  *val_ref = val;\n  *freeval_ref = freeval;\n}\n\n",
            "calle": [
                "proc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const freeval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval",
                        "type": "int",
                        "definition": [
                            "int freeval = *freeval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "proc",
                        "type": "lil_setvar_callback_proc_t",
                        "definition": [
                            "lil_setvar_callback_proc_t proc = (lil_setvar_callback_proc_t) lil->callback[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t newval = val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = proc(lil, name, &newval)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lil_set_var_1_2",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_var_t * const var_ref",
                "lil_value_t val",
                "int freeval"
            ],
            "definition": "lil_var_t helper_helper_lil_set_var_1_2(lil_t * const lil_ref, lil_var_t * const var_ref, lil_value_t val, int freeval)\n{\n  lil_t lil = *lil_ref;\n  lil_var_t var = *var_ref;\n  lil_free_value(var->v);\n  var->v = (freeval) ? (val) : (lil_clone_value(val));\n  if (var->w)\n  {\n    lil_env_t save_env;\n    save_env = lil->env;\n    lil->env = var->env;\n    lil_free_value(lil_parse(lil, var->w, 0, 1));\n    lil->env = save_env;\n  }\n  return var;\n  *lil_ref = lil;\n  *var_ref = var;\n}\n\n",
            "calle": [
                "lil_clone_value",
                "lil_free_value",
                "lil_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var_ref",
                        "type": "lil_var_t * const",
                        "definition": [
                            "lil_var_t * const var_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeval",
                        "type": "int",
                        "definition": [
                            "int freeval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var",
                        "type": "lil_var_t",
                        "definition": [
                            "lil_var_t var = *var_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "save_env",
                        "type": "lil_env_t",
                        "definition": [
                            "lil_env_t save_env"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_next_word_2_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t val",
                "char sc"
            ],
            "definition": "void helper_helper_next_word_2_1(lil_t * const lil_ref, lil_value_t val, char sc)\n{\n  lil_t lil = *lil_ref;\n  if ((lil->code[lil->head] == '[') || (lil->code[lil->head] == '$'))\n  {\n    lil_value_t tmp = (lil->code[lil->head] == '$') ? (get_dollarpart(lil)) : (get_bracketpart(lil));\n    lil_append_val(val, tmp);\n    lil_free_value(tmp);\n    lil->head -= 1;\n  }\n  else\n    if (lil->code[lil->head] == '\\\\')\n  {\n    helper_helper_helper_next_word_2_1_1(&lil, val);\n  }\n  else\n    if (lil->code[lil->head] == sc)\n  {\n    lil->head += 1;\n    break;\n  }\n  else\n  {\n    lil_append_char(val, lil->code[lil->head]);\n  }\n  lil->head += 1;\n  *lil_ref = lil;\n}\n\n",
            "calle": [
                "get_bracketpart",
                "get_dollarpart",
                "helper_helper_helper_next_word_2_1_1",
                "lil_append_char",
                "lil_append_val",
                "lil_free_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sc",
                        "type": "char",
                        "definition": [
                            "char sc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t tmp = (lil->code[lil->head] == '$') ? (get_dollarpart(lil)) : (get_bracketpart(lil))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lil_parse_2_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t words"
            ],
            "definition": "void helper_helper_lil_parse_2_1(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t words)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  lil_func_t cmd = find_cmd(lil, lil_to_string(words->v[0]));\n  if (!cmd)\n  {\n    helper_helper_helper_lil_parse_2_1_2(&lil, &val, words);\n  }\n  if (cmd)\n  {\n    helper_helper_helper_lil_parse_2_1_1(&lil, &val, words, cmd);\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "find_cmd",
                "helper_helper_helper_lil_parse_2_1_1",
                "helper_helper_helper_lil_parse_2_1_2",
                "lil_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd = find_cmd(lil, lil_to_string(words->v[0]))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_unary_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_helper_ee_unary_1_1(expreval_t * const ee)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = -ee->dval;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = -ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_unary_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_helper_ee_unary_1_2(expreval_t * const ee)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = !ee->dval;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = !ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_unary_1_3",
            "header": "",
            "params": [
                "expreval_t * const ee"
            ],
            "definition": "void helper_helper_ee_unary_1_3(expreval_t * const ee)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = ~((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ~ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_muldiv_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_muldiv_1_1(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_muldiv_1_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_muldiv_1_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_muldiv_1_1_1",
                "helper_helper_helper_ee_muldiv_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_muldiv_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_muldiv_1_2(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_muldiv_1_2_2(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_muldiv_1_2_1(ee, oival);\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_muldiv_1_2_1",
                "helper_helper_helper_ee_muldiv_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_muldiv_1_3",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_muldiv_1_3(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_muldiv_1_3_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_muldiv_1_3_2(ee, oival);\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_muldiv_1_3_1",
                "helper_helper_helper_ee_muldiv_1_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_muldiv_1_4",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_muldiv_1_4(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_muldiv_1_4_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_muldiv_1_4_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_muldiv_1_4_1",
                "helper_helper_helper_ee_muldiv_1_4_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_addsub_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_addsub_1_1(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_addsub_1_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_addsub_1_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_addsub_1_1_1",
                "helper_helper_helper_ee_addsub_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_addsub_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_addsub_1_2(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_addsub_1_2_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_addsub_1_2_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_addsub_1_2_1",
                "helper_helper_helper_ee_addsub_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_shift_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_shift_1_1(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_shift_1_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_shift_1_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_shift_1_1_1",
                "helper_helper_helper_ee_shift_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_shift_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_shift_1_2(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_shift_1_2_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_shift_1_2_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_shift_1_2_1",
                "helper_helper_helper_ee_shift_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_compare_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_compare_1_1(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_compare_1_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_compare_1_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_compare_1_1_1",
                "helper_helper_helper_ee_compare_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_compare_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_compare_1_2(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_compare_1_2_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_compare_1_2_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_compare_1_2_1",
                "helper_helper_helper_ee_compare_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_compare_1_3",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_compare_1_3(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_compare_1_3_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_compare_1_3_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_compare_1_3_1",
                "helper_helper_helper_ee_compare_1_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_compare_1_4",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_compare_1_4(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_compare_1_4_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_compare_1_4_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_compare_1_4_1",
                "helper_helper_helper_ee_compare_1_4_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_equals_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_equals_1_1(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_equals_1_1_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_equals_1_1_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_equals_1_1_1",
                "helper_helper_helper_ee_equals_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_equals_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_equals_1_2(expreval_t * const ee, double odval, lilint_t oival)\n{\n  switch (ee->type)\n  {\n    case 1:\n    {\n      helper_helper_helper_ee_equals_1_2_1(ee, odval);\n    }\n\n    case 0:\n    {\n      helper_helper_helper_ee_equals_1_2_2(ee, oival);\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_ee_equals_1_2_1",
                "helper_helper_helper_ee_equals_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_bitand_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_ee_bitand_1_1(expreval_t * const ee, double odval)\n{\n  ee_equals(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = ((lilint_t) odval) & ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ((lilint_t) odval) & ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_equals"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_bitand_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_bitand_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_equals(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = oival & ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = oival & ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_equals"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_bitor_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_ee_bitor_1_1(expreval_t * const ee, double odval)\n{\n  ee_bitand(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = ((lilint_t) odval) | ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ((lilint_t) odval) | ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_bitand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_bitor_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_bitor_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_bitand(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = oival | ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = oival | ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_bitand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_logand_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_ee_logand_1_1(expreval_t * const ee, double odval)\n{\n  ee_bitor(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval && ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval && ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_bitor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_logand_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_logand_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_bitor(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival && ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival && ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_bitor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_logor_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_ee_logor_1_1(expreval_t * const ee, double odval)\n{\n  ee_logand(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval || ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval || ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_logand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ee_logor_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_ee_logor_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_logand(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival || ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival || ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_logand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lil_embedded_2_1",
            "header": "",
            "params": [
                "unsigned int * const cont_idx_ref",
                "size_t * const contlen_ref",
                "size_t * const head_ref",
                "const char * const code",
                "char * const cont"
            ],
            "definition": "void helper_helper_lil_embedded_2_1(unsigned int * const cont_idx_ref, size_t * const contlen_ref, size_t * const head_ref, const char * const code, char * const cont)\n{\n  unsigned int cont_idx = *cont_idx_ref;\n  size_t contlen = *contlen_ref;\n  size_t head = *head_ref;\n  if ((code[head] == '{') || (code[head] == '}'))\n  {\n    cont_idx = realloc(cont_idx, contlen + 6);\n    cont[contlen + cont_idx] = '}';\n    contlen += 1;\n    cont[contlen + cont_idx] = '\"';\n    contlen += 1;\n    cont[contlen + cont_idx] = '\\\\';\n    contlen += 1;\n    if (code[head] == '{')\n    {\n      cont[contlen + cont_idx] = 'o';\n      contlen += 1;\n    }\n    else\n      cont[contlen + cont_idx] = 'c';\n    contlen += 1;\n    cont[(contlen++) + cont_idx] = '\"';\n    cont[(contlen++) + cont_idx] = '{';\n    head++;\n  }\n  else\n  {\n    cont_idx = realloc(cont_idx, contlen + 1);\n    cont[contlen + cont_idx] = code[head];\n    head += 1;\n    contlen += 1;\n  }\n  *cont_idx_ref = cont_idx;\n  *contlen_ref = contlen;\n  *head_ref = head;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cont_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char * const",
                        "definition": [
                            "const char * const code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char * const",
                        "definition": [
                            "char * const cont"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cont_idx = *cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = *contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = *head_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lil_embedded_2_2",
            "header": "",
            "params": [
                "unsigned int * const lilcode_idx_ref",
                "size_t * const lilcodelen_ref",
                "unsigned int * const cont_idx_ref",
                "size_t * const contlen_ref",
                "size_t * const head_ref",
                "const char * const code",
                "char * const lilcode",
                "char * const cont",
                "size_t codelen"
            ],
            "definition": "void helper_helper_lil_embedded_2_2(unsigned int * const lilcode_idx_ref, size_t * const lilcodelen_ref, unsigned int * const cont_idx_ref, size_t * const contlen_ref, size_t * const head_ref, const char * const code, char * const lilcode, char * const cont, size_t codelen)\n{\n  unsigned int lilcode_idx = *lilcode_idx_ref;\n  size_t lilcodelen = *lilcodelen_ref;\n  unsigned int cont_idx = *cont_idx_ref;\n  size_t contlen = *contlen_ref;\n  size_t head = *head_ref;\n  head += 5;\n  if (contlen)\n  {\n    helper_helper_helper_lil_embedded_2_2_2(&lilcode_idx, &lilcodelen, &cont_idx, &contlen, lilcode, cont);\n  }\n  while (head < codelen)\n  {\n    helper_helper_helper_lil_embedded_2_2_1(&lilcode_idx, &lilcodelen, &head, code, lilcode, codelen);\n  }\n\n  lilcode_idx = realloc(lilcode_idx, lilcodelen + 1);\n  lilcode[lilcodelen + lilcode_idx] = '\\n';\n  lilcodelen += 1;\n  *lilcode_idx_ref = lilcode_idx;\n  *lilcodelen_ref = lilcodelen;\n  *cont_idx_ref = cont_idx;\n  *contlen_ref = contlen;\n  *head_ref = head;\n}\n\n",
            "calle": [
                "helper_helper_helper_lil_embedded_2_2_1",
                "helper_helper_helper_lil_embedded_2_2_2",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lilcode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char * const",
                        "definition": [
                            "const char * const code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char * const",
                        "definition": [
                            "char * const lilcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char * const",
                        "definition": [
                            "char * const cont"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codelen",
                        "type": "size_t",
                        "definition": [
                            "size_t codelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = *lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = *lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cont_idx = *cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = *contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = *head_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_next_word_2_1_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t val"
            ],
            "definition": "void helper_helper_helper_next_word_2_1_1(lil_t * const lil_ref, lil_value_t val)\n{\n  lil_t lil = *lil_ref;\n  lil->head += 1;\n  switch (lil->code[lil->head])\n  {\n    case 'b':\n    {\n      lil_append_char(val, '\\b');\n      break;\n    }\n\n    case 't':\n    {\n      lil_append_char(val, '\\t');\n      break;\n    }\n\n    case 'n':\n    {\n      lil_append_char(val, '\\n');\n      break;\n    }\n\n    case 'v':\n    {\n      lil_append_char(val, '\\v');\n      break;\n    }\n\n    case 'f':\n    {\n      lil_append_char(val, '\\f');\n      break;\n    }\n\n    case 'r':\n    {\n      lil_append_char(val, '\\r');\n      break;\n    }\n\n    case '0':\n    {\n      lil_append_char(val, 0);\n      break;\n    }\n\n    case 'a':\n    {\n      lil_append_char(val, '\\a');\n      break;\n    }\n\n    case 'c':\n    {\n      lil_append_char(val, '}');\n      break;\n    }\n\n    case 'o':\n    {\n      lil_append_char(val, '{');\n      break;\n    }\n\n    default:\n    {\n      lil_append_char(val, lil->code[lil->head]);\n      break;\n    }\n\n  }\n\n  *lil_ref = lil;\n}\n\n",
            "calle": [
                "lil_append_char"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lil_parse_2_1_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t words",
                "lil_func_t cmd"
            ],
            "definition": "void helper_helper_helper_lil_parse_2_1_1(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t words, lil_func_t cmd)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  if (cmd->proc)\n  {\n    size_t shead = lil->head;\n    val = cmd->proc(lil, words->c - 1, words->v + 1);\n    if (lil->error == 2)\n    {\n      lil->error = 1;\n      lil->err_head = shead;\n    }\n  }\n  else\n  {\n    lil_push_env(lil);\n    lil->env->func = cmd;\n    if ((cmd->argnames->c == 1) && (!strcmp(lil_to_string(cmd->argnames->v[0]), \"args\")))\n    {\n      lil_value_t args = lil_list_to_value(words, 1);\n      lil_set_var(lil, \"args\", args, 2);\n      lil_free_value(args);\n    }\n    else\n    {\n      size_t i;\n      for (i = 0; i < cmd->argnames->c; i += 1)\n      {\n        lil_set_var(lil, lil_to_string(cmd->argnames->v[i]), (i < (words->c - 1)) ? (words->v[i + 1]) : (lil->empty), 2);\n      }\n\n    }\n    val = lil_parse_value(lil, cmd->code, 1);\n    lil_pop_env(lil);\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "cmd->proc",
                "lil_free_value",
                "lil_list_to_value",
                "lil_parse_value",
                "lil_pop_env",
                "lil_push_env",
                "lil_set_var",
                "lil_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "lil_func_t",
                        "definition": [
                            "lil_func_t cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shead",
                        "type": "size_t",
                        "definition": [
                            "size_t shead = lil->head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t args = lil_list_to_value(words, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lil_parse_2_1_2",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t words"
            ],
            "definition": "void helper_helper_helper_lil_parse_2_1_2(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t words)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  if (words->v[0]->l)\n  {\n    helper_helper_helper_helper_lil_parse_2_1_2_1(&lil, &val, words);\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_lil_parse_2_1_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_1_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = ee->dval * odval;\n      break;\n    }\n\n    case 0:\n    {\n      ee->dval = ee->ival * odval;\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = ee->dval * oival;\n      ee->type = 1;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ee->ival * oival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_2_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_2_1(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = fmod(oival, ee->dval);\n      }\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->ival = oival % ee->ival;\n      }\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary",
                "fmod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_2_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_2_2(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = fmod(odval, ee->dval);\n      }\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = fmod(odval, ee->ival);\n      }\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary",
                "fmod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_3_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_3_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = odval / ee->dval;\n      }\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = odval / ((double) ee->ival);\n      }\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_3_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_3_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = ((double) oival) / ee->dval;\n      }\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->dval = ((double) oival) / ((double) ee->ival);\n      }\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_4_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_4_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->ival = (lilint_t) (odval / ee->dval);\n      }\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->ival = (lilint_t) (odval / ((double) ee->ival));\n      }\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_muldiv_1_4_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_muldiv_1_4_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_unary(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      if (ee->dval == 0.0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->ival = (lilint_t) (((double) oival) / ee->dval);\n      }\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      if (ee->ival == 0)\n      {\n        ee->error = 3;\n      }\n      else\n      {\n        ee->ival = oival / ee->ival;\n      }\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_unary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_addsub_1_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_addsub_1_1_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_muldiv(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = ee->dval + odval;\n      break;\n    }\n\n    case 0:\n    {\n      ee->dval = ee->ival + odval;\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_muldiv"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_addsub_1_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_addsub_1_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_muldiv(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = ee->dval + oival;\n      ee->type = 1;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ee->ival + oival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_muldiv"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_addsub_1_2_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_addsub_1_2_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_muldiv(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = odval - ee->dval;\n      break;\n    }\n\n    case 0:\n    {\n      ee->dval = odval - ee->ival;\n      ee->type = 1;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_muldiv"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_addsub_1_2_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_addsub_1_2_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_muldiv(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->dval = ((double) oival) - ee->dval;\n      ee->type = 1;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = oival - ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_muldiv"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_shift_1_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_shift_1_1_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_addsub(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = ((lilint_t) odval) << ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ((lilint_t) odval) << ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_addsub"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_shift_1_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_shift_1_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_addsub(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = oival << ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = oival << ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_addsub"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_shift_1_2_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_shift_1_2_1(expreval_t * const ee, double odval)\n{\n  ee->head += 1;\n  ee_addsub(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = ((lilint_t) odval) >> ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = ((lilint_t) odval) >> ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_addsub"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_shift_1_2_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_shift_1_2_2(expreval_t * const ee, lilint_t oival)\n{\n  ee->head += 1;\n  ee_addsub(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = oival >> ((lilint_t) ee->dval);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = oival >> ee->ival;\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_addsub"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_1_1(expreval_t * const ee, double odval)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval < ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval < ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival < ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival < ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_2_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_2_1(expreval_t * const ee, double odval)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval > ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval > ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_2_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_2_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival > ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival > ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_3_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_3_1(expreval_t * const ee, double odval)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval <= ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval <= ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_3_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_3_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival <= ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival <= ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_4_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_4_1(expreval_t * const ee, double odval)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval >= ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval >= ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_compare_1_4_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_compare_1_4_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_shift(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival >= ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival >= ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_shift"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_equals_1_1_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_equals_1_1_1(expreval_t * const ee, double odval)\n{\n  ee_compare(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval == ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval == ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_compare"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_equals_1_1_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_equals_1_1_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_compare(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival == ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival == ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_compare"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_equals_1_2_1",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "double odval"
            ],
            "definition": "void helper_helper_helper_ee_equals_1_2_1(expreval_t * const ee, double odval)\n{\n  ee_compare(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (odval != ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (odval != ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_compare"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "odval",
                        "type": "double",
                        "definition": [
                            "double odval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ee_equals_1_2_2",
            "header": "",
            "params": [
                "expreval_t * const ee",
                "lilint_t oival"
            ],
            "definition": "void helper_helper_helper_ee_equals_1_2_2(expreval_t * const ee, lilint_t oival)\n{\n  ee_compare(ee);\n  if (ee->error)\n  {\n    return;\n  }\n  switch (ee->type)\n  {\n    case 1:\n    {\n      ee->ival = (oival != ee->dval) ? (1) : (0);\n      ee->type = 0;\n      break;\n    }\n\n    case 0:\n    {\n      ee->ival = (oival != ee->ival) ? (1) : (0);\n      break;\n    }\n\n    default:\n    {\n      ee->error = 2;\n      break;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "ee_compare"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ee",
                        "type": "expreval_t * const",
                        "definition": [
                            "expreval_t * const ee"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oival",
                        "type": "lilint_t",
                        "definition": [
                            "lilint_t oival"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lil_embedded_2_2_1",
            "header": "",
            "params": [
                "unsigned int * const lilcode_idx_ref",
                "size_t * const lilcodelen_ref",
                "size_t * const head_ref",
                "const char * const code",
                "char * const lilcode",
                "size_t codelen"
            ],
            "definition": "void helper_helper_helper_lil_embedded_2_2_1(unsigned int * const lilcode_idx_ref, size_t * const lilcodelen_ref, size_t * const head_ref, const char * const code, char * const lilcode, size_t codelen)\n{\n  unsigned int lilcode_idx = *lilcode_idx_ref;\n  size_t lilcodelen = *lilcodelen_ref;\n  size_t head = *head_ref;\n  if (((head < (codelen - 1)) && (code[head] == '?')) && (code[head + 1] == '>'))\n  {\n    head += 2;\n    break;\n  }\n  lilcode_idx = realloc(lilcode_idx, lilcodelen + 1);\n  lilcode[lilcodelen + lilcode_idx] = code[head];\n  head += 1;\n  lilcodelen += 1;\n  *lilcode_idx_ref = lilcode_idx;\n  *lilcodelen_ref = lilcodelen;\n  *head_ref = head;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lilcode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "const char * const",
                        "definition": [
                            "const char * const code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char * const",
                        "definition": [
                            "char * const lilcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codelen",
                        "type": "size_t",
                        "definition": [
                            "size_t codelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = *lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = *lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "size_t",
                        "definition": [
                            "size_t head = *head_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lil_embedded_2_2_2",
            "header": "",
            "params": [
                "unsigned int * const lilcode_idx_ref",
                "size_t * const lilcodelen_ref",
                "unsigned int * const cont_idx_ref",
                "size_t * const contlen_ref",
                "char * const lilcode",
                "char * const cont"
            ],
            "definition": "void helper_helper_helper_lil_embedded_2_2_2(unsigned int * const lilcode_idx_ref, size_t * const lilcodelen_ref, unsigned int * const cont_idx_ref, size_t * const contlen_ref, char * const lilcode, char * const cont)\n{\n  unsigned int lilcode_idx = *lilcode_idx_ref;\n  size_t lilcodelen = *lilcodelen_ref;\n  unsigned int cont_idx = *cont_idx_ref;\n  size_t contlen = *contlen_ref;\n  lilcode_idx = realloc(lilcode_idx, (lilcodelen + contlen) + 10);\n  memcpy((&lilcode[lilcode_idx]) + lilcodelen, \"\\nwrite {\", 8);\n  memcpy(((&lilcode[lilcode_idx]) + lilcodelen) + 8, cont, contlen);\n  lilcode[((lilcodelen + contlen) + 8) + lilcode_idx] = '}';\n  lilcode[((lilcodelen + contlen) + 9) + lilcode_idx] = '\\n';\n  lilcodelen += contlen + 10;\n  free(cont);\n  cont_idx = 0;\n  contlen = 0;\n  *lilcode_idx_ref = lilcode_idx;\n  *lilcodelen_ref = lilcodelen;\n  *cont_idx_ref = cont_idx;\n  *contlen_ref = contlen;\n}\n\n",
            "calle": [
                "free",
                "memcpy",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lilcode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const contlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode",
                        "type": "char * const",
                        "definition": [
                            "char * const lilcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "char * const",
                        "definition": [
                            "char * const cont"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lilcode_idx = *lilcode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lilcodelen",
                        "type": "size_t",
                        "definition": [
                            "size_t lilcodelen = *lilcodelen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cont_idx = *cont_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contlen",
                        "type": "size_t",
                        "definition": [
                            "size_t contlen = *contlen_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_lil_parse_2_1_2_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t words"
            ],
            "definition": "void helper_helper_helper_helper_lil_parse_2_1_2_1(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t words)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  if (lil->catcher)\n  {\n    helper_helper_helper_helper_helper_lil_parse_2_1_2_1_1(&lil, &val, words);\n  }\n  else\n  {\n    char *msg = malloc(words->v[0]->l + 32);\n    sprintf(msg, \"unknown function %s\", words->v[0]->d);\n    lil_set_error_at(lil, lil->head, msg);\n    free(msg);\n    goto cleanup;\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "free",
                "helper_helper_helper_helper_helper_lil_parse_2_1_2_1_1",
                "lil_set_error_at",
                "malloc",
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg = malloc(words->v[0]->l + 32)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_lil_parse_2_1_2_1_1",
            "header": "",
            "params": [
                "lil_t * const lil_ref",
                "lil_value_t * const val_ref",
                "lil_list_t words"
            ],
            "definition": "void helper_helper_helper_helper_helper_lil_parse_2_1_2_1_1(lil_t * const lil_ref, lil_value_t * const val_ref, lil_list_t words)\n{\n  lil_t lil = *lil_ref;\n  lil_value_t val = *val_ref;\n  if (lil->in_catcher < 16384)\n  {\n    lil_value_t args;\n    lil->in_catcher += 1;\n    lil_push_env(lil);\n    lil->env->catcher_for = words->v[0];\n    args = lil_list_to_value(words, 1);\n    lil_set_var(lil, \"args\", args, 2);\n    lil_free_value(args);\n    val = lil_parse(lil, lil->catcher, 0, 1);\n    lil_pop_env(lil);\n    lil->in_catcher -= 1;\n  }\n  else\n  {\n    char *msg = malloc(words->v[0]->l + 64);\n    sprintf(msg, \"catcher limit reached while trying to call unknown function %s\", words->v[0]->d);\n    lil_set_error_at(lil, lil->head, msg);\n    free(msg);\n    goto cleanup;\n  }\n  *lil_ref = lil;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "free",
                "lil_free_value",
                "lil_list_to_value",
                "lil_parse",
                "lil_pop_env",
                "lil_push_env",
                "lil_set_error_at",
                "lil_set_var",
                "malloc",
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil_ref",
                        "type": "lil_t * const",
                        "definition": [
                            "lil_t * const lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "lil_value_t * const",
                        "definition": [
                            "lil_value_t * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = *lil_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t args"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg = malloc(words->v[0]->l + 64)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "do_exit",
            "header": "",
            "params": [
                "lil_t lil",
                "lil_value_t val"
            ],
            "definition": "static void do_exit(lil_t lil, lil_value_t val)\n{\n  running = 0;\n  exit_code = (int) lil_to_integer(val);\n}\n\n",
            "calle": [
                "lil_to_integer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "running",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "do_system",
            "header": "",
            "params": [
                "size_t argc",
                "char **argv"
            ],
            "definition": "static char *do_system(size_t argc, char **argv)\n{\n  char *cmd = 0;\n  unsigned int cmd_idx = 0;\n  int cmdlen = 0;\n  size_t i;\n  FILE *p;\n  unsigned int p_idx = 0;\n  for (i = 0; i < argc; i += 1)\n  {\n    helper_do_system_1(&cmd_idx, &cmdlen, argv, cmd, i);\n  }\n\n  cmd_idx = realloc(cmd_idx, cmdlen + 1);\n  cmd[cmdlen + cmd_idx] = 0;\n  p_idx = popen(cmd, \"r\");\n  free(cmd);\n  if (p)\n  {\n    helper_do_system_2(p);\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n",
            "calle": [
                "free",
                "helper_do_system_1",
                "helper_do_system_2",
                "popen",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "char *",
                        "definition": [
                            "char *cmd = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cmd_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmdlen",
                        "type": "int",
                        "definition": [
                            "int cmdlen = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "FILE *",
                        "definition": [
                            "FILE *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_writechar",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_writechar(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  if (!argc)\n  {\n    return 0;\n  }\n  printf(\"%c\", (char) lil_to_integer(argv[0]));\n  return 0;\n}\n\n",
            "calle": [
                "lil_to_integer",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_system",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_system(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  const char **sargv = malloc((sizeof(char *)) * (argc + 1));\n  lil_value_t r = 0;\n  char *rv;\n  unsigned int rv_idx = 0;\n  size_t i;\n  if (argc == 0)\n  {\n    return 0;\n  }\n  for (i = 0; i < argc; i += 1)\n    sargv[i] = lil_to_string(argv[i]);\n\n  sargv[argc] = 0;\n  rv_idx = do_system(argc, (char **) sargv);\n  if (rv)\n  {\n    r = lil_alloc_string(rv);\n    free(rv);\n  }\n  free(sargv);\n  return r;\n}\n\n",
            "calle": [
                "do_system",
                "free",
                "lil_alloc_string",
                "lil_to_string",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sargv",
                        "type": "const char **",
                        "definition": [
                            "const char **sargv = malloc((sizeof(char *)) * (argc + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rv",
                        "type": "char *",
                        "definition": [
                            "char *rv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rv_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int rv_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fnc_readline",
            "header": "",
            "params": [
                "lil_t lil",
                "size_t argc",
                "lil_value_t *argv"
            ],
            "definition": "static lil_value_t fnc_readline(lil_t lil, size_t argc, lil_value_t *argv)\n{\n  size_t len = 0;\n  size_t size = 64;\n  char *buffer = malloc(size);\n  unsigned int buffer_idx = 0;\n  signed char ch;\n  lil_value_t retval;\n  for (;;)\n  {\n    ch = fgetc(stdin);\n    if (ch == EOF)\n    {\n      break;\n    }\n    if (ch == '\\r')\n    {\n      continue;\n    }\n    if (ch == '\\n')\n    {\n      break;\n    }\n    if (len < size)\n    {\n      size += 64;\n      buffer_idx = realloc(buffer_idx, size);\n    }\n    buffer[len + buffer_idx] = ch;\n    len += 1;\n  }\n\n  buffer_idx = realloc(buffer_idx, len + 1);\n  buffer[len + buffer_idx] = 0;\n  retval = lil_alloc_string(buffer);\n  free(buffer);\n  return retval;\n}\n\n",
            "calle": [
                "fgetc",
                "free",
                "lil_alloc_string",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "size_t",
                        "definition": [
                            "size_t argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "lil_value_t *",
                        "definition": [
                            "lil_value_t *argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = 64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer = malloc(size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "signed char",
                        "definition": [
                            "signed char ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t retval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "repl",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static int repl(void)\n{\n  char buffer[16384];\n  lil_t lil = lil_new();\n  lil_register(lil, \"writechar\", fnc_writechar);\n  lil_register(lil, \"system\", fnc_system);\n  lil_register(lil, \"readline\", fnc_readline);\n  printf(\"Little Interpreted Language Interactive Shell\\n\");\n  lil_callback(lil, 0, (lil_callback_proc_t) do_exit);\n  while (running)\n  {\n    helper_repl_1(buffer, lil);\n  }\n\n  lil_free(lil);\n  return exit_code;\n}\n\n",
            "calle": [
                "do_exit",
                "fnc_readline",
                "fnc_system",
                "fnc_writechar",
                "helper_repl_1",
                "lil_callback",
                "lil_free",
                "lil_new",
                "lil_register",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char [16384]",
                        "definition": [
                            "char buffer[16384]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = lil_new()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "running",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "nonint",
            "header": "",
            "params": [
                "int argc",
                "const char *argv[]"
            ],
            "definition": "static int nonint(int argc, const char *argv[])\n{\n  lil_t lil = lil_new();\n  const char *filename = argv[1];\n  const char *err_msg;\n  size_t pos;\n  lil_list_t arglist = lil_alloc_list();\n  lil_value_t args;\n  lil_value_t result;\n  char *tmpcode;\n  unsigned int tmpcode_idx = 0;\n  int i;\n  lil_register(lil, \"writechar\", fnc_writechar);\n  lil_register(lil, \"system\", fnc_system);\n  for (i = 2; i < argc; i += 1)\n  {\n    lil_list_append(arglist, lil_alloc_string(argv[i]));\n  }\n\n  args = lil_list_to_value(arglist, 1);\n  lil_free_list(arglist);\n  lil_set_var(lil, \"argv\", args, 0);\n  lil_free_value(args);\n  tmpcode_idx = malloc(strlen(filename) + 256);\n  sprintf(tmpcode, \"set __lilmain:code__ [read {%s}]\\nif [streq $__lilmain:code__ ''] {print There is no code in the file or the file does not exist} {eval $__lilmain:code__}\\n\", filename);\n  result = lil_parse(lil, tmpcode, 0, 1);\n  free(tmpcode);\n  lil_free_value(result);\n  if (lil_error(lil, &err_msg, &pos))\n  {\n    fprintf(stderr, \"lil: error at %i: %s\\n\", (int) pos, err_msg);\n  }\n  lil_free(lil);\n  return exit_code;\n}\n\n",
            "calle": [
                "fnc_system",
                "fnc_writechar",
                "fprintf",
                "free",
                "lil_alloc_list",
                "lil_alloc_string",
                "lil_error",
                "lil_free",
                "lil_free_list",
                "lil_free_value",
                "lil_list_append",
                "lil_list_to_value",
                "lil_new",
                "lil_parse",
                "lil_register",
                "lil_set_var",
                "malloc",
                "sprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "const char *[]",
                        "definition": [
                            "const char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil = lil_new()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename = argv[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_msg",
                        "type": "const char *",
                        "definition": [
                            "const char *err_msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arglist",
                        "type": "lil_list_t",
                        "definition": [
                            "lil_list_t arglist = lil_alloc_list()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t args"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmpcode",
                        "type": "char *",
                        "definition": [
                            "char *tmpcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmpcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmpcode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#main",
            "header": "",
            "params": [
                "int argc",
                "const char *argv[]"
            ],
            "definition": "int main(int argc, const char *argv[])\n{\n  if (argc < 2)\n  {\n    return repl();\n  }\n  else\n    return nonint(argc, argv);\n}\n\n",
            "calle": [
                "nonint",
                "repl"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "const char *[]",
                        "definition": [
                            "const char *argv[]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_do_system_1",
            "header": "",
            "params": [
                "unsigned int * const cmd_idx_ref",
                "int * const cmdlen_ref",
                "char ** const argv",
                "char * const cmd",
                "size_t i"
            ],
            "definition": "void helper_do_system_1(unsigned int * const cmd_idx_ref, int * const cmdlen_ref, char ** const argv, char * const cmd, size_t i)\n{\n  unsigned int cmd_idx = *cmd_idx_ref;\n  int cmdlen = *cmdlen_ref;\n  size_t len = strlen(argv[i]);\n  if (i != 0)\n  {\n    cmd_idx = realloc(cmd_idx, cmdlen + 1);\n    cmd[cmdlen + cmd_idx] = ' ';\n    cmdlen += 1;\n  }\n  cmd_idx = realloc(cmd_idx, cmdlen + len);\n  memcpy((&cmd[cmd_idx]) + cmdlen, argv[i], len);\n  cmdlen += len;\n  *cmd_idx_ref = cmd_idx;\n  *cmdlen_ref = cmdlen;\n}\n\n",
            "calle": [
                "memcpy",
                "realloc",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cmd_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cmd_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmdlen_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const cmdlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd",
                        "type": "char * const",
                        "definition": [
                            "char * const cmd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cmd_idx = *cmd_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmdlen",
                        "type": "int",
                        "definition": [
                            "int cmdlen = *cmdlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(argv[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_do_system_2",
            "header": "",
            "params": [
                "FILE * const p"
            ],
            "definition": "char *helper_do_system_2(FILE * const p)\n{\n  char *retval = 0;\n  unsigned int retval_idx = 0;\n  size_t size = 0;\n  char buff[1024];\n  ssize_t bytes;\n  while (bytes = fread(buff, 1, 1024, p))\n  {\n    retval_idx = realloc(retval_idx, size + bytes);\n    memcpy((&retval[retval_idx]) + size, buff, bytes);\n    size += bytes;\n  }\n\n  retval_idx = realloc(retval_idx, size + 1);\n  retval[size + retval_idx] = 0;\n  pclose(p);\n  return retval;\n}\n\n",
            "calle": [
                "fread",
                "memcpy",
                "pclose",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "char *",
                        "definition": [
                            "char *retval = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int retval_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "char [1024]",
                        "definition": [
                            "char buff[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t bytes"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_repl_1",
            "header": "",
            "params": [
                "char buffer[16384]",
                "lil_t lil"
            ],
            "definition": "void helper_repl_1(char buffer[16384], lil_t lil)\n{\n  lil_value_t result;\n  const char *strres;\n  unsigned int strres_idx = 0;\n  const char *err_msg;\n  size_t pos;\n  buffer[0] = 0;\n  printf(\"# \");\n  if (!fgets(buffer, 16384, stdin))\n  {\n    break;\n  }\n  result = lil_parse(lil, buffer, 0, 0);\n  strres_idx = lil_to_string(result);\n  if (strres[0 + strres_idx])\n  {\n    printf(\"%s\\n\", strres);\n  }\n  lil_free_value(result);\n  if (lil_error(lil, &err_msg, &pos))\n  {\n    printf(\"error at %i: %s\\n\", (int) pos, err_msg);\n  }\n}\n\n",
            "calle": [
                "fgets",
                "lil_error",
                "lil_free_value",
                "lil_parse",
                "lil_to_string",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char [16384]",
                        "definition": [
                            "char buffer[16384]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lil",
                        "type": "lil_t",
                        "definition": [
                            "lil_t lil"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "lil_value_t",
                        "definition": [
                            "lil_value_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strres",
                        "type": "const char *",
                        "definition": [
                            "const char *strres"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strres_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int strres_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_msg",
                        "type": "const char *",
                        "definition": [
                            "const char *err_msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef int64_t lilint_t"
    ]
}