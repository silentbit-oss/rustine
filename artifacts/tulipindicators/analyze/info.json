{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*ti_indicator_start_function)(const double *options)",
            "name": "ti_indicator_start_function",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*ti_indicator_function)(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "name": "ti_indicator_function",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct ti_stream\n{\n  int index;\n  int progress;\n}",
            "name": "ti_stream",
            "names": [
                "struct ti_stream",
                "typedef struct ti_stream ti_stream"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*ti_indicator_stream_new)(const double *options, ti_stream **stream)",
            "name": "ti_indicator_stream_new",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream **",
                        "definition": [
                            "ti_stream **stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*ti_indicator_stream_run)(ti_stream *stream, int size, const double * const *inputs, double * const *outputs)",
            "name": "ti_indicator_stream_run",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*ti_indicator_stream_free)(ti_stream *stream)",
            "name": "ti_indicator_stream_free",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ti_indicator_info\n{\n  const char *name;\n  const char *full_name;\n  ti_indicator_start_function start;\n  ti_indicator_function indicator;\n  ti_indicator_function indicator_ref;\n  int type;\n  int inputs;\n  int options;\n  int outputs;\n  const char *input_names[16];\n  const char *option_names[16];\n  const char *output_names[16];\n  ti_indicator_stream_new stream_new;\n  ti_indicator_stream_run stream_run;\n  ti_indicator_stream_free stream_free;\n} ti_indicator_info",
            "name": "ti_indicator_info",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "full_name",
                        "type": "const char *",
                        "definition": [
                            "const char *full_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "ti_indicator_start_function",
                        "definition": [
                            "ti_indicator_start_function start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "indicator",
                        "type": "ti_indicator_function",
                        "definition": [
                            "ti_indicator_function indicator"
                        ]
                    },
                    {
                        "path": null,
                        "name": "indicator_ref",
                        "type": "ti_indicator_function",
                        "definition": [
                            "ti_indicator_function indicator_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "int",
                        "definition": [
                            "int inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "int",
                        "definition": [
                            "int options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "int",
                        "definition": [
                            "int outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_names",
                        "type": "const char *[16]",
                        "definition": [
                            "const char *input_names[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_names",
                        "type": "const char *[16]",
                        "definition": [
                            "const char *option_names[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_names",
                        "type": "const char *[16]",
                        "definition": [
                            "const char *output_names[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_new",
                        "type": "ti_indicator_stream_new",
                        "definition": [
                            "ti_indicator_stream_new stream_new"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_run",
                        "type": "ti_indicator_stream_run",
                        "definition": [
                            "ti_indicator_stream_run stream_run"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_free",
                        "type": "ti_indicator_stream_free",
                        "definition": [
                            "ti_indicator_stream_free stream_free"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  int size;\n  int pushes;\n  int index;\n  double sum;\n  double vals[1];\n} ti_buffer",
            "name": "ti_buffer",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pushes",
                        "type": "int",
                        "definition": [
                            "int pushes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vals",
                        "type": "double [1]",
                        "definition": [
                            "double vals[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ti_stream_atr\n{\n  int index;\n  int progress;\n  int period;\n  double sum;\n  double last;\n  double last_close;\n} ti_stream_atr",
            "name": "ti_stream_atr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "double",
                        "definition": [
                            "double last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_close",
                        "type": "double",
                        "definition": [
                            "double last_close"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ti_stream_sma\n{\n  int index;\n  int progress;\n  int period;\n  double per;\n  double sum;\n  int buffer_idx;\n  double buffer[];\n} ti_stream_sma",
            "name": "ti_stream_sma",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "double",
                        "definition": [
                            "double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "int",
                        "definition": [
                            "int buffer_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "double []",
                        "definition": [
                            "double buffer[]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct tc_result\n{\n  int progress;\n  int space;\n  int count;\n  int pattern_count;\n  tc_hit *hits;\n}",
            "name": "tc_result",
            "names": [
                "typedef struct tc_result tc_result"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "space",
                        "type": "int",
                        "definition": [
                            "int space"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pattern_count",
                        "type": "int",
                        "definition": [
                            "int pattern_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hits",
                        "type": "tc_hit *",
                        "definition": [
                            "tc_hit *hits"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct tc_config\n{\n  int period;\n  TC_REAL body_none;\n  TC_REAL body_short;\n  TC_REAL body_long;\n  TC_REAL wick_none;\n  TC_REAL wick_long;\n  TC_REAL near;\n} tc_config",
            "name": "tc_config",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body_none",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL body_none"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body_short",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL body_short"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body_long",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL body_long"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wick_none",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL wick_none"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wick_long",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL wick_long"
                        ]
                    },
                    {
                        "path": null,
                        "name": "near",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL near"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct tc_hit\n{\n  int index;\n  tc_set patterns;\n} tc_hit",
            "name": "tc_hit",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*tc_candle_function)(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "name": "tc_candle_function",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct tc_candle_info\n{\n  const char *name;\n  const char *full_name;\n  tc_set pattern;\n  tc_candle_function candle;\n} tc_candle_info",
            "name": "tc_candle_info",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "full_name",
                        "type": "const char *",
                        "definition": [
                            "const char *full_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pattern",
                        "type": "tc_set",
                        "definition": [
                            "tc_set pattern"
                        ]
                    },
                    {
                        "path": null,
                        "name": "candle",
                        "type": "tc_candle_function",
                        "definition": [
                            "tc_candle_function candle"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*run_fun)(const ti_indicator_info *info, double *options, int goal)",
            "name": "run_fun",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goal",
                        "type": "int",
                        "definition": [
                            "int goal"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "ti_indicators",
            "type": "ti_indicator_info []",
            "definition": [
                "extern ti_indicator_info ti_indicators[]"
            ]
        },
        {
            "path": null,
            "name": "tc_candles",
            "type": "tc_candle_info []",
            "definition": [
                "extern tc_candle_info tc_candles[]"
            ]
        },
        {
            "path": null,
            "name": "out",
            "type": "double [3][4000]",
            "definition": [
                "double out[3][4000]"
            ]
        },
        {
            "path": null,
            "name": "datet",
            "type": "const char *[]",
            "definition": [
                "const char *datet[] = {\"2005-11-01\", \"2005-11-02\", \"2005-11-03\", \"2005-11-04\", \"2005-11-07\", \"2005-11-08\", \"2005-11-09\", \"2005-11-10\", \"2005-11-11\", \"2005-11-14\", \"2005-11-15\", \"2005-11-16\", \"2005-11-17\", \"2005-11-18\", \"2005-11-21\"}"
            ]
        },
        {
            "path": null,
            "name": "date",
            "type": "double []",
            "definition": [
                "double date[] = {51101, 51102, 51103, 51104, 51107, 51108, 51109, 51110, 51111, 51114, 51115, 51116, 51117, 51118, 51121}"
            ]
        },
        {
            "path": null,
            "name": "open",
            "type": "double []",
            "definition": [
                "double open[] = {81.85, 81.2, 81.55, 82.91, 83.1, 83.41, 82.71, 82.7, 84.2, 84.25, 84.03, 85.45, 86.18, 88, 87.6}"
            ]
        },
        {
            "path": null,
            "name": "high",
            "type": "double []",
            "definition": [
                "double high[] = {82.15, 81.89, 83.03, 83.3, 83.85, 83.9, 83.33, 84.3, 84.84, 85, 85.9, 86.58, 86.98, 88, 87.87}"
            ]
        },
        {
            "path": null,
            "name": "low",
            "type": "double []",
            "definition": [
                "double low[] = {81.29, 80.64, 81.31, 82.65, 83.07, 83.11, 82.49, 82.3, 84.15, 84.11, 84.03, 85.39, 85.76, 87.17, 87.01}"
            ]
        },
        {
            "path": null,
            "name": "close",
            "type": "double []",
            "definition": [
                "double close[] = {81.59, 81.06, 82.87, 83, 83.61, 83.15, 82.84, 83.99, 84.55, 84.36, 85.53, 86.54, 86.89, 87.77, 87.29}"
            ]
        },
        {
            "path": null,
            "name": "volume",
            "type": "double []",
            "definition": [
                "double volume[] = {5653100, 6447400, 7690900, 3831400, 4455100, 3798000, 3936200, 4732000, 4841300, 3915300, 6830800, 6694100, 5293600, 7985800, 4807900}"
            ]
        },
        {
            "path": null,
            "name": "alternative",
            "type": "double []",
            "definition": [
                "double alternative[] = {.2, .3, .4, .3, .5, .7, .75, .9, .9, 1, 1, .2, .1, -.1, -.5}"
            ]
        },
        {
            "path": null,
            "name": "optionsd_small",
            "type": "double []",
            "definition": [
                "double optionsd_small[] = {-20, -2, -1, 0, .7, 1, 2, 3, 4, 5, 6, 7, 8, 10, 20, 100, 999}"
            ]
        },
        {
            "path": null,
            "name": "optionsd_large",
            "type": "double []",
            "definition": [
                "double optionsd_large[] = {-5, 0, 1, 2, 5}"
            ]
        },
        {
            "path": null,
            "name": "dummy_in",
            "type": "double []",
            "definition": [
                "double dummy_in[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}"
            ]
        },
        {
            "path": null,
            "name": "dummy_in0",
            "type": "double []",
            "definition": [
                "double dummy_in0[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
            ]
        },
        {
            "path": null,
            "name": "dummy_ot",
            "type": "double []",
            "definition": [
                "double dummy_ot[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}"
            ]
        },
        {
            "path": null,
            "name": "input_size",
            "type": "const int",
            "definition": [
                "const int input_size = (sizeof(dummy_in)) / (sizeof(double))"
            ]
        },
        {
            "path": null,
            "name": "sizes",
            "type": "const int []",
            "definition": [
                "const int sizes[] = {0, 1, 2, 3, 4, 8, 20}"
            ]
        },
        {
            "path": null,
            "name": "sizes_count",
            "type": "const int",
            "definition": [
                "const int sizes_count = (sizeof(sizes)) / (sizeof(int))"
            ]
        },
        {
            "path": null,
            "name": "errors_cnt",
            "type": "int",
            "definition": [
                "int errors_cnt = 0"
            ]
        },
        {
            "path": null,
            "name": "ltests",
            "type": "int",
            "definition": [
                "static int ltests = 0"
            ]
        },
        {
            "path": null,
            "name": "lfails",
            "type": "int",
            "definition": [
                "static int lfails = 0"
            ]
        },
        {
            "path": null,
            "name": "tested_ind",
            "type": "int [104]",
            "definition": [
                "int tested_ind[104] = {0}"
            ]
        },
        {
            "path": null,
            "name": "tested_cnd",
            "type": "int [26]",
            "definition": [
                "int tested_cnd[26] = {0}"
            ]
        },
        {
            "path": null,
            "name": "bestof",
            "type": "int",
            "definition": [
                "int bestof = 1"
            ]
        },
        {
            "path": null,
            "name": "fails",
            "type": "int",
            "definition": [
                "int fails = 0"
            ]
        },
        {
            "path": null,
            "name": "in",
            "type": "double [5][4000]",
            "definition": [
                "double in[5][4000]"
            ]
        },
        {
            "path": null,
            "name": "outref",
            "type": "double [3][4000]",
            "definition": [
                "double outref[3][4000]"
            ]
        },
        {
            "path": null,
            "name": "outstream1",
            "type": "double [3][4000]",
            "definition": [
                "double outstream1[3][4000]"
            ]
        },
        {
            "path": null,
            "name": "outstreamall",
            "type": "double [3][4000]",
            "definition": [
                "double outstreamall[3][4000]"
            ]
        },
        {
            "path": null,
            "name": "outcnd",
            "type": "tc_result *",
            "definition": [
                "tc_result *outcnd = 0"
            ]
        },
        {
            "path": null,
            "name": "ind_offset",
            "type": "int",
            "definition": [
                "int ind_offset"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "ti_abs_start",
            "header": "int ti_abs_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_abs_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_abs",
            "header": "int ti_abs(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_abs(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = fabs(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_acos_start",
            "header": "int ti_acos_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_acos_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_acos",
            "header": "int ti_acos(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_acos(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = acos(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "acos"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ad_start",
            "header": "int ti_ad_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ad_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ad",
            "header": "int ti_ad(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ad(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const double *volume = inputs[3];\n  (void) options;\n  double *output = outputs[0];\n  double sum = 0;\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    const double hl = high[i] - low[i];\n    if (hl != 0.0)\n    {\n      sum += ((((close[i] - low[i]) - high[i]) + close[i]) / hl) * volume[i];\n    }\n    output[i] = sum;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "const double",
                        "definition": [
                            "const double hl = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_add_start",
            "header": "int ti_add_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_add_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_add",
            "header": "int ti_add(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_add(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  const double *in2 = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] + in2[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in2",
                        "type": "const double *",
                        "definition": [
                            "const double *in2 = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adosc_start",
            "header": "int ti_adosc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_adosc_start(const double *options)\n{\n  return ((int) options[1]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adosc",
            "header": "int ti_adosc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_adosc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const double *volume = inputs[3];\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  const int start = long_period - 1;\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (size <= ti_adosc_start(options))\n  {\n    return 0;\n  }\n  const double short_per = 2 / (((double) short_period) + 1);\n  const double long_per = 2 / (((double) long_period) + 1);\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  double sum = 0;\n  double short_ema = 0;\n  double long_ema = 0;\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_adosc_1(&output_idx, &sum, &short_ema, &long_ema, high, low, close, volume, start, short_per, long_per, output, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_adosc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_adosc_1",
                "ti_adosc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start = long_period - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per = 2 / (((double) short_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per = 2 / (((double) long_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adosc_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const short_ema_ref",
                "double * const long_ema_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const double * const volume",
                "const int start",
                "const double short_per",
                "const double long_per",
                "double * const output",
                "int i"
            ],
            "definition": "void helper_ti_adosc_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const short_ema_ref, double * const long_ema_ref, const double * const high, const double * const low, const double * const close, const double * const volume, const int start, const double short_per, const double long_per, double * const output, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double short_ema = *short_ema_ref;\n  double long_ema = *long_ema_ref;\n  const double hl = high[i] - low[i];\n  if (hl != 0.0)\n  {\n    sum += ((((close[i] - low[i]) - high[i]) + close[i]) / hl) * volume[i];\n  }\n  if (i == 0)\n  {\n    short_ema = sum;\n    long_ema = sum;\n  }\n  else\n  {\n    short_ema = ((sum - short_ema) * short_per) + short_ema;\n    long_ema = ((sum - long_ema) * long_per) + long_ema;\n  }\n  if (i >= start)\n  {\n    output[output_idx] = short_ema - long_ema;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *short_ema_ref = short_ema;\n  *long_ema_ref = long_ema;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double * const",
                        "definition": [
                            "const double * const volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = *short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = *long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "const double",
                        "definition": [
                            "const double hl = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adx_start",
            "header": "int ti_adx_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_adx_start(const double *options)\n{\n  return (((int) options[0]) - 1) * 2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adx",
            "header": "int ti_adx(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_adx(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 2)\n  {\n    return 1;\n  }\n  if (size <= ti_adx_start(options))\n  {\n    return 0;\n  }\n  const double per = (((double) period) - 1) / ((double) period);\n  const double invper = 1.0 / ((double) period);\n  double dmup = 0;\n  double dmdown = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_adx_2(&dmup, &dmdown, high, low, i);\n  }\n\n  double adx = 0.0;\n  {\n    helper_ti_adx_1(&adx, dmup, dmdown);\n  }\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_adx_3(&output_idx, &dmup, &dmdown, &adx, high, low, period, output, per, invper, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_adx_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_adx_1",
                "helper_ti_adx_2",
                "helper_ti_adx_3",
                "ti_adx_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = (((double) period) - 1) / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = 0.0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adx_1",
            "header": "",
            "params": [
                "double * const adx_ref",
                "double dmup",
                "double dmdown"
            ],
            "definition": "void helper_ti_adx_1(double * const adx_ref, double dmup, double dmdown)\n{\n  double adx = *adx_ref;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  adx += dx;\n  *adx_ref = adx;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adx_2",
            "header": "",
            "params": [
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_ti_adx_2(double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, int i)\n{\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    dp = high[i] - high[i - 1];\n    dm = low[i - 1] - low[i];\n    if (dp < 0)\n    {\n      dp = 0;\n    }\n    else\n      if (dp > dm)\n    {\n      dm = 0;\n    }\n    if (dm < 0)\n    {\n      dm = 0;\n    }\n    else\n      if (dm > dp)\n    {\n      dp = 0;\n    }\n  }\n  while (0);\n  dmup += dp;\n  dmdown += dm;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adx_3",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "double * const adx_ref",
                "const double * const high",
                "const double * const low",
                "const int period",
                "double * const output",
                "const double per",
                "const double invper",
                "int i"
            ],
            "definition": "void helper_ti_adx_3(unsigned int * const output_idx_ref, double * const dmup_ref, double * const dmdown_ref, double * const adx_ref, const double * const high, const double * const low, const int period, double * const output, const double per, const double invper, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double adx = *adx_ref;\n  double dp;\n  double dm;\n  do\n  {\n    helper_helper_ti_adx_3_1(&dp, &dm, high, low, i);\n  }\n  while (0);\n  dmup = (dmup * per) + dp;\n  dmdown = (dmdown * per) + dm;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  if ((i - period) < (period - 2))\n  {\n    adx += dx;\n  }\n  else\n    if ((i - period) == (period - 2))\n  {\n    adx += dx;\n    output[output_idx] = adx * invper;\n    output_idx += 1;\n  }\n  else\n  {\n    adx = (adx * per) + dx;\n    output[output_idx] = adx * invper;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n  *adx_ref = adx;\n}\n\n",
            "calle": [
                "fabs",
                "helper_helper_ti_adx_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_adx_3_1",
            "header": "",
            "params": [
                "double * const dp_ref",
                "double * const dm_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_helper_ti_adx_3_1(double * const dp_ref, double * const dm_ref, const double * const high, const double * const low, int i)\n{\n  double dp = *dp_ref;\n  double dm = *dm_ref;\n  dp = high[i] - high[i - 1];\n  dm = low[i - 1] - low[i];\n  if (dp < 0)\n  {\n    dp = 0;\n  }\n  else\n    if (dp > dm)\n  {\n    dm = 0;\n  }\n  if (dm < 0)\n  {\n    dm = 0;\n  }\n  else\n    if (dm > dp)\n  {\n    dp = 0;\n  }\n  *dp_ref = dp;\n  *dm_ref = dm;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm = *dm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adxr_start",
            "header": "int ti_adxr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_adxr_start(const double *options)\n{\n  return (((int) options[0]) - 1) * 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_adxr",
            "header": "int ti_adxr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_adxr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 2)\n  {\n    return 1;\n  }\n  if (size <= ti_adxr_start(options))\n  {\n    return 0;\n  }\n  const double per = (((double) period) - 1) / ((double) period);\n  const double invper = 1.0 / ((double) period);\n  double dmup = 0;\n  double dmdown = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_adxr_2(&dmup, &dmdown, high, low, i);\n  }\n\n  double adx = 0.0;\n  {\n    helper_ti_adxr_1(&adx, dmup, dmdown);\n  }\n  ti_buffer *adxr = ti_buffer_new(period - 1);\n  const int first_adxr = ti_adxr_start(options);\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_adxr_3(&output_idx, &dmup, &dmdown, &adx, high, low, period, output, per, invper, i, adxr, first_adxr);\n  }\n\n  ti_buffer_free(adxr);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_adxr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_adxr_1",
                "helper_ti_adxr_2",
                "helper_ti_adxr_3",
                "ti_adxr_start",
                "ti_buffer_free",
                "ti_buffer_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = (((double) period) - 1) / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = 0.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adxr",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *adxr = ti_buffer_new(period - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "first_adxr",
                        "type": "const int",
                        "definition": [
                            "const int first_adxr = ti_adxr_start(options)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adxr_1",
            "header": "",
            "params": [
                "double * const adx_ref",
                "double dmup",
                "double dmdown"
            ],
            "definition": "void helper_ti_adxr_1(double * const adx_ref, double dmup, double dmdown)\n{\n  double adx = *adx_ref;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  adx += dx;\n  *adx_ref = adx;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adxr_2",
            "header": "",
            "params": [
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_ti_adxr_2(double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, int i)\n{\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    dp = high[i] - high[i - 1];\n    dm = low[i - 1] - low[i];\n    if (dp < 0)\n    {\n      dp = 0;\n    }\n    else\n      if (dp > dm)\n    {\n      dm = 0;\n    }\n    if (dm < 0)\n    {\n      dm = 0;\n    }\n    else\n      if (dm > dp)\n    {\n      dp = 0;\n    }\n  }\n  while (0);\n  dmup += dp;\n  dmdown += dm;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_adxr_3",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "double * const adx_ref",
                "const double * const high",
                "const double * const low",
                "const int period",
                "double * const output",
                "const double per",
                "const double invper",
                "int i",
                "ti_buffer * const adxr",
                "const int first_adxr"
            ],
            "definition": "void helper_ti_adxr_3(unsigned int * const output_idx_ref, double * const dmup_ref, double * const dmdown_ref, double * const adx_ref, const double * const high, const double * const low, const int period, double * const output, const double per, const double invper, int i, ti_buffer * const adxr, const int first_adxr)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double adx = *adx_ref;\n  double dp;\n  double dm;\n  do\n  {\n    helper_helper_ti_adxr_3_2(&dp, &dm, high, low, i);\n  }\n  while (0);\n  dmup = (dmup * per) + dp;\n  dmdown = (dmdown * per) + dm;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  if ((i - period) < (period - 2))\n  {\n    adx += dx;\n  }\n  else\n    if ((i - period) == (period - 2))\n  {\n    helper_helper_ti_adxr_3_1(&adx, invper, adxr, dx);\n  }\n  else\n  {\n    helper_helper_ti_adxr_3_3(&output_idx, &adx, output, per, invper, i, adxr, first_adxr, dx);\n  }\n  *output_idx_ref = output_idx;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n  *adx_ref = adx;\n}\n\n",
            "calle": [
                "fabs",
                "helper_helper_ti_adxr_3_1",
                "helper_helper_ti_adxr_3_2",
                "helper_helper_ti_adxr_3_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adxr",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const adxr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "first_adxr",
                        "type": "const int",
                        "definition": [
                            "const int first_adxr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_adxr_3_1",
            "header": "",
            "params": [
                "double * const adx_ref",
                "const double invper",
                "ti_buffer * const adxr",
                "double dx"
            ],
            "definition": "void helper_helper_ti_adxr_3_1(double * const adx_ref, const double invper, ti_buffer * const adxr, double dx)\n{\n  double adx = *adx_ref;\n  adx += dx;\n  do\n  {\n    adxr->vals[adxr->index] = adx * invper;\n    adxr->index = adxr->index + 1;\n    if (adxr->index >= adxr->size)\n    {\n      adxr->index = 0;\n    }\n  }\n  while (0);\n  *adx_ref = adx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adxr",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const adxr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_adxr_3_2",
            "header": "",
            "params": [
                "double * const dp_ref",
                "double * const dm_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_helper_ti_adxr_3_2(double * const dp_ref, double * const dm_ref, const double * const high, const double * const low, int i)\n{\n  double dp = *dp_ref;\n  double dm = *dm_ref;\n  dp = high[i] - high[i - 1];\n  dm = low[i - 1] - low[i];\n  if (dp < 0)\n  {\n    dp = 0;\n  }\n  else\n    if (dp > dm)\n  {\n    dm = 0;\n  }\n  if (dm < 0)\n  {\n    dm = 0;\n  }\n  else\n    if (dm > dp)\n  {\n    dp = 0;\n  }\n  *dp_ref = dp;\n  *dm_ref = dm;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm = *dm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_adxr_3_3",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const adx_ref",
                "double * const output",
                "const double per",
                "const double invper",
                "int i",
                "ti_buffer * const adxr",
                "const int first_adxr",
                "double dx"
            ],
            "definition": "void helper_helper_ti_adxr_3_3(unsigned int * const output_idx_ref, double * const adx_ref, double * const output, const double per, const double invper, int i, ti_buffer * const adxr, const int first_adxr, double dx)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double adx = *adx_ref;\n  adx = (adx * per) + dx;\n  if (i >= first_adxr)\n  {\n    output[output_idx] = 0.5 * ((adx * invper) + adxr->vals[(((adxr->index + adxr->size) - 1) + 1) % adxr->size]);\n    output_idx += 1;\n  }\n  do\n  {\n    adxr->vals[adxr->index] = adx * invper;\n    adxr->index = adxr->index + 1;\n    if (adxr->index >= adxr->size)\n    {\n      adxr->index = 0;\n    }\n  }\n  while (0);\n  *output_idx_ref = output_idx;\n  *adx_ref = adx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const adx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invper",
                        "type": "const double",
                        "definition": [
                            "const double invper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adxr",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const adxr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "first_adxr",
                        "type": "const int",
                        "definition": [
                            "const int first_adxr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adx",
                        "type": "double",
                        "definition": [
                            "double adx = *adx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ao_start",
            "header": "int ti_ao_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ao_start(const double *options)\n{\n  (void) options;\n  return 33;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ao",
            "header": "int ti_ao(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ao(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = 34;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (size <= ti_ao_start(options))\n  {\n    return 0;\n  }\n  double sum34 = 0;\n  double sum5 = 0;\n  const double per34 = 1.0 / 34.0;\n  const double per5 = 1.0 / 5.0;\n  int i;\n  for (i = 0; i < 34; i += 1)\n  {\n    double hl = 0.5 * (high[i] + low[i]);\n    sum34 += hl;\n    if (i >= 29)\n    {\n      sum5 += hl;\n    }\n  }\n\n  output[output_idx] = (per5 * sum5) - (per34 * sum34);\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_ao_1(&output_idx, &sum34, &sum5, high, low, output, per34, per5, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_ao_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_ao_1",
                "ti_ao_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = 34"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum34",
                        "type": "double",
                        "definition": [
                            "double sum34 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum5",
                        "type": "double",
                        "definition": [
                            "double sum5 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per34",
                        "type": "const double",
                        "definition": [
                            "const double per34 = 1.0 / 34.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per5",
                        "type": "const double",
                        "definition": [
                            "const double per5 = 1.0 / 5.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "double",
                        "definition": [
                            "double hl = 0.5 * (high[i] + low[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_ao_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum34_ref",
                "double * const sum5_ref",
                "const double * const high",
                "const double * const low",
                "double * const output",
                "const double per34",
                "const double per5",
                "int i"
            ],
            "definition": "void helper_ti_ao_1(unsigned int * const output_idx_ref, double * const sum34_ref, double * const sum5_ref, const double * const high, const double * const low, double * const output, const double per34, const double per5, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum34 = *sum34_ref;\n  double sum5 = *sum5_ref;\n  double hl = 0.5 * (high[i] + low[i]);\n  sum34 += hl;\n  sum5 += hl;\n  sum34 -= 0.5 * (high[i - 34] + low[i - 34]);\n  sum5 -= 0.5 * (high[i - 5] + low[i - 5]);\n  output[output_idx] = (per5 * sum5) - (per34 * sum34);\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum34_ref = sum34;\n  *sum5_ref = sum5;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum34_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum34_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum5_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum5_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per34",
                        "type": "const double",
                        "definition": [
                            "const double per34"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per5",
                        "type": "const double",
                        "definition": [
                            "const double per5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum34",
                        "type": "double",
                        "definition": [
                            "double sum34 = *sum34_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum5",
                        "type": "double",
                        "definition": [
                            "double sum5 = *sum5_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "double",
                        "definition": [
                            "double hl = 0.5 * (high[i] + low[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_apo_start",
            "header": "int ti_apo_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_apo_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_apo",
            "header": "int ti_apo(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_apo(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *apo = outputs[0];\n  unsigned int apo_idx = 0;\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < 2)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (size <= ti_apo_start(options))\n  {\n    return 0;\n  }\n  double short_per = 2 / (((double) short_period) + 1);\n  double long_per = 2 / (((double) long_period) + 1);\n  double short_ema = input[0];\n  double long_ema = input[0];\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    short_ema = ((input[i] - short_ema) * short_per) + short_ema;\n    long_ema = ((input[i] - long_ema) * long_per) + long_ema;\n    const double out = short_ema - long_ema;\n    apo[apo_idx] = out;\n    apo_idx += 1;\n  }\n\n  assert(((&apo[apo_idx]) - outputs[0]) == (size - ti_apo_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_apo_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "apo",
                        "type": "double *",
                        "definition": [
                            "double *apo = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "apo_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int apo_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "double",
                        "definition": [
                            "double short_per = 2 / (((double) short_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "double",
                        "definition": [
                            "double long_per = 2 / (((double) long_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "const double",
                        "definition": [
                            "const double out = short_ema - long_ema"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_aroon_start",
            "header": "int ti_aroon_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_aroon_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_aroon",
            "header": "int ti_aroon(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_aroon(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  double *adown = outputs[0];\n  unsigned int adown_idx = 0;\n  double *aup = outputs[1];\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_aroon_start(options))\n  {\n    return 0;\n  }\n  const double scale = 100.0 / period;\n  int trail = 0;\n  int maxi = -1;\n  int mini = -1;\n  double max = high[0];\n  double min = low[0];\n  double bar;\n  int i;\n  int j;\n  for (i = period; i < size; i += 1, trail += 1)\n  {\n    helper_ti_aroon_1(&adown_idx, &maxi, &mini, &max, &min, &bar, &j, high, low, adown, aup, period, scale, trail, i);\n  }\n\n  assert(((&adown[adown_idx]) - outputs[0]) == (size - ti_aroon_start(options)));\n  assert((aup - outputs[1]) == (size - ti_aroon_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_aroon_1",
                "ti_aroon_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adown",
                        "type": "double *",
                        "definition": [
                            "double *adown = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adown_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int adown_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aup",
                        "type": "double *",
                        "definition": [
                            "double *aup = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 100.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = high[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_aroon_1",
            "header": "",
            "params": [
                "unsigned int * const adown_idx_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "double * const adown",
                "double * const aup",
                "const int period",
                "const double scale",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_aroon_1(unsigned int * const adown_idx_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const high, const double * const low, double * const adown, double * const aup, const int period, const double scale, int trail, int i)\n{\n  unsigned int adown_idx = *adown_idx_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  bar = high[i];\n  if (maxi < trail)\n  {\n    helper_helper_ti_aroon_1_1(&maxi, &max, &bar, &j, high, trail, i);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = low[i];\n  if (mini < trail)\n  {\n    helper_helper_ti_aroon_1_2(&mini, &min, &bar, &j, low, trail, i);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  adown[adown_idx] = (((double) period) - (i - mini)) * scale;\n  adown_idx += 1;\n  *(aup++) = (((double) period) - (i - maxi)) * scale;\n  *adown_idx_ref = adown_idx;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_ti_aroon_1_1",
                "helper_helper_ti_aroon_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adown_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const adown_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adown",
                        "type": "double * const",
                        "definition": [
                            "double * const adown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aup",
                        "type": "double * const",
                        "definition": [
                            "double * const aup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adown_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int adown_idx = *adown_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_aroon_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_aroon_1_1(int * const maxi_ref, double * const max_ref, double * const bar_ref, int * const j_ref, const double * const high, int trail, int i)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  maxi = trail;\n  max = high[maxi];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = high[j];\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_aroon_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const low",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_aroon_1_2(int * const mini_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const low, int trail, int i)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  mini = trail;\n  min = low[mini];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = low[j];\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_aroonosc_start",
            "header": "int ti_aroonosc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_aroonosc_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_aroonosc",
            "header": "int ti_aroonosc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_aroonosc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_aroon_start(options))\n  {\n    return 0;\n  }\n  const double scale = 100.0 / period;\n  int trail = 0;\n  int maxi = -1;\n  int mini = -1;\n  double max = high[0];\n  double min = low[0];\n  int i;\n  int j;\n  for (i = period; i < size; i += 1, trail += 1)\n  {\n    helper_ti_aroonosc_1(&output_idx, &maxi, &mini, &max, &min, &j, high, low, output, scale, trail, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_aroonosc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_aroonosc_1",
                "ti_aroon_start",
                "ti_aroonosc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 100.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = high[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_aroonosc_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "double * const output",
                "const double scale",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_aroonosc_1(unsigned int * const output_idx_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, int * const j_ref, const double * const high, const double * const low, double * const output, const double scale, int trail, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  int j = *j_ref;\n  double bar = high[i];\n  if (maxi < trail)\n  {\n    helper_helper_ti_aroonosc_1_1(&maxi, &max, &j, &bar, high, trail, i);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = low[i];\n  if (mini < trail)\n  {\n    helper_helper_ti_aroonosc_1_2(&mini, &min, &j, &bar, low, trail, i);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  output[output_idx] = (maxi - mini) * scale;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_ti_aroonosc_1_1",
                "helper_helper_ti_aroonosc_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = high[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_aroonosc_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "int * const j_ref",
                "double * const bar_ref",
                "const double * const high",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_aroonosc_1_1(int * const maxi_ref, double * const max_ref, int * const j_ref, double * const bar_ref, const double * const high, int trail, int i)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  int j = *j_ref;\n  double bar = *bar_ref;\n  maxi = trail;\n  max = high[maxi];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = high[j];\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *j_ref = j;\n  *bar_ref = bar;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_aroonosc_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "int * const j_ref",
                "double * const bar_ref",
                "const double * const low",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_aroonosc_1_2(int * const mini_ref, double * const min_ref, int * const j_ref, double * const bar_ref, const double * const low, int trail, int i)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  int j = *j_ref;\n  double bar = *bar_ref;\n  mini = trail;\n  min = low[mini];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = low[j];\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *j_ref = j;\n  *bar_ref = bar;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_asin_start",
            "header": "int ti_asin_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_asin_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_asin",
            "header": "int ti_asin(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_asin(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = asin(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "asin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atan_start",
            "header": "int ti_atan_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_atan_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atan",
            "header": "int ti_atan(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_atan(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = atan(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "atan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr_start",
            "header": "int ti_atr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_atr_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr",
            "header": "int ti_atr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_atr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_atr_start(options))\n  {\n    return 0;\n  }\n  const double per = 1.0 / ((double) period);\n  double sum = 0;\n  double truerange;\n  sum += high[0] - low[0];\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_atr_1(&sum, &truerange, high, low, close, i);\n  }\n\n  double val = sum / period;\n  output[output_idx] = val;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_atr_2(&output_idx, &truerange, &val, high, low, close, output, per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_atr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_atr_1",
                "helper_ti_atr_2",
                "ti_atr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = sum / period"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr_ref",
            "header": "int ti_atr_ref(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_atr_ref(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_atr_start(options))\n  {\n    return 0;\n  }\n  const int tr_start = ti_tr_start(options);\n  const int tr_size = size - tr_start;\n  double *truerange = malloc(((unsigned int) tr_size) * (sizeof(double)));\n  if (!truerange)\n  {\n    return 2;\n  }\n  double *tr_outputs[1] = {truerange};\n  const int tr_ret = ti_tr(size, inputs, 0, tr_outputs);\n  if (tr_ret != 0)\n  {\n    free(truerange);\n    return tr_ret;\n  }\n  const double *wilders_inputs[1] = {truerange};\n  const int wilders_ret = ti_wilders(tr_size, wilders_inputs, options, outputs);\n  free(truerange);\n  assert((size - ti_atr_start(options)) == (size - ti_wilders_start(options)));\n  return wilders_ret;\n}\n\n",
            "calle": [
                "assert",
                "free",
                "malloc",
                "ti_atr_start",
                "ti_tr",
                "ti_tr_start",
                "ti_wilders",
                "ti_wilders_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tr_start",
                        "type": "const int",
                        "definition": [
                            "const int tr_start = ti_tr_start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tr_size",
                        "type": "const int",
                        "definition": [
                            "const int tr_size = size - tr_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double *",
                        "definition": [
                            "double *truerange = malloc(((unsigned int) tr_size) * (sizeof(double)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tr_outputs",
                        "type": "double *[1]",
                        "definition": [
                            "double *tr_outputs[1] = {truerange}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tr_ret",
                        "type": "const int",
                        "definition": [
                            "const int tr_ret = ti_tr(size, inputs, 0, tr_outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wilders_inputs",
                        "type": "const double *[1]",
                        "definition": [
                            "const double *wilders_inputs[1] = {truerange}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wilders_ret",
                        "type": "const int",
                        "definition": [
                            "const int wilders_ret = ti_wilders(tr_size, wilders_inputs, options, outputs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr_stream_new",
            "header": "int ti_atr_stream_new(const double *options, ti_stream **stream)",
            "params": [
                "const double *options",
                "ti_stream **stream_in"
            ],
            "definition": "int ti_atr_stream_new(const double *options, ti_stream **stream_in)\n{\n  ti_stream_atr **stream = (ti_stream_atr **) stream_in;\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  *stream = malloc(sizeof(ti_stream_atr));\n  if (!(*stream))\n  {\n    return 2;\n  }\n  (*stream)->index = 13;\n  (*stream)->progress = -ti_atr_start(options);\n  (*stream)->period = period;\n  (*stream)->sum = 0.0;\n  return 0;\n}\n\n",
            "calle": [
                "malloc",
                "ti_atr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_in",
                        "type": "ti_stream **",
                        "definition": [
                            "ti_stream **stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_atr **",
                        "definition": [
                            "ti_stream_atr **stream = (ti_stream_atr **) stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr_stream_run",
            "header": "int ti_atr_stream_run(ti_stream *stream, int size, const double * const *inputs, double * const *outputs)",
            "params": [
                "ti_stream *stream_in",
                "int size",
                "const double * const *inputs",
                "double * const *outputs"
            ],
            "definition": "int ti_atr_stream_run(ti_stream *stream_in, int size, const double * const *inputs, double * const *outputs)\n{\n  ti_stream_atr *stream = (ti_stream_atr *) stream_in;\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double per = 1.0 / ((double) stream->period);\n  const int start = -(stream->period - 1);\n  int i = 0;\n  if (stream->progress < 1)\n  {\n    helper_ti_atr_stream_run_2(&output_idx, &i, size, stream, high, low, close, output, per, start);\n  }\n  if (stream->progress >= 1)\n  {\n    helper_ti_atr_stream_run_1(&output_idx, size, stream, high, low, close, output, per, i);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_ti_atr_stream_run_1",
                "helper_ti_atr_stream_run_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream_in",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_atr *",
                        "definition": [
                            "ti_stream_atr *stream = (ti_stream_atr *) stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) stream->period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start = -(stream->period - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_atr_stream_free",
            "header": "void ti_atr_stream_free(ti_stream *stream)",
            "params": [
                "ti_stream *stream"
            ],
            "definition": "void ti_atr_stream_free(ti_stream *stream)\n{\n  free(stream);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_atr_1",
            "header": "",
            "params": [
                "double * const sum_ref",
                "double * const truerange_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "int i"
            ],
            "definition": "void helper_ti_atr_1(double * const sum_ref, double * const truerange_ref, const double * const high, const double * const low, const double * const close, int i)\n{\n  double sum = *sum_ref;\n  double truerange = *truerange_ref;\n  do\n  {\n    const double l = low[i];\n    const double h = high[i];\n    const double c = close[i - 1];\n    const double ych = fabs(h - c);\n    const double ycl = fabs(l - c);\n    double v = h - l;\n    if (ych > v)\n    {\n      v = ych;\n    }\n    if (ycl > v)\n    {\n      v = ycl;\n    }\n    truerange = v;\n  }\n  while (0);\n  sum += truerange;\n  *sum_ref = sum;\n  *truerange_ref = truerange;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_atr_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const truerange_ref",
                "double * const val_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_atr_2(unsigned int * const output_idx_ref, double * const truerange_ref, double * const val_ref, const double * const high, const double * const low, const double * const close, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double truerange = *truerange_ref;\n  double val = *val_ref;\n  do\n  {\n    const double l = low[i];\n    const double h = high[i];\n    const double c = close[i - 1];\n    const double ych = fabs(h - c);\n    const double ycl = fabs(l - c);\n    double v = h - l;\n    if (ych > v)\n    {\n      v = ych;\n    }\n    if (ycl > v)\n    {\n      v = ycl;\n    }\n    truerange = v;\n  }\n  while (0);\n  val = ((truerange - val) * per) + val;\n  output[output_idx] = val;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *truerange_ref = truerange;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_atr_stream_run_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "ti_stream_atr * const stream",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_atr_stream_run_1(unsigned int * const output_idx_ref, int size, ti_stream_atr * const stream, const double * const high, const double * const low, const double * const close, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double val = stream->last;\n  while (i < size)\n  {\n    double truerange;\n    do\n    {\n      const double ych = fabs(high[i] - stream->last_close);\n      const double ycl = fabs(low[i] - stream->last_close);\n      double v = high[i] - low[i];\n      if (ych > v)\n      {\n        v = ych;\n      }\n      if (ycl > v)\n      {\n        v = ycl;\n      }\n      truerange = v;\n    }\n    while (0);\n    val = ((truerange - val) * per) + val;\n    output[output_idx] = val;\n    output_idx += 1;\n    stream->last_close = close[i];\n    stream->progress += 1;\n    ++i;\n  }\n\n  stream->last = val;\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_atr * const",
                        "definition": [
                            "ti_stream_atr * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = stream->last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(high[i] - stream->last_close)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(low[i] - stream->last_close)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_atr_stream_run_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const i_ref",
                "int size",
                "ti_stream_atr * const stream",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const output",
                "const double per",
                "const int start"
            ],
            "definition": "void helper_ti_atr_stream_run_2(unsigned int * const output_idx_ref, int * const i_ref, int size, ti_stream_atr * const stream, const double * const high, const double * const low, const double * const close, double * const output, const double per, const int start)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int i = *i_ref;\n  if (stream->progress == start)\n  {\n    stream->sum = high[0] - low[0];\n    stream->last_close = close[0];\n    stream->progress += 1;\n    i += 1;\n  }\n  while ((stream->progress <= 0) && (i < size))\n  {\n    helper_helper_ti_atr_stream_run_2_1(&i, stream, high, low, close);\n  }\n\n  if (stream->progress == 1)\n  {\n    const double val = stream->sum * per;\n    stream->last = val;\n    output[output_idx] = val;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_ti_atr_stream_run_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_atr * const",
                        "definition": [
                            "ti_stream_atr * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "const double",
                        "definition": [
                            "const double val = stream->sum * per"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_atr_stream_run_2_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "ti_stream_atr * const stream",
                "const double * const high",
                "const double * const low",
                "const double * const close"
            ],
            "definition": "void helper_helper_ti_atr_stream_run_2_1(int * const i_ref, ti_stream_atr * const stream, const double * const high, const double * const low, const double * const close)\n{\n  int i = *i_ref;\n  double truerange;\n  do\n  {\n    const double ych = fabs(high[i] - stream->last_close);\n    const double ycl = fabs(low[i] - stream->last_close);\n    double v = high[i] - low[i];\n    if (ych > v)\n    {\n      v = ych;\n    }\n    if (ycl > v)\n    {\n      v = ycl;\n    }\n    truerange = v;\n  }\n  while (0);\n  stream->sum += truerange;\n  stream->last_close = close[i];\n  stream->progress += 1;\n  i += 1;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_atr * const",
                        "definition": [
                            "ti_stream_atr * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(high[i] - stream->last_close)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(low[i] - stream->last_close)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_avgprice_start",
            "header": "int ti_avgprice_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_avgprice_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_avgprice",
            "header": "int ti_avgprice(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_avgprice(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *open = inputs[0];\n  const double *high = inputs[1];\n  const double *low = inputs[2];\n  const double *close = inputs[3];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = (((open[i] + high[i]) + low[i]) + close[i]) * 0.25;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const double *",
                        "definition": [
                            "const double *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_bbands_start",
            "header": "int ti_bbands_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_bbands_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_bbands",
            "header": "int ti_bbands(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_bbands(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *lower = outputs[0];\n  unsigned int lower_idx = 0;\n  double *middle = outputs[1];\n  unsigned int middle_idx = 0;\n  double *upper = outputs[2];\n  unsigned int upper_idx = 0;\n  const int period = (int) options[0];\n  const double stddev = options[1];\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_bbands_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double sum2 = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n    sum2 += input[i] * input[i];\n  }\n\n  double sd = sqrt((sum2 * scale) - ((sum * scale) * (sum * scale)));\n  middle[middle_idx] = sum * scale;\n  lower[lower_idx] = middle[middle_idx] - (stddev * sd);\n  lower_idx += 1;\n  upper[upper_idx] = middle[middle_idx] + (stddev * sd);\n  upper_idx += 1;\n  middle_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_bbands_1(&lower_idx, &middle_idx, &upper_idx, &sum, &sum2, &sd, input, lower, middle, upper, period, stddev, scale, i);\n  }\n\n  assert(((&lower[lower_idx]) - outputs[0]) == (size - ti_bbands_start(options)));\n  assert(((&middle[middle_idx]) - outputs[1]) == (size - ti_bbands_start(options)));\n  assert(((&upper[upper_idx]) - outputs[2]) == (size - ti_bbands_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_bbands_1",
                "sqrt",
                "ti_bbands_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "double *",
                        "definition": [
                            "double *lower = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lower_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "middle",
                        "type": "double *",
                        "definition": [
                            "double *middle = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "middle_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int middle_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "double *",
                        "definition": [
                            "double *upper = outputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int upper_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stddev",
                        "type": "const double",
                        "definition": [
                            "const double stddev = options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sd",
                        "type": "double",
                        "definition": [
                            "double sd = sqrt((sum2 * scale) - ((sum * scale) * (sum * scale)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_bbands_1",
            "header": "",
            "params": [
                "unsigned int * const lower_idx_ref",
                "unsigned int * const middle_idx_ref",
                "unsigned int * const upper_idx_ref",
                "double * const sum_ref",
                "double * const sum2_ref",
                "double * const sd_ref",
                "const double * const input",
                "double * const lower",
                "double * const middle",
                "double * const upper",
                "const int period",
                "const double stddev",
                "const double scale",
                "int i"
            ],
            "definition": "void helper_ti_bbands_1(unsigned int * const lower_idx_ref, unsigned int * const middle_idx_ref, unsigned int * const upper_idx_ref, double * const sum_ref, double * const sum2_ref, double * const sd_ref, const double * const input, double * const lower, double * const middle, double * const upper, const int period, const double stddev, const double scale, int i)\n{\n  unsigned int lower_idx = *lower_idx_ref;\n  unsigned int middle_idx = *middle_idx_ref;\n  unsigned int upper_idx = *upper_idx_ref;\n  double sum = *sum_ref;\n  double sum2 = *sum2_ref;\n  double sd = *sd_ref;\n  sum += input[i];\n  sum2 += input[i] * input[i];\n  sum -= input[i - period];\n  sum2 -= input[i - period] * input[i - period];\n  sd = sqrt((sum2 * scale) - ((sum * scale) * (sum * scale)));\n  middle[middle_idx] = sum * scale;\n  upper[upper_idx] = middle[middle_idx] + (stddev * sd);\n  upper_idx += 1;\n  lower[lower_idx] = middle[middle_idx] - (stddev * sd);\n  lower_idx += 1;\n  ++(&middle[middle_idx]);\n  *lower_idx_ref = lower_idx;\n  *middle_idx_ref = middle_idx;\n  *upper_idx_ref = upper_idx;\n  *sum_ref = sum;\n  *sum2_ref = sum2;\n  *sd_ref = sd;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lower_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const lower_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "middle_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const middle_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const upper_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sd_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sd_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "double * const",
                        "definition": [
                            "double * const lower"
                        ]
                    },
                    {
                        "path": null,
                        "name": "middle",
                        "type": "double * const",
                        "definition": [
                            "double * const middle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "double * const",
                        "definition": [
                            "double * const upper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stddev",
                        "type": "const double",
                        "definition": [
                            "const double stddev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lower_idx = *lower_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "middle_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int middle_idx = *middle_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int upper_idx = *upper_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sd",
                        "type": "double",
                        "definition": [
                            "double sd = *sd_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_bop_start",
            "header": "int ti_bop_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_bop_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_bop",
            "header": "int ti_bop(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_bop(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *open = inputs[0];\n  const double *high = inputs[1];\n  const double *low = inputs[2];\n  const double *close = inputs[3];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    double hl = high[i] - low[i];\n    if (hl <= 0.0)\n    {\n      output[i] = 0;\n    }\n    else\n    {\n      output[i] = (close[i] - open[i]) / hl;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const double *",
                        "definition": [
                            "const double *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "double",
                        "definition": [
                            "double hl = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cci_start",
            "header": "int ti_cci_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_cci_start(const double *options)\n{\n  const int period = (int) options[0];\n  return (period - 1) * 2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cci",
            "header": "int ti_cci(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_cci(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int period = (int) options[0];\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_cci_start(options))\n  {\n    return 0;\n  }\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  ti_buffer *sum = ti_buffer_new(period);\n  int i;\n  int j;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_cci_1(&output_idx, &j, high, low, close, period, scale, output, sum, i);\n  }\n\n  ti_buffer_free(sum);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_cci_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_cci_1",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_cci_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *sum = ti_buffer_new(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_cci_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const int period",
                "const double scale",
                "double * const output",
                "ti_buffer * const sum",
                "int i"
            ],
            "definition": "void helper_ti_cci_1(unsigned int * const output_idx_ref, int * const j_ref, const double * const high, const double * const low, const double * const close, const int period, const double scale, double * const output, ti_buffer * const sum, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int j = *j_ref;\n  const double today = ((high[i] + low[i]) + close[i]) * (1.0 / 3.0);\n  do\n  {\n    if (sum->pushes >= sum->size)\n    {\n      sum->sum -= sum->vals[sum->index];\n    }\n    sum->sum += today;\n    sum->vals[sum->index] = today;\n    sum->pushes += 1;\n    sum->index = sum->index + 1;\n    if (sum->index >= sum->size)\n    {\n      sum->index = 0;\n    }\n  }\n  while (0);\n  const double avg = sum->sum * scale;\n  if (i >= ((period * 2) - 2))\n  {\n    double acc = 0;\n    for (j = 0; j < period; j += 1)\n    {\n      acc += fabs(avg - sum->vals[j]);\n    }\n\n    double cci = acc * scale;\n    cci *= .015;\n    cci = (today - avg) / cci;\n    output[output_idx] = cci;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "today",
                        "type": "const double",
                        "definition": [
                            "const double today = ((high[i] + low[i]) + close[i]) * (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg",
                        "type": "const double",
                        "definition": [
                            "const double avg = sum->sum * scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "acc",
                        "type": "double",
                        "definition": [
                            "double acc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cci",
                        "type": "double",
                        "definition": [
                            "double cci = acc * scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ceil_start",
            "header": "int ti_ceil_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ceil_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ceil",
            "header": "int ti_ceil(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ceil(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = ceil(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "ceil"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cmo_start",
            "header": "int ti_cmo_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_cmo_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cmo",
            "header": "int ti_cmo(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_cmo(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_cmo_start(options))\n  {\n    return 0;\n  }\n  double up_sum = 0;\n  double down_sum = 0;\n  int i;\n  for (i = 1; i <= period; i += 1)\n  {\n    up_sum += (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n    down_sum += (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n  }\n\n  output[output_idx] = (100 * (up_sum - down_sum)) / (up_sum + down_sum);\n  output_idx += 1;\n  for (i = period + 1; i < size; i += 1)\n  {\n    up_sum -= (input[i - period] > input[(i - period) - 1]) ? (input[i - period] - input[(i - period) - 1]) : (0);\n    down_sum -= (input[i - period] < input[(i - period) - 1]) ? (input[(i - period) - 1] - input[i - period]) : (0);\n    up_sum += (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n    down_sum += (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n    output[output_idx] = (100 * (up_sum - down_sum)) / (up_sum + down_sum);\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_cmo_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_cmo_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up_sum",
                        "type": "double",
                        "definition": [
                            "double up_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down_sum",
                        "type": "double",
                        "definition": [
                            "double down_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cos_start",
            "header": "int ti_cos_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_cos_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cos",
            "header": "int ti_cos(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_cos(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = cos(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "cos"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cosh_start",
            "header": "int ti_cosh_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_cosh_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cosh",
            "header": "int ti_cosh(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_cosh(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = cosh(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "cosh"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_crossany_start",
            "header": "int ti_crossany_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_crossany_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_crossany",
            "header": "int ti_crossany(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_crossany(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *a = inputs[0];\n  const double *b = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    output[output_idx] = ((a[i] > b[i]) && (a[i - 1] <= b[i - 1])) || ((a[i] < b[i]) && (a[i - 1] >= b[i - 1]));\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double *",
                        "definition": [
                            "const double *a = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double *",
                        "definition": [
                            "const double *b = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_crossover_start",
            "header": "int ti_crossover_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_crossover_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_crossover",
            "header": "int ti_crossover(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_crossover(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *a = inputs[0];\n  const double *b = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    output[output_idx] = (a[i] > b[i]) && (a[i - 1] <= b[i - 1]);\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double *",
                        "definition": [
                            "const double *a = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double *",
                        "definition": [
                            "const double *b = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cvi_start",
            "header": "int ti_cvi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_cvi_start(const double *options)\n{\n  const int n = (int) options[0];\n  return (n * 2) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "const int",
                        "definition": [
                            "const int n = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_cvi",
            "header": "int ti_cvi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_cvi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_cvi_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (((double) period) + 1);\n  ti_buffer *lag = ti_buffer_new(period);\n  double val = high[0] - low[0];\n  int i;\n  for (i = 1; i < ((period * 2) - 1); i += 1)\n  {\n    helper_ti_cvi_1(&val, high, low, per, lag, i);\n  }\n\n  for (i = (period * 2) - 1; i < size; i += 1)\n  {\n    helper_ti_cvi_2(&output_idx, &val, high, low, output, per, lag, i);\n  }\n\n  ti_buffer_free(lag);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_cvi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_cvi_1",
                "helper_ti_cvi_2",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_cvi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lag",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *lag = ti_buffer_new(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = high[0] - low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_cvi_1",
            "header": "",
            "params": [
                "double * const val_ref",
                "const double * const high",
                "const double * const low",
                "const double per",
                "ti_buffer * const lag",
                "int i"
            ],
            "definition": "void helper_ti_cvi_1(double * const val_ref, const double * const high, const double * const low, const double per, ti_buffer * const lag, int i)\n{\n  double val = *val_ref;\n  val = (((high[i] - low[i]) - val) * per) + val;\n  do\n  {\n    lag->vals[lag->index] = val;\n    lag->index = lag->index + 1;\n    if (lag->index >= lag->size)\n    {\n      lag->index = 0;\n    }\n  }\n  while (0);\n  *val_ref = val;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lag",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const lag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_cvi_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const val_ref",
                "const double * const high",
                "const double * const low",
                "double * const output",
                "const double per",
                "ti_buffer * const lag",
                "int i"
            ],
            "definition": "void helper_ti_cvi_2(unsigned int * const output_idx_ref, double * const val_ref, const double * const high, const double * const low, double * const output, const double per, ti_buffer * const lag, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double val = *val_ref;\n  val = (((high[i] - low[i]) - val) * per) + val;\n  const double old = lag->vals[lag->index];\n  output[output_idx] = (100.0 * (val - old)) / old;\n  output_idx += 1;\n  do\n  {\n    lag->vals[lag->index] = val;\n    lag->index = lag->index + 1;\n    if (lag->index >= lag->size)\n      lag->index = 0;\n  }\n  while (0);\n  *output_idx_ref = output_idx;\n  *val_ref = val;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lag",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const lag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old",
                        "type": "const double",
                        "definition": [
                            "const double old = lag->vals[lag->index]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_decay_start",
            "header": "int ti_decay_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_decay_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_decay",
            "header": "int ti_decay(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_decay(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int period = (int) options[0];\n  const double scale = 1.0 / period;\n  output[output_idx] = input[0];\n  output_idx += 1;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    double d = output[(-1) + output_idx] - scale;\n    output[output_idx] = (input[i] > d) ? (input[i]) : (d);\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "double",
                        "definition": [
                            "double d = output[(-1) + output_idx] - scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dema_start",
            "header": "int ti_dema_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_dema_start(const double *options)\n{\n  const int period = (int) options[0];\n  return (period - 1) * 2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dema",
            "header": "int ti_dema(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_dema(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_dema_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (((double) period) + 1);\n  const double per1 = 1.0 - per;\n  double ema = input[0];\n  double ema2 = ema;\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    ema = (ema * per1) + (input[i] * per);\n    if (i == (period - 1))\n    {\n      ema2 = ema;\n    }\n    if (i >= (period - 1))\n    {\n      ema2 = (ema2 * per1) + (ema * per);\n      if (i >= ((period - 1) * 2))\n      {\n        output[output_idx] = (ema * 2) - ema2;\n        output_idx += 1;\n      }\n    }\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_dema_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_dema_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per1",
                        "type": "const double",
                        "definition": [
                            "const double per1 = 1.0 - per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema",
                        "type": "double",
                        "definition": [
                            "double ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = ema"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_di_start",
            "header": "int ti_di_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_di_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_di",
            "header": "int ti_di(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_di(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int period = (int) options[0];\n  double *plus_di = outputs[0];\n  unsigned int plus_di_idx = 0;\n  double *minus_di = outputs[1];\n  unsigned int minus_di_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_di_start(options))\n  {\n    return 0;\n  }\n  const double per = (((double) period) - 1) / ((double) period);\n  double atr = 0;\n  double dmup = 0;\n  double dmdown = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_di_1(&atr, &dmup, &dmdown, high, low, close, i);\n  }\n\n  plus_di[plus_di_idx] = (100.0 * dmup) / atr;\n  plus_di_idx += 1;\n  minus_di[minus_di_idx] = (100.0 * dmdown) / atr;\n  minus_di_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_di_2(&plus_di_idx, &minus_di_idx, &atr, &dmup, &dmdown, high, low, close, plus_di, minus_di, per, i);\n  }\n\n  assert(((&plus_di[plus_di_idx]) - outputs[0]) == (size - ti_di_start(options)));\n  assert(((&minus_di[minus_di_idx]) - outputs[1]) == (size - ti_di_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_di_1",
                "helper_ti_di_2",
                "ti_di_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_di",
                        "type": "double *",
                        "definition": [
                            "double *plus_di = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_di_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plus_di_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_di",
                        "type": "double *",
                        "definition": [
                            "double *minus_di = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_di_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int minus_di_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = (((double) period) - 1) / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "atr",
                        "type": "double",
                        "definition": [
                            "double atr = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_di_1",
            "header": "",
            "params": [
                "double * const atr_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "int i"
            ],
            "definition": "void helper_ti_di_1(double * const atr_ref, double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, const double * const close, int i)\n{\n  double atr = *atr_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double truerange;\n  do\n  {\n    helper_helper_ti_di_1_2(&truerange, high, low, close, i);\n  }\n  while (0);\n  atr += truerange;\n  double dp;\n  double dm;\n  do\n  {\n    helper_helper_ti_di_1_1(&dp, &dm, high, low, i);\n  }\n  while (0);\n  dmup += dp;\n  dmdown += dm;\n  *atr_ref = atr;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [
                "helper_helper_ti_di_1_1",
                "helper_helper_ti_di_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "atr_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const atr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "atr",
                        "type": "double",
                        "definition": [
                            "double atr = *atr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_di_2",
            "header": "",
            "params": [
                "unsigned int * const plus_di_idx_ref",
                "unsigned int * const minus_di_idx_ref",
                "double * const atr_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const plus_di",
                "double * const minus_di",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_di_2(unsigned int * const plus_di_idx_ref, unsigned int * const minus_di_idx_ref, double * const atr_ref, double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, const double * const close, double * const plus_di, double * const minus_di, const double per, int i)\n{\n  unsigned int plus_di_idx = *plus_di_idx_ref;\n  unsigned int minus_di_idx = *minus_di_idx_ref;\n  double atr = *atr_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double truerange;\n  do\n  {\n    helper_helper_ti_di_2_2(&truerange, high, low, close, i);\n  }\n  while (0);\n  atr = (atr * per) + truerange;\n  double dp;\n  double dm;\n  do\n  {\n    helper_helper_ti_di_2_1(&dp, &dm, high, low, i);\n  }\n  while (0);\n  dmup = (dmup * per) + dp;\n  dmdown = (dmdown * per) + dm;\n  plus_di[plus_di_idx] = (100.0 * dmup) / atr;\n  plus_di_idx += 1;\n  *((&minus_di[minus_di_idx])++) = (100.0 * dmdown) / atr;\n  *plus_di_idx_ref = plus_di_idx;\n  *minus_di_idx_ref = minus_di_idx;\n  *atr_ref = atr;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [
                "helper_helper_ti_di_2_1",
                "helper_helper_ti_di_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "plus_di_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const plus_di_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_di_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const minus_di_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "atr_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const atr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_di",
                        "type": "double * const",
                        "definition": [
                            "double * const plus_di"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_di",
                        "type": "double * const",
                        "definition": [
                            "double * const minus_di"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_di_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plus_di_idx = *plus_di_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_di_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int minus_di_idx = *minus_di_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "atr",
                        "type": "double",
                        "definition": [
                            "double atr = *atr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_di_1_1",
            "header": "",
            "params": [
                "double * const dp_ref",
                "double * const dm_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_helper_ti_di_1_1(double * const dp_ref, double * const dm_ref, const double * const high, const double * const low, int i)\n{\n  double dp = *dp_ref;\n  double dm = *dm_ref;\n  dp = high[i] - high[i - 1];\n  dm = low[i - 1] - low[i];\n  if (dp < 0)\n  {\n    dp = 0;\n  }\n  else\n    if (dp > dm)\n  {\n    dm = 0;\n  }\n  if (dm < 0)\n  {\n    dm = 0;\n  }\n  else\n    if (dm > dp)\n  {\n    dp = 0;\n  }\n  *dp_ref = dp;\n  *dm_ref = dm;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm = *dm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_di_1_2",
            "header": "",
            "params": [
                "double * const truerange_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "int i"
            ],
            "definition": "void helper_helper_ti_di_1_2(double * const truerange_ref, const double * const high, const double * const low, const double * const close, int i)\n{\n  double truerange = *truerange_ref;\n  const double l = low[i];\n  const double h = high[i];\n  const double c = close[i - 1];\n  const double ych = fabs(h - c);\n  const double ycl = fabs(l - c);\n  double v = h - l;\n  if (ych > v)\n  {\n    v = ych;\n  }\n  if (ycl > v)\n  {\n    v = ycl;\n  }\n  truerange = v;\n  *truerange_ref = truerange;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_di_2_1",
            "header": "",
            "params": [
                "double * const dp_ref",
                "double * const dm_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_helper_ti_di_2_1(double * const dp_ref, double * const dm_ref, const double * const high, const double * const low, int i)\n{\n  double dp = *dp_ref;\n  double dm = *dm_ref;\n  dp = high[i] - high[i - 1];\n  dm = low[i - 1] - low[i];\n  if (dp < 0)\n  {\n    dp = 0;\n  }\n  else\n    if (dp > dm)\n  {\n    dm = 0;\n  }\n  if (dm < 0)\n  {\n    dm = 0;\n  }\n  else\n    if (dm > dp)\n  {\n    dp = 0;\n  }\n  *dp_ref = dp;\n  *dm_ref = dm;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm = *dm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_di_2_2",
            "header": "",
            "params": [
                "double * const truerange_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "int i"
            ],
            "definition": "void helper_helper_ti_di_2_2(double * const truerange_ref, const double * const high, const double * const low, const double * const close, int i)\n{\n  double truerange = *truerange_ref;\n  const double l = low[i];\n  const double h = high[i];\n  const double c = close[i - 1];\n  const double ych = fabs(h - c);\n  const double ycl = fabs(l - c);\n  double v = h - l;\n  if (ych > v)\n  {\n    v = ych;\n  }\n  if (ycl > v)\n  {\n    v = ycl;\n  }\n  truerange = v;\n  *truerange_ref = truerange;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_div_start",
            "header": "int ti_div_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_div_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_div",
            "header": "int ti_div(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_div(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  const double *in2 = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] / in2[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in2",
                        "type": "const double *",
                        "definition": [
                            "const double *in2 = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dm_start",
            "header": "int ti_dm_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_dm_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dm",
            "header": "int ti_dm(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_dm(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *plus_dm = outputs[0];\n  unsigned int plus_dm_idx = 0;\n  double *minus_dm = outputs[1];\n  unsigned int minus_dm_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_dm_start(options))\n  {\n    return 0;\n  }\n  const double per = (((double) period) - 1) / ((double) period);\n  double dmup = 0;\n  double dmdown = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_dm_1(&dmup, &dmdown, high, low, i);\n  }\n\n  plus_dm[plus_dm_idx] = dmup;\n  plus_dm_idx += 1;\n  minus_dm[minus_dm_idx] = dmdown;\n  minus_dm_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_dm_2(&plus_dm_idx, &minus_dm_idx, &dmup, &dmdown, high, low, plus_dm, minus_dm, per, i);\n  }\n\n  assert(((&plus_dm[plus_dm_idx]) - outputs[0]) == (size - ti_dm_start(options)));\n  assert(((&minus_dm[minus_dm_idx]) - outputs[1]) == (size - ti_dm_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_dm_1",
                "helper_ti_dm_2",
                "ti_dm_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_dm",
                        "type": "double *",
                        "definition": [
                            "double *plus_dm = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_dm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plus_dm_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_dm",
                        "type": "double *",
                        "definition": [
                            "double *minus_dm = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_dm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int minus_dm_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = (((double) period) - 1) / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_dm_1",
            "header": "",
            "params": [
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_ti_dm_1(double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, int i)\n{\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    dp = high[i] - high[i - 1];\n    dm = low[i - 1] - low[i];\n    if (dp < 0)\n    {\n      dp = 0;\n    }\n    else\n      if (dp > dm)\n    {\n      dm = 0;\n    }\n    if (dm < 0)\n    {\n      dm = 0;\n    }\n    else\n      if (dm > dp)\n    {\n      dp = 0;\n    }\n  }\n  while (0);\n  dmup += dp;\n  dmdown += dm;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_dm_2",
            "header": "",
            "params": [
                "unsigned int * const plus_dm_idx_ref",
                "unsigned int * const minus_dm_idx_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "double * const plus_dm",
                "double * const minus_dm",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_dm_2(unsigned int * const plus_dm_idx_ref, unsigned int * const minus_dm_idx_ref, double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, double * const plus_dm, double * const minus_dm, const double per, int i)\n{\n  unsigned int plus_dm_idx = *plus_dm_idx_ref;\n  unsigned int minus_dm_idx = *minus_dm_idx_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    dp = high[i] - high[i - 1];\n    dm = low[i - 1] - low[i];\n    if (dp < 0)\n    {\n      dp = 0;\n    }\n    else\n      if (dp > dm)\n    {\n      dm = 0;\n    }\n    if (dm < 0)\n    {\n      dm = 0;\n    }\n    else\n      if (dm > dp)\n    {\n      dp = 0;\n    }\n  }\n  while (0);\n  dmup = (dmup * per) + dp;\n  dmdown = (dmdown * per) + dm;\n  plus_dm[plus_dm_idx] = dmup;\n  plus_dm_idx += 1;\n  *((&minus_dm[minus_dm_idx])++) = dmdown;\n  *plus_dm_idx_ref = plus_dm_idx;\n  *minus_dm_idx_ref = minus_dm_idx;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "plus_dm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const plus_dm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_dm_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const minus_dm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_dm",
                        "type": "double * const",
                        "definition": [
                            "double * const plus_dm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_dm",
                        "type": "double * const",
                        "definition": [
                            "double * const minus_dm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plus_dm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plus_dm_idx = *plus_dm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minus_dm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int minus_dm_idx = *minus_dm_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dpo_start",
            "header": "int ti_dpo_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_dpo_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dpo",
            "header": "int ti_dpo(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_dpo(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  const int back = (period / 2) + 1;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_dpo_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n  }\n\n  output[output_idx] = input[(period - 1) - back] - (sum * scale);\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    sum += input[i];\n    sum -= input[i - period];\n    output[output_idx] = input[i - back] - (sum * scale);\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_dpo_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_dpo_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "back",
                        "type": "const int",
                        "definition": [
                            "const int back = (period / 2) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dx_start",
            "header": "int ti_dx_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_dx_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_dx",
            "header": "int ti_dx(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_dx(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_dx_start(options))\n  {\n    return 0;\n  }\n  const double per = (((double) period) - 1) / ((double) period);\n  double dmup = 0;\n  double dmdown = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_dx_2(&dmup, &dmdown, high, low, i);\n  }\n\n  {\n    helper_ti_dx_1(&output_idx, output, dmup, dmdown);\n  }\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_dx_3(&output_idx, &dmup, &dmdown, high, low, output, per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_dx_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_dx_1",
                "helper_ti_dx_2",
                "helper_ti_dx_3",
                "ti_dx_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = (((double) period) - 1) / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_dx_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const output",
                "double dmup",
                "double dmdown"
            ],
            "definition": "void helper_ti_dx_1(unsigned int * const output_idx_ref, double * const output, double dmup, double dmdown)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  output[output_idx] = dx;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_dx_2",
            "header": "",
            "params": [
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_ti_dx_2(double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, int i)\n{\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    dp = high[i] - high[i - 1];\n    dm = low[i - 1] - low[i];\n    if (dp < 0)\n    {\n      dp = 0;\n    }\n    else\n      if (dp > dm)\n    {\n      dm = 0;\n    }\n    if (dm < 0)\n    {\n      dm = 0;\n    }\n    else\n      if (dm > dp)\n    {\n      dp = 0;\n    }\n  }\n  while (0);\n  dmup += dp;\n  dmdown += dm;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_dx_3",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const dmup_ref",
                "double * const dmdown_ref",
                "const double * const high",
                "const double * const low",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_dx_3(unsigned int * const output_idx_ref, double * const dmup_ref, double * const dmdown_ref, const double * const high, const double * const low, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double dmup = *dmup_ref;\n  double dmdown = *dmdown_ref;\n  double dp;\n  double dm;\n  do\n  {\n    helper_helper_ti_dx_3_1(&dp, &dm, high, low, i);\n  }\n  while (0);\n  dmup = (dmup * per) + dp;\n  dmdown = (dmdown * per) + dm;\n  double di_up = dmup;\n  double di_down = dmdown;\n  double dm_diff = fabs(di_up - di_down);\n  double dm_sum = di_up + di_down;\n  double dx = (dm_diff / dm_sum) * 100;\n  output[output_idx] = dx;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *dmup_ref = dmup;\n  *dmdown_ref = dmdown;\n}\n\n",
            "calle": [
                "fabs",
                "helper_helper_ti_dx_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmup",
                        "type": "double",
                        "definition": [
                            "double dmup = *dmup_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmdown",
                        "type": "double",
                        "definition": [
                            "double dmdown = *dmdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_up",
                        "type": "double",
                        "definition": [
                            "double di_up = dmup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "di_down",
                        "type": "double",
                        "definition": [
                            "double di_down = dmdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_diff",
                        "type": "double",
                        "definition": [
                            "double dm_diff = fabs(di_up - di_down)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_sum",
                        "type": "double",
                        "definition": [
                            "double dm_sum = di_up + di_down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx = (dm_diff / dm_sum) * 100"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_dx_3_1",
            "header": "",
            "params": [
                "double * const dp_ref",
                "double * const dm_ref",
                "const double * const high",
                "const double * const low",
                "int i"
            ],
            "definition": "void helper_helper_ti_dx_3_1(double * const dp_ref, double * const dm_ref, const double * const high, const double * const low, int i)\n{\n  double dp = *dp_ref;\n  double dm = *dm_ref;\n  dp = high[i] - high[i - 1];\n  dm = low[i - 1] - low[i];\n  if (dp < 0)\n  {\n    dp = 0;\n  }\n  else\n    if (dp > dm)\n  {\n    dm = 0;\n  }\n  if (dm < 0)\n  {\n    dm = 0;\n  }\n  else\n    if (dm > dp)\n  {\n    dp = 0;\n  }\n  *dp_ref = dp;\n  *dm_ref = dm;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "double",
                        "definition": [
                            "double dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "double",
                        "definition": [
                            "double dm = *dm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_edecay_start",
            "header": "int ti_edecay_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_edecay_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_edecay",
            "header": "int ti_edecay(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_edecay(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 - (1.0 / period);\n  output[output_idx] = input[0];\n  output_idx += 1;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    double d = output[(-1) + output_idx] * scale;\n    output[output_idx] = (input[i] > d) ? (input[i]) : (d);\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 - (1.0 / period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "double",
                        "definition": [
                            "double d = output[(-1) + output_idx] * scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ema_start",
            "header": "int ti_ema_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ema_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ema",
            "header": "int ti_ema(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ema(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_ema_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (((double) period) + 1);\n  double val = input[0];\n  output[output_idx] = val;\n  output_idx += 1;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    val = ((input[i] - val) * per) + val;\n    output[output_idx] = val;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_ema_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_ema_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_emv_start",
            "header": "int ti_emv_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_emv_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_emv",
            "header": "int ti_emv(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_emv(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *volume = inputs[2];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (size <= ti_emv_start(options))\n  {\n    return 0;\n  }\n  double last = (high[0] + low[0]) * 0.5;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    double hl = (high[i] + low[i]) * 0.5;\n    double br = (volume[i] / 10000.0) / (high[i] - low[i]);\n    output[output_idx] = (hl - last) / br;\n    output_idx += 1;\n    last = hl;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_emv_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_emv_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "double",
                        "definition": [
                            "double last = (high[0] + low[0]) * 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "double",
                        "definition": [
                            "double hl = (high[i] + low[i]) * 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "br",
                        "type": "double",
                        "definition": [
                            "double br = (volume[i] / 10000.0) / (high[i] - low[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_exp_start",
            "header": "int ti_exp_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_exp_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_exp",
            "header": "int ti_exp(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_exp(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = exp(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "exp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_fisher_start",
            "header": "int ti_fisher_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_fisher_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_fisher",
            "header": "int ti_fisher(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_fisher(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  double *fisher = outputs[0];\n  double *signal = outputs[1];\n  unsigned int signal_idx = 0;\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_fisher_start(options))\n  {\n    return 0;\n  }\n  int trail = 0;\n  int maxi = -1;\n  int mini = -1;\n  double max = 0.5 * (high[0] + low[0]);\n  double min = 0.5 * (high[0] + low[0]);\n  double val1 = 0.0;\n  double bar;\n  double fish = 0.0;\n  int i;\n  int j;\n  for (i = period - 1; i < size; i += 1, trail += 1)\n  {\n    helper_ti_fisher_1(&signal_idx, &maxi, &mini, &max, &min, &val1, &bar, &fish, &j, high, low, fisher, signal, trail, i);\n  }\n\n  assert((fisher - outputs[0]) == (size - ti_fisher_start(options)));\n  assert(((&signal[signal_idx]) - outputs[1]) == (size - ti_fisher_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_fisher_1",
                "ti_fisher_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fisher",
                        "type": "double *",
                        "definition": [
                            "double *fisher = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal",
                        "type": "double *",
                        "definition": [
                            "double *signal = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int signal_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = 0.5 * (high[0] + low[0])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = 0.5 * (high[0] + low[0])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val1",
                        "type": "double",
                        "definition": [
                            "double val1 = 0.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fish",
                        "type": "double",
                        "definition": [
                            "double fish = 0.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_fisher_1",
            "header": "",
            "params": [
                "unsigned int * const signal_idx_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "double * const val1_ref",
                "double * const bar_ref",
                "double * const fish_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "double * const fisher",
                "double * const signal",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_fisher_1(unsigned int * const signal_idx_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, double * const val1_ref, double * const bar_ref, double * const fish_ref, int * const j_ref, const double * const high, const double * const low, double * const fisher, double * const signal, int trail, int i)\n{\n  unsigned int signal_idx = *signal_idx_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  double val1 = *val1_ref;\n  double bar = *bar_ref;\n  double fish = *fish_ref;\n  int j = *j_ref;\n  bar = 0.5 * (high[i] + low[i]);\n  if (maxi < trail)\n  {\n    helper_helper_ti_fisher_1_1(&maxi, &max, &bar, &j, high, low, trail, i);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = 0.5 * (high[i] + low[i]);\n  if (mini < trail)\n  {\n    helper_helper_ti_fisher_1_2(&mini, &min, &bar, &j, high, low, trail, i);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  double mm = max - min;\n  if (mm == 0.0)\n  {\n    mm = 0.001;\n  }\n  val1 = ((0.33 * 2.0) * ((((0.5 * (high[i] + low[i])) - min) / mm) - 0.5)) + (0.67 * val1);\n  if (val1 > 0.99)\n  {\n    val1 = .999;\n  }\n  if (val1 < (-0.99))\n  {\n    val1 = -.999;\n  }\n  signal[signal_idx] = fish;\n  signal_idx += 1;\n  fish = (0.5 * log((1.0 + val1) / (1.0 - val1))) + (0.5 * fish);\n  *(fisher++) = fish;\n  *signal_idx_ref = signal_idx;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *val1_ref = val1;\n  *bar_ref = bar;\n  *fish_ref = fish;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_ti_fisher_1_1",
                "helper_helper_ti_fisher_1_2",
                "log"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "signal_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const signal_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fish_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const fish_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fisher",
                        "type": "double * const",
                        "definition": [
                            "double * const fisher"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal",
                        "type": "double * const",
                        "definition": [
                            "double * const signal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int signal_idx = *signal_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val1",
                        "type": "double",
                        "definition": [
                            "double val1 = *val1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fish",
                        "type": "double",
                        "definition": [
                            "double fish = *fish_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mm",
                        "type": "double",
                        "definition": [
                            "double mm = max - min"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_fisher_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_fisher_1_1(int * const maxi_ref, double * const max_ref, double * const bar_ref, int * const j_ref, const double * const high, const double * const low, int trail, int i)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  maxi = trail;\n  max = 0.5 * (high[maxi] + low[maxi]);\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = 0.5 * (high[j] + low[j]);\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_fisher_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_fisher_1_2(int * const mini_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const high, const double * const low, int trail, int i)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  mini = trail;\n  min = 0.5 * (high[mini] + low[mini]);\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = 0.5 * (high[j] + low[j]);\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_floor_start",
            "header": "int ti_floor_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_floor_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_floor",
            "header": "int ti_floor(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_floor(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = floor(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "floor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_fosc_start",
            "header": "int ti_fosc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_fosc_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_fosc",
            "header": "int ti_fosc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_fosc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_fosc_start(options))\n  {\n    return 0;\n  }\n  do\n  {\n    helper_ti_fosc_1(&output_idx, size, input, period, output);\n  }\n  while (0);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_fosc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_fosc_1",
                "ti_fosc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_fosc_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "const double * const input",
                "const int period",
                "double * const output"
            ],
            "definition": "void helper_ti_fosc_1(unsigned int * const output_idx_ref, int size, const double * const input, const int period, double * const output)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double x = 0;\n  double x2 = 0;\n  double y = 0;\n  double xy = 0;\n  const double p = 1.0 / period;\n  double tsf = 0;\n  ;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    x += i + 1;\n    x2 += (i + 1) * (i + 1);\n    xy += input[i] * (i + 1);\n    y += input[i];\n  }\n\n  x += period;\n  x2 += period * period;\n  const double bd = 1.0 / ((period * x2) - (x * x));\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_helper_ti_fosc_1_1(&output_idx, &y, &xy, &tsf, input, period, output, x, p, i, bd);\n  }\n\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "helper_helper_ti_fosc_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "double",
                        "definition": [
                            "double x2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsf",
                        "type": "double",
                        "definition": [
                            "double tsf = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd = 1.0 / ((period * x2) - (x * x))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_fosc_1_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const y_ref",
                "double * const xy_ref",
                "double * const tsf_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "double x",
                "const double p",
                "int i",
                "const double bd"
            ],
            "definition": "void helper_helper_ti_fosc_1_1(unsigned int * const output_idx_ref, double * const y_ref, double * const xy_ref, double * const tsf_ref, const double * const input, const int period, double * const output, double x, const double p, int i, const double bd)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double y = *y_ref;\n  double xy = *xy_ref;\n  double tsf = *tsf_ref;\n  xy += input[i] * period;\n  y += input[i];\n  const double b = ((period * xy) - (x * y)) * bd;\n  do\n  {\n    const double a = (y - (b * x)) * p;\n    if (i >= period)\n    {\n      output[output_idx] = (100 * (input[i] - tsf)) / input[i];\n      output_idx += 1;\n    }\n    tsf = a + (b * (period + 1));\n  }\n  while (0);\n  xy -= y;\n  y -= input[(i - period) + 1];\n  *output_idx_ref = output_idx;\n  *y_ref = y;\n  *xy_ref = xy;\n  *tsf_ref = tsf;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsf_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const tsf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = *xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsf",
                        "type": "double",
                        "definition": [
                            "double tsf = *tsf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double",
                        "definition": [
                            "const double b = ((period * xy) - (x * y)) * bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double",
                        "definition": [
                            "const double a = (y - (b * x)) * p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_hma_start",
            "header": "int ti_hma_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_hma_start(const double *options)\n{\n  const int period = (int) options[0];\n  const int periodsqrt = (int) sqrt(period);\n  return (period + periodsqrt) - 2;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "periodsqrt",
                        "type": "const int",
                        "definition": [
                            "const int periodsqrt = (int) sqrt(period)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_hma",
            "header": "int ti_hma(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_hma(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_hma_start(options))\n  {\n    return 0;\n  }\n  const int period2 = (int) (period / 2);\n  const int periodsqrt = (int) sqrt(period);\n  const double weights = (period * (period + 1)) / 2;\n  const double weights2 = (period2 * (period2 + 1)) / 2;\n  const double weightssqrt = (periodsqrt * (periodsqrt + 1)) / 2;\n  double sum = 0;\n  double weight_sum = 0;\n  double sum2 = 0;\n  double weight_sum2 = 0;\n  double sumsqrt = 0;\n  double weight_sumsqrt = 0;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    weight_sum += input[i] * (i + 1);\n    sum += input[i];\n    if (i >= (period - period2))\n    {\n      weight_sum2 += input[i] * ((i + 1) - (period - period2));\n      sum2 += input[i];\n    }\n  }\n\n  ti_buffer *buff = ti_buffer_new(periodsqrt);\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_ti_hma_1(&output_idx, &sum, &weight_sum, &sum2, &weight_sum2, &sumsqrt, &weight_sumsqrt, input, period, output, period2, periodsqrt, weights, weights2, weightssqrt, i, buff);\n  }\n\n  ti_buffer_free(buff);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_hma_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_hma_1",
                "sqrt",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_hma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period2",
                        "type": "const int",
                        "definition": [
                            "const int period2 = (int) (period / 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "periodsqrt",
                        "type": "const int",
                        "definition": [
                            "const int periodsqrt = (int) sqrt(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights",
                        "type": "const double",
                        "definition": [
                            "const double weights = (period * (period + 1)) / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights2",
                        "type": "const double",
                        "definition": [
                            "const double weights2 = (period2 * (period2 + 1)) / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weightssqrt",
                        "type": "const double",
                        "definition": [
                            "const double weightssqrt = (periodsqrt * (periodsqrt + 1)) / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum2",
                        "type": "double",
                        "definition": [
                            "double weight_sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sumsqrt",
                        "type": "double",
                        "definition": [
                            "double sumsqrt = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sumsqrt",
                        "type": "double",
                        "definition": [
                            "double weight_sumsqrt = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *buff = ti_buffer_new(periodsqrt)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_hma_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const weight_sum_ref",
                "double * const sum2_ref",
                "double * const weight_sum2_ref",
                "double * const sumsqrt_ref",
                "double * const weight_sumsqrt_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const int period2",
                "const int periodsqrt",
                "const double weights",
                "const double weights2",
                "const double weightssqrt",
                "int i",
                "ti_buffer * const buff"
            ],
            "definition": "void helper_ti_hma_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const weight_sum_ref, double * const sum2_ref, double * const weight_sum2_ref, double * const sumsqrt_ref, double * const weight_sumsqrt_ref, const double * const input, const int period, double * const output, const int period2, const int periodsqrt, const double weights, const double weights2, const double weightssqrt, int i, ti_buffer * const buff)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double weight_sum = *weight_sum_ref;\n  double sum2 = *sum2_ref;\n  double weight_sum2 = *weight_sum2_ref;\n  double sumsqrt = *sumsqrt_ref;\n  double weight_sumsqrt = *weight_sumsqrt_ref;\n  weight_sum += input[i] * period;\n  sum += input[i];\n  weight_sum2 += input[i] * period2;\n  sum2 += input[i];\n  const double wma = weight_sum / weights;\n  const double wma2 = weight_sum2 / weights2;\n  const double diff = (2 * wma2) - wma;\n  weight_sumsqrt += diff * periodsqrt;\n  sumsqrt += diff;\n  do\n  {\n    buff->vals[buff->index] = diff;\n    buff->index = buff->index + 1;\n    if (buff->index >= buff->size)\n    {\n      buff->index = 0;\n    }\n  }\n  while (0);\n  if (i >= ((period - 1) + (periodsqrt - 1)))\n  {\n    output[output_idx] = weight_sumsqrt / weightssqrt;\n    output_idx += 1;\n    weight_sumsqrt -= sumsqrt;\n    sumsqrt -= buff->vals[(((buff->index + buff->size) - 1) + 1) % buff->size];\n  }\n  else\n  {\n    weight_sumsqrt -= sumsqrt;\n  }\n  weight_sum -= sum;\n  sum -= input[(i - period) + 1];\n  weight_sum2 -= sum2;\n  sum2 -= input[(i - period2) + 1];\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *weight_sum_ref = weight_sum;\n  *sum2_ref = sum2;\n  *weight_sum2_ref = weight_sum2;\n  *sumsqrt_ref = sumsqrt;\n  *weight_sumsqrt_ref = weight_sumsqrt;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sumsqrt_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sumsqrt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sumsqrt_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_sumsqrt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period2",
                        "type": "const int",
                        "definition": [
                            "const int period2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "periodsqrt",
                        "type": "const int",
                        "definition": [
                            "const int periodsqrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights",
                        "type": "const double",
                        "definition": [
                            "const double weights"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights2",
                        "type": "const double",
                        "definition": [
                            "const double weights2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weightssqrt",
                        "type": "const double",
                        "definition": [
                            "const double weightssqrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const buff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = *weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum2",
                        "type": "double",
                        "definition": [
                            "double weight_sum2 = *weight_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sumsqrt",
                        "type": "double",
                        "definition": [
                            "double sumsqrt = *sumsqrt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sumsqrt",
                        "type": "double",
                        "definition": [
                            "double weight_sumsqrt = *weight_sumsqrt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wma",
                        "type": "const double",
                        "definition": [
                            "const double wma = weight_sum / weights"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wma2",
                        "type": "const double",
                        "definition": [
                            "const double wma2 = weight_sum2 / weights2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "const double",
                        "definition": [
                            "const double diff = (2 * wma2) - wma"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_kama_start",
            "header": "int ti_kama_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_kama_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_kama",
            "header": "int ti_kama(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_kama(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_kama_start(options))\n  {\n    return 0;\n  }\n  const double short_per = 2 / (2.0 + 1);\n  const double long_per = 2 / (30.0 + 1);\n  double sum = 0;\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    sum += fabs(input[i] - input[i - 1]);\n  }\n\n  double kama = input[period - 1];\n  output[output_idx] = kama;\n  output_idx += 1;\n  double er;\n  double sc;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_kama_1(&output_idx, &sum, &kama, &er, &sc, input, period, output, short_per, long_per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_kama_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "fabs",
                "helper_ti_kama_1",
                "ti_kama_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per = 2 / (2.0 + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per = 2 / (30.0 + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kama",
                        "type": "double",
                        "definition": [
                            "double kama = input[period - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "er",
                        "type": "double",
                        "definition": [
                            "double er"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sc",
                        "type": "double",
                        "definition": [
                            "double sc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_kama_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const kama_ref",
                "double * const er_ref",
                "double * const sc_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double short_per",
                "const double long_per",
                "int i"
            ],
            "definition": "void helper_ti_kama_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const kama_ref, double * const er_ref, double * const sc_ref, const double * const input, const int period, double * const output, const double short_per, const double long_per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double kama = *kama_ref;\n  double er = *er_ref;\n  double sc = *sc_ref;\n  sum += fabs(input[i] - input[i - 1]);\n  if (i > period)\n  {\n    sum -= fabs(input[i - period] - input[(i - period) - 1]);\n  }\n  if (sum != 0.0)\n  {\n    er = fabs(input[i] - input[i - period]) / sum;\n  }\n  else\n  {\n    er = 1.0;\n  }\n  sc = pow((er * (short_per - long_per)) + long_per, 2);\n  kama = kama + (sc * (input[i] - kama));\n  output[output_idx] = kama;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *kama_ref = kama;\n  *er_ref = er;\n  *sc_ref = sc;\n}\n\n",
            "calle": [
                "fabs",
                "pow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kama_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const kama_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "er_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const er_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sc_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kama",
                        "type": "double",
                        "definition": [
                            "double kama = *kama_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "er",
                        "type": "double",
                        "definition": [
                            "double er = *er_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sc",
                        "type": "double",
                        "definition": [
                            "double sc = *sc_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_kvo_start",
            "header": "int ti_kvo_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_kvo_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_kvo",
            "header": "int ti_kvo(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_kvo(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const double *volume = inputs[3];\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (size <= ti_kvo_start(options))\n  {\n    return 0;\n  }\n  const double short_per = 2 / (((double) short_period) + 1);\n  const double long_per = 2 / (((double) long_period) + 1);\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  double cm = 0;\n  double prev_hlc = (high[0] + low[0]) + close[0];\n  int trend = -1;\n  double short_ema = 0;\n  double long_ema = 0;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    helper_ti_kvo_1(&output_idx, &cm, &prev_hlc, &trend, &short_ema, &long_ema, high, low, close, volume, short_per, long_per, output, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_kvo_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_kvo_1",
                "ti_kvo_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per = 2 / (((double) short_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per = 2 / (((double) long_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cm",
                        "type": "double",
                        "definition": [
                            "double cm = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_hlc",
                        "type": "double",
                        "definition": [
                            "double prev_hlc = (high[0] + low[0]) + close[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trend",
                        "type": "int",
                        "definition": [
                            "int trend = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_kvo_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const cm_ref",
                "double * const prev_hlc_ref",
                "int * const trend_ref",
                "double * const short_ema_ref",
                "double * const long_ema_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const double * const volume",
                "const double short_per",
                "const double long_per",
                "double * const output",
                "int i"
            ],
            "definition": "void helper_ti_kvo_1(unsigned int * const output_idx_ref, double * const cm_ref, double * const prev_hlc_ref, int * const trend_ref, double * const short_ema_ref, double * const long_ema_ref, const double * const high, const double * const low, const double * const close, const double * const volume, const double short_per, const double long_per, double * const output, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double cm = *cm_ref;\n  double prev_hlc = *prev_hlc_ref;\n  int trend = *trend_ref;\n  double short_ema = *short_ema_ref;\n  double long_ema = *long_ema_ref;\n  const double hlc = (high[i] + low[i]) + close[i];\n  const double dm = high[i] - low[i];\n  if ((hlc > prev_hlc) && (trend != 1))\n  {\n    trend = 1;\n    cm = high[i - 1] - low[i - 1];\n  }\n  else\n    if ((hlc < prev_hlc) && (trend != 0))\n  {\n    trend = 0;\n    cm = high[i - 1] - low[i - 1];\n  }\n  cm += dm;\n  const double vf = ((volume[i] * fabs(((dm / cm) * 2) - 1)) * 100) * ((trend) ? (1.0) : (-1.0));\n  if (i == 1)\n  {\n    short_ema = vf;\n    long_ema = vf;\n  }\n  else\n  {\n    short_ema = ((vf - short_ema) * short_per) + short_ema;\n    long_ema = ((vf - long_ema) * long_per) + long_ema;\n  }\n  output[output_idx] = short_ema - long_ema;\n  output_idx += 1;\n  prev_hlc = hlc;\n  *output_idx_ref = output_idx;\n  *cm_ref = cm;\n  *prev_hlc_ref = prev_hlc;\n  *trend_ref = trend;\n  *short_ema_ref = short_ema;\n  *long_ema_ref = long_ema;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cm_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const cm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_hlc_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const prev_hlc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trend_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const trend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double * const",
                        "definition": [
                            "const double * const volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "const double",
                        "definition": [
                            "const double short_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "const double",
                        "definition": [
                            "const double long_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cm",
                        "type": "double",
                        "definition": [
                            "double cm = *cm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_hlc",
                        "type": "double",
                        "definition": [
                            "double prev_hlc = *prev_hlc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trend",
                        "type": "int",
                        "definition": [
                            "int trend = *trend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = *short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = *long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hlc",
                        "type": "const double",
                        "definition": [
                            "const double hlc = (high[i] + low[i]) + close[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dm",
                        "type": "const double",
                        "definition": [
                            "const double dm = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vf",
                        "type": "const double",
                        "definition": [
                            "const double vf = ((volume[i] * fabs(((dm / cm) * 2) - 1)) * 100) * ((trend) ? (1.0) : (-1.0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_lag_start",
            "header": "int ti_lag_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_lag_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_lag",
            "header": "int ti_lag(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_lag(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 0)\n  {\n    return 1;\n  }\n  if (size <= ti_lag_start(options))\n  {\n    return 0;\n  }\n  int i;\n  for (i = period; i < size; i += 1)\n  {\n    output[output_idx] = input[i - period];\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_lag_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_lag_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linreg_start",
            "header": "int ti_linreg_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_linreg_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linreg",
            "header": "int ti_linreg(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_linreg(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_linreg_start(options))\n  {\n    return 0;\n  }\n  do\n  {\n    helper_ti_linreg_1(&output_idx, size, input, period, output);\n  }\n  while (0);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_linreg_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_linreg_1",
                "ti_linreg_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_linreg_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "const double * const input",
                "const int period",
                "double * const output"
            ],
            "definition": "void helper_ti_linreg_1(unsigned int * const output_idx_ref, int size, const double * const input, const int period, double * const output)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double x = 0;\n  double x2 = 0;\n  double y = 0;\n  double xy = 0;\n  const double p = 1.0 / period;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    x += i + 1;\n    x2 += (i + 1) * (i + 1);\n    xy += input[i] * (i + 1);\n    y += input[i];\n  }\n\n  x += period;\n  x2 += period * period;\n  const double bd = 1.0 / ((period * x2) - (x * x));\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_helper_ti_linreg_1_1(&output_idx, &y, &xy, input, period, output, x, p, i, bd);\n  }\n\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "helper_helper_ti_linreg_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "double",
                        "definition": [
                            "double x2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd = 1.0 / ((period * x2) - (x * x))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_linreg_1_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const y_ref",
                "double * const xy_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "double x",
                "const double p",
                "int i",
                "const double bd"
            ],
            "definition": "void helper_helper_ti_linreg_1_1(unsigned int * const output_idx_ref, double * const y_ref, double * const xy_ref, const double * const input, const int period, double * const output, double x, const double p, int i, const double bd)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double y = *y_ref;\n  double xy = *xy_ref;\n  xy += input[i] * period;\n  y += input[i];\n  const double b = ((period * xy) - (x * y)) * bd;\n  do\n  {\n    const double a = (y - (b * x)) * p;\n    output[output_idx] = a + (b * period);\n    output_idx += 1;\n  }\n  while (0);\n  xy -= y;\n  y -= input[(i - period) + 1];\n  *output_idx_ref = output_idx;\n  *y_ref = y;\n  *xy_ref = xy;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = *xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double",
                        "definition": [
                            "const double b = ((period * xy) - (x * y)) * bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double",
                        "definition": [
                            "const double a = (y - (b * x)) * p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linregintercept_start",
            "header": "int ti_linregintercept_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_linregintercept_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linregintercept",
            "header": "int ti_linregintercept(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_linregintercept(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_linregintercept_start(options))\n  {\n    return 0;\n  }\n  do\n  {\n    helper_ti_linregintercept_1(&output_idx, size, input, period, output);\n  }\n  while (0);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_linregintercept_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_linregintercept_1",
                "ti_linregintercept_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_linregintercept_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "const double * const input",
                "const int period",
                "double * const output"
            ],
            "definition": "void helper_ti_linregintercept_1(unsigned int * const output_idx_ref, int size, const double * const input, const int period, double * const output)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double x = 0;\n  double x2 = 0;\n  double y = 0;\n  double xy = 0;\n  const double p = 1.0 / period;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    x += i + 1;\n    x2 += (i + 1) * (i + 1);\n    xy += input[i] * (i + 1);\n    y += input[i];\n  }\n\n  x += period;\n  x2 += period * period;\n  const double bd = 1.0 / ((period * x2) - (x * x));\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_helper_ti_linregintercept_1_1(&output_idx, &y, &xy, input, period, output, x, p, i, bd);\n  }\n\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "helper_helper_ti_linregintercept_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "double",
                        "definition": [
                            "double x2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd = 1.0 / ((period * x2) - (x * x))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_linregintercept_1_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const y_ref",
                "double * const xy_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "double x",
                "const double p",
                "int i",
                "const double bd"
            ],
            "definition": "void helper_helper_ti_linregintercept_1_1(unsigned int * const output_idx_ref, double * const y_ref, double * const xy_ref, const double * const input, const int period, double * const output, double x, const double p, int i, const double bd)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double y = *y_ref;\n  double xy = *xy_ref;\n  xy += input[i] * period;\n  y += input[i];\n  const double b = ((period * xy) - (x * y)) * bd;\n  do\n  {\n    const double a = (y - (b * x)) * p;\n    output[output_idx] = a + (b * 1);\n    output_idx += 1;\n  }\n  while (0);\n  xy -= y;\n  y -= input[(i - period) + 1];\n  *output_idx_ref = output_idx;\n  *y_ref = y;\n  *xy_ref = xy;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = *xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double",
                        "definition": [
                            "const double b = ((period * xy) - (x * y)) * bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double",
                        "definition": [
                            "const double a = (y - (b * x)) * p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linregslope_start",
            "header": "int ti_linregslope_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_linregslope_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_linregslope",
            "header": "int ti_linregslope(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_linregslope(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_linregslope_start(options))\n  {\n    return 0;\n  }\n  do\n  {\n    helper_ti_linregslope_1(&output_idx, size, input, period, output);\n  }\n  while (0);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_linregslope_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_linregslope_1",
                "ti_linregslope_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_linregslope_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "const double * const input",
                "const int period",
                "double * const output"
            ],
            "definition": "void helper_ti_linregslope_1(unsigned int * const output_idx_ref, int size, const double * const input, const int period, double * const output)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double x = 0;\n  double x2 = 0;\n  double y = 0;\n  double xy = 0;\n  do\n  {\n  }\n  while (0);\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    x += i + 1;\n    x2 += (i + 1) * (i + 1);\n    xy += input[i] * (i + 1);\n    y += input[i];\n  }\n\n  x += period;\n  x2 += period * period;\n  const double bd = 1.0 / ((period * x2) - (x * x));\n  for (i = period - 1; i < size; i += 1)\n  {\n    xy += input[i] * period;\n    y += input[i];\n    const double b = ((period * xy) - (x * y)) * bd;\n    do\n    {\n      output[output_idx] = b;\n      output_idx += 1;\n    }\n    while (0);\n    xy -= y;\n    y -= input[(i - period) + 1];\n  }\n\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "double",
                        "definition": [
                            "double x2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd = 1.0 / ((period * x2) - (x * x))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double",
                        "definition": [
                            "const double b = ((period * xy) - (x * y)) * bd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ln_start",
            "header": "int ti_ln_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ln_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ln",
            "header": "int ti_ln(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ln(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = log(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "log"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_log10_start",
            "header": "int ti_log10_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_log10_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_log10",
            "header": "int ti_log10(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_log10(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = log10(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "log10"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_macd_start",
            "header": "int ti_macd_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_macd_start(const double *options)\n{\n  const int long_period = (int) options[1];\n  return long_period - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_macd",
            "header": "int ti_macd(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_macd(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *macd = outputs[0];\n  unsigned int macd_idx = 0;\n  double *signal = outputs[1];\n  unsigned int signal_idx = 0;\n  double *hist = outputs[2];\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  const int signal_period = (int) options[2];\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < 2)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (signal_period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_macd_start(options))\n  {\n    return 0;\n  }\n  double short_per = 2 / (((double) short_period) + 1);\n  double long_per = 2 / (((double) long_period) + 1);\n  double signal_per = 2 / (((double) signal_period) + 1);\n  if ((short_period == 12) && (long_period == 26))\n  {\n    short_per = 0.15;\n    long_per = 0.075;\n  }\n  double short_ema = input[0];\n  double long_ema = input[0];\n  double signal_ema = 0;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    helper_ti_macd_1(&macd_idx, &signal_idx, &short_ema, &long_ema, &signal_ema, input, macd, signal, hist, long_period, short_per, long_per, signal_per, i);\n  }\n\n  assert(((&macd[macd_idx]) - outputs[0]) == (size - ti_macd_start(options)));\n  assert(((&signal[signal_idx]) - outputs[1]) == (size - ti_macd_start(options)));\n  assert((hist - outputs[2]) == (size - ti_macd_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_macd_1",
                "ti_macd_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "macd",
                        "type": "double *",
                        "definition": [
                            "double *macd = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "macd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int macd_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal",
                        "type": "double *",
                        "definition": [
                            "double *signal = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int signal_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "double *",
                        "definition": [
                            "double *hist = outputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_period",
                        "type": "const int",
                        "definition": [
                            "const int signal_period = (int) options[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "double",
                        "definition": [
                            "double short_per = 2 / (((double) short_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "double",
                        "definition": [
                            "double long_per = 2 / (((double) long_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_per",
                        "type": "double",
                        "definition": [
                            "double signal_per = 2 / (((double) signal_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_ema",
                        "type": "double",
                        "definition": [
                            "double signal_ema = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_macd_1",
            "header": "",
            "params": [
                "unsigned int * const macd_idx_ref",
                "unsigned int * const signal_idx_ref",
                "double * const short_ema_ref",
                "double * const long_ema_ref",
                "double * const signal_ema_ref",
                "const double * const input",
                "double * const macd",
                "double * const signal",
                "double * const hist",
                "const int long_period",
                "double short_per",
                "double long_per",
                "double signal_per",
                "int i"
            ],
            "definition": "void helper_ti_macd_1(unsigned int * const macd_idx_ref, unsigned int * const signal_idx_ref, double * const short_ema_ref, double * const long_ema_ref, double * const signal_ema_ref, const double * const input, double * const macd, double * const signal, double * const hist, const int long_period, double short_per, double long_per, double signal_per, int i)\n{\n  unsigned int macd_idx = *macd_idx_ref;\n  unsigned int signal_idx = *signal_idx_ref;\n  double short_ema = *short_ema_ref;\n  double long_ema = *long_ema_ref;\n  double signal_ema = *signal_ema_ref;\n  short_ema = ((input[i] - short_ema) * short_per) + short_ema;\n  long_ema = ((input[i] - long_ema) * long_per) + long_ema;\n  const double out = short_ema - long_ema;\n  if (i == (long_period - 1))\n  {\n    signal_ema = out;\n  }\n  if (i >= (long_period - 1))\n  {\n    signal_ema = ((out - signal_ema) * signal_per) + signal_ema;\n    macd[macd_idx] = out;\n    macd_idx += 1;\n    signal[signal_idx] = signal_ema;\n    signal_idx += 1;\n    *(hist++) = out - signal_ema;\n  }\n  *macd_idx_ref = macd_idx;\n  *signal_idx_ref = signal_idx;\n  *short_ema_ref = short_ema;\n  *long_ema_ref = long_ema;\n  *signal_ema_ref = signal_ema;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "macd_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const macd_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const signal_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const signal_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "macd",
                        "type": "double * const",
                        "definition": [
                            "double * const macd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal",
                        "type": "double * const",
                        "definition": [
                            "double * const signal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "double * const",
                        "definition": [
                            "double * const hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "double",
                        "definition": [
                            "double short_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "double",
                        "definition": [
                            "double long_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_per",
                        "type": "double",
                        "definition": [
                            "double signal_per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "macd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int macd_idx = *macd_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int signal_idx = *signal_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = *short_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = *long_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signal_ema",
                        "type": "double",
                        "definition": [
                            "double signal_ema = *signal_ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "const double",
                        "definition": [
                            "const double out = short_ema - long_ema"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_marketfi_start",
            "header": "int ti_marketfi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_marketfi_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_marketfi",
            "header": "int ti_marketfi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_marketfi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *volume = inputs[2];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (size <= ti_marketfi_start(options))\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[output_idx] = (high[i] - low[i]) / volume[i];\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_marketfi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_marketfi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mass_start",
            "header": "int ti_mass_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_mass_start(const double *options)\n{\n  int sum_p = ((int) options[0]) - 1;\n  return 16 + sum_p;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_p",
                        "type": "int",
                        "definition": [
                            "int sum_p = ((int) options[0]) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mass",
            "header": "int ti_mass(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_mass(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_mass_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (9.0 + 1);\n  const double per1 = 1.0 - per;\n  double ema = high[0] - low[0];\n  double ema2 = ema;\n  ti_buffer *sum = ti_buffer_new(period);\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_mass_1(&output_idx, &ema, &ema2, high, low, period, output, per, per1, sum, i);\n  }\n\n  ti_buffer_free(sum);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_mass_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_mass_1",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_mass_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (9.0 + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per1",
                        "type": "const double",
                        "definition": [
                            "const double per1 = 1.0 - per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema",
                        "type": "double",
                        "definition": [
                            "double ema = high[0] - low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = ema"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *sum = ti_buffer_new(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_mass_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const ema_ref",
                "double * const ema2_ref",
                "const double * const high",
                "const double * const low",
                "const int period",
                "double * const output",
                "const double per",
                "const double per1",
                "ti_buffer * const sum",
                "int i"
            ],
            "definition": "void helper_ti_mass_1(unsigned int * const output_idx_ref, double * const ema_ref, double * const ema2_ref, const double * const high, const double * const low, const int period, double * const output, const double per, const double per1, ti_buffer * const sum, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double ema = *ema_ref;\n  double ema2 = *ema2_ref;\n  double hl = high[i] - low[i];\n  ema = (ema * per1) + (hl * per);\n  if (i == 8)\n  {\n    ema2 = ema;\n  }\n  if (i >= 8)\n  {\n    ema2 = (ema2 * per1) + (ema * per);\n    if (i >= 16)\n    {\n      do\n      {\n        if (sum->pushes >= sum->size)\n        {\n          sum->sum -= sum->vals[sum->index];\n        }\n        sum->sum += ema / ema2;\n        sum->vals[sum->index] = ema / ema2;\n        sum->pushes += 1;\n        sum->index = sum->index + 1;\n        if (sum->index >= sum->size)\n        {\n          sum->index = 0;\n        }\n      }\n      while (0);\n      if (i >= ((16 + period) - 1))\n      {\n        output[output_idx] = sum->sum;\n        output_idx += 1;\n      }\n    }\n  }\n  *output_idx_ref = output_idx;\n  *ema_ref = ema;\n  *ema2_ref = ema2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per1",
                        "type": "const double",
                        "definition": [
                            "const double per1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema",
                        "type": "double",
                        "definition": [
                            "double ema = *ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = *ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hl",
                        "type": "double",
                        "definition": [
                            "double hl = high[i] - low[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_max_start",
            "header": "int ti_max_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_max_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_max",
            "header": "int ti_max(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_max(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_max_start(options))\n  {\n    return 0;\n  }\n  int trail = 0;\n  int maxi = -1;\n  double max = input[0];\n  int i;\n  int j;\n  for (i = period - 1; i < size; i += 1, trail += 1)\n  {\n    helper_ti_max_1(&output_idx, &maxi, &max, &j, input, output, trail, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_max_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_max_1",
                "ti_max_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_max_ref",
            "header": "int ti_max_ref(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_max_ref(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_max_start(options))\n  {\n    return 0;\n  }\n  for (int i = period - 1; i < size; i += 1)\n  {\n    double max = input[(i - period) + 1];\n    for (int j = (i - period) + 2; j <= i; j += 1)\n    {\n      max = (max > input[j]) ? (max) : (input[j]);\n    }\n\n    output[output_idx] = max;\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "ti_max_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = period - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = input[(i - period) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = (i - period) + 2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_max_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const maxi_ref",
                "double * const max_ref",
                "int * const j_ref",
                "const double * const input",
                "double * const output",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_max_1(unsigned int * const output_idx_ref, int * const maxi_ref, double * const max_ref, int * const j_ref, const double * const input, double * const output, int trail, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  int j = *j_ref;\n  double bar = input[i];\n  if (maxi < trail)\n  {\n    maxi = trail;\n    max = input[maxi];\n    j = trail;\n    while ((++j) <= i)\n    {\n      bar = input[j];\n      if (bar >= max)\n      {\n        max = bar;\n        maxi = j;\n      }\n    }\n\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  output[output_idx] = max;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = input[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_md_start",
            "header": "int ti_md_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_md_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_md",
            "header": "int ti_md(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_md(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_md_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  int i;\n  int j;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_md_1(&output_idx, &sum, &j, input, period, output, scale, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_md_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_md_1",
                "ti_md_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_md_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "int * const j_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double scale",
                "int i"
            ],
            "definition": "void helper_ti_md_1(unsigned int * const output_idx_ref, double * const sum_ref, int * const j_ref, const double * const input, const int period, double * const output, const double scale, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  int j = *j_ref;\n  const double today = input[i];\n  sum += today;\n  if (i >= period)\n  {\n    sum -= input[i - period];\n  }\n  const double avg = sum * scale;\n  if (i >= (period - 1))\n  {\n    double acc = 0;\n    for (j = 0; j < period; j += 1)\n    {\n      acc += fabs(avg - input[i - j]);\n    }\n\n    output[output_idx] = acc * scale;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "today",
                        "type": "const double",
                        "definition": [
                            "const double today = input[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg",
                        "type": "const double",
                        "definition": [
                            "const double avg = sum * scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "acc",
                        "type": "double",
                        "definition": [
                            "double acc = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_medprice_start",
            "header": "int ti_medprice_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_medprice_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_medprice",
            "header": "int ti_medprice(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_medprice(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = (high[i] + low[i]) * 0.5;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mfi_start",
            "header": "int ti_mfi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_mfi_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mfi",
            "header": "int ti_mfi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_mfi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const double *volume = inputs[3];\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_mfi_start(options))\n  {\n    return 0;\n  }\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  double ytyp = ((high[0] + low[0]) + close[0]) * (1.0 / 3.0);\n  int i;\n  ti_buffer *up = ti_buffer_new(period);\n  ti_buffer *down = ti_buffer_new(period);\n  for (i = 1; i < size; i += 1)\n  {\n    helper_ti_mfi_1(&output_idx, &ytyp, high, low, close, volume, period, output, i, up, down);\n  }\n\n  ti_buffer_free(up);\n  ti_buffer_free(down);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_mfi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_mfi_1",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_mfi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ytyp",
                        "type": "double",
                        "definition": [
                            "double ytyp = ((high[0] + low[0]) + close[0]) * (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *up = ti_buffer_new(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *down = ti_buffer_new(period)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_mfi_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const ytyp_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const double * const volume",
                "const int period",
                "double * const output",
                "int i",
                "ti_buffer * const up",
                "ti_buffer * const down"
            ],
            "definition": "void helper_ti_mfi_1(unsigned int * const output_idx_ref, double * const ytyp_ref, const double * const high, const double * const low, const double * const close, const double * const volume, const int period, double * const output, int i, ti_buffer * const up, ti_buffer * const down)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double ytyp = *ytyp_ref;\n  const double typ = ((high[i] + low[i]) + close[i]) * (1.0 / 3.0);\n  const double bar = typ * volume[i];\n  if (typ > ytyp)\n  {\n    helper_helper_ti_mfi_1_1(up, down, bar);\n  }\n  else\n    if (typ < ytyp)\n  {\n    helper_helper_ti_mfi_1_2(up, down, bar);\n  }\n  else\n  {\n    helper_helper_ti_mfi_1_3(up, down);\n  }\n  ytyp = typ;\n  if (i >= period)\n  {\n    output[output_idx] = (up->sum / (up->sum + down->sum)) * 100.0;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n  *ytyp_ref = ytyp;\n}\n\n",
            "calle": [
                "helper_helper_ti_mfi_1_1",
                "helper_helper_ti_mfi_1_2",
                "helper_helper_ti_mfi_1_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ytyp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ytyp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double * const",
                        "definition": [
                            "const double * const volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ytyp",
                        "type": "double",
                        "definition": [
                            "double ytyp = *ytyp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "typ",
                        "type": "const double",
                        "definition": [
                            "const double typ = ((high[i] + low[i]) + close[i]) * (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "const double",
                        "definition": [
                            "const double bar = typ * volume[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_mfi_1_1",
            "header": "",
            "params": [
                "ti_buffer * const up",
                "ti_buffer * const down",
                "const double bar"
            ],
            "definition": "void helper_helper_ti_mfi_1_1(ti_buffer * const up, ti_buffer * const down, const double bar)\n{\n  do\n  {\n    if (up->pushes >= up->size)\n    {\n      up->sum -= up->vals[up->index];\n    }\n    up->sum += bar;\n    up->vals[up->index] = bar;\n    up->pushes += 1;\n    up->index = up->index + 1;\n    if (up->index >= up->size)\n    {\n      up->index = 0;\n    }\n  }\n  while (0);\n  do\n  {\n    if (down->pushes >= down->size)\n    {\n      down->sum -= down->vals[down->index];\n    }\n    down->sum += 0.0;\n    down->vals[down->index] = 0.0;\n    down->pushes += 1;\n    down->index = down->index + 1;\n    if (down->index >= down->size)\n    {\n      down->index = 0;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "up",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "const double",
                        "definition": [
                            "const double bar"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_mfi_1_2",
            "header": "",
            "params": [
                "ti_buffer * const up",
                "ti_buffer * const down",
                "const double bar"
            ],
            "definition": "void helper_helper_ti_mfi_1_2(ti_buffer * const up, ti_buffer * const down, const double bar)\n{\n  do\n  {\n    if (down->pushes >= down->size)\n    {\n      down->sum -= down->vals[down->index];\n    }\n    down->sum += bar;\n    down->vals[down->index] = bar;\n    down->pushes += 1;\n    down->index = down->index + 1;\n    if (down->index >= down->size)\n    {\n      down->index = 0;\n    }\n  }\n  while (0);\n  do\n  {\n    if (up->pushes >= up->size)\n    {\n      up->sum -= up->vals[up->index];\n    }\n    up->sum += 0.0;\n    up->vals[up->index] = 0.0;\n    up->pushes += 1;\n    up->index = up->index + 1;\n    if (up->index >= up->size)\n    {\n      up->index = 0;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "up",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const down"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "const double",
                        "definition": [
                            "const double bar"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_mfi_1_3",
            "header": "",
            "params": [
                "ti_buffer * const up",
                "ti_buffer * const down"
            ],
            "definition": "void helper_helper_ti_mfi_1_3(ti_buffer * const up, ti_buffer * const down)\n{\n  do\n  {\n    if (up->pushes >= up->size)\n    {\n      up->sum -= up->vals[up->index];\n    }\n    up->sum += 0.0;\n    up->vals[up->index] = 0.0;\n    up->pushes += 1;\n    up->index = up->index + 1;\n    if (up->index >= up->size)\n    {\n      up->index = 0;\n    }\n  }\n  while (0);\n  do\n  {\n    if (down->pushes >= down->size)\n    {\n      down->sum -= down->vals[down->index];\n    }\n    down->sum += 0.0;\n    down->vals[down->index] = 0.0;\n    down->pushes += 1;\n    down->index = down->index + 1;\n    if (down->index >= down->size)\n    {\n      down->index = 0;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "up",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "down",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const down"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_min_start",
            "header": "int ti_min_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_min_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_min",
            "header": "int ti_min(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_min(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_min_start(options))\n  {\n    return 0;\n  }\n  int trail = 0;\n  int mini = -1;\n  double min = input[0];\n  int i;\n  int j;\n  for (i = period - 1; i < size; i += 1, trail += 1)\n  {\n    helper_ti_min_1(&output_idx, &mini, &min, &j, input, output, trail, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_min_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_min_1",
                "ti_min_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_min_ref",
            "header": "int ti_min_ref(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_min_ref(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_min_start(options))\n  {\n    return 0;\n  }\n  for (int i = period - 1; i < size; i += 1)\n  {\n    double min = input[(i - period) + 1];\n    for (int j = (i - period) + 2; j <= i; j += 1)\n    {\n      min = (min < input[j]) ? (min) : (input[j]);\n    }\n\n    output[output_idx] = min;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_min_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_min_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = period - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = input[(i - period) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = (i - period) + 2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_min_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const mini_ref",
                "double * const min_ref",
                "int * const j_ref",
                "const double * const input",
                "double * const output",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_min_1(unsigned int * const output_idx_ref, int * const mini_ref, double * const min_ref, int * const j_ref, const double * const input, double * const output, int trail, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int mini = *mini_ref;\n  double min = *min_ref;\n  int j = *j_ref;\n  double bar = input[i];\n  if (mini < trail)\n  {\n    mini = trail;\n    min = input[mini];\n    j = trail;\n    while ((++j) <= i)\n    {\n      bar = input[j];\n      if (bar <= min)\n      {\n        min = bar;\n        mini = j;\n      }\n    }\n\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  output[output_idx] = min;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *mini_ref = mini;\n  *min_ref = min;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = input[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mom_start",
            "header": "int ti_mom_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_mom_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mom",
            "header": "int ti_mom(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_mom(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_mom_start(options))\n  {\n    return 0;\n  }\n  int i;\n  for (i = period; i < size; i += 1)\n  {\n    output[output_idx] = input[i] - input[i - period];\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_mom_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_mom_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_msw_start",
            "header": "int ti_msw_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_msw_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_msw",
            "header": "int ti_msw(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_msw(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *sine = outputs[0];\n  unsigned int sine_idx = 0;\n  double *lead = outputs[1];\n  const int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_msw_start(options))\n  {\n    return 0;\n  }\n  const double pi = 3.1415926;\n  const double tpi = 2 * pi;\n  double weight = 0;\n  double phase;\n  double rp;\n  double ip;\n  int i;\n  int j;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_msw_1(&sine_idx, &weight, &phase, &rp, &ip, &j, input, sine, lead, period, pi, tpi, i);\n  }\n\n  assert(((&sine[sine_idx]) - outputs[0]) == (size - ti_msw_start(options)));\n  assert((lead - outputs[1]) == (size - ti_msw_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_msw_1",
                "ti_msw_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sine",
                        "type": "double *",
                        "definition": [
                            "double *sine = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sine_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sine_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead",
                        "type": "double *",
                        "definition": [
                            "double *lead = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pi",
                        "type": "const double",
                        "definition": [
                            "const double pi = 3.1415926"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tpi",
                        "type": "const double",
                        "definition": [
                            "const double tpi = 2 * pi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "double",
                        "definition": [
                            "double weight = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase",
                        "type": "double",
                        "definition": [
                            "double phase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "double",
                        "definition": [
                            "double rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ip",
                        "type": "double",
                        "definition": [
                            "double ip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_msw_1",
            "header": "",
            "params": [
                "unsigned int * const sine_idx_ref",
                "double * const weight_ref",
                "double * const phase_ref",
                "double * const rp_ref",
                "double * const ip_ref",
                "int * const j_ref",
                "const double * const input",
                "double * const sine",
                "double * const lead",
                "const int period",
                "const double pi",
                "const double tpi",
                "int i"
            ],
            "definition": "void helper_ti_msw_1(unsigned int * const sine_idx_ref, double * const weight_ref, double * const phase_ref, double * const rp_ref, double * const ip_ref, int * const j_ref, const double * const input, double * const sine, double * const lead, const int period, const double pi, const double tpi, int i)\n{\n  unsigned int sine_idx = *sine_idx_ref;\n  double weight = *weight_ref;\n  double phase = *phase_ref;\n  double rp = *rp_ref;\n  double ip = *ip_ref;\n  int j = *j_ref;\n  rp = 0;\n  ip = 0;\n  for (j = 0; j < period; j += 1)\n  {\n    weight = input[i - j];\n    rp = rp + (cos((tpi * j) / period) * weight);\n    ip = ip + (sin((tpi * j) / period) * weight);\n  }\n\n  if (fabs(rp) > .001)\n  {\n    phase = atan(ip / rp);\n  }\n  else\n  {\n    phase = (tpi / 2.0) * ((ip < 0) ? (-1.0) : (1.0));\n  }\n  if (rp < 0.0)\n  {\n    phase += pi;\n  }\n  phase += pi / 2.0;\n  if (phase < 0.0)\n  {\n    phase += tpi;\n  }\n  if (phase > tpi)\n  {\n    phase -= tpi;\n  }\n  sine[sine_idx] = sin(phase);\n  sine_idx += 1;\n  *(lead++) = sin(phase + (pi / 4.0));\n  *sine_idx_ref = sine_idx;\n  *weight_ref = weight;\n  *phase_ref = phase;\n  *rp_ref = rp;\n  *ip_ref = ip;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "atan",
                "cos",
                "fabs",
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sine_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sine_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const phase_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ip_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ip_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sine",
                        "type": "double * const",
                        "definition": [
                            "double * const sine"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead",
                        "type": "double * const",
                        "definition": [
                            "double * const lead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pi",
                        "type": "const double",
                        "definition": [
                            "const double pi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tpi",
                        "type": "const double",
                        "definition": [
                            "const double tpi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sine_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sine_idx = *sine_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "double",
                        "definition": [
                            "double weight = *weight_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase",
                        "type": "double",
                        "definition": [
                            "double phase = *phase_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "double",
                        "definition": [
                            "double rp = *rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ip",
                        "type": "double",
                        "definition": [
                            "double ip = *ip_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mul_start",
            "header": "int ti_mul_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_mul_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_mul",
            "header": "int ti_mul(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_mul(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  const double *in2 = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] * in2[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in2",
                        "type": "const double *",
                        "definition": [
                            "const double *in2 = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_natr_start",
            "header": "int ti_natr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_natr_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_natr",
            "header": "int ti_natr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_natr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_natr_start(options))\n  {\n    return 0;\n  }\n  const double per = 1.0 / ((double) period);\n  double sum = 0;\n  double truerange;\n  sum += high[0] - low[0];\n  int i;\n  for (i = 1; i < period; i += 1)\n  {\n    helper_ti_natr_1(&sum, &truerange, high, low, close, i);\n  }\n\n  double val = sum / period;\n  output[output_idx] = (100 * val) / close[period - 1];\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_natr_2(&output_idx, &truerange, &val, high, low, close, output, per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_natr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_natr_1",
                "helper_ti_natr_2",
                "ti_natr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = sum / period"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_natr_1",
            "header": "",
            "params": [
                "double * const sum_ref",
                "double * const truerange_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "int i"
            ],
            "definition": "void helper_ti_natr_1(double * const sum_ref, double * const truerange_ref, const double * const high, const double * const low, const double * const close, int i)\n{\n  double sum = *sum_ref;\n  double truerange = *truerange_ref;\n  do\n  {\n    const double l = low[i];\n    const double h = high[i];\n    const double c = close[i - 1];\n    const double ych = fabs(h - c);\n    const double ycl = fabs(l - c);\n    double v = h - l;\n    if (ych > v)\n    {\n      v = ych;\n    }\n    if (ycl > v)\n    {\n      v = ycl;\n    }\n    truerange = v;\n  }\n  while (0);\n  sum += truerange;\n  *sum_ref = sum;\n  *truerange_ref = truerange;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_natr_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const truerange_ref",
                "double * const val_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_natr_2(unsigned int * const output_idx_ref, double * const truerange_ref, double * const val_ref, const double * const high, const double * const low, const double * const close, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double truerange = *truerange_ref;\n  double val = *val_ref;\n  do\n  {\n    const double l = low[i];\n    const double h = high[i];\n    const double c = close[i - 1];\n    const double ych = fabs(h - c);\n    const double ycl = fabs(l - c);\n    double v = h - l;\n    if (ych > v)\n    {\n      v = ych;\n    }\n    if (ycl > v)\n    {\n      v = ycl;\n    }\n    truerange = v;\n  }\n  while (0);\n  val = ((truerange - val) * per) + val;\n  output[output_idx] = (100 * val) / close[i];\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *truerange_ref = truerange;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange = *truerange_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_nvi_start",
            "header": "int ti_nvi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_nvi_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_nvi",
            "header": "int ti_nvi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_nvi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *close = inputs[0];\n  const double *volume = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (size <= ti_nvi_start(options))\n  {\n    return 0;\n  }\n  double nvi = 1000;\n  output[output_idx] = nvi;\n  output_idx += 1;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    if (volume[i] < volume[i - 1])\n    {\n      nvi += ((close[i] - close[i - 1]) / close[i - 1]) * nvi;\n    }\n    output[output_idx] = nvi;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_nvi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_nvi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nvi",
                        "type": "double",
                        "definition": [
                            "double nvi = 1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_obv_start",
            "header": "int ti_obv_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_obv_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_obv",
            "header": "int ti_obv(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_obv(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *close = inputs[0];\n  const double *volume = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  double sum = 0;\n  output[output_idx] = sum;\n  output_idx += 1;\n  double prev = close[0];\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    if (close[i] > prev)\n    {\n      sum += volume[i];\n    }\n    else\n      if (close[i] < prev)\n    {\n      sum -= volume[i];\n    }\n    else\n    {\n    }\n    prev = close[i];\n    output[output_idx] = sum;\n    output_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "double",
                        "definition": [
                            "double prev = close[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ppo_start",
            "header": "int ti_ppo_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ppo_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ppo",
            "header": "int ti_ppo(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ppo(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *ppo = outputs[0];\n  unsigned int ppo_idx = 0;\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < 2)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (size <= ti_ppo_start(options))\n  {\n    return 0;\n  }\n  double short_per = 2 / (((double) short_period) + 1);\n  double long_per = 2 / (((double) long_period) + 1);\n  double short_ema = input[0];\n  double long_ema = input[0];\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    short_ema = ((input[i] - short_ema) * short_per) + short_ema;\n    long_ema = ((input[i] - long_ema) * long_per) + long_ema;\n    const double out = (100.0 * (short_ema - long_ema)) / long_ema;\n    ppo[ppo_idx] = out;\n    ppo_idx += 1;\n  }\n\n  assert(((&ppo[ppo_idx]) - outputs[0]) == (size - ti_ppo_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_ppo_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ppo",
                        "type": "double *",
                        "definition": [
                            "double *ppo = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ppo_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ppo_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_per",
                        "type": "double",
                        "definition": [
                            "double short_per = 2 / (((double) short_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_per",
                        "type": "double",
                        "definition": [
                            "double long_per = 2 / (((double) long_period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_ema",
                        "type": "double",
                        "definition": [
                            "double short_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_ema",
                        "type": "double",
                        "definition": [
                            "double long_ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "const double",
                        "definition": [
                            "const double out = (100.0 * (short_ema - long_ema)) / long_ema"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_psar_start",
            "header": "int ti_psar_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_psar_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_psar",
            "header": "int ti_psar(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_psar(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double accel_step = options[0];\n  const double accel_max = options[1];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (accel_step <= 0)\n  {\n    return 1;\n  }\n  if (accel_max <= accel_step)\n  {\n    return 1;\n  }\n  if (size < 2)\n  {\n    return 0;\n  }\n  int lng;\n  if ((high[0] + low[0]) <= (high[1] + low[1]))\n  {\n    lng = 1;\n  }\n  else\n    lng = 0;\n  double sar;\n  double extreme;\n  if (lng)\n  {\n    extreme = high[0];\n    sar = low[0];\n  }\n  else\n  {\n    extreme = low[0];\n    sar = high[0];\n  }\n  double accel = accel_step;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    helper_ti_psar_1(&output_idx, &lng, &sar, &extreme, &accel, high, low, accel_step, accel_max, output, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_psar_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_psar_1",
                "ti_psar_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_step",
                        "type": "const double",
                        "definition": [
                            "const double accel_step = options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_max",
                        "type": "const double",
                        "definition": [
                            "const double accel_max = options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lng",
                        "type": "int",
                        "definition": [
                            "int lng"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sar",
                        "type": "double",
                        "definition": [
                            "double sar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme",
                        "type": "double",
                        "definition": [
                            "double extreme"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel",
                        "type": "double",
                        "definition": [
                            "double accel = accel_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_psar_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const lng_ref",
                "double * const sar_ref",
                "double * const extreme_ref",
                "double * const accel_ref",
                "const double * const high",
                "const double * const low",
                "const double accel_step",
                "const double accel_max",
                "double * const output",
                "int i"
            ],
            "definition": "void helper_ti_psar_1(unsigned int * const output_idx_ref, int * const lng_ref, double * const sar_ref, double * const extreme_ref, double * const accel_ref, const double * const high, const double * const low, const double accel_step, const double accel_max, double * const output, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int lng = *lng_ref;\n  double sar = *sar_ref;\n  double extreme = *extreme_ref;\n  double accel = *accel_ref;\n  sar = ((extreme - sar) * accel) + sar;\n  if (lng)\n  {\n    helper_helper_ti_psar_1_1(&sar, &extreme, &accel, high, low, accel_step, accel_max, i);\n  }\n  else\n  {\n    helper_helper_ti_psar_1_2(&sar, &extreme, &accel, high, low, accel_step, accel_max, i);\n  }\n  if ((lng && (low[i] < sar)) || ((!lng) && (high[i] > sar)))\n  {\n    accel = accel_step;\n    sar = extreme;\n    lng = !lng;\n    if (!lng)\n    {\n      extreme = low[i];\n    }\n    else\n      extreme = high[i];\n  }\n  output[output_idx] = sar;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *lng_ref = lng;\n  *sar_ref = sar;\n  *extreme_ref = extreme;\n  *accel_ref = accel;\n}\n\n",
            "calle": [
                "helper_helper_ti_psar_1_1",
                "helper_helper_ti_psar_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lng_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const accel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_step",
                        "type": "const double",
                        "definition": [
                            "const double accel_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_max",
                        "type": "const double",
                        "definition": [
                            "const double accel_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lng",
                        "type": "int",
                        "definition": [
                            "int lng = *lng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sar",
                        "type": "double",
                        "definition": [
                            "double sar = *sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme",
                        "type": "double",
                        "definition": [
                            "double extreme = *extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel",
                        "type": "double",
                        "definition": [
                            "double accel = *accel_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_psar_1_1",
            "header": "",
            "params": [
                "double * const sar_ref",
                "double * const extreme_ref",
                "double * const accel_ref",
                "const double * const high",
                "const double * const low",
                "const double accel_step",
                "const double accel_max",
                "int i"
            ],
            "definition": "void helper_helper_ti_psar_1_1(double * const sar_ref, double * const extreme_ref, double * const accel_ref, const double * const high, const double * const low, const double accel_step, const double accel_max, int i)\n{\n  double sar = *sar_ref;\n  double extreme = *extreme_ref;\n  double accel = *accel_ref;\n  if ((i >= 2) && (sar > low[i - 2]))\n  {\n    sar = low[i - 2];\n  }\n  if (sar > low[i - 1])\n  {\n    sar = low[i - 1];\n  }\n  if ((accel < accel_max) && (high[i] > extreme))\n  {\n    accel += accel_step;\n    if (accel > accel_max)\n    {\n      accel = accel_max;\n    }\n  }\n  if (high[i] > extreme)\n  {\n    extreme = high[i];\n  }\n  *sar_ref = sar;\n  *extreme_ref = extreme;\n  *accel_ref = accel;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const accel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_step",
                        "type": "const double",
                        "definition": [
                            "const double accel_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_max",
                        "type": "const double",
                        "definition": [
                            "const double accel_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sar",
                        "type": "double",
                        "definition": [
                            "double sar = *sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme",
                        "type": "double",
                        "definition": [
                            "double extreme = *extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel",
                        "type": "double",
                        "definition": [
                            "double accel = *accel_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_psar_1_2",
            "header": "",
            "params": [
                "double * const sar_ref",
                "double * const extreme_ref",
                "double * const accel_ref",
                "const double * const high",
                "const double * const low",
                "const double accel_step",
                "const double accel_max",
                "int i"
            ],
            "definition": "void helper_helper_ti_psar_1_2(double * const sar_ref, double * const extreme_ref, double * const accel_ref, const double * const high, const double * const low, const double accel_step, const double accel_max, int i)\n{\n  double sar = *sar_ref;\n  double extreme = *extreme_ref;\n  double accel = *accel_ref;\n  if ((i >= 2) && (sar < high[i - 2]))\n  {\n    sar = high[i - 2];\n  }\n  if (sar < high[i - 1])\n  {\n    sar = high[i - 1];\n  }\n  if ((accel < accel_max) && (low[i] < extreme))\n  {\n    accel += accel_step;\n    if (accel > accel_max)\n    {\n      accel = accel_max;\n    }\n  }\n  if (low[i] < extreme)\n  {\n    extreme = low[i];\n  }\n  *sar_ref = sar;\n  *extreme_ref = extreme;\n  *accel_ref = accel;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const accel_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_step",
                        "type": "const double",
                        "definition": [
                            "const double accel_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel_max",
                        "type": "const double",
                        "definition": [
                            "const double accel_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sar",
                        "type": "double",
                        "definition": [
                            "double sar = *sar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extreme",
                        "type": "double",
                        "definition": [
                            "double extreme = *extreme_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "accel",
                        "type": "double",
                        "definition": [
                            "double accel = *accel_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_pvi_start",
            "header": "int ti_pvi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_pvi_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_pvi",
            "header": "int ti_pvi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_pvi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *close = inputs[0];\n  const double *volume = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (size <= ti_pvi_start(options))\n  {\n    return 0;\n  }\n  double pvi = 1000;\n  output[output_idx] = pvi;\n  output_idx += 1;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    if (volume[i] > volume[i - 1])\n    {\n      pvi += ((close[i] - close[i - 1]) / close[i - 1]) * pvi;\n    }\n    output[output_idx] = pvi;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_pvi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_pvi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvi",
                        "type": "double",
                        "definition": [
                            "double pvi = 1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_qstick_start",
            "header": "int ti_qstick_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_qstick_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_qstick",
            "header": "int ti_qstick(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_qstick(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *open = inputs[0];\n  const double *close = inputs[1];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int period = (int) options[0];\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_qstick_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += close[i] - open[i];\n  }\n\n  output[output_idx] = sum * scale;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    sum += close[i] - open[i];\n    sum -= close[i - period] - open[i - period];\n    output[output_idx] = sum * scale;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_qstick_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_qstick_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const double *",
                        "definition": [
                            "const double *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_roc_start",
            "header": "int ti_roc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_roc_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_roc",
            "header": "int ti_roc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_roc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_roc_start(options))\n  {\n    return 0;\n  }\n  int i;\n  for (i = period; i < size; i += 1)\n  {\n    output[output_idx] = (input[i] - input[i - period]) / input[i - period];\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_roc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_roc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_rocr_start",
            "header": "int ti_rocr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_rocr_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_rocr",
            "header": "int ti_rocr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_rocr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_rocr_start(options))\n  {\n    return 0;\n  }\n  int i;\n  for (i = period; i < size; i += 1)\n  {\n    output[output_idx] = input[i] / input[i - period];\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_rocr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_rocr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_round_start",
            "header": "int ti_round_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_round_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_round",
            "header": "int ti_round(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_round(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = floor(in1[i] + 0.5);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "floor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_rsi_start",
            "header": "int ti_rsi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_rsi_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_rsi",
            "header": "int ti_rsi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_rsi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double per = 1.0 / ((double) period);\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_rsi_start(options))\n  {\n    return 0;\n  }\n  double smooth_up = 0;\n  double smooth_down = 0;\n  int i;\n  for (i = 1; i <= period; i += 1)\n  {\n    const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n    const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n    smooth_up += upward;\n    smooth_down += downward;\n  }\n\n  smooth_up /= period;\n  smooth_down /= period;\n  output[output_idx] = 100.0 * (smooth_up / (smooth_up + smooth_down));\n  output_idx += 1;\n  for (i = period + 1; i < size; i += 1)\n  {\n    helper_ti_rsi_1(&output_idx, &smooth_up, &smooth_down, input, output, per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_rsi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_rsi_1",
                "ti_rsi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up",
                        "type": "double",
                        "definition": [
                            "double smooth_up = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down",
                        "type": "double",
                        "definition": [
                            "double smooth_down = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upward",
                        "type": "const double",
                        "definition": [
                            "const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downward",
                        "type": "const double",
                        "definition": [
                            "const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_rsi_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const smooth_up_ref",
                "double * const smooth_down_ref",
                "const double * const input",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_rsi_1(unsigned int * const output_idx_ref, double * const smooth_up_ref, double * const smooth_down_ref, const double * const input, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double smooth_up = *smooth_up_ref;\n  double smooth_down = *smooth_down_ref;\n  const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n  const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n  smooth_up = ((upward - smooth_up) * per) + smooth_up;\n  smooth_down = ((downward - smooth_down) * per) + smooth_down;\n  output[output_idx] = 100.0 * (smooth_up / (smooth_up + smooth_down));\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *smooth_up_ref = smooth_up;\n  *smooth_down_ref = smooth_down;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const smooth_up_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const smooth_down_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up",
                        "type": "double",
                        "definition": [
                            "double smooth_up = *smooth_up_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down",
                        "type": "double",
                        "definition": [
                            "double smooth_down = *smooth_down_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upward",
                        "type": "const double",
                        "definition": [
                            "const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downward",
                        "type": "const double",
                        "definition": [
                            "const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sin_start",
            "header": "int ti_sin_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sin_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sin",
            "header": "int ti_sin(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sin(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = sin(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sinh_start",
            "header": "int ti_sinh_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sinh_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sinh",
            "header": "int ti_sinh(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sinh(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = sinh(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "sinh"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sma_start",
            "header": "int ti_sma_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sma_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sma",
            "header": "int ti_sma(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sma(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_sma_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n  }\n\n  output[output_idx] = sum * scale;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    sum += input[i];\n    sum -= input[i - period];\n    output[output_idx] = sum * scale;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_sma_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_sma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sma_stream_new",
            "header": "int ti_sma_stream_new(const double *options, ti_stream **stream)",
            "params": [
                "const double *options",
                "ti_stream **stream_in"
            ],
            "definition": "int ti_sma_stream_new(const double *options, ti_stream **stream_in)\n{\n  ti_stream_sma **stream = (ti_stream_sma **) stream_in;\n  int period = (int) options[0];\n  if (period < 1)\n  {\n    return 1;\n  }\n  *stream = malloc((sizeof(ti_stream_sma)) + ((sizeof(double)) * period));\n  if (!stream)\n  {\n    return 2;\n  }\n  (*stream)->index = 72;\n  (*stream)->progress = -ti_sma_start(options);\n  (*stream)->period = period;\n  (*stream)->per = 1. / period;\n  (*stream)->sum = 0.;\n  (*stream)->buffer_idx = -1;\n  return 0;\n}\n\n",
            "calle": [
                "malloc",
                "ti_sma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_in",
                        "type": "ti_stream **",
                        "definition": [
                            "ti_stream **stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_sma **",
                        "definition": [
                            "ti_stream_sma **stream = (ti_stream_sma **) stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sma_stream_run",
            "header": "int ti_sma_stream_run(ti_stream *stream, int size, const double * const *inputs, double * const *outputs)",
            "params": [
                "ti_stream *stream_in",
                "int size",
                "const double * const *inputs",
                "double * const *outputs"
            ],
            "definition": "int ti_sma_stream_run(ti_stream *stream_in, int size, const double * const *inputs, double * const *outputs)\n{\n  ti_stream_sma *stream = (ti_stream_sma *) stream_in;\n  int progress = stream->progress;\n  const double *real = inputs[0];\n  int period = stream->period;\n  double *sma = outputs[0];\n  unsigned int sma_idx = 0;\n  double per = stream->per;\n  double sum = stream->sum;\n  int buffer_idx = stream->buffer_idx;\n  double *buffer = stream->buffer;\n  if (progress == ((-period) + 1))\n  {\n  }\n  else\n  {\n  }\n  int i;\n  for (i = 0; (progress < 1) && (i < size); i += 1, progress += 1)\n  {\n    {\n      buffer_idx += 1;\n      sum += (buffer[buffer_idx] = real[i] * per);\n    }\n    ;\n  }\n\n  if ((i > 0) && (progress == 1))\n  {\n    sma[sma_idx] = sum;\n    sma_idx += 1;\n  }\n  for (; i < size; i += 1, progress += 1)\n  {\n    helper_ti_sma_stream_run_1(&sma_idx, &sum, &buffer_idx, real, period, sma, per, buffer, i);\n  }\n\n  stream->progress = progress;\n  stream->sum = sum;\n  stream->buffer_idx = buffer_idx;\n  return 0;\n}\n\n",
            "calle": [
                "helper_ti_sma_stream_run_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream_in",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream_sma *",
                        "definition": [
                            "ti_stream_sma *stream = (ti_stream_sma *) stream_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress = stream->progress"
                        ]
                    },
                    {
                        "path": null,
                        "name": "real",
                        "type": "const double *",
                        "definition": [
                            "const double *real = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period = stream->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sma",
                        "type": "double *",
                        "definition": [
                            "double *sma = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sma_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sma_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "double",
                        "definition": [
                            "double per = stream->per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = stream->sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "int",
                        "definition": [
                            "int buffer_idx = stream->buffer_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "double *",
                        "definition": [
                            "double *buffer = stream->buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sma_stream_free",
            "header": "void ti_sma_stream_free(ti_stream *stream)",
            "params": [
                "ti_stream *stream"
            ],
            "definition": "void ti_sma_stream_free(ti_stream *stream)\n{\n  free(stream);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_sma_stream_run_1",
            "header": "",
            "params": [
                "unsigned int * const sma_idx_ref",
                "double * const sum_ref",
                "int * const buffer_idx_ref",
                "const double * const real",
                "int period",
                "double * const sma",
                "double per",
                "double * const buffer",
                "int i"
            ],
            "definition": "void helper_ti_sma_stream_run_1(unsigned int * const sma_idx_ref, double * const sum_ref, int * const buffer_idx_ref, const double * const real, int period, double * const sma, double per, double * const buffer, int i)\n{\n  unsigned int sma_idx = *sma_idx_ref;\n  double sum = *sum_ref;\n  int buffer_idx = *buffer_idx_ref;\n  {\n    buffer_idx += 1;\n    if (buffer_idx == period)\n    {\n      buffer_idx = 0;\n    }\n    sum -= buffer[buffer_idx];\n    sum += (buffer[buffer_idx] = real[i] * per);\n  }\n  ;\n  sma[sma_idx] = sum;\n  sma_idx += 1;\n  *sma_idx_ref = sma_idx;\n  *sum_ref = sum;\n  *buffer_idx_ref = buffer_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sma_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sma_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "real",
                        "type": "const double * const",
                        "definition": [
                            "const double * const real"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sma",
                        "type": "double * const",
                        "definition": [
                            "double * const sma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "double",
                        "definition": [
                            "double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "double * const",
                        "definition": [
                            "double * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sma_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sma_idx = *sma_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "int",
                        "definition": [
                            "int buffer_idx = *buffer_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sqrt_start",
            "header": "int ti_sqrt_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sqrt_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sqrt",
            "header": "int ti_sqrt(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sqrt(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = sqrt(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stddev_start",
            "header": "int ti_stddev_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_stddev_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stddev",
            "header": "int ti_stddev(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_stddev(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_stddev_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double sum2 = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n    sum2 += input[i] * input[i];\n  }\n\n  {\n    double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale));\n    if (s2s2 > 0.0)\n    {\n      s2s2 = sqrt(s2s2);\n    }\n    output[output_idx] = s2s2;\n    output_idx += 1;\n  }\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_stddev_1(&output_idx, &sum, &sum2, input, period, output, scale, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_stddev_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_stddev_1",
                "sqrt",
                "ti_stddev_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2s2",
                        "type": "double",
                        "definition": [
                            "double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_stddev_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const sum2_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double scale",
                "int i"
            ],
            "definition": "void helper_ti_stddev_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const sum2_ref, const double * const input, const int period, double * const output, const double scale, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double sum2 = *sum2_ref;\n  sum += input[i];\n  sum2 += input[i] * input[i];\n  sum -= input[i - period];\n  sum2 -= input[i - period] * input[i - period];\n  double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale));\n  if (s2s2 > 0.0)\n  {\n    s2s2 = sqrt(s2s2);\n  }\n  output[output_idx] = s2s2;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2s2",
                        "type": "double",
                        "definition": [
                            "double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stderr_start",
            "header": "int ti_stderr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_stderr_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stderr",
            "header": "int ti_stderr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_stderr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_stderr_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double sum2 = 0;\n  const double mul = 1.0 / sqrt(period);\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n    sum2 += input[i] * input[i];\n  }\n\n  {\n    double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale));\n    if (s2s2 > 0.0)\n    {\n      s2s2 = sqrt(s2s2);\n    }\n    output[output_idx] = mul * s2s2;\n    output_idx += 1;\n  }\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_stderr_1(&output_idx, &sum, &sum2, input, period, output, scale, mul, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_stderr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_stderr_1",
                "sqrt",
                "ti_stderr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mul",
                        "type": "const double",
                        "definition": [
                            "const double mul = 1.0 / sqrt(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2s2",
                        "type": "double",
                        "definition": [
                            "double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_stderr_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const sum2_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double scale",
                "const double mul",
                "int i"
            ],
            "definition": "void helper_ti_stderr_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const sum2_ref, const double * const input, const int period, double * const output, const double scale, const double mul, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double sum2 = *sum2_ref;\n  sum += input[i];\n  sum2 += input[i] * input[i];\n  sum -= input[i - period];\n  sum2 -= input[i - period] * input[i - period];\n  double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale));\n  if (s2s2 > 0.0)\n  {\n    s2s2 = sqrt(s2s2);\n  }\n  output[output_idx] = mul * s2s2;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mul",
                        "type": "const double",
                        "definition": [
                            "const double mul"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2s2",
                        "type": "double",
                        "definition": [
                            "double s2s2 = (sum2 * scale) - ((sum * scale) * (sum * scale))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stoch_start",
            "header": "int ti_stoch_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_stoch_start(const double *options)\n{\n  const int kperiod = (int) options[0];\n  const int kslow = (int) options[1];\n  const int dperiod = (int) options[2];\n  return ((kperiod + kslow) + dperiod) - 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kperiod",
                        "type": "const int",
                        "definition": [
                            "const int kperiod = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kslow",
                        "type": "const int",
                        "definition": [
                            "const int kslow = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dperiod",
                        "type": "const int",
                        "definition": [
                            "const int dperiod = (int) options[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stoch",
            "header": "int ti_stoch(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_stoch(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int kperiod = (int) options[0];\n  const int kslow = (int) options[1];\n  const int dperiod = (int) options[2];\n  const double kper = 1.0 / kslow;\n  const double dper = 1.0 / dperiod;\n  double *stoch = outputs[0];\n  unsigned int stoch_idx = 0;\n  double *stoch_ma = outputs[1];\n  if (kperiod < 1)\n  {\n    return 1;\n  }\n  if (kslow < 1)\n  {\n    return 1;\n  }\n  if (dperiod < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_stoch_start(options))\n  {\n    return 0;\n  }\n  int trail = 0;\n  int maxi = -1;\n  int mini = -1;\n  double max = high[0];\n  double min = low[0];\n  double bar;\n  ti_buffer *k_sum = ti_buffer_new(kslow);\n  ti_buffer *d_sum = ti_buffer_new(dperiod);\n  int i;\n  int j;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_stoch_1(&stoch_idx, &trail, &maxi, &mini, &max, &min, &bar, &j, high, low, close, kperiod, kslow, dperiod, kper, dper, stoch, stoch_ma, k_sum, d_sum, i);\n  }\n\n  ti_buffer_free(k_sum);\n  ti_buffer_free(d_sum);\n  assert(((&stoch[stoch_idx]) - outputs[0]) == (size - ti_stoch_start(options)));\n  assert((stoch_ma - outputs[1]) == (size - ti_stoch_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_stoch_1",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_stoch_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kperiod",
                        "type": "const int",
                        "definition": [
                            "const int kperiod = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kslow",
                        "type": "const int",
                        "definition": [
                            "const int kslow = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dperiod",
                        "type": "const int",
                        "definition": [
                            "const int dperiod = (int) options[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kper",
                        "type": "const double",
                        "definition": [
                            "const double kper = 1.0 / kslow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dper",
                        "type": "const double",
                        "definition": [
                            "const double dper = 1.0 / dperiod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch",
                        "type": "double *",
                        "definition": [
                            "double *stoch = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int stoch_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_ma",
                        "type": "double *",
                        "definition": [
                            "double *stoch_ma = outputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = high[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_sum",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *k_sum = ti_buffer_new(kslow)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_sum",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *d_sum = ti_buffer_new(dperiod)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_stoch_1",
            "header": "",
            "params": [
                "unsigned int * const stoch_idx_ref",
                "int * const trail_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const int kperiod",
                "const int kslow",
                "const int dperiod",
                "const double kper",
                "const double dper",
                "double * const stoch",
                "double * const stoch_ma",
                "ti_buffer * const k_sum",
                "ti_buffer * const d_sum",
                "int i"
            ],
            "definition": "void helper_ti_stoch_1(unsigned int * const stoch_idx_ref, int * const trail_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const high, const double * const low, const double * const close, const int kperiod, const int kslow, const int dperiod, const double kper, const double dper, double * const stoch, double * const stoch_ma, ti_buffer * const k_sum, ti_buffer * const d_sum, int i)\n{\n  unsigned int stoch_idx = *stoch_idx_ref;\n  int trail = *trail_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  if (i >= kperiod)\n  {\n    trail += 1;\n  }\n  bar = high[i];\n  if (maxi < trail)\n  {\n    helper_helper_ti_stoch_1_1(&maxi, &max, &bar, &j, high, i, trail);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = low[i];\n  if (mini < trail)\n  {\n    helper_helper_ti_stoch_1_2(&mini, &min, &bar, &j, low, i, trail);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  const double kdiff = max - min;\n  const double kfast = (kdiff == 0.0) ? (0.0) : (100 * ((close[i] - min) / kdiff));\n  do\n  {\n    helper_helper_ti_stoch_1_3(k_sum, kfast);\n  }\n  while (0);\n  if (i >= (((kperiod - 1) + kslow) - 1))\n  {\n    helper_helper_ti_stoch_1_4(&stoch_idx, kperiod, kslow, dperiod, kper, dper, stoch, stoch_ma, k_sum, d_sum, i);\n  }\n  *stoch_idx_ref = stoch_idx;\n  *trail_ref = trail;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_ti_stoch_1_1",
                "helper_helper_ti_stoch_1_2",
                "helper_helper_ti_stoch_1_3",
                "helper_helper_ti_stoch_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stoch_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const stoch_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const trail_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kperiod",
                        "type": "const int",
                        "definition": [
                            "const int kperiod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kslow",
                        "type": "const int",
                        "definition": [
                            "const int kslow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dperiod",
                        "type": "const int",
                        "definition": [
                            "const int dperiod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kper",
                        "type": "const double",
                        "definition": [
                            "const double kper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dper",
                        "type": "const double",
                        "definition": [
                            "const double dper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch",
                        "type": "double * const",
                        "definition": [
                            "double * const stoch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_ma",
                        "type": "double * const",
                        "definition": [
                            "double * const stoch_ma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const k_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const d_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int stoch_idx = *stoch_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = *trail_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kdiff",
                        "type": "const double",
                        "definition": [
                            "const double kdiff = max - min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kfast",
                        "type": "const double",
                        "definition": [
                            "const double kfast = (kdiff == 0.0) ? (0.0) : (100 * ((close[i] - min) / kdiff))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stoch_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "int i",
                "int trail"
            ],
            "definition": "void helper_helper_ti_stoch_1_1(int * const maxi_ref, double * const max_ref, double * const bar_ref, int * const j_ref, const double * const high, int i, int trail)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  maxi = trail;\n  max = high[maxi];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = high[j];\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stoch_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const low",
                "int i",
                "int trail"
            ],
            "definition": "void helper_helper_ti_stoch_1_2(int * const mini_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const low, int i, int trail)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  mini = trail;\n  min = low[mini];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = low[j];\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stoch_1_3",
            "header": "",
            "params": [
                "ti_buffer * const k_sum",
                "const double kfast"
            ],
            "definition": "void helper_helper_ti_stoch_1_3(ti_buffer * const k_sum, const double kfast)\n{\n  if (k_sum->pushes >= k_sum->size)\n  {\n    k_sum->sum -= k_sum->vals[k_sum->index];\n  }\n  k_sum->sum += kfast;\n  k_sum->vals[k_sum->index] = kfast;\n  k_sum->pushes += 1;\n  k_sum->index = k_sum->index + 1;\n  if (k_sum->index >= k_sum->size)\n  {\n    k_sum->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k_sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const k_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kfast",
                        "type": "const double",
                        "definition": [
                            "const double kfast"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stoch_1_4",
            "header": "",
            "params": [
                "unsigned int * const stoch_idx_ref",
                "const int kperiod",
                "const int kslow",
                "const int dperiod",
                "const double kper",
                "const double dper",
                "double * const stoch",
                "double * const stoch_ma",
                "ti_buffer * const k_sum",
                "ti_buffer * const d_sum",
                "int i"
            ],
            "definition": "void helper_helper_ti_stoch_1_4(unsigned int * const stoch_idx_ref, const int kperiod, const int kslow, const int dperiod, const double kper, const double dper, double * const stoch, double * const stoch_ma, ti_buffer * const k_sum, ti_buffer * const d_sum, int i)\n{\n  unsigned int stoch_idx = *stoch_idx_ref;\n  const double k = k_sum->sum * kper;\n  do\n  {\n    if (d_sum->pushes >= d_sum->size)\n    {\n      d_sum->sum -= d_sum->vals[d_sum->index];\n    }\n    d_sum->sum += k;\n    d_sum->vals[d_sum->index] = k;\n    d_sum->pushes += 1;\n    d_sum->index = d_sum->index + 1;\n    if (d_sum->index >= d_sum->size)\n    {\n      d_sum->index = 0;\n    }\n  }\n  while (0);\n  if (i >= (((((kperiod - 1) + kslow) - 1) + dperiod) - 1))\n  {\n    stoch[stoch_idx] = k;\n    stoch_idx += 1;\n    *(stoch_ma++) = d_sum->sum * dper;\n  }\n  *stoch_idx_ref = stoch_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stoch_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const stoch_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kperiod",
                        "type": "const int",
                        "definition": [
                            "const int kperiod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kslow",
                        "type": "const int",
                        "definition": [
                            "const int kslow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dperiod",
                        "type": "const int",
                        "definition": [
                            "const int dperiod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kper",
                        "type": "const double",
                        "definition": [
                            "const double kper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dper",
                        "type": "const double",
                        "definition": [
                            "const double dper"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch",
                        "type": "double * const",
                        "definition": [
                            "double * const stoch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_ma",
                        "type": "double * const",
                        "definition": [
                            "double * const stoch_ma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const k_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_sum",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const d_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stoch_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int stoch_idx = *stoch_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const double",
                        "definition": [
                            "const double k = k_sum->sum * kper"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stochrsi_start",
            "header": "int ti_stochrsi_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_stochrsi_start(const double *options)\n{\n  return (((int) options[0]) * 2) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stochrsi",
            "header": "int ti_stochrsi(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_stochrsi(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double per = 1.0 / ((double) period);\n  if (period < 2)\n  {\n    return 1;\n  }\n  if (size <= ti_stochrsi_start(options))\n  {\n    return 0;\n  }\n  ti_buffer *rsi = ti_buffer_new(period);\n  double smooth_up = 0;\n  double smooth_down = 0;\n  int i;\n  for (i = 1; i <= period; i += 1)\n  {\n    const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n    const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n    smooth_up += upward;\n    smooth_down += downward;\n  }\n\n  smooth_up /= period;\n  smooth_down /= period;\n  double r = 100.0 * (smooth_up / (smooth_up + smooth_down));\n  do\n  {\n    helper_ti_stochrsi_1(rsi, r);\n  }\n  while (0);\n  double min = r;\n  double max = r;\n  int mini = 0;\n  int maxi = 0;\n  for (i = period + 1; i < size; i += 1)\n  {\n    helper_ti_stochrsi_2(&output_idx, &smooth_up, &smooth_down, &r, &min, &max, &mini, &maxi, input, period, output, per, rsi, i);\n  }\n\n  ti_buffer_free(rsi);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_stochrsi_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_stochrsi_1",
                "helper_ti_stochrsi_2",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_stochrsi_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsi",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *rsi = ti_buffer_new(period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up",
                        "type": "double",
                        "definition": [
                            "double smooth_up = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down",
                        "type": "double",
                        "definition": [
                            "double smooth_down = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upward",
                        "type": "const double",
                        "definition": [
                            "const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downward",
                        "type": "const double",
                        "definition": [
                            "const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r = 100.0 * (smooth_up / (smooth_up + smooth_down))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_stochrsi_1",
            "header": "",
            "params": [
                "ti_buffer * const rsi",
                "double r"
            ],
            "definition": "void helper_ti_stochrsi_1(ti_buffer * const rsi, double r)\n{\n  if (rsi->pushes >= rsi->size)\n  {\n    rsi->sum -= rsi->vals[rsi->index];\n  }\n  rsi->sum += r;\n  rsi->vals[rsi->index] = r;\n  rsi->pushes += 1;\n  rsi->index = rsi->index + 1;\n  if (rsi->index >= rsi->size)\n  {\n    rsi->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rsi",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const rsi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_stochrsi_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const smooth_up_ref",
                "double * const smooth_down_ref",
                "double * const r_ref",
                "double * const min_ref",
                "double * const max_ref",
                "int * const mini_ref",
                "int * const maxi_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double per",
                "ti_buffer * const rsi",
                "int i"
            ],
            "definition": "void helper_ti_stochrsi_2(unsigned int * const output_idx_ref, double * const smooth_up_ref, double * const smooth_down_ref, double * const r_ref, double * const min_ref, double * const max_ref, int * const mini_ref, int * const maxi_ref, const double * const input, const int period, double * const output, const double per, ti_buffer * const rsi, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double smooth_up = *smooth_up_ref;\n  double smooth_down = *smooth_down_ref;\n  double r = *r_ref;\n  double min = *min_ref;\n  double max = *max_ref;\n  int mini = *mini_ref;\n  int maxi = *maxi_ref;\n  const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0);\n  const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0);\n  smooth_up = ((upward - smooth_up) * per) + smooth_up;\n  smooth_down = ((downward - smooth_down) * per) + smooth_down;\n  r = 100.0 * (smooth_up / (smooth_up + smooth_down));\n  if (r > max)\n  {\n    max = r;\n    maxi = rsi->index;\n  }\n  else\n    if (maxi == rsi->index)\n  {\n    helper_helper_ti_stochrsi_2_2(&max, &maxi, rsi, r);\n  }\n  if (r < min)\n  {\n    min = r;\n    mini = rsi->index;\n  }\n  else\n    if (mini == rsi->index)\n  {\n    helper_helper_ti_stochrsi_2_3(&min, &mini, rsi, r);\n  }\n  do\n  {\n    rsi->vals[rsi->index] = r;\n    rsi->index = rsi->index + 1;\n    if (rsi->index >= rsi->size)\n    {\n      rsi->index = 0;\n    }\n  }\n  while (0);\n  if (i > ((period * 2) - 2))\n  {\n    helper_helper_ti_stochrsi_2_1(&output_idx, output, r, min, max);\n  }\n  *output_idx_ref = output_idx;\n  *smooth_up_ref = smooth_up;\n  *smooth_down_ref = smooth_down;\n  *r_ref = r;\n  *min_ref = min;\n  *max_ref = max;\n  *mini_ref = mini;\n  *maxi_ref = maxi;\n}\n\n",
            "calle": [
                "helper_helper_ti_stochrsi_2_1",
                "helper_helper_ti_stochrsi_2_2",
                "helper_helper_ti_stochrsi_2_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const smooth_up_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const smooth_down_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsi",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const rsi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_up",
                        "type": "double",
                        "definition": [
                            "double smooth_up = *smooth_up_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smooth_down",
                        "type": "double",
                        "definition": [
                            "double smooth_down = *smooth_down_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upward",
                        "type": "const double",
                        "definition": [
                            "const double upward = (input[i] > input[i - 1]) ? (input[i] - input[i - 1]) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "downward",
                        "type": "const double",
                        "definition": [
                            "const double downward = (input[i] < input[i - 1]) ? (input[i - 1] - input[i]) : (0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stochrsi_2_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const output",
                "double r",
                "double min",
                "double max"
            ],
            "definition": "void helper_helper_ti_stochrsi_2_1(unsigned int * const output_idx_ref, double * const output, double r, double min, double max)\n{\n  unsigned int output_idx = *output_idx_ref;\n  const double diff = max - min;\n  if (diff == 0.0)\n  {\n    output[output_idx] = 0.0;\n    output_idx += 1;\n  }\n  else\n  {\n    output[output_idx] = (r - min) / diff;\n    output_idx += 1;\n  }\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "const double",
                        "definition": [
                            "const double diff = max - min"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stochrsi_2_2",
            "header": "",
            "params": [
                "double * const max_ref",
                "int * const maxi_ref",
                "ti_buffer * const rsi",
                "double r"
            ],
            "definition": "void helper_helper_ti_stochrsi_2_2(double * const max_ref, int * const maxi_ref, ti_buffer * const rsi, double r)\n{\n  double max = *max_ref;\n  int maxi = *maxi_ref;\n  max = r;\n  int j;\n  for (j = 0; j < rsi->size; j += 1)\n  {\n    if (j == rsi->index)\n    {\n      continue;\n    }\n    if (rsi->vals[j] > max)\n    {\n      max = rsi->vals[j];\n      maxi = j;\n    }\n  }\n\n  *max_ref = max;\n  *maxi_ref = maxi;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsi",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const rsi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_stochrsi_2_3",
            "header": "",
            "params": [
                "double * const min_ref",
                "int * const mini_ref",
                "ti_buffer * const rsi",
                "double r"
            ],
            "definition": "void helper_helper_ti_stochrsi_2_3(double * const min_ref, int * const mini_ref, ti_buffer * const rsi, double r)\n{\n  double min = *min_ref;\n  int mini = *mini_ref;\n  min = r;\n  int j;\n  for (j = 0; j < rsi->size; j += 1)\n  {\n    if (j == rsi->index)\n    {\n      continue;\n    }\n    if (rsi->vals[j] < min)\n    {\n      min = rsi->vals[j];\n      mini = j;\n    }\n  }\n\n  *min_ref = min;\n  *mini_ref = mini;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsi",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const rsi"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sub_start",
            "header": "int ti_sub_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sub_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sub",
            "header": "int ti_sub(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sub(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  const double *in2 = inputs[1];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] - in2[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in2",
                        "type": "const double *",
                        "definition": [
                            "const double *in2 = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sum_start",
            "header": "int ti_sum_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_sum_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_sum",
            "header": "int ti_sum(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_sum(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_sum_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n  }\n\n  output[output_idx] = sum;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    sum += input[i];\n    sum -= input[i - period];\n    output[output_idx] = sum;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_sum_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_sum_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tan_start",
            "header": "int ti_tan_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_tan_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tan",
            "header": "int ti_tan(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_tan(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = tan(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "tan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tanh_start",
            "header": "int ti_tanh_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_tanh_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tanh",
            "header": "int ti_tanh(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_tanh(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = tanh(in1[i]);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "tanh"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tema_start",
            "header": "int ti_tema_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_tema_start(const double *options)\n{\n  const int period = (int) options[0];\n  return (period - 1) * 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tema",
            "header": "int ti_tema(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_tema(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_tema_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (((double) period) + 1);\n  const double per1 = 1.0 - per;\n  double ema = input[0];\n  double ema2 = 0;\n  double ema3 = 0;\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    helper_ti_tema_1(&output_idx, &ema, &ema2, &ema3, input, period, output, per, per1, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_tema_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_tema_1",
                "ti_tema_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per1",
                        "type": "const double",
                        "definition": [
                            "const double per1 = 1.0 - per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema",
                        "type": "double",
                        "definition": [
                            "double ema = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3",
                        "type": "double",
                        "definition": [
                            "double ema3 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_tema_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const ema_ref",
                "double * const ema2_ref",
                "double * const ema3_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double per",
                "const double per1",
                "int i"
            ],
            "definition": "void helper_ti_tema_1(unsigned int * const output_idx_ref, double * const ema_ref, double * const ema2_ref, double * const ema3_ref, const double * const input, const int period, double * const output, const double per, const double per1, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double ema = *ema_ref;\n  double ema2 = *ema2_ref;\n  double ema3 = *ema3_ref;\n  ema = (ema * per1) + (input[i] * per);\n  if (i == (period - 1))\n  {\n    ema2 = ema;\n  }\n  if (i >= (period - 1))\n  {\n    ema2 = (ema2 * per1) + (ema * per);\n    if (i == ((period - 1) * 2))\n    {\n      ema3 = ema2;\n    }\n    if (i >= ((period - 1) * 2))\n    {\n      ema3 = (ema3 * per1) + (ema2 * per);\n      if (i >= ((period - 1) * 3))\n      {\n        output[output_idx] = ((3 * ema) - (3 * ema2)) + ema3;\n        output_idx += 1;\n      }\n    }\n  }\n  *output_idx_ref = output_idx;\n  *ema_ref = ema;\n  *ema2_ref = ema2;\n  *ema3_ref = ema3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per1",
                        "type": "const double",
                        "definition": [
                            "const double per1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema",
                        "type": "double",
                        "definition": [
                            "double ema = *ema_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = *ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3",
                        "type": "double",
                        "definition": [
                            "double ema3 = *ema3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_todeg_start",
            "header": "int ti_todeg_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_todeg_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_todeg",
            "header": "int ti_todeg(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_todeg(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] * (180.0 / 3.14159265358979323846);\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_torad_start",
            "header": "int ti_torad_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_torad_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_torad",
            "header": "int ti_torad(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_torad(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = in1[i] * (3.14159265358979323846 / 180.0);\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tr_start",
            "header": "int ti_tr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_tr_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tr",
            "header": "int ti_tr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_tr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  (void) options;\n  double *output = outputs[0];\n  double truerange;\n  output[0] = high[0] - low[0];\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    do\n    {\n      const double l = low[i];\n      const double h = high[i];\n      const double c = close[i - 1];\n      const double ych = fabs(h - c);\n      const double ycl = fabs(l - c);\n      double v = h - l;\n      if (ych > v)\n      {\n        v = ych;\n      }\n      if (ycl > v)\n      {\n        v = ycl;\n      }\n      truerange = v;\n    }\n    while (0);\n    output[i] = truerange;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truerange",
                        "type": "double",
                        "definition": [
                            "double truerange"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "const double",
                        "definition": [
                            "const double l = low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const double",
                        "definition": [
                            "const double h = high[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ych",
                        "type": "const double",
                        "definition": [
                            "const double ych = fabs(h - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ycl",
                        "type": "const double",
                        "definition": [
                            "const double ycl = fabs(l - c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = h - l"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trima_start",
            "header": "int ti_trima_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_trima_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trima",
            "header": "int ti_trima(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_trima(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_trima_start(options))\n  {\n    return 0;\n  }\n  if (period <= 2)\n  {\n    return ti_sma(size, inputs, options, outputs);\n  }\n  double weights = 1 / ((double) ((period % 2) ? (((period / 2) + 1) * ((period / 2) + 1)) : (((period / 2) + 1) * (period / 2))));\n  double weight_sum = 0;\n  double lead_sum = 0;\n  double trail_sum = 0;\n  const int lead_period = (period % 2) ? (period / 2) : ((period / 2) - 1);\n  const int trail_period = lead_period + 1;\n  int i;\n  int w = 1;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    helper_ti_trima_1(&weight_sum, &lead_sum, &trail_sum, &w, input, period, lead_period, trail_period, i);\n  }\n\n  int lsi = ((period - 1) - lead_period) + 1;\n  int tsi1 = (((period - 1) - period) + 1) + trail_period;\n  int tsi2 = ((period - 1) - period) + 1;\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_ti_trima_2(&output_idx, &weight_sum, &lead_sum, &trail_sum, &lsi, input, output, weights, i, tsi1, tsi2);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_trima_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_trima_1",
                "helper_ti_trima_2",
                "ti_sma",
                "ti_trima_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights",
                        "type": "double",
                        "definition": [
                            "double weights = 1 / ((double) ((period % 2) ? (((period / 2) + 1) * ((period / 2) + 1)) : (((period / 2) + 1) * (period / 2))))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_sum",
                        "type": "double",
                        "definition": [
                            "double lead_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_sum",
                        "type": "double",
                        "definition": [
                            "double trail_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_period",
                        "type": "const int",
                        "definition": [
                            "const int lead_period = (period % 2) ? (period / 2) : ((period / 2) - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_period",
                        "type": "const int",
                        "definition": [
                            "const int trail_period = lead_period + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lsi",
                        "type": "int",
                        "definition": [
                            "int lsi = ((period - 1) - lead_period) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsi1",
                        "type": "int",
                        "definition": [
                            "int tsi1 = (((period - 1) - period) + 1) + trail_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsi2",
                        "type": "int",
                        "definition": [
                            "int tsi2 = ((period - 1) - period) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_trima_1",
            "header": "",
            "params": [
                "double * const weight_sum_ref",
                "double * const lead_sum_ref",
                "double * const trail_sum_ref",
                "int * const w_ref",
                "const double * const input",
                "const int period",
                "const int lead_period",
                "const int trail_period",
                "int i"
            ],
            "definition": "void helper_ti_trima_1(double * const weight_sum_ref, double * const lead_sum_ref, double * const trail_sum_ref, int * const w_ref, const double * const input, const int period, const int lead_period, const int trail_period, int i)\n{\n  double weight_sum = *weight_sum_ref;\n  double lead_sum = *lead_sum_ref;\n  double trail_sum = *trail_sum_ref;\n  int w = *w_ref;\n  weight_sum += input[i] * w;\n  if ((i + 1) > (period - lead_period))\n  {\n    lead_sum += input[i];\n  }\n  if ((i + 1) <= trail_period)\n  {\n    trail_sum += input[i];\n  }\n  if ((i + 1) < trail_period)\n  {\n    w += 1;\n  }\n  if ((i + 1) >= (period - lead_period))\n  {\n    w -= 1;\n  }\n  *weight_sum_ref = weight_sum;\n  *lead_sum_ref = lead_sum;\n  *trail_sum_ref = trail_sum;\n  *w_ref = w;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "weight_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const lead_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const trail_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const w_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_period",
                        "type": "const int",
                        "definition": [
                            "const int lead_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_period",
                        "type": "const int",
                        "definition": [
                            "const int trail_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = *weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_sum",
                        "type": "double",
                        "definition": [
                            "double lead_sum = *lead_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_sum",
                        "type": "double",
                        "definition": [
                            "double trail_sum = *trail_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = *w_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_trima_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const weight_sum_ref",
                "double * const lead_sum_ref",
                "double * const trail_sum_ref",
                "int * const lsi_ref",
                "const double * const input",
                "double * const output",
                "double weights",
                "int i",
                "int tsi1",
                "int tsi2"
            ],
            "definition": "void helper_ti_trima_2(unsigned int * const output_idx_ref, double * const weight_sum_ref, double * const lead_sum_ref, double * const trail_sum_ref, int * const lsi_ref, const double * const input, double * const output, double weights, int i, int tsi1, int tsi2)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double weight_sum = *weight_sum_ref;\n  double lead_sum = *lead_sum_ref;\n  double trail_sum = *trail_sum_ref;\n  int lsi = *lsi_ref;\n  weight_sum += input[i];\n  output[output_idx] = weight_sum * weights;\n  output_idx += 1;\n  lead_sum += input[i];\n  weight_sum += lead_sum;\n  weight_sum -= trail_sum;\n  lead_sum -= input[lsi];\n  lsi += 1;\n  trail_sum += input[tsi1++];\n  trail_sum -= input[tsi2++];\n  *output_idx_ref = output_idx;\n  *weight_sum_ref = weight_sum;\n  *lead_sum_ref = lead_sum;\n  *trail_sum_ref = trail_sum;\n  *lsi_ref = lsi;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const lead_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const trail_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lsi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lsi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights",
                        "type": "double",
                        "definition": [
                            "double weights"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsi1",
                        "type": "int",
                        "definition": [
                            "int tsi1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tsi2",
                        "type": "int",
                        "definition": [
                            "int tsi2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = *weight_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lead_sum",
                        "type": "double",
                        "definition": [
                            "double lead_sum = *lead_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail_sum",
                        "type": "double",
                        "definition": [
                            "double trail_sum = *trail_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lsi",
                        "type": "int",
                        "definition": [
                            "int lsi = *lsi_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trix_start",
            "header": "int ti_trix_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_trix_start(const double *options)\n{\n  const int period = (int) options[0];\n  return ((period - 1) * 3) + 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trix",
            "header": "int ti_trix(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_trix(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_trix_start(options))\n  {\n    return 0;\n  }\n  const int start = (period * 3) - 2;\n  assert(start == ti_trix_start(options));\n  const double per = 2 / (((double) period) + 1);\n  double ema1 = input[0];\n  double ema2 = 0;\n  double ema3 = 0;\n  int i;\n  for (i = 1; i < start; i += 1)\n  {\n    helper_ti_trix_2(&ema1, &ema2, &ema3, input, period, per, i);\n  }\n\n  for (i = start; i < size; i += 1)\n  {\n    helper_ti_trix_1(&output_idx, &ema1, &ema2, &ema3, input, output, per, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_trix_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_trix_1",
                "helper_ti_trix_2",
                "ti_trix_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start = (period * 3) - 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema1",
                        "type": "double",
                        "definition": [
                            "double ema1 = input[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3",
                        "type": "double",
                        "definition": [
                            "double ema3 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_trix_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const ema1_ref",
                "double * const ema2_ref",
                "double * const ema3_ref",
                "const double * const input",
                "double * const output",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_trix_1(unsigned int * const output_idx_ref, double * const ema1_ref, double * const ema2_ref, double * const ema3_ref, const double * const input, double * const output, const double per, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double ema1 = *ema1_ref;\n  double ema2 = *ema2_ref;\n  double ema3 = *ema3_ref;\n  ema1 = ((input[i] - ema1) * per) + ema1;\n  ema2 = ((ema1 - ema2) * per) + ema2;\n  const double last = ema3;\n  ema3 = ((ema2 - ema3) * per) + ema3;\n  output[output_idx] = ((ema3 - last) / ema3) * 100.0;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *ema1_ref = ema1;\n  *ema2_ref = ema2;\n  *ema3_ref = ema3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema1",
                        "type": "double",
                        "definition": [
                            "double ema1 = *ema1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = *ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3",
                        "type": "double",
                        "definition": [
                            "double ema3 = *ema3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "const double",
                        "definition": [
                            "const double last = ema3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_trix_2",
            "header": "",
            "params": [
                "double * const ema1_ref",
                "double * const ema2_ref",
                "double * const ema3_ref",
                "const double * const input",
                "const int period",
                "const double per",
                "int i"
            ],
            "definition": "void helper_ti_trix_2(double * const ema1_ref, double * const ema2_ref, double * const ema3_ref, const double * const input, const int period, const double per, int i)\n{\n  double ema1 = *ema1_ref;\n  double ema2 = *ema2_ref;\n  double ema3 = *ema3_ref;\n  ema1 = ((input[i] - ema1) * per) + ema1;\n  if (i == (period - 1))\n  {\n    ema2 = ema1;\n  }\n  else\n    if (i > (period - 1))\n  {\n    ema2 = ((ema1 - ema2) * per) + ema2;\n    if (i == ((period * 2) - 2))\n    {\n      ema3 = ema2;\n    }\n    else\n      if (i > ((period * 2) - 2))\n    {\n      ema3 = ((ema2 - ema3) * per) + ema3;\n    }\n  }\n  *ema1_ref = ema1;\n  *ema2_ref = ema2;\n  *ema3_ref = ema3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ema1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const ema3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema1",
                        "type": "double",
                        "definition": [
                            "double ema1 = *ema1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema2",
                        "type": "double",
                        "definition": [
                            "double ema2 = *ema2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ema3",
                        "type": "double",
                        "definition": [
                            "double ema3 = *ema3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trunc_start",
            "header": "int ti_trunc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_trunc_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_trunc",
            "header": "int ti_trunc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_trunc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in1 = inputs[0];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = (int) in1[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in1",
                        "type": "const double *",
                        "definition": [
                            "const double *in1 = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tsf_start",
            "header": "int ti_tsf_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_tsf_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_tsf",
            "header": "int ti_tsf(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_tsf(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_tsf_start(options))\n  {\n    return 0;\n  }\n  do\n  {\n    helper_ti_tsf_1(&output_idx, size, input, period, output);\n  }\n  while (0);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_tsf_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_tsf_1",
                "ti_tsf_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_tsf_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int size",
                "const double * const input",
                "const int period",
                "double * const output"
            ],
            "definition": "void helper_ti_tsf_1(unsigned int * const output_idx_ref, int size, const double * const input, const int period, double * const output)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double x = 0;\n  double x2 = 0;\n  double y = 0;\n  double xy = 0;\n  const double p = 1.0 / period;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    x += i + 1;\n    x2 += (i + 1) * (i + 1);\n    xy += input[i] * (i + 1);\n    y += input[i];\n  }\n\n  x += period;\n  x2 += period * period;\n  const double bd = 1.0 / ((period * x2) - (x * x));\n  for (i = period - 1; i < size; i += 1)\n  {\n    helper_helper_ti_tsf_1_1(&output_idx, &y, &xy, input, period, output, x, p, i, bd);\n  }\n\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [
                "helper_helper_ti_tsf_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "double",
                        "definition": [
                            "double x2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd = 1.0 / ((period * x2) - (x * x))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_tsf_1_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const y_ref",
                "double * const xy_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "double x",
                "const double p",
                "int i",
                "const double bd"
            ],
            "definition": "void helper_helper_ti_tsf_1_1(unsigned int * const output_idx_ref, double * const y_ref, double * const xy_ref, const double * const input, const int period, double * const output, double x, const double p, int i, const double bd)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double y = *y_ref;\n  double xy = *xy_ref;\n  xy += input[i] * period;\n  y += input[i];\n  const double b = ((period * xy) - (x * y)) * bd;\n  do\n  {\n    const double a = (y - (b * x)) * p;\n    output[output_idx] = a + (b * (period + 1));\n    output_idx += 1;\n  }\n  while (0);\n  xy -= y;\n  y -= input[(i - period) + 1];\n  *output_idx_ref = output_idx;\n  *y_ref = y;\n  *xy_ref = xy;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double",
                        "definition": [
                            "const double p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bd",
                        "type": "const double",
                        "definition": [
                            "const double bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = *xy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const double",
                        "definition": [
                            "const double b = ((period * xy) - (x * y)) * bd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "const double",
                        "definition": [
                            "const double a = (y - (b * x)) * p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_typprice_start",
            "header": "int ti_typprice_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_typprice_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_typprice",
            "header": "int ti_typprice(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_typprice(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = ((high[i] + low[i]) + close[i]) * (1.0 / 3.0);\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ultosc_start",
            "header": "int ti_ultosc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_ultosc_start(const double *options)\n{\n  return (int) options[2];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_ultosc",
            "header": "int ti_ultosc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_ultosc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int short_period = (int) options[0];\n  const int medium_period = (int) options[1];\n  const int long_period = (int) options[2];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (medium_period < short_period)\n  {\n    return 1;\n  }\n  if (long_period < medium_period)\n  {\n    return 1;\n  }\n  if (size <= ti_ultosc_start(options))\n  {\n    return 0;\n  }\n  ti_buffer *bp_buf = ti_buffer_new(long_period);\n  ti_buffer *r_buf = ti_buffer_new(long_period);\n  double bp_short_sum = 0;\n  double bp_medium_sum = 0;\n  double r_short_sum = 0;\n  double r_medium_sum = 0;\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    helper_ti_ultosc_1(&output_idx, &bp_short_sum, &bp_medium_sum, &r_short_sum, &r_medium_sum, high, low, close, short_period, medium_period, long_period, output, bp_buf, r_buf, i);\n  }\n\n  ti_buffer_free(bp_buf);\n  ti_buffer_free(r_buf);\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_ultosc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_ultosc_1",
                "ti_buffer_free",
                "ti_buffer_new",
                "ti_ultosc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "medium_period",
                        "type": "const int",
                        "definition": [
                            "const int medium_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_buf",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *bp_buf = ti_buffer_new(long_period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_buf",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *r_buf = ti_buffer_new(long_period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_short_sum",
                        "type": "double",
                        "definition": [
                            "double bp_short_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum",
                        "type": "double",
                        "definition": [
                            "double bp_medium_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum",
                        "type": "double",
                        "definition": [
                            "double r_short_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum",
                        "type": "double",
                        "definition": [
                            "double r_medium_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_ultosc_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const bp_short_sum_ref",
                "double * const bp_medium_sum_ref",
                "double * const r_short_sum_ref",
                "double * const r_medium_sum_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "const int short_period",
                "const int medium_period",
                "const int long_period",
                "double * const output",
                "ti_buffer * const bp_buf",
                "ti_buffer * const r_buf",
                "int i"
            ],
            "definition": "void helper_ti_ultosc_1(unsigned int * const output_idx_ref, double * const bp_short_sum_ref, double * const bp_medium_sum_ref, double * const r_short_sum_ref, double * const r_medium_sum_ref, const double * const high, const double * const low, const double * const close, const int short_period, const int medium_period, const int long_period, double * const output, ti_buffer * const bp_buf, ti_buffer * const r_buf, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double bp_short_sum = *bp_short_sum_ref;\n  double bp_medium_sum = *bp_medium_sum_ref;\n  double r_short_sum = *r_short_sum_ref;\n  double r_medium_sum = *r_medium_sum_ref;\n  const double true_low = (low[i] < close[i - 1]) ? (low[i]) : (close[i - 1]);\n  const double true_high = (high[i] > close[i - 1]) ? (high[i]) : (close[i - 1]);\n  const double bp = close[i] - true_low;\n  const double r = true_high - true_low;\n  bp_short_sum += bp;\n  bp_medium_sum += bp;\n  r_short_sum += r;\n  r_medium_sum += r;\n  do\n  {\n    helper_helper_ti_ultosc_1_2(bp_buf, bp);\n  }\n  while (0);\n  do\n  {\n    helper_helper_ti_ultosc_1_3(r_buf, r);\n  }\n  while (0);\n  if (i > short_period)\n  {\n    helper_helper_ti_ultosc_1_4(&bp_short_sum, &bp_medium_sum, &r_short_sum, &r_medium_sum, short_period, medium_period, long_period, bp_buf, r_buf, i);\n  }\n  if (i >= long_period)\n  {\n    helper_helper_ti_ultosc_1_1(&output_idx, output, bp_buf, r_buf, bp_short_sum, bp_medium_sum, r_short_sum, r_medium_sum);\n  }\n  *output_idx_ref = output_idx;\n  *bp_short_sum_ref = bp_short_sum;\n  *bp_medium_sum_ref = bp_medium_sum;\n  *r_short_sum_ref = r_short_sum;\n  *r_medium_sum_ref = r_medium_sum;\n}\n\n",
            "calle": [
                "helper_helper_ti_ultosc_1_1",
                "helper_helper_ti_ultosc_1_2",
                "helper_helper_ti_ultosc_1_3",
                "helper_helper_ti_ultosc_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bp_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bp_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const r_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const r_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "medium_period",
                        "type": "const int",
                        "definition": [
                            "const int medium_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const bp_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const r_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_short_sum",
                        "type": "double",
                        "definition": [
                            "double bp_short_sum = *bp_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum",
                        "type": "double",
                        "definition": [
                            "double bp_medium_sum = *bp_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum",
                        "type": "double",
                        "definition": [
                            "double r_short_sum = *r_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum",
                        "type": "double",
                        "definition": [
                            "double r_medium_sum = *r_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "true_low",
                        "type": "const double",
                        "definition": [
                            "const double true_low = (low[i] < close[i - 1]) ? (low[i]) : (close[i - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "true_high",
                        "type": "const double",
                        "definition": [
                            "const double true_high = (high[i] > close[i - 1]) ? (high[i]) : (close[i - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "const double",
                        "definition": [
                            "const double bp = close[i] - true_low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const double",
                        "definition": [
                            "const double r = true_high - true_low"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_ultosc_1_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const output",
                "ti_buffer * const bp_buf",
                "ti_buffer * const r_buf",
                "double bp_short_sum",
                "double bp_medium_sum",
                "double r_short_sum",
                "double r_medium_sum"
            ],
            "definition": "void helper_helper_ti_ultosc_1_1(unsigned int * const output_idx_ref, double * const output, ti_buffer * const bp_buf, ti_buffer * const r_buf, double bp_short_sum, double bp_medium_sum, double r_short_sum, double r_medium_sum)\n{\n  unsigned int output_idx = *output_idx_ref;\n  const double first = (4 * bp_short_sum) / r_short_sum;\n  const double second = (2 * bp_medium_sum) / r_medium_sum;\n  const double third = (1 * bp_buf->sum) / r_buf->sum;\n  const double ult = (((first + second) + third) * 100.0) / 7.0;\n  output[output_idx] = ult;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const bp_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const r_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_short_sum",
                        "type": "double",
                        "definition": [
                            "double bp_short_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum",
                        "type": "double",
                        "definition": [
                            "double bp_medium_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum",
                        "type": "double",
                        "definition": [
                            "double r_short_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum",
                        "type": "double",
                        "definition": [
                            "double r_medium_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "first",
                        "type": "const double",
                        "definition": [
                            "const double first = (4 * bp_short_sum) / r_short_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "second",
                        "type": "const double",
                        "definition": [
                            "const double second = (2 * bp_medium_sum) / r_medium_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "third",
                        "type": "const double",
                        "definition": [
                            "const double third = (1 * bp_buf->sum) / r_buf->sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ult",
                        "type": "const double",
                        "definition": [
                            "const double ult = (((first + second) + third) * 100.0) / 7.0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_ultosc_1_2",
            "header": "",
            "params": [
                "ti_buffer * const bp_buf",
                "const double bp"
            ],
            "definition": "void helper_helper_ti_ultosc_1_2(ti_buffer * const bp_buf, const double bp)\n{\n  if (bp_buf->pushes >= bp_buf->size)\n  {\n    bp_buf->sum -= bp_buf->vals[bp_buf->index];\n  }\n  bp_buf->sum += bp;\n  bp_buf->vals[bp_buf->index] = bp;\n  bp_buf->pushes += 1;\n  bp_buf->index = bp_buf->index + 1;\n  if (bp_buf->index >= bp_buf->size)\n  {\n    bp_buf->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bp_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const bp_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "const double",
                        "definition": [
                            "const double bp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_ultosc_1_3",
            "header": "",
            "params": [
                "ti_buffer * const r_buf",
                "const double r"
            ],
            "definition": "void helper_helper_ti_ultosc_1_3(ti_buffer * const r_buf, const double r)\n{\n  if (r_buf->pushes >= r_buf->size)\n  {\n    r_buf->sum -= r_buf->vals[r_buf->index];\n  }\n  r_buf->sum += r;\n  r_buf->vals[r_buf->index] = r;\n  r_buf->pushes += 1;\n  r_buf->index = r_buf->index + 1;\n  if (r_buf->index >= r_buf->size)\n  {\n    r_buf->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const r_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const double",
                        "definition": [
                            "const double r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_ultosc_1_4",
            "header": "",
            "params": [
                "double * const bp_short_sum_ref",
                "double * const bp_medium_sum_ref",
                "double * const r_short_sum_ref",
                "double * const r_medium_sum_ref",
                "const int short_period",
                "const int medium_period",
                "const int long_period",
                "ti_buffer * const bp_buf",
                "ti_buffer * const r_buf",
                "int i"
            ],
            "definition": "void helper_helper_ti_ultosc_1_4(double * const bp_short_sum_ref, double * const bp_medium_sum_ref, double * const r_short_sum_ref, double * const r_medium_sum_ref, const int short_period, const int medium_period, const int long_period, ti_buffer * const bp_buf, ti_buffer * const r_buf, int i)\n{\n  double bp_short_sum = *bp_short_sum_ref;\n  double bp_medium_sum = *bp_medium_sum_ref;\n  double r_short_sum = *r_short_sum_ref;\n  double r_medium_sum = *r_medium_sum_ref;\n  int short_index = (bp_buf->index - short_period) - 1;\n  if (short_index < 0)\n  {\n    short_index += long_period;\n  }\n  bp_short_sum -= bp_buf->vals[short_index];\n  r_short_sum -= r_buf->vals[short_index];\n  if (i > medium_period)\n  {\n    int medium_index = (bp_buf->index - medium_period) - 1;\n    if (medium_index < 0)\n    {\n      medium_index += long_period;\n    }\n    bp_medium_sum -= bp_buf->vals[medium_index];\n    r_medium_sum -= r_buf->vals[medium_index];\n  }\n  *bp_short_sum_ref = bp_short_sum;\n  *bp_medium_sum_ref = bp_medium_sum;\n  *r_short_sum_ref = r_short_sum;\n  *r_medium_sum_ref = r_medium_sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bp_short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bp_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bp_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const r_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const r_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "medium_period",
                        "type": "const int",
                        "definition": [
                            "const int medium_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const bp_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_buf",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const r_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_short_sum",
                        "type": "double",
                        "definition": [
                            "double bp_short_sum = *bp_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp_medium_sum",
                        "type": "double",
                        "definition": [
                            "double bp_medium_sum = *bp_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_short_sum",
                        "type": "double",
                        "definition": [
                            "double r_short_sum = *r_short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_medium_sum",
                        "type": "double",
                        "definition": [
                            "double r_medium_sum = *r_medium_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_index",
                        "type": "int",
                        "definition": [
                            "int short_index = (bp_buf->index - short_period) - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "medium_index",
                        "type": "int",
                        "definition": [
                            "int medium_index = (bp_buf->index - medium_period) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_var_start",
            "header": "int ti_var_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_var_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_var",
            "header": "int ti_var(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_var(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double scale = 1.0 / period;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_var_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double sum2 = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n    sum2 += input[i] * input[i];\n  }\n\n  output[output_idx] = (sum2 * scale) - ((sum * scale) * (sum * scale));\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_var_1(&output_idx, &sum, &sum2, input, period, output, scale, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_var_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_var_1",
                "ti_var_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_var_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const sum2_ref",
                "const double * const input",
                "const int period",
                "double * const output",
                "const double scale",
                "int i"
            ],
            "definition": "void helper_ti_var_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const sum2_ref, const double * const input, const int period, double * const output, const double scale, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double sum2 = *sum2_ref;\n  sum += input[i];\n  sum2 += input[i] * input[i];\n  sum -= input[i - period];\n  sum2 -= input[i - period] * input[i - period];\n  output[output_idx] = (sum2 * scale) - ((sum * scale) * (sum * scale));\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vhf_start",
            "header": "int ti_vhf_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_vhf_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vhf",
            "header": "int ti_vhf(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_vhf(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *in = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_vhf_start(options))\n  {\n    return 0;\n  }\n  int trail = 1;\n  int maxi = -1;\n  int mini = -1;\n  double max = in[0];\n  double min = in[0];\n  double bar;\n  double sum = 0;\n  int i;\n  int j;\n  double yc = in[0];\n  double c;\n  for (i = 1; i < period; i += 1)\n  {\n    c = in[i];\n    sum += fabs(c - yc);\n    yc = c;\n  }\n\n  for (i = period; i < size; i += 1, trail += 1)\n  {\n    helper_ti_vhf_1(&output_idx, &maxi, &mini, &max, &min, &bar, &sum, &j, &yc, &c, in, period, output, trail, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_vhf_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "fabs",
                "helper_ti_vhf_1",
                "ti_vhf_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const double *",
                        "definition": [
                            "const double *in = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = in[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = in[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yc",
                        "type": "double",
                        "definition": [
                            "double yc = in[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "double",
                        "definition": [
                            "double c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_vhf_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "double * const sum_ref",
                "int * const j_ref",
                "double * const yc_ref",
                "double * const c_ref",
                "const double * const in",
                "const int period",
                "double * const output",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_vhf_1(unsigned int * const output_idx_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, double * const bar_ref, double * const sum_ref, int * const j_ref, double * const yc_ref, double * const c_ref, const double * const in, const int period, double * const output, int trail, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  double sum = *sum_ref;\n  int j = *j_ref;\n  double yc = *yc_ref;\n  double c = *c_ref;\n  c = in[i];\n  sum += fabs(c - yc);\n  yc = c;\n  if (i > period)\n  {\n    sum -= fabs(in[i - period] - in[(i - period) - 1]);\n  }\n  bar = c;\n  if (maxi < trail)\n  {\n    helper_helper_ti_vhf_1_1(&maxi, &max, &bar, &j, in, trail, i);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = c;\n  if (mini < trail)\n  {\n    helper_helper_ti_vhf_1_2(&mini, &min, &bar, &j, in, trail, i);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  output[output_idx] = fabs(max - min) / sum;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *bar_ref = bar;\n  *sum_ref = sum;\n  *j_ref = j;\n  *yc_ref = yc;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "fabs",
                "helper_helper_ti_vhf_1_1",
                "helper_helper_ti_vhf_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yc_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const yc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const double * const",
                        "definition": [
                            "const double * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yc",
                        "type": "double",
                        "definition": [
                            "double yc = *yc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "double",
                        "definition": [
                            "double c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_vhf_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const in",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_vhf_1_1(int * const maxi_ref, double * const max_ref, double * const bar_ref, int * const j_ref, const double * const in, int trail, int i)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  maxi = trail;\n  max = in[maxi];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = in[j];\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const double * const",
                        "definition": [
                            "const double * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_vhf_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const in",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_vhf_1_2(int * const mini_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const in, int trail, int i)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  mini = trail;\n  min = in[mini];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = in[j];\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const double * const",
                        "definition": [
                            "const double * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vidya_start",
            "header": "int ti_vidya_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_vidya_start(const double *options)\n{\n  return ((int) options[1]) - 2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vidya",
            "header": "int ti_vidya(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_vidya(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  const double alpha = options[2];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const double short_div = 1.0 / short_period;\n  const double long_div = 1.0 / long_period;\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (long_period < 2)\n  {\n    return 1;\n  }\n  if ((alpha < 0.0) || (alpha > 1.0))\n  {\n    return 1;\n  }\n  if (size <= ti_vidya_start(options))\n  {\n    return 0;\n  }\n  double short_sum = 0;\n  double short_sum2 = 0;\n  double long_sum = 0;\n  double long_sum2 = 0;\n  int i;\n  for (i = 0; i < long_period; i += 1)\n  {\n    long_sum += input[i];\n    long_sum2 += input[i] * input[i];\n    if (i >= (long_period - short_period))\n    {\n      short_sum += input[i];\n      short_sum2 += input[i] * input[i];\n    }\n  }\n\n  double val = input[long_period - 2];\n  output[output_idx] = val;\n  output_idx += 1;\n  if ((long_period - 1) < size)\n  {\n    helper_ti_vidya_1(&output_idx, &val, input, long_period, alpha, output, short_div, long_div, short_sum, short_sum2, long_sum, long_sum2);\n  }\n  for (i = long_period; i < size; i += 1)\n  {\n    helper_ti_vidya_2(&output_idx, &short_sum, &short_sum2, &long_sum, &long_sum2, &val, input, short_period, long_period, alpha, output, short_div, long_div, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_vidya_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_vidya_1",
                "helper_ti_vidya_2",
                "ti_vidya_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "const double",
                        "definition": [
                            "const double alpha = options[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div = 1.0 / short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div = 1.0 / long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum2",
                        "type": "double",
                        "definition": [
                            "double short_sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum2",
                        "type": "double",
                        "definition": [
                            "double long_sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = input[long_period - 2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_vidya_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const val_ref",
                "const double * const input",
                "const int long_period",
                "const double alpha",
                "double * const output",
                "const double short_div",
                "const double long_div",
                "double short_sum",
                "double short_sum2",
                "double long_sum",
                "double long_sum2"
            ],
            "definition": "void helper_ti_vidya_1(unsigned int * const output_idx_ref, double * const val_ref, const double * const input, const int long_period, const double alpha, double * const output, const double short_div, const double long_div, double short_sum, double short_sum2, double long_sum, double long_sum2)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double val = *val_ref;\n  double short_stddev = sqrt((short_sum2 * short_div) - ((short_sum * short_div) * (short_sum * short_div)));\n  double long_stddev = sqrt((long_sum2 * long_div) - ((long_sum * long_div) * (long_sum * long_div)));\n  double k = short_stddev / long_stddev;\n  if (k != k)\n  {\n    k = 0;\n  }\n  k *= alpha;\n  val = ((input[long_period - 1] - val) * k) + val;\n  output[output_idx] = val;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "const double",
                        "definition": [
                            "const double alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum2",
                        "type": "double",
                        "definition": [
                            "double short_sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum2",
                        "type": "double",
                        "definition": [
                            "double long_sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_stddev",
                        "type": "double",
                        "definition": [
                            "double short_stddev = sqrt((short_sum2 * short_div) - ((short_sum * short_div) * (short_sum * short_div)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_stddev",
                        "type": "double",
                        "definition": [
                            "double long_stddev = sqrt((long_sum2 * long_div) - ((long_sum * long_div) * (long_sum * long_div)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "double",
                        "definition": [
                            "double k = short_stddev / long_stddev"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_vidya_2",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const short_sum_ref",
                "double * const short_sum2_ref",
                "double * const long_sum_ref",
                "double * const long_sum2_ref",
                "double * const val_ref",
                "const double * const input",
                "const int short_period",
                "const int long_period",
                "const double alpha",
                "double * const output",
                "const double short_div",
                "const double long_div",
                "int i"
            ],
            "definition": "void helper_ti_vidya_2(unsigned int * const output_idx_ref, double * const short_sum_ref, double * const short_sum2_ref, double * const long_sum_ref, double * const long_sum2_ref, double * const val_ref, const double * const input, const int short_period, const int long_period, const double alpha, double * const output, const double short_div, const double long_div, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double short_sum = *short_sum_ref;\n  double short_sum2 = *short_sum2_ref;\n  double long_sum = *long_sum_ref;\n  double long_sum2 = *long_sum2_ref;\n  double val = *val_ref;\n  long_sum += input[i];\n  long_sum2 += input[i] * input[i];\n  short_sum += input[i];\n  short_sum2 += input[i] * input[i];\n  long_sum -= input[i - long_period];\n  long_sum2 -= input[i - long_period] * input[i - long_period];\n  short_sum -= input[i - short_period];\n  short_sum2 -= input[i - short_period] * input[i - short_period];\n  {\n    helper_helper_ti_vidya_2_1(&output_idx, &val, input, alpha, output, short_div, long_div, i, short_sum, short_sum2, long_sum, long_sum2);\n  }\n  *output_idx_ref = output_idx;\n  *short_sum_ref = short_sum;\n  *short_sum2_ref = short_sum2;\n  *long_sum_ref = long_sum;\n  *long_sum2_ref = long_sum2;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "helper_helper_ti_vidya_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "const double",
                        "definition": [
                            "const double alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum = *short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum2",
                        "type": "double",
                        "definition": [
                            "double short_sum2 = *short_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum = *long_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum2",
                        "type": "double",
                        "definition": [
                            "double long_sum2 = *long_sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_vidya_2_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const val_ref",
                "const double * const input",
                "const double alpha",
                "double * const output",
                "const double short_div",
                "const double long_div",
                "int i",
                "double short_sum",
                "double short_sum2",
                "double long_sum",
                "double long_sum2"
            ],
            "definition": "void helper_helper_ti_vidya_2_1(unsigned int * const output_idx_ref, double * const val_ref, const double * const input, const double alpha, double * const output, const double short_div, const double long_div, int i, double short_sum, double short_sum2, double long_sum, double long_sum2)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double val = *val_ref;\n  double short_stddev = sqrt((short_sum2 * short_div) - ((short_sum * short_div) * (short_sum * short_div)));\n  double long_stddev = sqrt((long_sum2 * long_div) - ((long_sum * long_div) * (long_sum * long_div)));\n  double k = short_stddev / long_stddev;\n  if (k != k)\n  {\n    k = 0;\n  }\n  k *= alpha;\n  val = ((input[i] - val) * k) + val;\n  output[output_idx] = val;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "const double",
                        "definition": [
                            "const double alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum2",
                        "type": "double",
                        "definition": [
                            "double short_sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum2",
                        "type": "double",
                        "definition": [
                            "double long_sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_stddev",
                        "type": "double",
                        "definition": [
                            "double short_stddev = sqrt((short_sum2 * short_div) - ((short_sum * short_div) * (short_sum * short_div)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_stddev",
                        "type": "double",
                        "definition": [
                            "double long_stddev = sqrt((long_sum2 * long_div) - ((long_sum * long_div) * (long_sum * long_div)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "double",
                        "definition": [
                            "double k = short_stddev / long_stddev"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_volatility_start",
            "header": "int ti_volatility_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_volatility_start(const double *options)\n{\n  return (int) options[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_volatility",
            "header": "int ti_volatility(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_volatility(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int period = (int) options[0];\n  const double scale = 1.0 / period;\n  const double annual = sqrt(252);\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_volatility_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double sum2 = 0;\n  int i;\n  for (i = 1; i <= period; i += 1)\n  {\n    const double c = (input[i] / input[i - 1]) - 1.0;\n    sum += c;\n    sum2 += c * c;\n  }\n\n  output[output_idx] = sqrt((sum2 * scale) - ((sum * scale) * (sum * scale))) * annual;\n  output_idx += 1;\n  for (i = period + 1; i < size; i += 1)\n  {\n    helper_ti_volatility_1(&output_idx, &sum, &sum2, input, output, period, scale, annual, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_volatility_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_volatility_1",
                "sqrt",
                "ti_volatility_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "annual",
                        "type": "const double",
                        "definition": [
                            "const double annual = sqrt(252)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = (input[i] / input[i - 1]) - 1.0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_volatility_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const sum2_ref",
                "const double * const input",
                "double * const output",
                "const int period",
                "const double scale",
                "const double annual",
                "int i"
            ],
            "definition": "void helper_ti_volatility_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const sum2_ref, const double * const input, double * const output, const int period, const double scale, const double annual, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double sum2 = *sum2_ref;\n  const double c = (input[i] / input[i - 1]) - 1.0;\n  sum += c;\n  sum2 += c * c;\n  const double cp = (input[i - period] / input[(i - period) - 1]) - 1.0;\n  sum -= cp;\n  sum2 -= cp * cp;\n  output[output_idx] = sqrt((sum2 * scale) - ((sum * scale) * (sum * scale))) * annual;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "const double",
                        "definition": [
                            "const double scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "annual",
                        "type": "const double",
                        "definition": [
                            "const double annual"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "double",
                        "definition": [
                            "double sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = (input[i] / input[i - 1]) - 1.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "const double",
                        "definition": [
                            "const double cp = (input[i - period] / input[(i - period) - 1]) - 1.0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vosc_start",
            "header": "int ti_vosc_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_vosc_start(const double *options)\n{\n  return ((int) options[1]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vosc",
            "header": "int ti_vosc(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_vosc(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  const int short_period = (int) options[0];\n  const int long_period = (int) options[1];\n  const double short_div = 1.0 / short_period;\n  const double long_div = 1.0 / long_period;\n  if (short_period < 1)\n  {\n    return 1;\n  }\n  if (long_period < short_period)\n  {\n    return 1;\n  }\n  if (size <= ti_vosc_start(options))\n  {\n    return 0;\n  }\n  double short_sum = 0;\n  double long_sum = 0;\n  int i;\n  for (i = 0; i < long_period; i += 1)\n  {\n    if (i >= (long_period - short_period))\n    {\n      short_sum += input[i];\n    }\n    long_sum += input[i];\n  }\n\n  {\n    const double savg = short_sum * short_div;\n    const double lavg = long_sum * long_div;\n    output[output_idx] = (100.0 * (savg - lavg)) / lavg;\n    output_idx += 1;\n  }\n  for (i = long_period; i < size; i += 1)\n  {\n    helper_ti_vosc_1(&output_idx, &short_sum, &long_sum, input, output, short_period, long_period, short_div, long_div, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_vosc_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_vosc_1",
                "ti_vosc_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period = (int) options[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div = 1.0 / short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div = 1.0 / long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "savg",
                        "type": "const double",
                        "definition": [
                            "const double savg = short_sum * short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lavg",
                        "type": "const double",
                        "definition": [
                            "const double lavg = long_sum * long_div"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_vosc_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const short_sum_ref",
                "double * const long_sum_ref",
                "const double * const input",
                "double * const output",
                "const int short_period",
                "const int long_period",
                "const double short_div",
                "const double long_div",
                "int i"
            ],
            "definition": "void helper_ti_vosc_1(unsigned int * const output_idx_ref, double * const short_sum_ref, double * const long_sum_ref, const double * const input, double * const output, const int short_period, const int long_period, const double short_div, const double long_div, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double short_sum = *short_sum_ref;\n  double long_sum = *long_sum_ref;\n  short_sum += input[i];\n  short_sum -= input[i - short_period];\n  long_sum += input[i];\n  long_sum -= input[i - long_period];\n  const double savg = short_sum * short_div;\n  const double lavg = long_sum * long_div;\n  output[output_idx] = (100.0 * (savg - lavg)) / lavg;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *short_sum_ref = short_sum;\n  *long_sum_ref = long_sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const long_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_period",
                        "type": "const int",
                        "definition": [
                            "const int short_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_period",
                        "type": "const int",
                        "definition": [
                            "const int long_period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_div",
                        "type": "const double",
                        "definition": [
                            "const double short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_div",
                        "type": "const double",
                        "definition": [
                            "const double long_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "short_sum",
                        "type": "double",
                        "definition": [
                            "double short_sum = *short_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "long_sum",
                        "type": "double",
                        "definition": [
                            "double long_sum = *long_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "savg",
                        "type": "const double",
                        "definition": [
                            "const double savg = short_sum * short_div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lavg",
                        "type": "const double",
                        "definition": [
                            "const double lavg = long_sum * long_div"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vwma_start",
            "header": "int ti_vwma_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_vwma_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_vwma",
            "header": "int ti_vwma(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_vwma(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const double *volume = inputs[1];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_vwma_start(options))\n  {\n    return 0;\n  }\n  double sum = 0;\n  double vsum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i] * volume[i];\n    vsum += volume[i];\n  }\n\n  output[output_idx] = sum / vsum;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    helper_ti_vwma_1(&output_idx, &sum, &vsum, input, volume, period, output, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_vwma_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_vwma_1",
                "ti_vwma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double *",
                        "definition": [
                            "const double *volume = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vsum",
                        "type": "double",
                        "definition": [
                            "double vsum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_vwma_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "double * const sum_ref",
                "double * const vsum_ref",
                "const double * const input",
                "const double * const volume",
                "const int period",
                "double * const output",
                "int i"
            ],
            "definition": "void helper_ti_vwma_1(unsigned int * const output_idx_ref, double * const sum_ref, double * const vsum_ref, const double * const input, const double * const volume, const int period, double * const output, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  double sum = *sum_ref;\n  double vsum = *vsum_ref;\n  sum += input[i] * volume[i];\n  sum -= input[i - period] * volume[i - period];\n  vsum += volume[i];\n  vsum -= volume[i - period];\n  output[output_idx] = sum / vsum;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *sum_ref = sum;\n  *vsum_ref = vsum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vsum_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const vsum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double * const",
                        "definition": [
                            "const double * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "const double * const",
                        "definition": [
                            "const double * const volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vsum",
                        "type": "double",
                        "definition": [
                            "double vsum = *vsum_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wad_start",
            "header": "int ti_wad_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_wad_start(const double *options)\n{\n  (void) options;\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wad",
            "header": "int ti_wad(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_wad(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  (void) options;\n  if (size <= ti_wad_start(options))\n  {\n    return 0;\n  }\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  double sum = 0;\n  double yc = close[0];\n  int i;\n  for (i = 1; i < size; i += 1)\n  {\n    const double c = close[i];\n    if (c > yc)\n    {\n      sum += c - ((yc < low[i]) ? (yc) : (low[i]));\n    }\n    else\n      if (c < yc)\n    {\n      sum += c - ((yc > high[i]) ? (yc) : (high[i]));\n    }\n    else\n    {\n    }\n    output[output_idx] = sum;\n    output_idx += 1;\n    yc = close[i];\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_wad_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_wad_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yc",
                        "type": "double",
                        "definition": [
                            "double yc = close[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const double",
                        "definition": [
                            "const double c = close[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wcprice_start",
            "header": "int ti_wcprice_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_wcprice_start(const double *options)\n{\n  (void) options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wcprice",
            "header": "int ti_wcprice(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_wcprice(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  (void) options;\n  double *output = outputs[0];\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    output[i] = (((high[i] + low[i]) + close[i]) + close[i]) * 0.25;\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wilders_start",
            "header": "int ti_wilders_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_wilders_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wilders",
            "header": "int ti_wilders(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_wilders(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_wilders_start(options))\n  {\n    return 0;\n  }\n  const double per = 1.0 / ((double) period);\n  double sum = 0;\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    sum += input[i];\n  }\n\n  double val = sum / period;\n  output[output_idx] = val;\n  output_idx += 1;\n  for (i = period; i < size; i += 1)\n  {\n    val = ((input[i] - val) * per) + val;\n    output[output_idx] = val;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_wilders_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_wilders_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 1.0 / ((double) period)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = sum / period"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_willr_start",
            "header": "int ti_willr_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_willr_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_willr",
            "header": "int ti_willr(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_willr(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *high = inputs[0];\n  const double *low = inputs[1];\n  const double *close = inputs[2];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_willr_start(options))\n  {\n    return 0;\n  }\n  int trail = 0;\n  int maxi = -1;\n  int mini = -1;\n  double max = high[0];\n  double min = low[0];\n  double bar;\n  int i;\n  int j;\n  for (i = period - 1; i < size; i += 1, trail += 1)\n  {\n    helper_ti_willr_1(&output_idx, &maxi, &mini, &max, &min, &bar, &j, high, low, close, output, trail, i);\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_willr_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_ti_willr_1",
                "ti_willr_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double *",
                        "definition": [
                            "const double *high = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double *",
                        "definition": [
                            "const double *low = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double *",
                        "definition": [
                            "const double *close = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = high[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = low[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ti_willr_1",
            "header": "",
            "params": [
                "unsigned int * const output_idx_ref",
                "int * const maxi_ref",
                "int * const mini_ref",
                "double * const max_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "const double * const low",
                "const double * const close",
                "double * const output",
                "int trail",
                "int i"
            ],
            "definition": "void helper_ti_willr_1(unsigned int * const output_idx_ref, int * const maxi_ref, int * const mini_ref, double * const max_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const high, const double * const low, const double * const close, double * const output, int trail, int i)\n{\n  unsigned int output_idx = *output_idx_ref;\n  int maxi = *maxi_ref;\n  int mini = *mini_ref;\n  double max = *max_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  bar = high[i];\n  if (maxi < trail)\n  {\n    helper_helper_ti_willr_1_1(&maxi, &max, &bar, &j, high, trail, i);\n  }\n  else\n    if (bar >= max)\n  {\n    maxi = i;\n    max = bar;\n  }\n  bar = low[i];\n  if (mini < trail)\n  {\n    helper_helper_ti_willr_1_2(&mini, &min, &bar, &j, low, trail, i);\n  }\n  else\n    if (bar <= min)\n  {\n    mini = i;\n    min = bar;\n  }\n  const double highlow = max - min;\n  const double r = (highlow == 0.0) ? (0.0) : ((-100) * ((max - close[i]) / highlow));\n  output[output_idx] = r;\n  output_idx += 1;\n  *output_idx_ref = output_idx;\n  *maxi_ref = maxi;\n  *mini_ref = mini;\n  *max_ref = max;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_ti_willr_1_1",
                "helper_helper_ti_willr_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const double * const",
                        "definition": [
                            "const double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double * const",
                        "definition": [
                            "double * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = *output_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highlow",
                        "type": "const double",
                        "definition": [
                            "const double highlow = max - min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const double",
                        "definition": [
                            "const double r = (highlow == 0.0) ? (0.0) : ((-100) * ((max - close[i]) / highlow))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_willr_1_1",
            "header": "",
            "params": [
                "int * const maxi_ref",
                "double * const max_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const high",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_willr_1_1(int * const maxi_ref, double * const max_ref, double * const bar_ref, int * const j_ref, const double * const high, int trail, int i)\n{\n  int maxi = *maxi_ref;\n  double max = *max_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  maxi = trail;\n  max = high[maxi];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = high[j];\n    if (bar >= max)\n    {\n      max = bar;\n      maxi = j;\n    }\n  }\n\n  *maxi_ref = maxi;\n  *max_ref = max;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "maxi_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const double * const",
                        "definition": [
                            "const double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxi",
                        "type": "int",
                        "definition": [
                            "int maxi = *maxi_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = *max_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ti_willr_1_2",
            "header": "",
            "params": [
                "int * const mini_ref",
                "double * const min_ref",
                "double * const bar_ref",
                "int * const j_ref",
                "const double * const low",
                "int trail",
                "int i"
            ],
            "definition": "void helper_helper_ti_willr_1_2(int * const mini_ref, double * const min_ref, double * const bar_ref, int * const j_ref, const double * const low, int trail, int i)\n{\n  int mini = *mini_ref;\n  double min = *min_ref;\n  double bar = *bar_ref;\n  int j = *j_ref;\n  mini = trail;\n  min = low[mini];\n  j = trail;\n  while ((++j) <= i)\n  {\n    bar = low[j];\n    if (bar <= min)\n    {\n      min = bar;\n      mini = j;\n    }\n  }\n\n  *mini_ref = mini;\n  *min_ref = min;\n  *bar_ref = bar;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mini_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const double * const",
                        "definition": [
                            "const double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trail",
                        "type": "int",
                        "definition": [
                            "int trail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mini",
                        "type": "int",
                        "definition": [
                            "int mini = *mini_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "double",
                        "definition": [
                            "double bar = *bar_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wma_start",
            "header": "int ti_wma_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_wma_start(const double *options)\n{\n  return ((int) options[0]) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_wma",
            "header": "int ti_wma(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_wma(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_wma_start(options))\n  {\n    return 0;\n  }\n  const double weights = (period * (period + 1)) / 2;\n  double sum = 0;\n  double weight_sum = 0;\n  int i;\n  for (i = 0; i < (period - 1); i += 1)\n  {\n    weight_sum += input[i] * (i + 1);\n    sum += input[i];\n  }\n\n  for (i = period - 1; i < size; i += 1)\n  {\n    weight_sum += input[i] * period;\n    sum += input[i];\n    output[output_idx] = weight_sum / weights;\n    output_idx += 1;\n    weight_sum -= sum;\n    sum -= input[(i - period) + 1];\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_wma_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_wma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weights",
                        "type": "const double",
                        "definition": [
                            "const double weights = (period * (period + 1)) / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "double",
                        "definition": [
                            "double sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight_sum",
                        "type": "double",
                        "definition": [
                            "double weight_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_zlema_start",
            "header": "int ti_zlema_start(const double *options)",
            "params": [
                "const double *options"
            ],
            "definition": "int ti_zlema_start(const double *options)\n{\n  return ((((int) options[0]) - 1) / 2) - 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_zlema",
            "header": "int ti_zlema(int size, const double * const *inputs, const double *options, double * const *outputs)",
            "params": [
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "int ti_zlema(int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const double *input = inputs[0];\n  const int period = (int) options[0];\n  const int lag = (period - 1) / 2;\n  double *output = outputs[0];\n  unsigned int output_idx = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size <= ti_zlema_start(options))\n  {\n    return 0;\n  }\n  const double per = 2 / (((double) period) + 1);\n  double val = input[lag - 1];\n  output[output_idx] = val;\n  output_idx += 1;\n  int i;\n  for (i = lag; i < size; i += 1)\n  {\n    double c = input[i];\n    double l = input[i - lag];\n    val = (((c + (c - l)) - val) * per) + val;\n    output[output_idx] = val;\n    output_idx += 1;\n  }\n\n  assert(((&output[output_idx]) - outputs[0]) == (size - ti_zlema_start(options)));\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "ti_zlema_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const double *",
                        "definition": [
                            "const double *input = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = (int) options[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lag",
                        "type": "const int",
                        "definition": [
                            "const int lag = (period - 1) / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "double *",
                        "definition": [
                            "double *output = outputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "per",
                        "type": "const double",
                        "definition": [
                            "const double per = 2 / (((double) period) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "double",
                        "definition": [
                            "double val = input[lag - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "double",
                        "definition": [
                            "double c = input[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "double",
                        "definition": [
                            "double l = input[i - lag]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_buffer_new",
            "header": "ti_buffer *ti_buffer_new(int size)",
            "params": [
                "int size"
            ],
            "definition": "ti_buffer *ti_buffer_new(int size)\n{\n  const int s = ((int) (sizeof(ti_buffer))) + ((size - 1) * ((int) (sizeof(double))));\n  ti_buffer *ret = (ti_buffer *) malloc((unsigned int) s);\n  ret->size = size;\n  ret->pushes = 0;\n  ret->index = 0;\n  ret->sum = 0;\n  return ret;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const int",
                        "definition": [
                            "const int s = ((int) (sizeof(ti_buffer))) + ((size - 1) * ((int) (sizeof(double))))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *ret = (ti_buffer *) malloc((unsigned int) s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_buffer_free",
            "header": "void ti_buffer_free(ti_buffer *buffer)",
            "params": [
                "ti_buffer *buffer"
            ],
            "definition": "void ti_buffer_free(ti_buffer *buffer)\n{\n  free(buffer);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_version",
            "header": "const char *ti_version(void)",
            "params": [
                "void"
            ],
            "definition": "const char *ti_version(void)\n{\n  return \"0.9.2\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_build",
            "header": "long int ti_build(void)",
            "params": [
                "void"
            ],
            "definition": "long int ti_build(void)\n{\n  return 1746800254;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_indicator_count",
            "header": "int ti_indicator_count(void)",
            "params": [
                "void"
            ],
            "definition": "int ti_indicator_count(void)\n{\n  return 104;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_find_indicator",
            "header": "const ti_indicator_info *ti_find_indicator(const char *name)",
            "params": [
                "const char *name"
            ],
            "definition": "const ti_indicator_info *ti_find_indicator(const char *name)\n{\n  int imin = 0;\n  int imax = ((sizeof(ti_indicators)) / (sizeof(ti_indicator_info))) - 2;\n  while (imax >= imin)\n  {\n    const int i = imin + ((imax - imin) / 2);\n    const int c = strcmp(name, ti_indicators[i].name);\n    if (c == 0)\n    {\n      return ti_indicators + i;\n    }\n    else\n      if (c > 0)\n    {\n      imin = i + 1;\n    }\n    else\n    {\n      imax = i - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imin",
                        "type": "int",
                        "definition": [
                            "int imin = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imax",
                        "type": "int",
                        "definition": [
                            "int imax = ((sizeof(ti_indicators)) / (sizeof(ti_indicator_info))) - 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "const int",
                        "definition": [
                            "const int i = imin + ((imax - imin) / 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const int",
                        "definition": [
                            "const int c = strcmp(name, ti_indicators[i].name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stream_run",
            "header": "int ti_stream_run(ti_stream *stream, int size, const double * const *inputs, double * const *outputs)",
            "params": [
                "ti_stream *stream",
                "int size",
                "const double * const *inputs",
                "double * const *outputs"
            ],
            "definition": "int ti_stream_run(ti_stream *stream, int size, const double * const *inputs, double * const *outputs)\n{\n  return ti_indicators[stream->index].stream_run(stream, size, inputs, outputs);\n}\n\n",
            "calle": [
                "ti_indicators[stream->index].stream_run"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stream_get_info",
            "header": "ti_indicator_info *ti_stream_get_info(ti_stream *stream)",
            "params": [
                "ti_stream *stream"
            ],
            "definition": "ti_indicator_info *ti_stream_get_info(ti_stream *stream)\n{\n  return ti_indicators + stream->index;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stream_get_progress",
            "header": "int ti_stream_get_progress(ti_stream *stream)",
            "params": [
                "ti_stream *stream"
            ],
            "definition": "int ti_stream_get_progress(ti_stream *stream)\n{\n  return stream->progress;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_stream_free",
            "header": "void ti_stream_free(ti_stream *stream)",
            "params": [
                "ti_stream *stream"
            ],
            "definition": "void ti_stream_free(ti_stream *stream)\n{\n  ti_indicators[stream->index].stream_free(stream);\n}\n\n",
            "calle": [
                "ti_indicators[stream->index].stream_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_version",
            "header": "const char *tc_version(void)",
            "params": [
                "void"
            ],
            "definition": "const char *tc_version(void)\n{\n  return \"0.9.2\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_build",
            "header": "long int tc_build(void)",
            "params": [
                "void"
            ],
            "definition": "long int tc_build(void)\n{\n  return 1746800254;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_candle_count",
            "header": "int tc_candle_count(void)",
            "params": [
                "void"
            ],
            "definition": "int tc_candle_count(void)\n{\n  return 26;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_find_candle",
            "header": "const tc_candle_info *tc_find_candle(const char *name)",
            "params": [
                "const char *name"
            ],
            "definition": "const tc_candle_info *tc_find_candle(const char *name)\n{\n  int imin = 0;\n  int imax = ((sizeof(tc_candles)) / (sizeof(tc_candle_info))) - 2;\n  while (imax >= imin)\n  {\n    const int i = imin + ((imax - imin) / 2);\n    const int c = strcmp(name, tc_candles[i].name);\n    if (c == 0)\n    {\n      return tc_candles + i;\n    }\n    else\n      if (c > 0)\n    {\n      imin = i + 1;\n    }\n    else\n    {\n      imax = i - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imin",
                        "type": "int",
                        "definition": [
                            "int imin = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imax",
                        "type": "int",
                        "definition": [
                            "int imax = ((sizeof(tc_candles)) / (sizeof(tc_candle_info))) - 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "const int",
                        "definition": [
                            "const int i = imin + ((imax - imin) / 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const int",
                        "definition": [
                            "const int c = strcmp(name, tc_candles[i].name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_get_info",
            "header": "const tc_candle_info *tc_get_info(tc_set pattern)",
            "params": [
                "tc_set pattern"
            ],
            "definition": "const tc_candle_info *tc_get_info(tc_set pattern)\n{\n  if (!pattern)\n  {\n    return 0;\n  }\n  tc_set k = pattern & (~(pattern - 1));\n  int imin = 0;\n  int imax = ((sizeof(tc_candles)) / (sizeof(tc_candle_info))) - 2;\n  while (imax >= imin)\n  {\n    const int i = imin + ((imax - imin) / 2);\n    if (k == tc_candles[i].pattern)\n    {\n      return tc_candles + i;\n    }\n    else\n      if (k > tc_candles[i].pattern)\n    {\n      imin = i + 1;\n    }\n    else\n    {\n      imax = i - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pattern",
                        "type": "tc_set",
                        "definition": [
                            "tc_set pattern"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "tc_set",
                        "definition": [
                            "tc_set k = pattern & (~(pattern - 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imin",
                        "type": "int",
                        "definition": [
                            "int imin = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imax",
                        "type": "int",
                        "definition": [
                            "int imax = ((sizeof(tc_candles)) / (sizeof(tc_candle_info))) - 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "const int",
                        "definition": [
                            "const int i = imin + ((imax - imin) / 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_config_default",
            "header": "const tc_config *tc_config_default()",
            "params": [],
            "definition": "const tc_config *tc_config_default()\n{\n  static tc_config default_config = {.period = 10, .body_none = 0.05, .body_short = 0.5, .body_long = 1.4, .wick_none = 0.05, .wick_long = 0.6, .near = 0.3};\n  return &default_config;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "default_config",
                        "type": "tc_config",
                        "definition": [
                            "static tc_config default_config = {.period = 10, .body_none = 0.05, .body_short = 0.5, .body_long = 1.4, .wick_none = 0.05, .wick_long = 0.6, .near = 0.3}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_config_set_to_default",
            "header": "void tc_config_set_to_default(tc_config *config)",
            "params": [
                "tc_config *config"
            ],
            "definition": "void tc_config_set_to_default(tc_config *config)\n{\n  memcpy(config, tc_config_default(), sizeof(tc_config));\n}\n\n",
            "calle": [
                "memcpy",
                "tc_config_default"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "config",
                        "type": "tc_config *",
                        "definition": [
                            "tc_config *config"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_new",
            "header": "tc_result *tc_result_new()",
            "params": [],
            "definition": "tc_result *tc_result_new()\n{\n  tc_result *k = malloc(sizeof(tc_result));\n  if (!k)\n  {\n    return 0;\n  }\n  memset(k, 0, sizeof(tc_result));\n  return k;\n}\n\n",
            "calle": [
                "malloc",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *k = malloc(sizeof(tc_result))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_free",
            "header": "void tc_result_free(tc_result *result)",
            "params": [
                "tc_result *result"
            ],
            "definition": "void tc_result_free(tc_result *result)\n{\n  if (!result)\n  {\n    return;\n  }\n  free(result->hits);\n  free(result);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_count",
            "header": "int tc_result_count(const tc_result *result)",
            "params": [
                "const tc_result *result"
            ],
            "definition": "int tc_result_count(const tc_result *result)\n{\n  return result->count;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "const tc_result *",
                        "definition": [
                            "const tc_result *result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_pattern_count",
            "header": "int tc_result_pattern_count(const tc_result *result)",
            "params": [
                "const tc_result *result"
            ],
            "definition": "int tc_result_pattern_count(const tc_result *result)\n{\n  return result->pattern_count;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "const tc_result *",
                        "definition": [
                            "const tc_result *result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_get",
            "header": "tc_hit tc_result_get(const tc_result *result, int index)",
            "params": [
                "const tc_result *result",
                "int index"
            ],
            "definition": "tc_hit tc_result_get(const tc_result *result, int index)\n{\n  if (index < result->count)\n  {\n    return result->hits[index];\n  }\n  tc_hit hit = {0};\n  return hit;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "const tc_result *",
                        "definition": [
                            "const tc_result *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "tc_hit",
                        "definition": [
                            "tc_hit hit = {0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_at",
            "header": "tc_set tc_result_at(const tc_result *result, int index)",
            "params": [
                "const tc_result *result",
                "int index"
            ],
            "definition": "tc_set tc_result_at(const tc_result *result, int index)\n{\n  int imin = 0;\n  int imax = result->count - 1;\n  if (!imax)\n  {\n    return 0;\n  }\n  while (imax >= imin)\n  {\n    const int i = imin + ((imax - imin) / 2);\n    assert(i >= 0);\n    assert(i < result->count);\n    if (index == result->hits[i].index)\n    {\n      return result->hits[i].patterns;\n    }\n    else\n      if (index > result->hits[i].index)\n    {\n      imin = i + 1;\n    }\n    else\n    {\n      imax = i - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "const tc_result *",
                        "definition": [
                            "const tc_result *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imin",
                        "type": "int",
                        "definition": [
                            "int imin = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imax",
                        "type": "int",
                        "definition": [
                            "int imax = result->count - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "const int",
                        "definition": [
                            "const int i = imin + ((imax - imin) / 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_run",
            "header": "int tc_run(tc_set patterns, int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "tc_set patterns",
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_run(tc_set patterns, int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  tc_result_reset(output);\n  {\n    helper_tc_run_1(patterns, size, inputs, options, output);\n  }\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_run_2(&avg_body_sum, &avg_total_sum, &i, patterns, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_run_1",
                "helper_tc_run_2",
                "tc_result_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_abandoned_baby_bear",
            "header": "int tc_abandoned_baby_bear(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_abandoned_baby_bear(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_abandoned_baby_bear_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_abandoned_baby_bear_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_abandoned_baby_bull",
            "header": "int tc_abandoned_baby_bull(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_abandoned_baby_bull(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_abandoned_baby_bull_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_abandoned_baby_bull_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_big_black_candle",
            "header": "int tc_big_black_candle(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_big_black_candle(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_big_black_candle_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_big_black_candle_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_big_white_candle",
            "header": "int tc_big_white_candle(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_big_white_candle(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_big_white_candle_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_big_white_candle_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_black_marubozu",
            "header": "int tc_black_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_black_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_black_marubozu_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_black_marubozu_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_doji",
            "header": "int tc_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_doji_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_doji_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_dragonfly_doji",
            "header": "int tc_dragonfly_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_dragonfly_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_dragonfly_doji_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_dragonfly_doji_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_engulfing_bear",
            "header": "int tc_engulfing_bear(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_engulfing_bear(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_engulfing_bear_1(&avg_body_sum, &avg_total_sum, &i, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_engulfing_bear_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_engulfing_bull",
            "header": "int tc_engulfing_bull(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_engulfing_bull(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_engulfing_bull_1(&avg_body_sum, &avg_total_sum, &i, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_engulfing_bull_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_evening_doji_star",
            "header": "int tc_evening_doji_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_evening_doji_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_evening_doji_star_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_evening_doji_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_evening_star",
            "header": "int tc_evening_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_evening_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_evening_star_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_evening_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_four_price_doji",
            "header": "int tc_four_price_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_four_price_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_four_price_doji_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_four_price_doji_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_gravestone_doji",
            "header": "int tc_gravestone_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_gravestone_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_gravestone_doji_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_gravestone_doji_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_hammer",
            "header": "int tc_hammer(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_hammer(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_hammer_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_hammer_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_hanging_man",
            "header": "int tc_hanging_man(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_hanging_man(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_hanging_man_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_hanging_man_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_inverted_hammer",
            "header": "int tc_inverted_hammer(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_inverted_hammer(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_inverted_hammer_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_inverted_hammer_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_long_legged_doji",
            "header": "int tc_long_legged_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_long_legged_doji(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_long_legged_doji_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_long_legged_doji_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_marubozu",
            "header": "int tc_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_marubozu_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_marubozu_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_morning_doji_star",
            "header": "int tc_morning_doji_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_morning_doji_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_morning_doji_star_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_morning_doji_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_morning_star",
            "header": "int tc_morning_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_morning_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_morning_star_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_morning_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_shooting_star",
            "header": "int tc_shooting_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_shooting_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_shooting_star_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_shooting_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_spinning_top",
            "header": "int tc_spinning_top(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_spinning_top(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_spinning_top_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_spinning_top_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_star",
            "header": "int tc_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_star(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_star_1(&avg_body_sum, &avg_total_sum, &i, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_star_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_three_black_crows",
            "header": "int tc_three_black_crows(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_three_black_crows(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_three_black_crows_1(&avg_body_sum, &avg_total_sum, &i, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_three_black_crows_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_three_white_soldiers",
            "header": "int tc_three_white_soldiers(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_three_white_soldiers(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_three_white_soldiers_1(&avg_body_sum, &avg_total_sum, &i, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_three_white_soldiers_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_white_marubozu",
            "header": "int tc_white_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)",
            "params": [
                "int size",
                "const TC_REAL * const *inputs",
                "const tc_config *options",
                "tc_result *output"
            ],
            "definition": "int tc_white_marubozu(int size, const TC_REAL * const *inputs, const tc_config *options, tc_result *output)\n{\n  const TC_REAL *open = inputs[0];\n  const TC_REAL *high = inputs[1];\n  const TC_REAL *low = inputs[2];\n  const TC_REAL *close = inputs[3];\n  const int period = options->period;\n  const TC_REAL div = 1.0 / period;\n  TC_REAL avg_body_sum = 0;\n  TC_REAL avg_total_sum = 0;\n  if (period < 1)\n  {\n    return 1;\n  }\n  if (size < period)\n  {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < period; i += 1)\n  {\n    avg_body_sum += fabs(open[i] - close[i]);\n    avg_total_sum += high[i] - low[i];\n  }\n\n  while (i < size)\n  {\n    helper_tc_white_marubozu_1(&avg_body_sum, &avg_total_sum, &i, options, output, open, high, low, close, period, div);\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "helper_tc_white_marubozu_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const *",
                        "definition": [
                            "const TC_REAL * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config *",
                        "definition": [
                            "const tc_config *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *open = inputs[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *high = inputs[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *low = inputs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL *",
                        "definition": [
                            "const TC_REAL *close = inputs[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period = options->period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div = 1.0 / period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_reset",
            "header": "",
            "params": [
                "tc_result *result"
            ],
            "definition": "static void tc_result_reset(tc_result *result)\n{\n  result->progress = 0;\n  result->count = 0;\n  result->pattern_count = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tc_result_add",
            "header": "",
            "params": [
                "tc_result *result",
                "tc_hit hit"
            ],
            "definition": "static int tc_result_add(tc_result *result, tc_hit hit)\n{\n  result->pattern_count += 1;\n  if (result->count > 0)\n  {\n    if (result->hits[result->count - 1].index == hit.index)\n    {\n      do\n      {\n        result->hits[result->count - 1].patterns |= hit.patterns;\n      }\n      while (0);\n      return 0;\n    }\n  }\n  if (result->space == 0)\n  {\n    result->space = 2048;\n    result->count = 0;\n    result->hits = malloc((sizeof(tc_hit)) * ((unsigned int) result->space));\n  }\n  else\n    if (result->space == result->count)\n  {\n    result->space *= 2;\n    tc_hit *hits = realloc(result->hits, (sizeof(tc_hit)) * ((unsigned int) result->space));\n    if (!hits)\n    {\n      return 2;\n    }\n    result->hits = hits;\n  }\n  result->hits[result->count] = hit;\n  result->count += 1;\n  return 0;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "tc_hit",
                        "definition": [
                            "tc_hit hit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hits",
                        "type": "tc_hit *",
                        "definition": [
                            "tc_hit *hits = realloc(result->hits, (sizeof(tc_hit)) * ((unsigned int) result->space))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_run_1",
            "header": "",
            "params": [
                "tc_set patterns",
                "int size",
                "const TC_REAL * const * const inputs",
                "const tc_config * const options",
                "tc_result * const output"
            ],
            "definition": "int helper_tc_run_1(tc_set patterns, int size, const TC_REAL * const * const inputs, const tc_config * const options, tc_result * const output)\n{\n  if ((patterns & (patterns - 1)) == 0)\n  {\n    helper_helper_tc_run_1_1(patterns, size, inputs, options, output);\n  }\n}\n\n",
            "calle": [
                "helper_helper_tc_run_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const * const",
                        "definition": [
                            "const TC_REAL * const * const inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_run_2",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_set patterns",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_run_2(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_set patterns, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((((1L << 0) & patterns) && (i >= 2)) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (low[i - 1] >= high[(i - 1) - 1])) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] > close[i])) && (high[i] <= low[i - 1])) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 0};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((((1L << 1) & patterns) && (i >= 2)) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (high[i - 1] <= low[(i - 1) - 1])) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] < close[i])) && (low[i] >= high[i - 1])) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 1};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((1L << 2) & patterns) && (open[i] > close[i])) && (fabs(open[i] - close[i]) > (options->body_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 2};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((1L << 3) & patterns) && (open[i] < close[i])) && (fabs(open[i] - close[i]) > (options->body_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 3};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((1L << 4) & patterns) && (fabs(open[i] - close[i]) > (options->body_long * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (open[i] > close[i]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 4};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((1L << 5) & patterns) && (fabs(open[i] - close[i]) < (options->body_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 5};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 6) & patterns) && (fabs(open[i] - close[i]) < (options->body_none * avg_total))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 6};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 7) & patterns) && (i >= 1)) && (open[i] > close[i])) && (open[i - 1] < close[i - 1])) && (close[i] < open[i - 1])) && (open[i] > close[i - 1]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 7};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 8) & patterns) && (i >= 1)) && (open[i] < close[i])) && (open[i - 1] > close[i - 1])) && (close[i] > open[i - 1])) && (open[i] < close[i - 1]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 8};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((((1L << 9) & patterns) && (i >= 2)) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])) >= ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] > close[i])) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 9};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((((1L << 10) & patterns) && (i >= 2)) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])) >= ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_short * avg_body))) && (open[i] > close[i])) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 10};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 11) & patterns) && (fabs(open[i] - close[i]) < (options->body_none * avg_total))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 11};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 12) & patterns) && (fabs(open[i] - close[i]) < (options->body_none * avg_total))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 12};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 13) & patterns) && (i >= 1)) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) <= (low[i - 1] + (options->near * avg_total))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 13};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 14) & patterns) && (i >= 1)) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= (high[i - 1] - (options->near * avg_total))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 14};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 15) & patterns) && (i >= 1)) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1]))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 15};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 16) & patterns) && (fabs(open[i] - close[i]) < (options->body_none * avg_total))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) > (options->wick_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 16};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 17) & patterns) && (fabs(open[i] - close[i]) > (options->body_long * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 17};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((((1L << 18) & patterns) && (i >= 2)) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])) <= ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] < close[i])) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 18};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((((1L << 19) & patterns) && (i >= 2)) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])) <= ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_short * avg_body))) && (open[i] < close[i])) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 19};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((((1L << 20) & patterns) && (i >= 1)) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 20};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if (((((1L << 21) & patterns) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) > fabs(open[i] - close[i]))) && ((bottom - low[i]) > fabs(open[i] - close[i])))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 21};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((1L << 22) & patterns) && (i >= 1)) && ((low[i] >= high[i - 1]) || (high[i] <= low[i - 1])))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 22};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((1L << 23) & patterns) && (i >= 2)) && (open[i - 2] > close[i - 2])) && (open[i - 1] > close[i - 1])) && (open[i] > close[i])) && ((open[i - 1] < ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))) && (open[i - 1] > ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))))) && ((open[i] < ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))) && (open[i] > ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 23};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((((1L << 24) & patterns) && (i >= 2)) && (open[i - 2] < close[i - 2])) && (open[i - 1] < close[i - 1])) && (open[i] < close[i])) && ((open[i - 1] < ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))) && (open[i - 1] > ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))))) && ((open[i] < ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))) && (open[i] > ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 24};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  if ((((((1L << 25) & patterns) && (fabs(open[i] - close[i]) > (options->body_long * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (open[i] < close[i]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 25};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 0}",
                            "const tc_hit hit = {i, 1L << 10}",
                            "const tc_hit hit = {i, 1L << 11}",
                            "const tc_hit hit = {i, 1L << 12}",
                            "const tc_hit hit = {i, 1L << 13}",
                            "const tc_hit hit = {i, 1L << 14}",
                            "const tc_hit hit = {i, 1L << 15}",
                            "const tc_hit hit = {i, 1L << 16}",
                            "const tc_hit hit = {i, 1L << 17}",
                            "const tc_hit hit = {i, 1L << 18}",
                            "const tc_hit hit = {i, 1L << 19}",
                            "const tc_hit hit = {i, 1L << 1}",
                            "const tc_hit hit = {i, 1L << 20}",
                            "const tc_hit hit = {i, 1L << 21}",
                            "const tc_hit hit = {i, 1L << 22}",
                            "const tc_hit hit = {i, 1L << 23}",
                            "const tc_hit hit = {i, 1L << 24}",
                            "const tc_hit hit = {i, 1L << 25}",
                            "const tc_hit hit = {i, 1L << 2}",
                            "const tc_hit hit = {i, 1L << 3}",
                            "const tc_hit hit = {i, 1L << 4}",
                            "const tc_hit hit = {i, 1L << 5}",
                            "const tc_hit hit = {i, 1L << 6}",
                            "const tc_hit hit = {i, 1L << 7}",
                            "const tc_hit hit = {i, 1L << 8}",
                            "const tc_hit hit = {i, 1L << 9}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_abandoned_baby_bear_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_abandoned_baby_bear_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (low[i - 1] >= high[(i - 1) - 1])) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] > close[i])) && (high[i] <= low[i - 1])) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 0};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_abandoned_baby_bull_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_abandoned_baby_bull_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (high[i - 1] <= low[(i - 1) - 1])) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] < close[i])) && (low[i] >= high[i - 1])) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 1};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_big_black_candle_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_big_black_candle_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((open[i] > close[i]) && (fabs(open[i] - close[i]) > (options->body_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 2};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 2}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_big_white_candle_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_big_white_candle_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((open[i] < close[i]) && (fabs(open[i] - close[i]) > (options->body_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 3};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 3}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_black_marubozu_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_black_marubozu_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((fabs(open[i] - close[i]) > (options->body_long * avg_body)) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (open[i] > close[i]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 4};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 4}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_doji_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_doji_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (fabs(open[i] - close[i]) < (options->body_none * avg_total))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 5};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 5}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_dragonfly_doji_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_dragonfly_doji_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) < (options->body_none * avg_total)) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 6};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 6}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_engulfing_bear_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_engulfing_bear_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (open[i] > close[i])) && (open[i - 1] < close[i - 1])) && (close[i] < open[i - 1])) && (open[i] > close[i - 1]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 7};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 7}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_engulfing_bull_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_engulfing_bull_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (open[i] < close[i])) && (open[i - 1] > close[i - 1])) && (close[i] > open[i - 1])) && (open[i] < close[i - 1]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 8};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 8}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_evening_doji_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_evening_doji_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])) >= ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] > close[i])) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 9};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 9}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_evening_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_evening_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] < close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])) >= ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_short * avg_body))) && (open[i] > close[i])) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] <= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 10};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 10}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_four_price_doji_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_four_price_doji_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) < (options->body_none * avg_total)) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 11};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 11}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_gravestone_doji_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_gravestone_doji_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) < (options->body_none * avg_total)) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 12};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 12}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_hammer_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_hammer_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) <= (low[i - 1] + (options->near * avg_total))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 13};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 13}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_hanging_man_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_hanging_man_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) > (options->wick_long * avg_body))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= (high[i - 1] - (options->near * avg_total))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 14};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 14}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_inverted_hammer_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_inverted_hammer_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (((open[i] > close[i]) ? (open[i]) : (close[i])) <= ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1]))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 15};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 15}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_long_legged_doji_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_long_legged_doji_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) < (options->body_none * avg_total)) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) > (options->wick_long * avg_body)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 16};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 16}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_marubozu_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_marubozu_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) > (options->body_long * avg_body)) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total)))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 17};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 17}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_morning_doji_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_morning_doji_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])) <= ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_none * avg_total))) && (open[i] < close[i])) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 18};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 18}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_morning_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_morning_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((((i >= 2) && (open[i - 2] > close[i - 2])) && (fabs(open[i - 2] - close[i - 2]) > (options->body_long * avg_body))) && (((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])) <= ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1])))) && (fabs(open[i - 1] - close[i - 1]) < (options->body_short * avg_body))) && (open[i] < close[i])) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1])))) && (close[i] >= close[i - 2]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 19};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 19}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_shooting_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_shooting_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((((i >= 1) && (fabs(open[i] - close[i]) < (options->body_short * avg_body))) && ((high[i] - top) > (options->wick_long * avg_body))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (((open[i] < close[i]) ? (open[i]) : (close[i])) >= ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 20};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 20}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_spinning_top_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_spinning_top_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if (((fabs(open[i] - close[i]) < (options->body_short * avg_body)) && ((high[i] - top) > fabs(open[i] - close[i]))) && ((bottom - low[i]) > fabs(open[i] - close[i])))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 21};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 21}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_star_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_star_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((i >= 1) && ((low[i] >= high[i - 1]) || (high[i] <= low[i - 1])))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 22};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 22}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_three_black_crows_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_three_black_crows_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((i >= 2) && (open[i - 2] > close[i - 2])) && (open[i - 1] > close[i - 1])) && (open[i] > close[i])) && ((open[i - 1] < ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))) && (open[i - 1] > ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))))) && ((open[i] < ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))) && (open[i] > ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 23};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 23}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_three_white_soldiers_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_three_white_soldiers_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((((i >= 2) && (open[i - 2] < close[i - 2])) && (open[i - 1] < close[i - 1])) && (open[i] < close[i])) && ((open[i - 1] < ((open[(i - 1) - 1] > close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))) && (open[i - 1] > ((open[(i - 1) - 1] < close[(i - 1) - 1]) ? (open[(i - 1) - 1]) : (close[(i - 1) - 1]))))) && ((open[i] < ((open[i - 1] > close[i - 1]) ? (open[i - 1]) : (close[i - 1]))) && (open[i] > ((open[i - 1] < close[i - 1]) ? (open[i - 1]) : (close[i - 1])))))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 24};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 24}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tc_white_marubozu_1",
            "header": "",
            "params": [
                "TC_REAL * const avg_body_sum_ref",
                "TC_REAL * const avg_total_sum_ref",
                "int * const i_ref",
                "const tc_config * const options",
                "tc_result * const output",
                "const TC_REAL * const open",
                "const TC_REAL * const high",
                "const TC_REAL * const low",
                "const TC_REAL * const close",
                "const int period",
                "const TC_REAL div"
            ],
            "definition": "int helper_tc_white_marubozu_1(TC_REAL * const avg_body_sum_ref, TC_REAL * const avg_total_sum_ref, int * const i_ref, const tc_config * const options, tc_result * const output, const TC_REAL * const open, const TC_REAL * const high, const TC_REAL * const low, const TC_REAL * const close, const int period, const TC_REAL div)\n{\n  TC_REAL avg_body_sum = *avg_body_sum_ref;\n  TC_REAL avg_total_sum = *avg_total_sum_ref;\n  int i = *i_ref;\n  const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i]);\n  const TC_REAL body = fabs(open[i] - close[i]);\n  const TC_REAL total = high[i] - low[i];\n  const TC_REAL upper = high[i] - top;\n  const TC_REAL lower = bottom - low[i];\n  const TC_REAL avg_body = avg_body_sum * div;\n  const TC_REAL avg_total = avg_total_sum * div;\n  (void) top;\n  (void) bottom;\n  (void) body;\n  (void) total;\n  (void) upper;\n  (void) lower;\n  (void) avg_body;\n  (void) avg_total;\n  if ((((fabs(open[i] - close[i]) > (options->body_long * avg_body)) && ((high[i] - top) < (options->wick_none * avg_total))) && ((bottom - low[i]) < (options->wick_none * avg_total))) && (open[i] < close[i]))\n  {\n    do\n    {\n      const tc_hit hit = {i, 1L << 25};\n      const int r = tc_result_add(output, hit);\n      if (r != 0)\n      {\n        return r;\n      }\n    }\n    while (0);\n  }\n  avg_body_sum += body;\n  avg_body_sum -= fabs(open[i - period] - close[i - period]);\n  avg_total_sum += total;\n  avg_total_sum -= high[i - period] - low[i - period];\n  i += 1;\n  *avg_body_sum_ref = avg_body_sum;\n  *avg_total_sum_ref = avg_total_sum;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fabs",
                "tc_result_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "avg_body_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum_ref",
                        "type": "TC_REAL * const",
                        "definition": [
                            "TC_REAL * const avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "const TC_REAL * const",
                        "definition": [
                            "const TC_REAL * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "const int",
                        "definition": [
                            "const int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "div",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_body_sum = *avg_body_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total_sum",
                        "type": "TC_REAL",
                        "definition": [
                            "TC_REAL avg_total_sum = *avg_total_sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL top = (open[i] > close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL bottom = (open[i] < close[i]) ? (open[i]) : (close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL body = fabs(open[i] - close[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL total = high[i] - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "upper",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL upper = high[i] - top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lower",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL lower = bottom - low[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_body",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_body = avg_body_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avg_total",
                        "type": "const TC_REAL",
                        "definition": [
                            "const TC_REAL avg_total = avg_total_sum * div"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "const tc_hit",
                        "definition": [
                            "const tc_hit hit = {i, 1L << 25}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = tc_result_add(output, hit)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_tc_run_1_1",
            "header": "",
            "params": [
                "tc_set patterns",
                "int size",
                "const TC_REAL * const * const inputs",
                "const tc_config * const options",
                "tc_result * const output"
            ],
            "definition": "int helper_helper_tc_run_1_1(tc_set patterns, int size, const TC_REAL * const * const inputs, const tc_config * const options, tc_result * const output)\n{\n  if (patterns == (1L << 0))\n  {\n    return tc_abandoned_baby_bear(size, inputs, options, output);\n  }\n  if (patterns == (1L << 1))\n  {\n    return tc_abandoned_baby_bull(size, inputs, options, output);\n  }\n  if (patterns == (1L << 2))\n  {\n    return tc_big_black_candle(size, inputs, options, output);\n  }\n  if (patterns == (1L << 3))\n  {\n    return tc_big_white_candle(size, inputs, options, output);\n  }\n  if (patterns == (1L << 4))\n  {\n    return tc_black_marubozu(size, inputs, options, output);\n  }\n  if (patterns == (1L << 5))\n  {\n    return tc_doji(size, inputs, options, output);\n  }\n  if (patterns == (1L << 6))\n  {\n    return tc_dragonfly_doji(size, inputs, options, output);\n  }\n  if (patterns == (1L << 7))\n  {\n    return tc_engulfing_bear(size, inputs, options, output);\n  }\n  if (patterns == (1L << 8))\n  {\n    return tc_engulfing_bull(size, inputs, options, output);\n  }\n  if (patterns == (1L << 9))\n  {\n    return tc_evening_doji_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 10))\n  {\n    return tc_evening_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 11))\n  {\n    return tc_four_price_doji(size, inputs, options, output);\n  }\n  if (patterns == (1L << 12))\n  {\n    return tc_gravestone_doji(size, inputs, options, output);\n  }\n  if (patterns == (1L << 13))\n  {\n    return tc_hammer(size, inputs, options, output);\n  }\n  if (patterns == (1L << 14))\n  {\n    return tc_hanging_man(size, inputs, options, output);\n  }\n  if (patterns == (1L << 15))\n  {\n    return tc_inverted_hammer(size, inputs, options, output);\n  }\n  if (patterns == (1L << 16))\n  {\n    return tc_long_legged_doji(size, inputs, options, output);\n  }\n  if (patterns == (1L << 17))\n  {\n    return tc_marubozu(size, inputs, options, output);\n  }\n  if (patterns == (1L << 18))\n  {\n    return tc_morning_doji_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 19))\n  {\n    return tc_morning_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 20))\n  {\n    return tc_shooting_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 21))\n  {\n    return tc_spinning_top(size, inputs, options, output);\n  }\n  if (patterns == (1L << 22))\n  {\n    return tc_star(size, inputs, options, output);\n  }\n  if (patterns == (1L << 23))\n  {\n    return tc_three_black_crows(size, inputs, options, output);\n  }\n  if (patterns == (1L << 24))\n  {\n    return tc_three_white_soldiers(size, inputs, options, output);\n  }\n  if (patterns == (1L << 25))\n  {\n    return tc_white_marubozu(size, inputs, options, output);\n  }\n}\n\n",
            "calle": [
                "tc_abandoned_baby_bear",
                "tc_abandoned_baby_bull",
                "tc_big_black_candle",
                "tc_big_white_candle",
                "tc_black_marubozu",
                "tc_doji",
                "tc_dragonfly_doji",
                "tc_engulfing_bear",
                "tc_engulfing_bull",
                "tc_evening_doji_star",
                "tc_evening_star",
                "tc_four_price_doji",
                "tc_gravestone_doji",
                "tc_hammer",
                "tc_hanging_man",
                "tc_inverted_hammer",
                "tc_long_legged_doji",
                "tc_marubozu",
                "tc_morning_doji_star",
                "tc_morning_star",
                "tc_shooting_star",
                "tc_spinning_top",
                "tc_star",
                "tc_three_black_crows",
                "tc_three_white_soldiers",
                "tc_white_marubozu"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const TC_REAL * const * const",
                        "definition": [
                            "const TC_REAL * const * const inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const tc_config * const",
                        "definition": [
                            "const tc_config * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#sample",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  const ti_indicator_info *info = ti_indicators;\n  unsigned int info_idx = 0;\n  if (argc < 2)\n  {\n    printf(\"No indicator given.\\n\");\n    printf(\"Example:\\n\");\n    printf(\"\\tsample ma 5\");\n    return 1;\n  }\n  if (strcmp(argv[1], \"--version\") == 0)\n  {\n    printf(\"TI VERSION: %s, TI BUILD: %d\\n\", \"0.9.2\", 1746800254);\n    return 0;\n  }\n  if (strcmp(argv[1], \"--list\") == 0)\n  {\n    helper_main_5(info, info_idx);\n  }\n  info_idx = ti_find_indicator(argv[1]);\n  if (!(&info[info_idx]))\n  {\n    printf(\"Couldn't find indicator: %s\\n\", argv[1]);\n    return 1;\n  }\n  const double *inputs[] = {0, 0, 0, 0, 0};\n  double *outputs[] = {out[0], out[1], out[2], out[3], out[4]};\n  int o = 0;\n  int h = 0;\n  int l = 0;\n  int c = 0;\n  int r = 0;\n  int r2 = 0;\n  int v = 0;\n  int a = 0;\n  int j;\n  for (j = 0; j < info->inputs; j += 1)\n  {\n    helper_main_4(&o, &h, &l, &c, &r, &r2, &v, &j, info, inputs);\n  }\n\n  const char *alts[] = {\"acos\", \"asin\", \"atan\", \"cosh\", \"sinh\", \"tanh\", \"todeg\", 0};\n  {\n    helper_main_2(&r, &a, &j, info, inputs, alts);\n  }\n  double options[10];\n  {\n    helper_main_3(argc, argv, info, options);\n  }\n  int start = info->start(options);\n  const int ret = info->indicator(15, inputs, options, outputs);\n  if (ret == 0)\n  {\n    helper_main_6(info, o, h, l, c, r, r2, v, a, start);\n  }\n  else\n  {\n    helper_main_1(argc, argv, ret);\n  }\n}\n\n",
            "calle": [
                "helper_main_1",
                "helper_main_2",
                "helper_main_3",
                "helper_main_4",
                "helper_main_5",
                "helper_main_6",
                "info->indicator",
                "info->start",
                "printf",
                "strcmp",
                "ti_find_indicator"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info = ti_indicators"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int info_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[]",
                        "definition": [
                            "const double *inputs[] = {0, 0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "double *outputs[] = {out[0], out[1], out[2], out[3], out[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "int",
                        "definition": [
                            "int r2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alts",
                        "type": "const char *[]",
                        "definition": [
                            "const char *alts[] = {\"acos\", \"asin\", \"atan\", \"cosh\", \"sinh\", \"tanh\", \"todeg\", 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [10]",
                        "definition": [
                            "double options[10]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "int",
                        "definition": [
                            "int start = info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator(15, inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "int argc",
                "char ** const argv",
                "const int ret"
            ],
            "definition": "int helper_main_1(int argc, char ** const argv, const int ret)\n{\n  if (ret == 1)\n  {\n    printf(\"*ERROR INVALID OPTION*\\n\");\n    for (int i = 1; i < argc; i += 1)\n    {\n      printf(\"%s \", argv[i]);\n    }\n\n    printf(\"\\n\");\n  }\n  else\n  {\n    printf(\"*ERROR*\\n\");\n  }\n  return 1;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_2",
            "header": "",
            "params": [
                "int * const r_ref",
                "int * const a_ref",
                "int * const j_ref",
                "const ti_indicator_info * const info",
                "const double *inputs[]",
                "const char *alts[]"
            ],
            "definition": "void helper_main_2(int * const r_ref, int * const a_ref, int * const j_ref, const ti_indicator_info * const info, const double *inputs[], const char *alts[])\n{\n  int r = *r_ref;\n  int a = *a_ref;\n  int j = *j_ref;\n  const char **alt = alts;\n  unsigned int alt_idx = 0;\n  while (alt[alt_idx])\n  {\n    if (strcmp(*(&alt[alt_idx]), info->name) == 0)\n    {\n      r = 0;\n      a = 1;\n      for (j = 0; j < info->inputs; j += 1)\n        inputs[j] = alternative;\n\n      break;\n    }\n    alt_idx += 1;\n  }\n\n  *r_ref = r;\n  *a_ref = a;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[]",
                        "definition": [
                            "const double *inputs[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alts",
                        "type": "const char *[]",
                        "definition": [
                            "const char *alts[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alt",
                        "type": "const char **",
                        "definition": [
                            "const char **alt = alts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alt_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alt_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alternative",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_3",
            "header": "",
            "params": [
                "int argc",
                "char ** const argv",
                "const ti_indicator_info * const info",
                "double options[10]"
            ],
            "definition": "int helper_main_3(int argc, char ** const argv, const ti_indicator_info * const info, double options[10])\n{\n  int i;\n  for (i = 0; i < info->options; i += 1)\n  {\n    if (argc < (3 + i))\n    {\n      printf(\"*ERROR NOT ENOUGH OPTIONS*\\n\");\n      for (int k = 1; k < argc; k += 1)\n      {\n        printf(\"%s \", argv[k]);\n      }\n\n      printf(\"\\n\");\n      return 1;\n    }\n    options[i] = atof(argv[2 + i]);\n  }\n\n}\n\n",
            "calle": [
                "atof",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [10]",
                        "definition": [
                            "double options[10]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_4",
            "header": "",
            "params": [
                "int * const o_ref",
                "int * const h_ref",
                "int * const l_ref",
                "int * const c_ref",
                "int * const r_ref",
                "int * const r2_ref",
                "int * const v_ref",
                "int * const j_ref",
                "const ti_indicator_info * const info",
                "const double *inputs[]"
            ],
            "definition": "void helper_main_4(int * const o_ref, int * const h_ref, int * const l_ref, int * const c_ref, int * const r_ref, int * const r2_ref, int * const v_ref, int * const j_ref, const ti_indicator_info * const info, const double *inputs[])\n{\n  int o = *o_ref;\n  int h = *h_ref;\n  int l = *l_ref;\n  int c = *c_ref;\n  int r = *r_ref;\n  int r2 = *r2_ref;\n  int v = *v_ref;\n  int j = *j_ref;\n  if (strcmp(info->input_names[j], \"open\") == 0)\n  {\n    inputs[j] = open;\n    o = 1;\n  }\n  else\n    if (strcmp(info->input_names[j], \"high\") == 0)\n  {\n    inputs[j] = high;\n    h = 1;\n  }\n  else\n    if (strcmp(info->input_names[j], \"low\") == 0)\n  {\n    inputs[j] = low;\n    l = 1;\n  }\n  else\n    if (strcmp(info->input_names[j], \"close\") == 0)\n  {\n    inputs[j] = close;\n    c = 1;\n  }\n  else\n    if (strcmp(info->input_names[j], \"volume\") == 0)\n  {\n    inputs[j] = volume;\n    v = 1;\n  }\n  else\n    if (strcmp(info->input_names[j], \"real\") == 0)\n  {\n    if (!r)\n    {\n      inputs[j] = close;\n      r = 1;\n    }\n    else\n    {\n      inputs[j] = open;\n      r2 = 1;\n    }\n  }\n  else\n  {\n    assert(0);\n  }\n  ;\n  *o_ref = o;\n  *h_ref = h;\n  *l_ref = l;\n  *c_ref = c;\n  *r_ref = r;\n  *r2_ref = r2;\n  *v_ref = v;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "o_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const o_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const r2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[]",
                        "definition": [
                            "const double *inputs[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o = *o_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = *h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l = *l_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "int",
                        "definition": [
                            "int r2 = *r2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_5",
            "header": "",
            "params": [
                "const ti_indicator_info * const info",
                "unsigned int info_idx"
            ],
            "definition": "int helper_main_5(const ti_indicator_info * const info, unsigned int info_idx)\n{\n  do\n  {\n    if (info->type == 1)\n    {\n      printf(\"type overlay \");\n    }\n    else\n      if (info->type == 2)\n    {\n      printf(\"type indicator \");\n    }\n    else\n      if (info->type == 3)\n    {\n      printf(\"type math \");\n    }\n    else\n      if (info->type == 4)\n    {\n      printf(\"type simple \");\n    }\n    else\n      printf(\"type unknown \");\n    printf(\"name %s \", info->name);\n    printf(\"full_name {%s} \", info->full_name);\n    int i;\n    printf(\"inputs {\");\n    for (i = 0; i < info->inputs; i += 1)\n      printf(\"%s%s\", (i) ? (\" \") : (\"\"), info->input_names[i]);\n\n    printf(\"} \");\n    printf(\"options {\");\n    for (i = 0; i < info->options; i += 1)\n      printf(\"%s{%s}\", (i) ? (\" \") : (\"\"), info->option_names[i]);\n\n    printf(\"} \");\n    printf(\"outputs {\");\n    for (i = 0; i < info->outputs; i += 1)\n      printf(\"%s{%s}\", (i) ? (\" \") : (\"\"), info->output_names[i]);\n\n    printf(\"}\");\n    printf(\"\\n\");\n  }\n  while ((++(&info[info_idx]))->name);\n  return 0;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int info_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_6",
            "header": "",
            "params": [
                "const ti_indicator_info * const info",
                "int o",
                "int h",
                "int l",
                "int c",
                "int r",
                "int r2",
                "int v",
                "int a",
                "int start"
            ],
            "definition": "int helper_main_6(const ti_indicator_info * const info, int o, int h, int l, int c, int r, int r2, int v, int a, int start)\n{\n  int i;\n  int k;\n  int bad = 0;\n  printf(\"date        \");\n  if (o)\n  {\n    printf(\" open   \");\n  }\n  if (h)\n  {\n    printf(\" high   \");\n  }\n  if (l)\n  {\n    printf(\" low    \");\n  }\n  if (c)\n  {\n    printf(\" close  \");\n  }\n  if (v)\n  {\n    printf(\" volume \");\n  }\n  if (r)\n  {\n    printf(\" input  \");\n  }\n  if (r2)\n  {\n    printf(\" input2  \");\n  }\n  if (a)\n  {\n    printf(\" input  \");\n  }\n  for (i = 0; i < info->outputs; i += 1)\n    printf(\" %s\", info->output_names[i]);\n\n  printf(\"\\n\");\n  for (i = 0; i < 15; i += 1)\n  {\n    helper_helper_main_6_1(&k, &bad, info, o, h, l, c, r, r2, v, a, start, i);\n  }\n\n  if (bad)\n  {\n    printf(\"\\nERROR NaN in outputs (%s).\\n\", info->name);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_helper_main_6_1",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "int",
                        "definition": [
                            "int r2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "int",
                        "definition": [
                            "int start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bad",
                        "type": "int",
                        "definition": [
                            "int bad = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_6_1",
            "header": "",
            "params": [
                "int * const k_ref",
                "int * const bad_ref",
                "const ti_indicator_info * const info",
                "int o",
                "int h",
                "int l",
                "int c",
                "int r",
                "int r2",
                "int v",
                "int a",
                "int start",
                "int i"
            ],
            "definition": "void helper_helper_main_6_1(int * const k_ref, int * const bad_ref, const ti_indicator_info * const info, int o, int h, int l, int c, int r, int r2, int v, int a, int start, int i)\n{\n  int k = *k_ref;\n  int bad = *bad_ref;\n  printf(\"%s\", datet[i]);\n  if (o)\n  {\n    printf(\" %8.2f\", open[i]);\n  }\n  if (h)\n  {\n    printf(\" %8.2f\", high[i]);\n  }\n  if (l)\n  {\n    printf(\" %8.2f\", low[i]);\n  }\n  if (c)\n  {\n    printf(\" %8.2f\", close[i]);\n  }\n  if (v)\n  {\n    printf(\" %8.0f\", volume[i]);\n  }\n  if (r)\n  {\n    printf(\" %8.2f\", close[i]);\n  }\n  if (r2)\n  {\n    printf(\" %8.2f\", open[i]);\n  }\n  if (a)\n  {\n    printf(\" %8.2f\", alternative[i]);\n  }\n  if (i >= start)\n  {\n    for (k = 0; k < info->outputs; k += 1)\n    {\n      if (out[k][i - start] != out[k][i - start])\n      {\n        bad = 1;\n      }\n      printf(\" %8.3f\", out[k][i - start]);\n    }\n\n  }\n  printf(\"\\n\");\n  *k_ref = k;\n  *bad_ref = bad;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bad_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bad_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "int",
                        "definition": [
                            "int r2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "int",
                        "definition": [
                            "int start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bad",
                        "type": "int",
                        "definition": [
                            "int bad = *bad_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "datet",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "alternative",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_array",
            "header": "",
            "params": [
                "const double *p",
                "const int size"
            ],
            "definition": "void print_array(const double *p, const int size)\n{\n  int i;\n  for (i = 0; i < size; i += 1)\n  {\n    if (i)\n    {\n      printf(\", \");\n    }\n    printf(\"%.1f\", p[i]);\n  }\n\n  printf(\"\\n\");\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "const double *",
                        "definition": [
                            "const double *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "const int",
                        "definition": [
                            "const int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#example1",
            "header": "",
            "params": [],
            "definition": "int main()\n{\n  const double data_in[] = {5, 8, 12, 11, 9, 8, 7, 10, 11, 13};\n  const int input_length = (sizeof(data_in)) / (sizeof(double));\n  printf(\"We have %d bars of input data.\\n\", input_length);\n  print_array(data_in, input_length);\n  const double options[] = {3};\n  printf(\"Our option array is: \");\n  print_array(options, (sizeof(options)) / (sizeof(double)));\n  const int start = ti_sma_start(options);\n  printf(\"The start amount is: %d\\n\", start);\n  const int output_length = input_length - start;\n  double *data_out = malloc(((unsigned int) output_length) * (sizeof(double)));\n  assert(data_out != 0);\n  printf(\"The output length is: %d\\n\", output_length);\n  const double *all_inputs[] = {data_in};\n  double *all_outputs[] = {data_out};\n  int error = ti_sma(input_length, all_inputs, options, all_outputs);\n  assert(error == 0);\n  printf(\"The output data is: \");\n  print_array(data_out, output_length);\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "malloc",
                "print_array",
                "printf",
                "ti_sma",
                "ti_sma_start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data_in",
                        "type": "const double []",
                        "definition": [
                            "const double data_in[] = {5, 8, 12, 11, 9, 8, 7, 10, 11, 13}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_length",
                        "type": "const int",
                        "definition": [
                            "const int input_length = (sizeof(data_in)) / (sizeof(double))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double []",
                        "definition": [
                            "const double options[] = {3}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const int",
                        "definition": [
                            "const int start = ti_sma_start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_length",
                        "type": "const int",
                        "definition": [
                            "const int output_length = input_length - start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_out",
                        "type": "double *",
                        "definition": [
                            "double *data_out = malloc(((unsigned int) output_length) * (sizeof(double)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_inputs",
                        "type": "const double *[]",
                        "definition": [
                            "const double *all_inputs[] = {data_in}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_outputs",
                        "type": "double *[]",
                        "definition": [
                            "double *all_outputs[] = {data_out}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error = ti_sma(input_length, all_inputs, options, all_outputs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#example2",
            "header": "",
            "params": [],
            "definition": "int main()\n{\n  printf(\"This program is an example of looping through\\n\");\n  printf(\"each of the available indicators.\\n\\n\");\n  const ti_indicator_info *info = ti_indicators;\n  unsigned int info_idx = 0;\n  while (info->name != 0)\n  {\n    int i;\n    printf(\"%s (%s) has type %d with: %d inputs, %d options, %d outputs.\\n\", info->name, info->full_name, info->type, info->inputs, info->options, info->outputs);\n    printf(\"   inputs: \");\n    for (i = 0; i < info->inputs; i += 1)\n      printf(\"%s%s\", (i) ? (\", \") : (\"\"), info->input_names[i]);\n\n    printf(\"\\n\");\n    printf(\"   options: \");\n    for (i = 0; i < info->options; i += 1)\n      printf(\"%s%s\", (i) ? (\", \") : (\"\"), info->option_names[i]);\n\n    printf(\"\\n\");\n    printf(\"   outputs: \");\n    for (i = 0; i < info->outputs; i += 1)\n      printf(\"%s%s\", (i) ? (\", \") : (\"\"), info->output_names[i]);\n\n    printf(\"\\n\");\n    printf(\"\\n\");\n    info_idx += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info = ti_indicators"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int info_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "banner",
            "header": "",
            "params": [],
            "definition": "void banner()\n{\n  printf(\"  ______ _    _ __________________ _____  \\n\");\n  printf(\" |  ____| |  | |___  /___  /  ____|  __ \\\\ \\n\");\n  printf(\" | |__  | |  | |  / /   / /| |__  | |__) |\\n\");\n  printf(\" |  __| | |  | | / /   / / |  __| |  _  / \\n\");\n  printf(\" | |    | |__| |/ /__ / /__| |____| | \\\\ \\\\ \\n\");\n  printf(\" |_|     \\\\____//_____/_____|______|_|  \\\\_\\\\\\n\\n\");\n  printf(\"This program tries each indicator with a lot of options.\\n\");\n  printf(\"It's good for checking for crashes or assertion failures.\\n\");\n  printf(\"Use with a memory tool to check for memory errors in ti.\\n\\n\");\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_output",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "int size",
                "const double * const *inputs",
                "const double *options",
                "double * const *outputs"
            ],
            "definition": "void check_output(const ti_indicator_info *info, int size, const double * const *inputs, const double *options, double * const *outputs)\n{\n  const int s = info->start(options);\n  int o;\n  for (o = 0; o < info->outputs; o += 1)\n  {\n    helper_check_output_1(info, size, inputs, options, outputs, s, o);\n  }\n\n}\n\n",
            "calle": [
                "helper_check_output_1",
                "info->start"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const *",
                        "definition": [
                            "const double * const *inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double *",
                        "definition": [
                            "const double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const *",
                        "definition": [
                            "double * const *outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const int",
                        "definition": [
                            "const int s = info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stress_indicator",
            "header": "",
            "params": [
                "const ti_indicator_info *info"
            ],
            "definition": "void stress_indicator(const ti_indicator_info *info)\n{\n  const int opt_count = info->options;\n  printf(\"%s (%s) (%d options)\\n\", info->name, info->full_name, opt_count);\n  const double *inputs[16] = {0};\n  const double *inputs0[16] = {0};\n  double *outputs[16] = {0};\n  int i;\n  for (i = 0; i < 16; i += 1)\n  {\n    inputs[i] = (i < info->inputs) ? (dummy_in) : (0);\n    inputs0[i] = (i < info->inputs) ? (dummy_in0) : (0);\n    outputs[i] = (i < info->outputs) ? (dummy_ot) : (0);\n  }\n\n  int options_index[16 + 1] = {0};\n  double options[16];\n  int choices;\n  double *optionsd;\n  unsigned int optionsd_idx = 0;\n  if (opt_count <= 4)\n  {\n    choices = (sizeof(optionsd_small)) / (sizeof(double));\n    optionsd_idx = optionsd_small;\n  }\n  else\n  {\n    choices = (sizeof(optionsd_large)) / (sizeof(double));\n    optionsd_idx = optionsd_large;\n  }\n  int j;\n  int count = 0;\n  do\n  {\n    helper_stress_indicator_1(&j, &count, info, opt_count, inputs, inputs0, outputs, options_index, options, choices, optionsd, optionsd_idx);\n  }\n  while (j <= opt_count);\n  assert(.1 > fabs(count - pow(choices, opt_count)));\n}\n\n",
            "calle": [
                "assert",
                "fabs",
                "helper_stress_indicator_1",
                "pow",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_count",
                        "type": "const int",
                        "definition": [
                            "const int opt_count = info->options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[16]",
                        "definition": [
                            "const double *inputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs0",
                        "type": "const double *[16]",
                        "definition": [
                            "const double *inputs0[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options_index",
                        "type": "int [16 + 1]",
                        "definition": [
                            "int options_index[16 + 1] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choices",
                        "type": "int",
                        "definition": [
                            "int choices"
                        ]
                    },
                    {
                        "path": null,
                        "name": "optionsd",
                        "type": "double *",
                        "definition": [
                            "double *optionsd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "optionsd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int optionsd_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummy_in",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dummy_in0",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dummy_ot",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "optionsd_small",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "optionsd_large",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stress_candle",
            "header": "",
            "params": [
                "const tc_candle_info *info"
            ],
            "definition": "void stress_candle(const tc_candle_info *info)\n{\n  printf(\"%s (%s)\\n\", info->name, info->full_name);\n  const double *inputs[4] = {dummy_in, dummy_in, dummy_in, dummy_in};\n  const double *inputs0[4] = {dummy_in0, dummy_in0, dummy_in0, dummy_in0};\n  tc_config config;\n  tc_config_set_to_default(&config);\n  tc_result *output = tc_result_new();\n  for (int s = 0; s < sizes_count; s += 1)\n  {\n    const int size = sizes[s];\n    info->candle(size, inputs, &config, output);\n    assert(tc_result_count(output) <= size);\n    assert(tc_result_pattern_count(output) <= size);\n    for (int i = 0; i < tc_result_count(output); i += 1)\n    {\n      tc_hit hit = tc_result_get(output, i);\n      assert(hit.patterns != ((1L << 26) - 1));\n      assert(hit.index >= 0);\n      assert(hit.index < size);\n    }\n\n    for (int i = 0; i < size; i += 1)\n    {\n      tc_set patterns = tc_result_at(output, i);\n      assert(patterns != ((1L << 26) - 1));\n    }\n\n    info->candle(size, inputs0, &config, output);\n    assert(tc_result_count(output) <= size);\n    assert(tc_result_pattern_count(output) <= size);\n  }\n\n  tc_result_free(output);\n}\n\n",
            "calle": [
                "assert",
                "info->candle",
                "printf",
                "tc_config_set_to_default",
                "tc_result_at",
                "tc_result_count",
                "tc_result_free",
                "tc_result_get",
                "tc_result_new",
                "tc_result_pattern_count"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[4]",
                        "definition": [
                            "const double *inputs[4] = {dummy_in, dummy_in, dummy_in, dummy_in}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs0",
                        "type": "const double *[4]",
                        "definition": [
                            "const double *inputs0[4] = {dummy_in0, dummy_in0, dummy_in0, dummy_in0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "config",
                        "type": "tc_config",
                        "definition": [
                            "tc_config config"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output = tc_result_new()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "const int",
                        "definition": [
                            "const int size = sizes[s]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hit",
                        "type": "tc_hit",
                        "definition": [
                            "tc_hit hit = tc_result_get(output, i)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "patterns",
                        "type": "tc_set",
                        "definition": [
                            "tc_set patterns = tc_result_at(output, i)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummy_in",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dummy_in0",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "sizes_count",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "sizes",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#fuzzer",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  banner();\n  if (argc > 1)\n  {\n    const ti_indicator_info *ind_info = ti_find_indicator(argv[1]);\n    if (ind_info)\n    {\n      stress_indicator(ind_info);\n    }\n    const tc_candle_info *cnd_info = tc_find_candle(argv[1]);\n    if (cnd_info)\n    {\n      stress_candle(cnd_info);\n    }\n  }\n  else\n  {\n    const ti_indicator_info *ind_info = ti_indicators;\n    do\n    {\n      stress_indicator(ind_info);\n    }\n    while ((++ind_info)->name);\n    const tc_candle_info *cnd_info = tc_candles;\n    do\n    {\n      stress_candle(cnd_info);\n    }\n    while ((++cnd_info)->name);\n  }\n  printf(\"\\r                                                  \\rDone\\n\");\n  return (errors_cnt) ? (1) : (0);\n}\n\n",
            "calle": [
                "banner",
                "printf",
                "stress_candle",
                "stress_indicator",
                "tc_find_candle",
                "ti_find_indicator"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *ind_info = ti_find_indicator(argv[1])",
                            "const ti_indicator_info *ind_info = ti_indicators"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnd_info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *cnd_info = tc_candles",
                            "const tc_candle_info *cnd_info = tc_find_candle(argv[1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "errors_cnt",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_check_output_1",
            "header": "",
            "params": [
                "const ti_indicator_info * const info",
                "int size",
                "const double * const * const inputs",
                "const double * const options",
                "double * const * const outputs",
                "const int s",
                "int o"
            ],
            "definition": "void helper_check_output_1(const ti_indicator_info * const info, int size, const double * const * const inputs, const double * const options, double * const * const outputs, const int s, int o)\n{\n  double max = 0;\n  double min = 0;\n  int i;\n  for (i = 0; i < (size - s); i += 1)\n  {\n    const double op = outputs[o][i];\n    const double in = inputs[0][i + s];\n    max = (in > max) ? (in) : (max);\n    min = (in < min) ? (in) : (min);\n    switch (info->type)\n    {\n      default:\n      {\n        break;\n      }\n\n      case 1:\n      {\n        if (((op > 4) && (op > ((max * 1.5) + 2))) || ((op < (-4)) && (op < ((min * 0.5) - 3))))\n        {\n          do\n          {\n            int k;\n            int j;\n            printf(\"\\nInputs:\");\n            for (k = 0; k < input_size; k += 1)\n              printf(\" %f\", inputs[0][k]);\n\n            printf(\"\\nOptions:\");\n            for (k = 0; k < info->options; k += 1)\n              printf(\" %f\", options[k]);\n\n            for (j = 0; j < info->outputs; j += 1)\n            {\n              printf(\"\\nOutput[%d]:\", j);\n              for (k = 0; k < input_size; k += 1)\n                printf(\" %f\", outputs[j][k]);\n\n            }\n\n          }\n          while (0);\n          printf(\"\\nERROR Output is out of range for input: input: %f output: %f\\n\", in, op);\n          errors_cnt += 1;\n          assert(0);\n        }\n        break;\n      }\n\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double * const * const",
                        "definition": [
                            "const double * const * const inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const double * const",
                        "definition": [
                            "const double * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double * const * const",
                        "definition": [
                            "double * const * const outputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const int",
                        "definition": [
                            "const int s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "int",
                        "definition": [
                            "int o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "double",
                        "definition": [
                            "double max = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "double",
                        "definition": [
                            "double min = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "const double",
                        "definition": [
                            "const double op = outputs[o][i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const double",
                        "definition": [
                            "const double in = inputs[0][i + s]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "errors_cnt",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_stress_indicator_1",
            "header": "",
            "params": [
                "int * const j_ref",
                "int * const count_ref",
                "const ti_indicator_info * const info",
                "const int opt_count",
                "const double *inputs[16]",
                "const double *inputs0[16]",
                "double *outputs[16]",
                "int options_index[16 + 1]",
                "double options[16]",
                "int choices",
                "double * const optionsd",
                "unsigned int optionsd_idx"
            ],
            "definition": "void helper_stress_indicator_1(int * const j_ref, int * const count_ref, const ti_indicator_info * const info, const int opt_count, const double *inputs[16], const double *inputs0[16], double *outputs[16], int options_index[16 + 1], double options[16], int choices, double * const optionsd, unsigned int optionsd_idx)\n{\n  int j = *j_ref;\n  int count = *count_ref;\n  count += 1;\n  for (j = 0; j < opt_count; j += 1)\n  {\n    options[j] = optionsd[options_index[j] + optionsd_idx];\n    printf(\" %f\", options[j]);\n  }\n\n  const int rz = info->indicator(input_size, inputs0, options, outputs);\n  if (rz == 0)\n  {\n    check_output(info, input_size, inputs0, options, outputs);\n  }\n  for (int s = 0; s < sizes_count; s += 1)\n  {\n    helper_helper_stress_indicator_1_1(info, inputs, outputs, options, s);\n  }\n\n  printf(\"\\r                                                                          \\r\");\n  j = 0;\n  do\n  {\n    options_index[j] = (options_index[j] + 1) % choices;\n  }\n  while (options_index[j++] == 0);\n  *j_ref = j;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "check_output",
                "helper_helper_stress_indicator_1_1",
                "info->indicator",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_count",
                        "type": "const int",
                        "definition": [
                            "const int opt_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[16]",
                        "definition": [
                            "const double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs0",
                        "type": "const double *[16]",
                        "definition": [
                            "const double *inputs0[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options_index",
                        "type": "int [16 + 1]",
                        "definition": [
                            "int options_index[16 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choices",
                        "type": "int",
                        "definition": [
                            "int choices"
                        ]
                    },
                    {
                        "path": null,
                        "name": "optionsd",
                        "type": "double * const",
                        "definition": [
                            "double * const optionsd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "optionsd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int optionsd_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rz",
                        "type": "const int",
                        "definition": [
                            "const int rz = info->indicator(input_size, inputs0, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "sizes_count",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_stress_indicator_1_1",
            "header": "",
            "params": [
                "const ti_indicator_info * const info",
                "const double *inputs[16]",
                "double *outputs[16]",
                "double options[16]",
                "int s"
            ],
            "definition": "void helper_helper_stress_indicator_1_1(const ti_indicator_info * const info, const double *inputs[16], double *outputs[16], double options[16], int s)\n{\n  const int size = sizes[s];\n  printf(\" %d\", size);\n  const int r = info->indicator(size, inputs, options, outputs);\n  if (r == 0)\n  {\n    check_output(info, size, inputs, options, outputs);\n  }\n  if (info->indicator_ref)\n  {\n    printf(\" r\");\n    const int rr = info->indicator_ref(size, inputs, options, outputs);\n    if (rr == 0)\n    {\n      check_output(info, size, inputs, options, outputs);\n    }\n  }\n  if (info->stream_new)\n  {\n    ti_stream *stream;\n    const int rs = info->stream_new(options, &stream);\n    if ((rs == 0) && stream)\n    {\n      printf(\" s\");\n      int rsc = info->stream_run(stream, size, inputs, outputs);\n      if (rsc == 0)\n      {\n        check_output(info, size, inputs, options, outputs);\n      }\n      for (int repeat = 0; repeat < 5; repeat += 1)\n      {\n        rsc = info->stream_run(stream, size, inputs, outputs);\n      }\n\n      info->stream_free(stream);\n    }\n  }\n}\n\n",
            "calle": [
                "check_output",
                "info->indicator",
                "info->indicator_ref",
                "info->stream_free",
                "info->stream_new",
                "info->stream_run",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[16]",
                        "definition": [
                            "const double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "const int",
                        "definition": [
                            "const int size = sizes[s]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const int",
                        "definition": [
                            "const int r = info->indicator(size, inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rr",
                        "type": "const int",
                        "definition": [
                            "const int rr = info->indicator_ref(size, inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rs",
                        "type": "const int",
                        "definition": [
                            "const int rs = info->stream_new(options, &stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsc",
                        "type": "int",
                        "definition": [
                            "int rsc = info->stream_run(stream, size, inputs, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "repeat",
                        "type": "int",
                        "definition": [
                            "int repeat = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sizes",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compare_arrays",
            "header": "",
            "params": [
                "double *a",
                "double *b",
                "int size_a",
                "int size_b"
            ],
            "definition": "void compare_arrays(double *a, double *b, int size_a, int size_b)\n{\n  int i;\n  do\n  {\n    ltests += 1;\n    if (size_a != size_b)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%d != %d)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 42, size_a, size_b);\n    }\n  }\n  while (0);\n  if (size_a != size_b)\n  {\n    printf(\"Size mismatch.\\n\");\n  }\n  const int f = lfails;\n  for (i = 0; i < size_a; i += 1)\n  {\n    do\n    {\n      ltests += 1;\n      if (fabs(((double) a[i]) - ((double) b[i])) > 0.001)\n      {\n        lfails += 1;\n        printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 50, (double) a[i], (double) b[i]);\n      }\n    }\n    while (0);\n  }\n\n  if (lfails != f)\n  {\n    printf(\"Expected      Got\\n\");\n    for (i = 0; i < size_a; i += 1)\n    {\n      printf(\"%8.3f %8.3f\\n\", a[i], b[i]);\n    }\n\n  }\n}\n\n",
            "calle": [
                "fabs",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "double *",
                        "definition": [
                            "double *a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "double *",
                        "definition": [
                            "double *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_a",
                        "type": "int",
                        "definition": [
                            "int size_a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_b",
                        "type": "int",
                        "definition": [
                            "int size_b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "const int",
                        "definition": [
                            "const int f = lfails"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "next_line",
            "header": "",
            "params": [
                "FILE *fp"
            ],
            "definition": "char *next_line(FILE *fp)\n{\n  static char buf[4096];\n  while (fgets(buf, 4096, fp))\n  {\n    if (buf[0] == '#')\n    {\n      continue;\n    }\n    if ((buf[0] == 10) || (buf[0] == 13))\n    {\n      continue;\n    }\n    return buf;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "fgets"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [4096]",
                        "definition": [
                            "static char buf[4096]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_array",
            "header": "",
            "params": [
                "FILE *fp",
                "double *s"
            ],
            "definition": "int get_array(FILE *fp, double *s)\n{\n  char *line = next_line(fp);\n  if (line[0] != '{')\n  {\n    printf(\"Bad input\\n\");\n    do\n    {\n      ltests += 1;\n      if (!0)\n      {\n        lfails += 1;\n        printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 85);\n      }\n    }\n    while (0);\n    return 0;\n  }\n  char *num = strtok(line + 1, \",}\\r\\n\");\n  unsigned int num_idx = 0;\n  if (!(&num[num_idx]))\n  {\n    return 0;\n  }\n  double *inp = s;\n  unsigned int inp_idx = 0;\n  do\n  {\n    inp[inp_idx] = atof(num);\n    inp_idx += 1;\n  }\n  while (num_idx = strtok(0, \",}\\r\\n\"));\n  return (int) ((&inp[inp_idx]) - s);\n}\n\n",
            "calle": [
                "atof",
                "next_line",
                "printf",
                "strtok"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "double *",
                        "definition": [
                            "double *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char *",
                        "definition": [
                            "char *line = next_line(fp)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "char *",
                        "definition": [
                            "char *num = strtok(line + 1, \",}\\r\\n\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp",
                        "type": "double *",
                        "definition": [
                            "double *inp = s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_ind_name",
            "header": "",
            "params": [
                "FILE *fp",
                "const char *name",
                "int count"
            ],
            "definition": "void test_ind_name(FILE *fp, const char *name, int count)\n{\n  const ti_indicator_info *info = ti_find_indicator(name);\n  if (!info)\n  {\n    printf(\"(WARN) Couldn't find indicator %s\\n\", name);\n    printf(\"---------------------------------------------\");\n    static char buf[4096];\n    while (fgets(buf, 4096, fp) && ((buf[0] == '{') || (buf[0] == '#')))\n      ;\n\n    return;\n  }\n  const int ind_num = (int) (info - ti_indicators);\n  if (count)\n  {\n    tested_ind[ind_num] = 1;\n  }\n  double options[16];\n  double *o = options;\n  unsigned int o_idx = 0;\n  const char *s;\n  unsigned int s_idx = 0;\n  while (s_idx = strtok(0, \" \\n\\r\"))\n  {\n    o[o_idx] = atof(s);\n    o_idx += 1;\n  }\n\n  do\n  {\n    ltests += 1;\n    if (((int) ((&o[o_idx]) - options)) != info->options)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%d != %d)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 137, (int) ((&o[o_idx]) - options), info->options);\n    }\n  }\n  while (0);\n  int i;\n  double *inputs[16] = {0};\n  double *answers[16] = {0};\n  double *outputs[16] = {0};\n  int input_size = 0;\n  for (i = 0; i < info->inputs; i += 1)\n  {\n    inputs[i] = malloc((sizeof(double)) * 1024);\n    input_size = get_array(fp, inputs[i]);\n  }\n\n  int answer_size = 0;\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    answers[i] = malloc((sizeof(double)) * 1024);\n    outputs[i] = malloc((sizeof(double)) * 1024);\n    answer_size = get_array(fp, answers[i]);\n  }\n\n  {\n    helper_test_ind_name_1(&i, info, options, inputs, answers, outputs, input_size, answer_size);\n  }\n  if (info->indicator_ref)\n  {\n    helper_test_ind_name_2(&i, info, options, inputs, answers, outputs, input_size, answer_size);\n  }\n  if (info->stream_new)\n  {\n    helper_test_ind_name_3(&i, info, options, inputs, answers, outputs, input_size, answer_size);\n  }\n  for (i = 0; i < info->inputs; i += 1)\n    free(inputs[i]);\n\n  for (i = 0; i < info->outputs; i += 1)\n    free(answers[i]);\n\n  for (i = 0; i < info->outputs; i += 1)\n    free(outputs[i]);\n\n}\n\n",
            "calle": [
                "atof",
                "fgets",
                "free",
                "get_array",
                "helper_test_ind_name_1",
                "helper_test_ind_name_2",
                "helper_test_ind_name_3",
                "malloc",
                "printf",
                "strtok",
                "ti_find_indicator"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info = ti_find_indicator(name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [4096]",
                        "definition": [
                            "static char buf[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_num",
                        "type": "const int",
                        "definition": [
                            "const int ind_num = (int) (info - ti_indicators)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "double *",
                        "definition": [
                            "double *o = options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int o_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answers",
                        "type": "double *[16]",
                        "definition": [
                            "double *answers[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answer_size",
                        "type": "int",
                        "definition": [
                            "int answer_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tested_ind",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_candles",
            "header": "",
            "params": [
                "FILE *fp",
                "int count"
            ],
            "definition": "void test_candles(FILE *fp, int count)\n{\n  double *inputs[16] = {0};\n  int input_size = 0;\n  for (int i = 0; i < 4; i += 1)\n  {\n    inputs[i] = malloc((sizeof(double)) * 1024);\n    input_size = get_array(fp, inputs[i]);\n  }\n\n  tc_config config;\n  tc_config_set_to_default(&config);\n  tc_result *output = tc_result_new();\n  tc_run((1L << 26) - 1, input_size, (const TC_REAL * const *) inputs, &config, output);\n  static char buf[4096];\n  do\n  {\n    helper_test_candles_1(fp, count, output, buf);\n  }\n  while (1);\n  tc_result_free(output);\n  free(inputs[0]);\n  free(inputs[1]);\n  free(inputs[2]);\n  free(inputs[3]);\n}\n\n",
            "calle": [
                "free",
                "get_array",
                "helper_test_candles_1",
                "malloc",
                "tc_config_set_to_default",
                "tc_result_free",
                "tc_result_new",
                "tc_run"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "config",
                        "type": "tc_config",
                        "definition": [
                            "tc_config config"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result *",
                        "definition": [
                            "tc_result *output = tc_result_new()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [4096]",
                        "definition": [
                            "static char buf[4096]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test",
            "header": "",
            "params": [
                "const char *fname",
                "int count"
            ],
            "definition": "void test(const char *fname, int count)\n{\n  printf(\"%s:\\n\", fname);\n  FILE *fp = fopen(fname, \"r\");\n  if (!fp)\n  {\n    helper_test_1();\n  }\n  char *line;\n  unsigned int line_idx = 0;\n  while (line_idx = next_line(fp))\n  {\n    helper_test_2(count, fp, line, line_idx);\n  }\n\n  fclose(fp);\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "helper_test_1",
                "helper_test_2",
                "next_line",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fname",
                        "type": "const char *",
                        "definition": [
                            "const char *fname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp = fopen(fname, \"r\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char *",
                        "definition": [
                            "char *line"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int line_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_version",
            "header": "",
            "params": [],
            "definition": "void test_version()\n{\n  do\n  {\n    ltests += 1;\n    if (!(strcmp(\"0.9.2\", ti_version()) == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 345);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(1746800254 == ti_build()))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 346);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(104 == ti_indicator_count()))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 347);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(strcmp(\"0.9.2\", tc_version()) == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 349);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(1746800254 == tc_build()))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 350);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(26 == tc_candle_count()))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 351);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(strcmp(\"0.9.2\", \"0.9.2\") == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 353);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (1746800254 != 1746800254)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%d != %d)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 354, 1746800254, 1746800254);\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "printf",
                "strcmp",
                "tc_build",
                "tc_candle_count",
                "tc_version",
                "ti_build",
                "ti_indicator_count",
                "ti_version"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_buffer",
            "header": "",
            "params": [],
            "definition": "void test_buffer()\n{\n  ti_buffer *b = ti_buffer_new(3);\n  do\n  {\n    helper_test_buffer_1(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 5.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 360, (double) b->sum, (double) 5.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_2(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 10.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 361, (double) b->sum, (double) 10.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_3(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 11.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 362, (double) b->sum, (double) 11.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_4(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 7.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 363, (double) b->sum, (double) 7.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_5(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 5.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 364, (double) b->sum, (double) 5.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_6(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 5.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 365, (double) b->sum, (double) 5.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_7(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 6.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 366, (double) b->sum, (double) 6.0);\n    }\n  }\n  while (0);\n  do\n  {\n    helper_test_buffer_8(b);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->sum) - ((double) 6.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 367, (double) b->sum, (double) 6.0);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->vals[(((b->index + b->size) - 1) + 0) % b->size]) - ((double) 3.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 369, (double) b->vals[(((b->index + b->size) - 1) + 0) % b->size], (double) 3.0);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->vals[(((b->index + b->size) - 1) + (-1)) % b->size]) - ((double) 2.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 370, (double) b->vals[(((b->index + b->size) - 1) + (-1)) % b->size], (double) 2.0);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->vals[(((b->index + b->size) - 1) + (-2)) % b->size]) - ((double) 1.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 371, (double) b->vals[(((b->index + b->size) - 1) + (-2)) % b->size], (double) 1.0);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) b->vals[(((b->index + b->size) - 1) + (-3)) % b->size]) - ((double) 3.0)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 372, (double) b->vals[(((b->index + b->size) - 1) + (-3)) % b->size], (double) 3.0);\n    }\n  }\n  while (0);\n  ti_buffer_free(b);\n}\n\n",
            "calle": [
                "fabs",
                "helper_test_buffer_1",
                "helper_test_buffer_2",
                "helper_test_buffer_3",
                "helper_test_buffer_4",
                "helper_test_buffer_5",
                "helper_test_buffer_6",
                "helper_test_buffer_7",
                "helper_test_buffer_8",
                "printf",
                "ti_buffer_free",
                "ti_buffer_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer *",
                        "definition": [
                            "ti_buffer *b = ti_buffer_new(3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_localbuffer",
            "header": "",
            "params": [],
            "definition": "void test_localbuffer()\n{\n  typedef struct s\n  {\n    struct \n    {\n      double padding;\n      int zero[4];\n      int offset_a;\n      int size_a;\n      int index_a;\n      int padding_a;\n    } buf_info;\n    double padding[5];\n  } s;\n  s stream = {0};\n  do\n  {\n    (&stream)->buf_info.offset_a = (*((&(&stream)->buf_info.offset_a) - 3)) + (*((&(&stream)->buf_info.offset_a) - 4));\n    (&stream)->buf_info.size_a = 5;\n    (&stream)->buf_info.index_a = -1;\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (((*(((int *) ((&(&stream)->buf_info) + 1)) - 3)) + (*(((int *) ((&(&stream)->buf_info) + 1)) - 4))) != 5)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%d != %d)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 395, (*(((int *) ((&(&stream)->buf_info) + 1)) - 3)) + (*(((int *) ((&(&stream)->buf_info) + 1)) - 4)), 5);\n    }\n  }\n  while (0);\n  do\n  {\n    int idx = (&stream)->buf_info.index_a + 1;\n    if (idx == (&stream)->buf_info.size_a)\n    {\n      idx = 0;\n    }\n    *((((double *) ((&(&stream)->buf_info) + 1)) + (&stream)->buf_info.offset_a) + idx) = 100;\n    (&stream)->buf_info.index_a = idx;\n  }\n  while (0);\n  double get;\n  do\n  {\n    helper_test_localbuffer_1(&get, stream);\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (fabs(((double) get) - ((double) 100)) > 0.001)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%f != %f)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 400, (double) get, (double) 100);\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "fabs",
                "helper_test_localbuffer_1",
                "printf"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct s\n{\n  struct \n  {\n    double padding;\n    int zero[4];\n    int offset_a;\n    int size_a;\n    int index_a;\n    int padding_a;\n  } buf_info;\n  double padding[5];\n} s",
                        "name": "s",
                        "names": [],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "buf_info",
                                    "type": "struct \n{\n  double padding;\n  int zero[4];\n  int offset_a;\n  int size_a;\n  int index_a;\n  int padding_a;\n}",
                                    "definition": [
                                        "struct \n{\n  double padding;\n  int zero[4];\n  int offset_a;\n  int size_a;\n  int index_a;\n  int padding_a;\n} buf_info"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "padding",
                                    "type": "double [5]",
                                    "definition": [
                                        "double padding[5]"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "s",
                        "definition": [
                            "s stream = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "int",
                        "definition": [
                            "int idx = (&stream)->buf_info.index_a + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "get",
                        "type": "double",
                        "definition": [
                            "double get"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#smoke",
            "header": "",
            "params": [],
            "definition": "int main()\n{\n  printf(\"TI TEST SUITE\\n\");\n  do\n  {\n    const int ts = ltests;\n    const int fs = lfails;\n    const clock_t start = clock();\n    printf(\"\\t%-16s\", \"buffer\");\n    test_buffer();\n    printf(\"pass:%2d   fail:%2d   %4dms\\n\", (ltests - ts) - (lfails - fs), lfails - fs, (int) (((clock() - start) * 1000) / CLOCKS_PER_SEC));\n  }\n  while (0);\n  do\n  {\n    const int ts = ltests;\n    const int fs = lfails;\n    const clock_t start = clock();\n    printf(\"\\t%-16s\", \"localbuffer\");\n    test_localbuffer();\n    printf(\"pass:%2d   fail:%2d   %4dms\\n\", (ltests - ts) - (lfails - fs), lfails - fs, (int) (((clock() - start) * 1000) / CLOCKS_PER_SEC));\n  }\n  while (0);\n  do\n  {\n    const int ts = ltests;\n    const int fs = lfails;\n    const clock_t start = clock();\n    printf(\"\\t%-16s\", \"version\");\n    test_version();\n    printf(\"pass:%2d   fail:%2d   %4dms\\n\", (ltests - ts) - (lfails - fs), lfails - fs, (int) (((clock() - start) * 1000) / CLOCKS_PER_SEC));\n  }\n  while (0);\n  test(\"tests/untest.txt\", 0);\n  test(\"tests/atoz.txt\", 1);\n  test(\"tests/extra.txt\", 1);\n  test(\"tests/candles.txt\", 1);\n  for (int i = 0; i < 104; i += 1)\n  {\n    if (!tested_ind[i])\n    {\n      printf(\"WARNING: no test for %s\\n\", ti_indicators[i].name);\n    }\n  }\n\n  for (int i = 0; i < 26; i += 1)\n  {\n    if (!tested_cnd[i])\n    {\n      printf(\"WARNING: no test for %s\\n\", tc_candles[i].name);\n    }\n  }\n\n  if (lfails == 0)\n  {\n    printf(\"ALL TESTS PASSED (%d/%d)\\n\", ltests, ltests);\n  }\n  else\n  {\n    printf(\"%d TESTS FAILED (of %d)\\n\", lfails, ltests);\n  }\n  return lfails != 0;\n}\n\n",
            "calle": [
                "clock",
                "printf",
                "test",
                "test_buffer",
                "test_localbuffer",
                "test_version"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ts",
                        "type": "const int",
                        "definition": [
                            "const int ts = ltests"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fs",
                        "type": "const int",
                        "definition": [
                            "const int fs = lfails"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const clock_t",
                        "definition": [
                            "const clock_t start = clock()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tested_ind",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tested_cnd",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_ind_name_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "const ti_indicator_info * const info",
                "double options[16]",
                "double *inputs[16]",
                "double *answers[16]",
                "double *outputs[16]",
                "int input_size",
                "int answer_size"
            ],
            "definition": "void helper_test_ind_name_1(int * const i_ref, const ti_indicator_info * const info, double options[16], double *inputs[16], double *answers[16], double *outputs[16], int input_size, int answer_size)\n{\n  int i = *i_ref;\n  const int ret = info->indicator(input_size, (const double * const *) inputs, options, outputs);\n  do\n  {\n    ltests += 1;\n    if (!(ret == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 160);\n    }\n  }\n  while (0);\n  int output_size = input_size - info->start(options);\n  if (output_size < 0)\n  {\n    output_size = 0;\n  }\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    compare_arrays(answers[i], outputs[i], answer_size, output_size);\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "compare_arrays",
                "info->indicator",
                "info->start",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answers",
                        "type": "double *[16]",
                        "definition": [
                            "double *answers[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answer_size",
                        "type": "int",
                        "definition": [
                            "int answer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator(input_size, (const double * const *) inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "int",
                        "definition": [
                            "int output_size = input_size - info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_ind_name_2",
            "header": "",
            "params": [
                "int * const i_ref",
                "const ti_indicator_info * const info",
                "double options[16]",
                "double *inputs[16]",
                "double *answers[16]",
                "double *outputs[16]",
                "int input_size",
                "int answer_size"
            ],
            "definition": "void helper_test_ind_name_2(int * const i_ref, const ti_indicator_info * const info, double options[16], double *inputs[16], double *answers[16], double *outputs[16], int input_size, int answer_size)\n{\n  int i = *i_ref;\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    memset(outputs[i], 0, (sizeof(double)) * 1024);\n  }\n\n  const int ret = info->indicator_ref(input_size, (const double * const *) inputs, options, outputs);\n  do\n  {\n    ltests += 1;\n    if (!(ret == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 176);\n    }\n  }\n  while (0);\n  int output_size = input_size - info->start(options);\n  if (output_size < 0)\n  {\n    output_size = 0;\n  }\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    compare_arrays(answers[i], outputs[i], answer_size, output_size);\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "compare_arrays",
                "info->indicator_ref",
                "info->start",
                "memset",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answers",
                        "type": "double *[16]",
                        "definition": [
                            "double *answers[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answer_size",
                        "type": "int",
                        "definition": [
                            "int answer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator_ref(input_size, (const double * const *) inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "int",
                        "definition": [
                            "int output_size = input_size - info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_ind_name_3",
            "header": "",
            "params": [
                "int * const i_ref",
                "const ti_indicator_info * const info",
                "double options[16]",
                "double *inputs[16]",
                "double *answers[16]",
                "double *outputs[16]",
                "int input_size",
                "int answer_size"
            ],
            "definition": "void helper_test_ind_name_3(int * const i_ref, const ti_indicator_info * const info, double options[16], double *inputs[16], double *answers[16], double *outputs[16], int input_size, int answer_size)\n{\n  int i = *i_ref;\n  const int steps[] = {1, 2, 3, 4, 5, 7, 13, 100, 1024};\n  const int step_count = (sizeof(steps)) / (sizeof(int));\n  for (int step_i = 0; step_i < step_count; step_i += 1)\n  {\n    helper_helper_test_ind_name_3_1(&i, info, options, inputs, answers, outputs, input_size, answer_size, steps, step_i);\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_test_ind_name_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answers",
                        "type": "double *[16]",
                        "definition": [
                            "double *answers[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answer_size",
                        "type": "int",
                        "definition": [
                            "int answer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "steps",
                        "type": "const int []",
                        "definition": [
                            "const int steps[] = {1, 2, 3, 4, 5, 7, 13, 100, 1024}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "step_count",
                        "type": "const int",
                        "definition": [
                            "const int step_count = (sizeof(steps)) / (sizeof(int))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "step_i",
                        "type": "int",
                        "definition": [
                            "int step_i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_candles_1",
            "header": "",
            "params": [
                "FILE * const fp",
                "int count",
                "tc_result * const output",
                "static char buf[4096]"
            ],
            "definition": "void helper_test_candles_1(FILE * const fp, int count, tc_result * const output, static char buf[4096])\n{\n  if (feof(fp))\n  {\n    break;\n  }\n  fgets(buf, 4096, fp);\n  if ((buf[0] != '!') && ((buf[0] < 'a') || (buf[0] > 'z')))\n  {\n    break;\n  }\n  char *name = strtok(buf, \" \");\n  unsigned int name_idx = 0;\n  int negate = 0;\n  if (buf[0] == '!')\n  {\n    negate = 1;\n    name_idx += 1;\n  }\n  const tc_candle_info *info = tc_find_candle(name);\n  do\n  {\n    ltests += 1;\n    if (!info)\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 282);\n    }\n  }\n  while (0);\n  char *num;\n  unsigned int num_idx = 0;\n  while (num_idx = strtok(0, \" \"))\n  {\n    helper_helper_test_candles_1_1(output, negate, info, num);\n  }\n\n  const int cnd_num = (int) (info - tc_candles);\n  if (count)\n  {\n    tested_cnd[cnd_num] = 1;\n  }\n}\n\n",
            "calle": [
                "feof",
                "fgets",
                "helper_helper_test_candles_1_1",
                "printf",
                "strtok",
                "tc_find_candle"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [4096]",
                        "definition": [
                            "static char buf[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name = strtok(buf, \" \")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "negate",
                        "type": "int",
                        "definition": [
                            "int negate = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *info = tc_find_candle(name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "char *",
                        "definition": [
                            "char *num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnd_num",
                        "type": "const int",
                        "definition": [
                            "const int cnd_num = (int) (info - tc_candles)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tested_cnd",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_1",
            "header": "",
            "params": [],
            "definition": "void helper_test_1()\n{\n  do\n  {\n    ltests += 1;\n    if (!0)\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 316);\n    }\n  }\n  while (0);\n  return;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_2",
            "header": "",
            "params": [
                "int count",
                "FILE * const fp",
                "char * const line",
                "unsigned int line_idx"
            ],
            "definition": "void helper_test_2(int count, FILE * const fp, char * const line, unsigned int line_idx)\n{\n  if ((line[0 + line_idx] < 'a') || (line[0 + line_idx] > 'z'))\n  {\n    do\n    {\n      ltests += 1;\n      if (!0)\n      {\n        lfails += 1;\n        printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 326);\n      }\n    }\n    while (0);\n    continue;\n  }\n  char *name = strtok(line, \" \\n\\r\");\n  if (!strcmp(name, \"candle\"))\n  {\n    do\n    {\n      const int ts = ltests;\n      const int fs = lfails;\n      const clock_t start = clock();\n      printf(\"\\t%-16s\", name);\n      test_candles(fp, count);\n      printf(\"pass:%2d   fail:%2d   %4dms\\n\", (ltests - ts) - (lfails - fs), lfails - fs, (int) (((clock() - start) * 1000) / CLOCKS_PER_SEC));\n    }\n    while (0);\n  }\n  else\n  {\n    do\n    {\n      const int ts = ltests;\n      const int fs = lfails;\n      const clock_t start = clock();\n      printf(\"\\t%-16s\", name);\n      test_ind_name(fp, name, count);\n      printf(\"pass:%2d   fail:%2d   %4dms\\n\", (ltests - ts) - (lfails - fs), lfails - fs, (int) (((clock() - start) * 1000) / CLOCKS_PER_SEC));\n    }\n    while (0);\n  }\n}\n\n",
            "calle": [
                "clock",
                "printf",
                "strcmp",
                "strtok",
                "test_candles",
                "test_ind_name"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char * const",
                        "definition": [
                            "char * const line"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int line_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name = strtok(line, \" \\n\\r\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ts",
                        "type": "const int",
                        "definition": [
                            "const int ts = ltests"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fs",
                        "type": "const int",
                        "definition": [
                            "const int fs = lfails"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const clock_t",
                        "definition": [
                            "const clock_t start = clock()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_1",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_1(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 5.0;\n  b->vals[b->index] = 5.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_2",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_2(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 5.0;\n  b->vals[b->index] = 5.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_3",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_3(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 1.0;\n  b->vals[b->index] = 1.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_4",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_4(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 1.0;\n  b->vals[b->index] = 1.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_5",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_5(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 3.0;\n  b->vals[b->index] = 3.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_6",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_6(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 1.0;\n  b->vals[b->index] = 1.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_7",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_7(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 2.0;\n  b->vals[b->index] = 2.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_buffer_8",
            "header": "",
            "params": [
                "ti_buffer * const b"
            ],
            "definition": "void helper_test_buffer_8(ti_buffer * const b)\n{\n  if (b->pushes >= b->size)\n  {\n    b->sum -= b->vals[b->index];\n  }\n  b->sum += 3.0;\n  b->vals[b->index] = 3.0;\n  b->pushes += 1;\n  b->index = b->index + 1;\n  if (b->index >= b->size)\n  {\n    b->index = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "ti_buffer * const",
                        "definition": [
                            "ti_buffer * const b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_localbuffer_1",
            "header": "",
            "params": [
                "double * const get_ref",
                "s stream"
            ],
            "definition": "void helper_test_localbuffer_1(double * const get_ref, s stream)\n{\n  double get = *get_ref;\n  int idx = (&stream)->buf_info.index_a + 0;\n  while (idx >= (&stream)->buf_info.size_a)\n  {\n    idx -= (&stream)->buf_info.size_a;\n  }\n\n  while (idx < 0)\n  {\n    idx += (&stream)->buf_info.size_a;\n  }\n\n  get = *((((double *) ((&(&stream)->buf_info) + 1)) + (&stream)->buf_info.offset_a) + idx);\n  *get_ref = get;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "get_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const get_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "s",
                        "definition": [
                            "s stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "get",
                        "type": "double",
                        "definition": [
                            "double get = *get_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "int",
                        "definition": [
                            "int idx = (&stream)->buf_info.index_a + 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_test_ind_name_3_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "const ti_indicator_info * const info",
                "double options[16]",
                "double *inputs[16]",
                "double *answers[16]",
                "double *outputs[16]",
                "int input_size",
                "int answer_size",
                "const int steps[]",
                "int step_i"
            ],
            "definition": "void helper_helper_test_ind_name_3_1(int * const i_ref, const ti_indicator_info * const info, double options[16], double *inputs[16], double *answers[16], double *outputs[16], int input_size, int answer_size, const int steps[], int step_i)\n{\n  int i = *i_ref;\n  const int step = steps[step_i];\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    memset(outputs[i], 0, (sizeof(double)) * 1024);\n  }\n\n  ti_stream *stream = 0;\n  const int stream_ret = info->stream_new(options, &stream);\n  do\n  {\n    ltests += 1;\n    if (!(stream_ret == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 201);\n    }\n  }\n  while (0);\n  do\n  {\n    ltests += 1;\n    if (!(stream != 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 202);\n    }\n  }\n  while (0);\n  for (int bar = 0; bar < input_size; bar += step)\n  {\n    helper_helper_helper_test_ind_name_3_1_1(&i, info, inputs, outputs, input_size, step, stream, bar);\n  }\n\n  int output_size = input_size - info->start(options);\n  if (output_size < 0)\n  {\n    output_size = 0;\n  }\n  do\n  {\n    ltests += 1;\n    if (ti_stream_get_progress(stream) != output_size)\n    {\n      lfails += 1;\n      printf(\"%s:%d (%d != %d)\\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 227, ti_stream_get_progress(stream), output_size);\n    }\n  }\n  while (0);\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    compare_arrays(answers[i], outputs[i], answer_size, output_size);\n  }\n\n  info->stream_free(stream);\n  *i_ref = i;\n}\n\n",
            "calle": [
                "compare_arrays",
                "helper_helper_helper_test_ind_name_3_1_1",
                "info->start",
                "info->stream_free",
                "info->stream_new",
                "memset",
                "printf",
                "ti_stream_get_progress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answers",
                        "type": "double *[16]",
                        "definition": [
                            "double *answers[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "answer_size",
                        "type": "int",
                        "definition": [
                            "int answer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "steps",
                        "type": "const int []",
                        "definition": [
                            "const int steps[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "step_i",
                        "type": "int",
                        "definition": [
                            "int step_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "step",
                        "type": "const int",
                        "definition": [
                            "const int step = steps[step_i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_ret",
                        "type": "const int",
                        "definition": [
                            "const int stream_ret = info->stream_new(options, &stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "int",
                        "definition": [
                            "int bar = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "int",
                        "definition": [
                            "int output_size = input_size - info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_test_candles_1_1",
            "header": "",
            "params": [
                "tc_result * const output",
                "int negate",
                "const tc_candle_info * const info",
                "char * const num"
            ],
            "definition": "void helper_helper_test_candles_1_1(tc_result * const output, int negate, const tc_candle_info * const info, char * const num)\n{\n  const int pos = atoi(num);\n  if (negate)\n  {\n    do\n    {\n      ltests += 1;\n      if (!(!(tc_result_at(output, pos) & info->pattern)))\n      {\n        lfails += 1;\n        printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 290);\n      }\n    }\n    while (0);\n  }\n  else\n    do\n  {\n    ltests += 1;\n    if (!(tc_result_at(output, pos) & info->pattern))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 292);\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "atoi",
                "printf",
                "tc_result_at"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "output",
                        "type": "tc_result * const",
                        "definition": [
                            "tc_result * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "negate",
                        "type": "int",
                        "definition": [
                            "int negate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info * const",
                        "definition": [
                            "const tc_candle_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "char * const",
                        "definition": [
                            "char * const num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "const int",
                        "definition": [
                            "const int pos = atoi(num)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_test_ind_name_3_1_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "const ti_indicator_info * const info",
                "double *inputs[16]",
                "double *outputs[16]",
                "int input_size",
                "const int step",
                "ti_stream * const stream",
                "int bar"
            ],
            "definition": "void helper_helper_helper_test_ind_name_3_1_1(int * const i_ref, const ti_indicator_info * const info, double *inputs[16], double *outputs[16], int input_size, const int step, ti_stream * const stream, int bar)\n{\n  int i = *i_ref;\n  double *ins[16] = {0};\n  double *outs[16] = {0};\n  for (i = 0; i < info->inputs; i += 1)\n  {\n    ins[i] = inputs[i] + bar;\n  }\n\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    int progress = ti_stream_get_progress(stream);\n    if (progress < 0)\n    {\n      progress = 0;\n    }\n    outs[i] = outputs[i] + progress;\n  }\n\n  int stride = step;\n  if ((stride + bar) >= input_size)\n  {\n    stride = input_size - bar;\n  }\n  const int ret = info->stream_run(stream, stride, (const double * const *) ins, outs);\n  do\n  {\n    ltests += 1;\n    if (!(ret == 0))\n    {\n      lfails += 1;\n      printf(\"%s:%d error \\n\", \"/home/enumclass/Documents/C2RustTranslation/bkp/tulipindicators/smoke.c\", 222);\n    }\n  }\n  while (0);\n  *i_ref = i;\n}\n\n",
            "calle": [
                "info->stream_run",
                "printf",
                "ti_stream_get_progress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "step",
                        "type": "const int",
                        "definition": [
                            "const int step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream * const",
                        "definition": [
                            "ti_stream * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bar",
                        "type": "int",
                        "definition": [
                            "int bar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ins",
                        "type": "double *[16]",
                        "definition": [
                            "double *ins[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress",
                        "type": "int",
                        "definition": [
                            "int progress = ti_stream_get_progress(stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride",
                        "type": "int",
                        "definition": [
                            "int stride = step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->stream_run(stream, stride, (const double * const *) ins, outs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltests",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "lfails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "generate_inputs",
            "header": "",
            "params": [],
            "definition": "void generate_inputs()\n{\n  double *open = in[0];\n  double *high = in[1];\n  double *low = in[2];\n  double *close = in[3];\n  double *volume = in[4];\n  open[0] = 100;\n  srand(22);\n  int i;\n  for (i = 0; i < 4000; i += 1)\n  {\n    helper_generate_inputs_1(&i, open, high, low, close, volume);\n  }\n\n  volume[0] = 0;\n}\n\n",
            "calle": [
                "helper_generate_inputs_1",
                "srand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "open",
                        "type": "double *",
                        "definition": [
                            "double *open = in[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "double *",
                        "definition": [
                            "double *high = in[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "double *",
                        "definition": [
                            "double *low = in[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "double *",
                        "definition": [
                            "double *close = in[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "double *",
                        "definition": [
                            "double *volume = in[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ti_setup",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "double **inputs"
            ],
            "definition": "void ti_setup(const ti_indicator_info *info, double **inputs)\n{\n  int j;\n  for (j = 0; j < info->inputs; j += 1)\n  {\n    if (strcmp(info->input_names[j], \"open\") == 0)\n    {\n      inputs[j] = in[0];\n    }\n    else\n      if (strcmp(info->input_names[j], \"high\") == 0)\n    {\n      inputs[j] = in[1];\n    }\n    else\n      if (strcmp(info->input_names[j], \"low\") == 0)\n    {\n      inputs[j] = in[2];\n    }\n    else\n      if (strcmp(info->input_names[j], \"close\") == 0)\n    {\n      inputs[j] = in[3];\n    }\n    else\n      if (strcmp(info->input_names[j], \"real\") == 0)\n    {\n      inputs[j] = in[3];\n    }\n    else\n      if (strcmp(info->input_names[j], \"volume\") == 0)\n    {\n      inputs[j] = in[4];\n    }\n    else\n    {\n      assert(0);\n    }\n    ;\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double **",
                        "definition": [
                            "double **inputs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "run_ti",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "double *options",
                "int goal"
            ],
            "definition": "int run_ti(const ti_indicator_info *info, double *options, int goal)\n{\n  static double *inputs[] = {0, 0, 0, 0, 0};\n  static double *outputs[] = {out[0], out[1], out[2], out[3], out[4]};\n  if (goal == 0)\n  {\n    ind_offset = info->start(options);\n    const int ret = info->indicator(4000, (const double * const *) inputs, options, outputs);\n    if (ret != 0)\n    {\n      printf(\"   *ERROR* (%d)\\n\", ret);\n      printf(\"options:\\n\");\n      int i;\n      for (i = 0; i < info->options; i += 1)\n      {\n        printf(\"%d = %f\\n\", i, options[i]);\n      }\n\n      return 1;\n    }\n  }\n  else\n    if (goal == 1)\n  {\n    ti_setup(info, inputs);\n  }\n  else\n    if (goal == 2)\n  {\n  }\n  else\n  {\n    assert(0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "info->indicator",
                "info->start",
                "printf",
                "ti_setup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goal",
                        "type": "int",
                        "definition": [
                            "int goal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *inputs[] = {0, 0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *outputs[] = {out[0], out[1], out[2], out[3], out[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator(4000, (const double * const *) inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ind_offset",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "run_ti_ref",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "double *options",
                "int goal"
            ],
            "definition": "int run_ti_ref(const ti_indicator_info *info, double *options, int goal)\n{\n  static double *inputs[] = {0, 0, 0, 0, 0};\n  static double *outputs[] = {outref[0], outref[1], outref[2], outref[3], outref[4]};\n  if (goal == 0)\n  {\n    ind_offset = info->start(options);\n    const int ret = info->indicator_ref(4000, (const double * const *) inputs, options, outputs);\n    if (ret != 0)\n    {\n      printf(\"   *ERROR* (%d)\\n\", ret);\n      printf(\"options:\\n\");\n      int i;\n      for (i = 0; i < info->options; i += 1)\n      {\n        printf(\"%d = %f\\n\", i, options[i]);\n      }\n\n      return 1;\n    }\n  }\n  else\n    if (goal == 1)\n  {\n    ti_setup(info, inputs);\n  }\n  else\n    if (goal == 2)\n  {\n  }\n  else\n  {\n    assert(0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "info->indicator_ref",
                "info->start",
                "printf",
                "ti_setup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goal",
                        "type": "int",
                        "definition": [
                            "int goal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *inputs[] = {0, 0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *outputs[] = {outref[0], outref[1], outref[2], outref[3], outref[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator_ref(4000, (const double * const *) inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outref",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ind_offset",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "run_ti_stream1",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "double *options",
                "int goal"
            ],
            "definition": "int run_ti_stream1(const ti_indicator_info *info, double *options, int goal)\n{\n  static double *inputs[] = {0, 0, 0, 0, 0};\n  static double *outputs[] = {outstream1[0], outstream1[1], outstream1[2], outstream1[3], outstream1[4]};\n  if (goal == 0)\n  {\n    helper_run_ti_stream1_1(info, options, inputs, outputs);\n  }\n  else\n    if (goal == 1)\n  {\n    ti_setup(info, inputs);\n  }\n  else\n    if (goal == 2)\n  {\n  }\n  else\n  {\n    assert(0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_run_ti_stream1_1",
                "ti_setup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goal",
                        "type": "int",
                        "definition": [
                            "int goal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *inputs[] = {0, 0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *outputs[] = {outstream1[0], outstream1[1], outstream1[2], outstream1[3], outstream1[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outstream1",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "run_ti_streamall",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "double *options",
                "int goal"
            ],
            "definition": "int run_ti_streamall(const ti_indicator_info *info, double *options, int goal)\n{\n  static double *inputs[] = {0, 0, 0, 0, 0};\n  static double *outputs[] = {outstreamall[0], outstreamall[1], outstreamall[2], outstreamall[3], outstreamall[4]};\n  if (goal == 0)\n  {\n    ind_offset = info->start(options);\n    ti_stream *stream;\n    const int sret = info->stream_new(options, &stream);\n    assert(stream);\n    assert(sret == 0);\n    const int ret = info->stream_run(stream, 4000, (const double * const *) inputs, outputs);\n    info->stream_free(stream);\n    if (ret != 0)\n    {\n      printf(\"   *ERROR* (%d)\\n\", ret);\n      printf(\"options:\\n\");\n      int i;\n      for (i = 0; i < info->options; i += 1)\n      {\n        printf(\"%d = %f\\n\", i, options[i]);\n      }\n\n      return 1;\n    }\n  }\n  else\n    if (goal == 1)\n  {\n    ti_setup(info, inputs);\n  }\n  else\n    if (goal == 2)\n  {\n  }\n  else\n  {\n    assert(0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "info->start",
                "info->stream_free",
                "info->stream_new",
                "info->stream_run",
                "printf",
                "ti_setup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goal",
                        "type": "int",
                        "definition": [
                            "int goal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *inputs[] = {0, 0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *outputs[] = {outstreamall[0], outstreamall[1], outstreamall[2], outstreamall[3], outstreamall[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sret",
                        "type": "const int",
                        "definition": [
                            "const int sret = info->stream_new(options, &stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->stream_run(stream, 4000, (const double * const *) inputs, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outstreamall",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ind_offset",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "simple_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void simple_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fast_slow_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void fast_slow_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period + 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "alma_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void alma_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 0.5;\n  options[2] = 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bbands_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void bbands_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 1.0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ce_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void ce_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copp_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void copp_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = 11;\n  options[1] = 14;\n  options[2] = period;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kc_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void kc_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 0.77;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kst_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void kst_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  for (int i = 0; i < 4; i += 1)\n  {\n    options[i + 4] = (options[i] = period + ((period / 4.) * i));\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "macd_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void macd_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period + 10;\n  options[2] = period + 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mama_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void mama_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  (void) period;\n  options[0] = 0.5;\n  options[1] = 0.05;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pfe_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void pfe_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 5;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "posc_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void posc_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ppo_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void ppo_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period + 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "psar_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void psar_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = 1 / period;\n  options[1] = options[0] * 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rmi_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void rmi_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rmta_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void rmta_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 1 - (2. / (period + 1));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rvi_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void rvi_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smi_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void smi_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 25;\n  options[2] = 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stoch_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void stoch_option_setter(double period, double *options, int ti)\n{\n  if (ti)\n  {\n    options[0] = period;\n    options[1] = 3;\n    options[2] = 4;\n  }\n  else\n  {\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stochrsi_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void stochrsi_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period;\n  options[2] = period;\n  options[3] = 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tsi_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void tsi_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ultosc_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void ultosc_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period * 2;\n  options[2] = period * 4;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "vidya_option_setter",
            "header": "",
            "params": [
                "double period",
                "double *options",
                "int ti"
            ],
            "definition": "void vidya_option_setter(double period, double *options, int ti)\n{\n  (void) ti;\n  options[0] = period;\n  options[1] = period + 10;\n  options[2] = .2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "period",
                        "type": "double",
                        "definition": [
                            "double period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double *",
                        "definition": [
                            "double *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti",
                        "type": "int",
                        "definition": [
                            "int ti"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stochrsi_output_adjust",
            "header": "",
            "params": [
                "double a"
            ],
            "definition": "double stochrsi_output_adjust(double a)\n{\n  return a * 0.01;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "double",
                        "definition": [
                            "double a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_outputs",
            "header": "",
            "params": [
                "const ti_indicator_info *info",
                "const char *what",
                "double compare[3][4000]"
            ],
            "definition": "void check_outputs(const ti_indicator_info *info, const char *what, double compare[3][4000])\n{\n  int remap[] = {0, 1, 2, 3, 4};\n  int nanok = 0;\n  if (strcmp(info->name, \"asin\") == 0)\n  {\n    nanok = 1;\n  }\n  if (strcmp(info->name, \"acos\") == 0)\n  {\n    nanok = 1;\n  }\n  int i;\n  int j;\n  for (j = 0; j < info->outputs; j += 1)\n  {\n    int end = 4000 - ind_offset;\n    if (remap[j] == (-1))\n    {\n      continue;\n    }\n    for (i = 0; i < end; i += 1)\n    {\n      double a = out[j][((4000 - 1) - i) - ind_offset];\n      double b = compare[j][((4000 - 1) - i) - ind_offset];\n      double diff = fabs(a - b);\n      if ((diff > 0.0001) || ((!nanok) && (diff != diff)))\n      {\n        fails += 1;\n        printf(\"Results disagree.\\n\");\n        printf(\"    series         (diff)   ti   %s\\n\", what);\n        printf(\"    series %d, %4d (%f) %.5f %.5f\\n\", j, i, diff, a, b);\n        break;\n      }\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "fabs",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "what",
                        "type": "const char *",
                        "definition": [
                            "const char *what"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compare",
                        "type": "double [3][4000]",
                        "definition": [
                            "double compare[3][4000]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "remap",
                        "type": "int []",
                        "definition": [
                            "int remap[] = {0, 1, 2, 3, 4}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nanok",
                        "type": "int",
                        "definition": [
                            "int nanok = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "int",
                        "definition": [
                            "int end = 4000 - ind_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "double",
                        "definition": [
                            "double a = out[j][((4000 - 1) - i) - ind_offset]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "double",
                        "definition": [
                            "double b = compare[j][((4000 - 1) - i) - ind_offset]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "double",
                        "definition": [
                            "double diff = fabs(a - b)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_offset",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "fails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bench_run",
            "header": "",
            "params": [
                "FILE *log",
                "const ti_indicator_info *info",
                "const void *run_info",
                "run_fun fun",
                "const char *name"
            ],
            "definition": "void bench_run(FILE *log, const ti_indicator_info *info, const void *run_info, run_fun fun, const char *name)\n{\n  double options[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n  void (*options_setter)(double period, double *options, int ti) = 0;\n  unsigned int options_setter_idx = 0;\n  if (strcmp(info->name, \"alma\") == 0)\n  {\n    options_setter_idx = alma_option_setter;\n  }\n  if (strcmp(info->name, \"adosc\") == 0)\n  {\n    options_setter_idx = fast_slow_option_setter;\n  }\n  if (strcmp(info->name, \"apo\") == 0)\n  {\n    options_setter_idx = ppo_option_setter;\n  }\n  if (strcmp(info->name, \"bbands\") == 0)\n  {\n    options_setter_idx = bbands_option_setter;\n  }\n  if (strcmp(info->name, \"copp\") == 0)\n  {\n    options_setter_idx = copp_option_setter;\n  }\n  if (strcmp(info->name, \"kc\") == 0)\n  {\n    options_setter_idx = kc_option_setter;\n  }\n  if (strcmp(info->name, \"kst\") == 0)\n  {\n    options_setter_idx = kst_option_setter;\n  }\n  if (strcmp(info->name, \"kvo\") == 0)\n  {\n    options_setter_idx = fast_slow_option_setter;\n  }\n  if (strcmp(info->name, \"macd\") == 0)\n  {\n    options_setter_idx = macd_option_setter;\n  }\n  if (strcmp(info->name, \"mama\") == 0)\n  {\n    options_setter_idx = mama_option_setter;\n  }\n  if (strcmp(info->name, \"pfe\") == 0)\n  {\n    options_setter_idx = pfe_option_setter;\n  }\n  if (strcmp(info->name, \"posc\") == 0)\n  {\n    options_setter_idx = posc_option_setter;\n  }\n  if (strcmp(info->name, \"ppo\") == 0)\n  {\n    options_setter_idx = ppo_option_setter;\n  }\n  if (strcmp(info->name, \"psar\") == 0)\n  {\n    options_setter_idx = psar_option_setter;\n  }\n  if (strcmp(info->name, \"rvi\") == 0)\n  {\n    options_setter_idx = rvi_option_setter;\n  }\n  if (strcmp(info->name, \"rmi\") == 0)\n  {\n    options_setter_idx = rmi_option_setter;\n  }\n  if (strcmp(info->name, \"rmta\") == 0)\n  {\n    options_setter_idx = rmta_option_setter;\n  }\n  if (strcmp(info->name, \"smi\") == 0)\n  {\n    options_setter_idx = smi_option_setter;\n  }\n  if (strcmp(info->name, \"stoch\") == 0)\n  {\n    options_setter_idx = stoch_option_setter;\n  }\n  if (strcmp(info->name, \"stochrsi\") == 0)\n  {\n    options_setter_idx = stochrsi_option_setter;\n  }\n  if (strcmp(info->name, \"ultosc\") == 0)\n  {\n    options_setter_idx = ultosc_option_setter;\n  }\n  if (strcmp(info->name, \"vidya\") == 0)\n  {\n    options_setter_idx = vidya_option_setter;\n  }\n  if (strcmp(info->name, \"vosc\") == 0)\n  {\n    options_setter_idx = fast_slow_option_setter;\n  }\n  int best_e = 1e9;\n  int best_p = -1e9;\n  int best;\n  for (best = 0; best < bestof; best += 1)\n  {\n    helper_bench_run_1(&best_e, &best_p, info, run_info, name, options, options_setter, options);\n  }\n\n  if (log)\n  {\n    fprintf(log, \",\\n    \\\"%s\\\" => array(\\\"elapsed\\\" => %d, \\\"performance\\\" => %d)\", name, best_e, best_p);\n  }\n}\n\n",
            "calle": [
                "alma_option_setter",
                "bbands_option_setter",
                "copp_option_setter",
                "fast_slow_option_setter",
                "fprintf",
                "helper_bench_run_1",
                "kc_option_setter",
                "kst_option_setter",
                "macd_option_setter",
                "mama_option_setter",
                "pfe_option_setter",
                "posc_option_setter",
                "ppo_option_setter",
                "psar_option_setter",
                "rmi_option_setter",
                "rmta_option_setter",
                "rvi_option_setter",
                "smi_option_setter",
                "stoch_option_setter",
                "stochrsi_option_setter",
                "strcmp",
                "ultosc_option_setter",
                "vidya_option_setter"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "log",
                        "type": "FILE *",
                        "definition": [
                            "FILE *log"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "run_info",
                        "type": "const void *",
                        "definition": [
                            "const void *run_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fun",
                        "type": "run_fun",
                        "definition": [
                            "run_fun fun"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double []",
                        "definition": [
                            "double options[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options_setter",
                        "type": "void (*)(double period, double *options, int ti)",
                        "definition": [
                            "void (*options_setter)(double period, double *options, int ti) = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options_setter_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int options_setter_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_e",
                        "type": "int",
                        "definition": [
                            "int best_e = 1e9"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p",
                        "type": "int",
                        "definition": [
                            "int best_p = -1e9"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "int",
                        "definition": [
                            "int best"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestof",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bench_indicator",
            "header": "",
            "params": [
                "FILE *log",
                "const ti_indicator_info *info"
            ],
            "definition": "void bench_indicator(FILE *log, const ti_indicator_info *info)\n{\n  {\n    int i;\n    for (i = 0; i < 3; i += 1)\n    {\n      memset(out[i], 0xF1, sizeof(out[i]));\n      memset(outref[i], 0xF2, sizeof(outref[i]));\n      memset(outstream1[i], 0xF3, sizeof(outstream1[i]));\n      memset(outstreamall[i], 0xF4, sizeof(outstreamall[i]));\n    }\n\n  }\n  if (info)\n  {\n    if (log)\n    {\n      fprintf(log, \",\\n  \\\"%s\\\" => array(\\n\", info->name);\n    }\n    if (log)\n    {\n      fprintf(log, \"    \\\"name\\\" => \\\"%s\\\"\", info->full_name);\n    }\n    bench_run(log, info, info, run_ti, \"ti\");\n  }\n  if (info && info->indicator_ref)\n  {\n    bench_run(log, info, info, run_ti_ref, \"ti_ref\");\n    check_outputs(info, \"ref\", outref);\n  }\n  if (info && info->stream_new)\n  {\n    bench_run(log, info, info, run_ti_stream1, \"ti_stream1\");\n    check_outputs(info, \"stream1\", outstream1);\n    bench_run(log, info, info, run_ti_streamall, \"ti_streamall\");\n    check_outputs(info, \"streamall\", outstreamall);\n  }\n  if (log)\n  {\n    fprintf(log, \"\\n  )\");\n  }\n  printf(\"\\n\");\n}\n\n",
            "calle": [
                "bench_run",
                "check_outputs",
                "fprintf",
                "memset",
                "printf",
                "run_ti",
                "run_ti_ref",
                "run_ti_stream1",
                "run_ti_streamall"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "log",
                        "type": "FILE *",
                        "definition": [
                            "FILE *log"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outref",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outstream1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outstreamall",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bench_run_candle",
            "header": "",
            "params": [
                "FILE *log",
                "const tc_candle_info *info"
            ],
            "definition": "void bench_run_candle(FILE *log, const tc_candle_info *info)\n{\n  const char *name = \"ti\";\n  tc_set pattern = info->pattern;\n  int best_e = 1e9;\n  int best_p = -1e9;\n  int best;\n  for (best = 0; best < bestof; best += 1)\n  {\n    helper_bench_run_candle_1(&best_e, &best_p, info, name, pattern);\n  }\n\n  if (log)\n  {\n    fprintf(log, \",\\n    \\\"%s\\\" => array(\\\"elapsed\\\" => %d, \\\"performance\\\" => %d)\", name, best_e, best_p);\n  }\n}\n\n",
            "calle": [
                "fprintf",
                "helper_bench_run_candle_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "log",
                        "type": "FILE *",
                        "definition": [
                            "FILE *log"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name = \"ti\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "pattern",
                        "type": "tc_set",
                        "definition": [
                            "tc_set pattern = info->pattern"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_e",
                        "type": "int",
                        "definition": [
                            "int best_e = 1e9"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p",
                        "type": "int",
                        "definition": [
                            "int best_p = -1e9"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "int",
                        "definition": [
                            "int best"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestof",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bench_candle",
            "header": "",
            "params": [
                "FILE *log",
                "const tc_candle_info *info"
            ],
            "definition": "void bench_candle(FILE *log, const tc_candle_info *info)\n{\n  outcnd = tc_result_new();\n  assert(outcnd);\n  if (info)\n  {\n    if (log)\n    {\n      fprintf(log, \",\\n  \\\"%s\\\" => array(\\n\", info->name);\n    }\n    if (log)\n    {\n      fprintf(log, \"    \\\"name\\\" => \\\"%s\\\"\", info->full_name);\n    }\n    bench_run_candle(log, info);\n    tc_result_free(outcnd);\n  }\n  if (log)\n  {\n    fprintf(log, \"\\n  )\");\n  }\n  printf(\"\\n\");\n}\n\n",
            "calle": [
                "assert",
                "bench_run_candle",
                "fprintf",
                "printf",
                "tc_result_free",
                "tc_result_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "log",
                        "type": "FILE *",
                        "definition": [
                            "FILE *log"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outcnd",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#benchmark",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  printf(\"Tulip Charts Indicator benchmark.\\n\");\n  printf(\"Using real size of: %d.\\n\\n\", sizeof(double));\n  generate_inputs();\n  const ti_indicator_info *ind_info = ti_indicators;\n  unsigned int ind_info_idx = 0;\n  const tc_candle_info *cnd_info = tc_candles;\n  unsigned int cnd_info_idx = 0;\n  const int candles_only = (argc > 1) && (!strcmp(argv[1], \"tc\"));\n  if (((argc > 1) && (!isdigit(argv[1][0]))) && (!candles_only))\n  {\n    if (argc > 2)\n    {\n      bestof = atoi(argv[2]);\n      if (!bestof)\n      {\n        bestof = 1;\n      }\n    }\n    ind_info_idx = ti_find_indicator(argv[1]);\n    if (ind_info)\n    {\n      bench_indicator(0, ind_info);\n    }\n    cnd_info_idx = tc_find_candle(argv[1]);\n    if (cnd_info)\n    {\n      bench_candle(0, cnd_info);\n    }\n  }\n  else\n  {\n    if ((argc > 1) && isdigit(argv[1][0]))\n    {\n      bestof = atoi(argv[1]);\n    }\n    FILE *log = fopen(\"docs/benchmark.php\", \"w\");\n    if (!log)\n    {\n      printf(\"Couldn't open results file for output. Make sure ./docs/ exists.\\n\");\n      exit(1);\n    }\n    fprintf(log, \"<?php\\n\");\n    fprintf(log, \"#GENERATED BY benchmark.c\\n\");\n    fprintf(log, \"#DO NOT MODIFY DIRECTLY\\n\");\n    fprintf(log, \"$benchmark = array(\\n\");\n    fprintf(log, \"  \\\"worksize\\\" => %d,\", (1 * ((150 - 4) + 1)) * 4000);\n    fprintf(log, \"  \\\"bestof\\\" => %d\", bestof);\n    if (!candles_only)\n    {\n      do\n      {\n        if (strcmp(ind_info->name, \"msw\") == 0)\n        {\n          continue;\n        }\n        bench_indicator(log, ind_info);\n      }\n      while ((++(&ind_info[ind_info_idx]))->name);\n    }\n    do\n    {\n      bench_candle(log, cnd_info);\n    }\n    while ((++(&cnd_info[cnd_info_idx]))->name);\n    const tc_candle_info cnd_all = {.name = \"all\", .full_name = \"All Candle Patterns\", .pattern = (1L << 26) - 1};\n    bench_candle(log, &cnd_all);\n    fprintf(log, \");\");\n    fclose(log);\n  }\n  if (!fails)\n  {\n    printf(\"All comparisons passed.\\n\");\n  }\n  else\n  {\n    printf(\"%d comparisons failed.\\n\", fails);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "atoi",
                "bench_candle",
                "bench_indicator",
                "exit",
                "fclose",
                "fopen",
                "fprintf",
                "generate_inputs",
                "isdigit",
                "printf",
                "strcmp",
                "tc_find_candle",
                "ti_find_indicator"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *ind_info = ti_indicators"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_info_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ind_info_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnd_info",
                        "type": "const tc_candle_info *",
                        "definition": [
                            "const tc_candle_info *cnd_info = tc_candles"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnd_info_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cnd_info_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "candles_only",
                        "type": "const int",
                        "definition": [
                            "const int candles_only = (argc > 1) && (!strcmp(argv[1], \"tc\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log",
                        "type": "FILE *",
                        "definition": [
                            "FILE *log = fopen(\"docs/benchmark.php\", \"w\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cnd_all",
                        "type": "const tc_candle_info",
                        "definition": [
                            "const tc_candle_info cnd_all = {.name = \"all\", .full_name = \"All Candle Patterns\", .pattern = (1L << 26) - 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ti_indicators",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tc_candles",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "bestof",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "fails",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_generate_inputs_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "double * const open",
                "double * const high",
                "double * const low",
                "double * const close",
                "double * const volume"
            ],
            "definition": "void helper_generate_inputs_1(int * const i_ref, double * const open, double * const high, double * const low, double * const close, double * const volume)\n{\n  int i = *i_ref;\n  const double diff1 = (((((double) rand()) / 32767) - .5) + .01) * 2.5;\n  const double diff2 = (((((double) rand()) / 32767) - .5) + .01) * 2.5;\n  const double diff3 = (((double) rand()) / 32767) * 0.5;\n  const double diff4 = (((double) rand()) / 32767) * 0.5;\n  const double vol = ((((double) rand()) / 32767) * 10000) + 500;\n  if (i)\n  {\n    open[i] = open[i - 1] + diff1;\n  }\n  close[i] = open[i] + diff2;\n  high[i] = (open[i] > close[i]) ? (open[i] + diff3) : (close[i] + diff3);\n  low[i] = (open[i] < close[i]) ? (open[i] - diff4) : (close[i] - diff4);\n  volume[i] = vol;\n  assert(open[i] <= high[i]);\n  assert(close[i] <= high[i]);\n  assert(open[i] >= low[i]);\n  assert(close[i] >= low[i]);\n  assert(high[i] >= low[i]);\n  assert(high[i] >= open[i]);\n  assert(high[i] >= close[i]);\n  assert(low[i] <= low[i]);\n  assert(low[i] <= open[i]);\n  assert(low[i] <= close[i]);\n  *i_ref = i;\n}\n\n",
            "calle": [
                "assert",
                "rand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "open",
                        "type": "double * const",
                        "definition": [
                            "double * const open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "double * const",
                        "definition": [
                            "double * const high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "double * const",
                        "definition": [
                            "double * const low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "close",
                        "type": "double * const",
                        "definition": [
                            "double * const close"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "double * const",
                        "definition": [
                            "double * const volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff1",
                        "type": "const double",
                        "definition": [
                            "const double diff1 = (((((double) rand()) / 32767) - .5) + .01) * 2.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff2",
                        "type": "const double",
                        "definition": [
                            "const double diff2 = (((((double) rand()) / 32767) - .5) + .01) * 2.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff3",
                        "type": "const double",
                        "definition": [
                            "const double diff3 = (((double) rand()) / 32767) * 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff4",
                        "type": "const double",
                        "definition": [
                            "const double diff4 = (((double) rand()) / 32767) * 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vol",
                        "type": "const double",
                        "definition": [
                            "const double vol = ((((double) rand()) / 32767) * 10000) + 500"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_run_ti_stream1_1",
            "header": "",
            "params": [
                "const ti_indicator_info * const info",
                "double * const options",
                "static double *inputs[]",
                "static double *outputs[]"
            ],
            "definition": "int helper_run_ti_stream1_1(const ti_indicator_info * const info, double * const options, static double *inputs[], static double *outputs[])\n{\n  ind_offset = info->start(options);\n  double *ins[5] = {0};\n  double *outs[5] = {0};\n  ti_stream *stream;\n  const int sret = info->stream_new(options, &stream);\n  assert(stream);\n  assert(sret == 0);\n  for (int i = 0; i < 4000; i += 1)\n  {\n    for (unsigned int j = 0; j < ((sizeof(inputs)) / (sizeof(double *))); j += 1)\n    {\n      ins[j] = inputs[j] + i;\n    }\n\n    int k = ti_stream_get_progress(stream);\n    if (k < 0)\n    {\n      k = 0;\n    }\n    for (unsigned int j = 0; j < ((sizeof(outputs)) / (sizeof(double *))); j += 1)\n    {\n      outs[j] = outstream1[j] + k;\n    }\n\n    const int ret = info->stream_run(stream, 1, (const double * const *) ins, outs);\n    if (ret != 0)\n    {\n      printf(\"   *ERROR* (%d)\\n\", ret);\n      printf(\"options:\\n\");\n      for (int j = 0; j < info->options; j += 1)\n      {\n        printf(\"%d = %f\\n\", j, options[j]);\n      }\n\n      return 1;\n    }\n  }\n\n  info->stream_free(stream);\n}\n\n",
            "calle": [
                "assert",
                "info->start",
                "info->stream_free",
                "info->stream_new",
                "info->stream_run",
                "printf",
                "ti_stream_get_progress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double * const",
                        "definition": [
                            "double * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *inputs[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[]",
                        "definition": [
                            "static double *outputs[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ins",
                        "type": "double *[5]",
                        "definition": [
                            "double *ins[5] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outs",
                        "type": "double *[5]",
                        "definition": [
                            "double *outs[5] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "ti_stream *",
                        "definition": [
                            "ti_stream *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sret",
                        "type": "const int",
                        "definition": [
                            "const int sret = info->stream_new(options, &stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "int j = 0",
                            "unsigned int j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = ti_stream_get_progress(stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->stream_run(stream, 1, (const double * const *) ins, outs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ind_offset",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outstream1",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_bench_run_1",
            "header": "",
            "params": [
                "int * const best_e_ref",
                "int * const best_p_ref",
                "const ti_indicator_info * const info",
                "const void * const run_info",
                "const char * const name",
                "double options[]",
                "void (* const options_setter)(double period, double *options, int ti)",
                "double * const options"
            ],
            "definition": "void helper_bench_run_1(int * const best_e_ref, int * const best_p_ref, const ti_indicator_info * const info, const void * const run_info, const char * const name, double options[], void (* const options_setter)(double period, double *options, int ti), double * const options)\n{\n  int best_e = *best_e_ref;\n  int best_p = *best_p_ref;\n  printf(\"Benchmark %25s-%-16s \", info->name, name);\n  int i;\n  int period;\n  int iterations = 0;\n  const clock_t start = clock();\n  fun(run_info, 0, 1);\n  for (i = 0; i < 1; i += 1)\n  {\n    for (period = 4; period <= 150; period += 1)\n    {\n      if (options_setter)\n      {\n        options_setter(period, options, info == run_info);\n      }\n      else\n        options[0] = period;\n      const int ret = fun(run_info, options, 0);\n      if (ret)\n      {\n        return;\n      }\n      iterations += 1;\n    }\n\n  }\n\n  fun(run_info, 0, 2);\n  const int elapsed = ((clock() - start) * 1000) / CLOCKS_PER_SEC;\n  const int performance = (elapsed == 0) ? (0) : (((iterations * 4000) / elapsed) / 1000);\n  if (elapsed)\n  {\n    printf(\"\\t%5dms\\t%5dmfps\\n\", elapsed, performance);\n  }\n  else\n    printf(\"\\n\");\n  best_e = (elapsed < best_e) ? (elapsed) : (best_e);\n  best_p = (performance > best_p) ? (performance) : (best_p);\n  *best_e_ref = best_e;\n  *best_p_ref = best_p;\n}\n\n",
            "calle": [
                "clock",
                "fun",
                "options_setter",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "best_e_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const best_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const best_p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info * const",
                        "definition": [
                            "const ti_indicator_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "run_info",
                        "type": "const void * const",
                        "definition": [
                            "const void * const run_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double []",
                        "definition": [
                            "double * const options",
                            "double options[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options_setter",
                        "type": "void (* const)(double period, double *options, int ti)",
                        "definition": [
                            "void (* const options_setter)(double period, double *options, int ti)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_e",
                        "type": "int",
                        "definition": [
                            "int best_e = *best_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p",
                        "type": "int",
                        "definition": [
                            "int best_p = *best_p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iterations",
                        "type": "int",
                        "definition": [
                            "int iterations = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const clock_t",
                        "definition": [
                            "const clock_t start = clock()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = fun(run_info, options, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elapsed",
                        "type": "const int",
                        "definition": [
                            "const int elapsed = ((clock() - start) * 1000) / CLOCKS_PER_SEC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "performance",
                        "type": "const int",
                        "definition": [
                            "const int performance = (elapsed == 0) ? (0) : (((iterations * 4000) / elapsed) / 1000)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_bench_run_candle_1",
            "header": "",
            "params": [
                "int * const best_e_ref",
                "int * const best_p_ref",
                "const tc_candle_info * const info",
                "const char * const name",
                "tc_set pattern"
            ],
            "definition": "void helper_bench_run_candle_1(int * const best_e_ref, int * const best_p_ref, const tc_candle_info * const info, const char * const name, tc_set pattern)\n{\n  int best_e = *best_e_ref;\n  int best_p = *best_p_ref;\n  printf(\"Benchmark %25s-%-16s \", info->name, name);\n  int i;\n  int period;\n  int iterations = 0;\n  const clock_t start = clock();\n  const double *inputs[4] = {in[0], in[1], in[2], in[3]};\n  tc_config config;\n  tc_config_set_to_default(&config);\n  for (i = 0; i < 1; i += 1)\n  {\n    for (period = 4; period <= 150; period += 1)\n    {\n      const int ret = tc_run(pattern, 4000, inputs, &config, outcnd);\n      if (ret)\n      {\n        return;\n      }\n      iterations += 1;\n    }\n\n  }\n\n  const int elapsed = ((clock() - start) * 1000) / CLOCKS_PER_SEC;\n  const int performance = (elapsed == 0) ? (0) : (((iterations * 4000) / elapsed) / 1000);\n  if (elapsed)\n  {\n    printf(\"\\t%5dms\\t%5dmfps\\n\", elapsed, performance);\n  }\n  else\n    printf(\"\\n\");\n  best_e = (elapsed < best_e) ? (elapsed) : (best_e);\n  best_p = (performance > best_p) ? (performance) : (best_p);\n  *best_e_ref = best_e;\n  *best_p_ref = best_p;\n}\n\n",
            "calle": [
                "clock",
                "printf",
                "tc_config_set_to_default",
                "tc_run"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "best_e_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const best_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const best_p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const tc_candle_info * const",
                        "definition": [
                            "const tc_candle_info * const info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pattern",
                        "type": "tc_set",
                        "definition": [
                            "tc_set pattern"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_e",
                        "type": "int",
                        "definition": [
                            "int best_e = *best_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_p",
                        "type": "int",
                        "definition": [
                            "int best_p = *best_p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "int",
                        "definition": [
                            "int period"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iterations",
                        "type": "int",
                        "definition": [
                            "int iterations = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const clock_t",
                        "definition": [
                            "const clock_t start = clock()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "const double *[4]",
                        "definition": [
                            "const double *inputs[4] = {in[0], in[1], in[2], in[3]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "config",
                        "type": "tc_config",
                        "definition": [
                            "tc_config config"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = tc_run(pattern, 4000, inputs, &config, outcnd)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elapsed",
                        "type": "const int",
                        "definition": [
                            "const int elapsed = ((clock() - start) * 1000) / CLOCKS_PER_SEC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "performance",
                        "type": "const int",
                        "definition": [
                            "const int performance = (elapsed == 0) ? (0) : (((iterations * 4000) / elapsed) / 1000)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "outcnd",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "run",
            "header": "",
            "params": [
                "const char *name",
                "const char *in",
                "const char *out"
            ],
            "definition": "void run(const char *name, const char *in, const char *out)\n{\n  const ti_indicator_info *info = ti_find_indicator(name);\n  if (!info)\n  {\n    fprintf(stderr, \"(ERROR) Couldn't find indicator %s\\n\", name);\n    return;\n  }\n  FILE *fin = fopen(in, \"r\");\n  if (!fin)\n  {\n    fprintf(stderr, \"(ERROR) Couldn't open %s for input.\\n\", in);\n    return;\n  }\n  char *line = next_line(fin);\n  double options[16];\n  double *o = options;\n  unsigned int o_idx = 0;\n  const char *s = strtok(line, \" \\n\\r\");\n  unsigned int s_idx = 0;\n  if (s)\n  {\n    do\n    {\n      o[o_idx] = atof(s);\n      o_idx += 1;\n    }\n    while (s_idx = strtok(0, \" \\n\\r\"));\n  }\n  if (((int) ((&o[o_idx]) - options)) != info->options)\n  {\n    fprintf(stderr, \"(ERROR) Invalid number of options for %s. Expected %d, got %d\\n\", name, info->options, (int) ((&o[o_idx]) - options));\n    return;\n  }\n  int i;\n  double *inputs[16] = {0};\n  double *outputs[16] = {0};\n  int input_size = 0;\n  for (i = 0; i < info->inputs; i += 1)\n  {\n    inputs[i] = malloc((sizeof(double)) * 8192);\n    input_size = get_array(fin, inputs[i]);\n  }\n\n  fclose(fin);\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    outputs[i] = malloc((sizeof(double)) * 8192);\n  }\n\n  {\n    const int ret = info->indicator(input_size, (const double * const *) inputs, options, outputs);\n    if (ret != 0)\n    {\n      fprintf(stderr, \"(ERROR) Return value for %s of %d.\\n\", name, ret);\n      return;\n    }\n  }\n  FILE *fout = fopen(out, \"w\");\n  if (!fout)\n  {\n    fprintf(stderr, \"(ERROR) Couldn't open %s for output.\\n\", out);\n    return;\n  }\n  const int out_size = input_size - info->start(options);\n  for (i = 0; i < info->outputs; i += 1)\n  {\n    fprintf(fout, \"{\");\n    for (int j = 0; j < out_size; j += 1)\n    {\n      fprintf(fout, \"%f%s\", outputs[i][j], (j == (out_size - 1)) ? (\"\") : (\",\"));\n    }\n\n    fprintf(fout, \"}\\n\");\n  }\n\n  fclose(fout);\n  for (i = 0; i < info->inputs; i += 1)\n    free(inputs[i]);\n\n  for (i = 0; i < info->outputs; i += 1)\n    free(outputs[i]);\n\n}\n\n",
            "calle": [
                "atof",
                "fclose",
                "fopen",
                "fprintf",
                "free",
                "get_array",
                "info->indicator",
                "info->start",
                "malloc",
                "next_line",
                "strtok",
                "ti_find_indicator"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const char *",
                        "definition": [
                            "const char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "const char *",
                        "definition": [
                            "const char *out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info",
                        "type": "const ti_indicator_info *",
                        "definition": [
                            "const ti_indicator_info *info = ti_find_indicator(name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fin",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fin = fopen(in, \"r\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char *",
                        "definition": [
                            "char *line = next_line(fin)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "double [16]",
                        "definition": [
                            "double options[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "double *",
                        "definition": [
                            "double *o = options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int o_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s = strtok(line, \" \\n\\r\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *inputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outputs",
                        "type": "double *[16]",
                        "definition": [
                            "double *outputs[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "int",
                        "definition": [
                            "int input_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "const int",
                        "definition": [
                            "const int ret = info->indicator(input_size, (const double * const *) inputs, options, outputs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fout",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fout = fopen(out, \"w\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_size",
                        "type": "const int",
                        "definition": [
                            "const int out_size = input_size - info->start(options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#cli",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  if (argc < 4)\n  {\n    printf(\"Usage: cli indicator_name infile outfile\\n\");\n  }\n  const char *name = argv[1];\n  const char *in = argv[2];\n  const char *out = argv[3];\n  run(name, in, out);\n  return 0;\n}\n\n",
            "calle": [
                "printf",
                "run"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name = argv[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const char *",
                        "definition": [
                            "const char *in = argv[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "const char *",
                        "definition": [
                            "const char *out = argv[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef double TC_REAL",
        "typedef uint64_t tc_set"
    ]
}