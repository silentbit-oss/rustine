use translate_without_break_down::*;
use std::env;
use std::fs::File;
use std::io::Result as IoResult;
use std::io::Write;
use std::path::Path;
use std::sync::atomic::Ordering;
use lazy_static::lazy_static;

pub fn main() -> IoResult<()> {
    println!("Tulip Charts Indicator benchmark.");
    println!("Using real size of: {}.\n", std::mem::size_of::<f64>());
    
    generate_inputs();
    
    let args: Vec<String> = std::env::args().collect();
    let argc = args.len();
    let candles_only = (argc > 1) && (args[1] == "tc");
    
    if ((argc > 1) && (!args[1].chars().next().unwrap().is_ascii_digit())) && (!candles_only) {
        if argc > 2 {
            let bestof_val = args[2].parse().unwrap_or(1);
            BESTOF.store(bestof_val, Ordering::Relaxed);
        }
        
        let ind_info = ti_find_indicator(Some(&args[1]));
        if let Some(info) = ind_info {
            bench_indicator(None, Some(&info));
        }
        
        let cnd_info = tc_find_candle(Some(&args[1]));
        if let Some(info) = cnd_info {
            bench_candle(None, Some(&info));
        }
    } else {
        if (argc > 1) && args[1].chars().next().unwrap().is_ascii_digit() {
            let bestof_val = args[1].parse().unwrap_or(1);
            BESTOF.store(bestof_val, Ordering::Relaxed);
        }
        
        let mut log = match File::create("docs/benchmark.php") {
            Ok(file) => file,
            Err(_) => {
                println!("Couldn't open results file for output. Make sure ./docs/ exists.");
                std::process::exit(1);
            }
        };
        
        writeln!(log, "<?php")?;
        writeln!(log, "#GENERATED BY benchmark.rs")?;
        writeln!(log, "#DO NOT MODIFY DIRECTLY")?;
        writeln!(log, "$benchmark = array(")?;
        writeln!(log, "  \"worksize\" => {},", (1 * ((150 - 4) + 1)) * 4000)?;
        writeln!(log, "  \"bestof\" => {}", BESTOF.load(Ordering::Relaxed))?;
        
        if !candles_only {
            let indicators = TI_INDICATORS.lock().unwrap();
            for ind_info in indicators.iter() {
                if let Some(name) = &ind_info.name {
                    if name == "msw" {
                        continue;
                    }
                    bench_indicator(Some(&mut log), Some(ind_info));
                }
            }
        }
        
        let candles = TC_CANDLES.lock().unwrap();
        for cnd_info in candles.iter() {
            bench_candle(Some(&mut log), Some(cnd_info));
        }
        
        let cnd_all = TcCandleInfo {
            name: Some("all".to_string()),
            full_name: Some("All Candle Patterns".to_string()),
            pattern: (1 << 26) - 1,
            candle: |_, _, _, _| 0,
        };
        bench_candle(Some(&mut log), Some(&cnd_all));
        
        writeln!(log, ");")?;
    }
    
    let fails = FAILS.load(Ordering::Relaxed);
    if fails == 0 {
        println!("All comparisons passed.");
    } else {
        println!("{} comparisons failed.", fails);
    }
    
    Ok(())
}
