use ::libc;
extern "C" {
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn ti_abs_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_abs(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_acos_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_acos(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ad_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ad(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_add_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_add(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_adosc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_adosc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_adx_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_adx(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_adxr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_adxr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ao_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ao(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_apo_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_apo(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_aroon_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_aroon(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_aroonosc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_aroonosc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_asin_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_asin(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_atan_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_atan(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_atr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_atr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_atr_ref(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_atr_stream_new(
        options: *const libc::c_double,
        stream: *mut *mut ti_stream,
    ) -> libc::c_int;
    fn ti_atr_stream_run(
        stream: *mut ti_stream,
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_atr_stream_free(stream: *mut ti_stream);
    fn ti_avgprice_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_avgprice(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_bbands_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_bbands(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_bop_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_bop(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_cci_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_cci(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ceil_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ceil(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_cmo_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_cmo(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_cos_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_cos(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_cosh_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_cosh(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_crossany_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_crossany(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_crossover_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_crossover(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_cvi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_cvi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_decay_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_decay(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_dema_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_dema(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_di_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_di(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_div_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_div(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_dm_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_dm(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_dpo_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_dpo(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_dx_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_dx(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_edecay_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_edecay(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ema_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ema(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_emv_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_emv(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_exp_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_exp(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_fisher_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_fisher(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_floor_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_floor(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_fosc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_fosc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_hma_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_hma(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_kama_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_kama(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_kvo_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_kvo(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_lag_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_lag(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_linreg_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_linreg(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_linregintercept_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_linregintercept(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_linregslope_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_linregslope(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ln_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ln(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_log10_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_log10(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_macd_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_macd(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_marketfi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_marketfi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_mass_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_mass(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_max_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_max(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_max_ref(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_md_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_md(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_medprice_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_medprice(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_mfi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_mfi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_min_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_min(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_min_ref(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_mom_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_mom(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_msw_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_msw(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_mul_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_mul(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_natr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_natr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_nvi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_nvi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_obv_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_obv(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ppo_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ppo(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_psar_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_psar(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_pvi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_pvi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_qstick_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_qstick(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_roc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_roc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_rocr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_rocr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_round_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_round(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_rsi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_rsi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sin_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sin(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sinh_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sinh(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sma_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sma(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sma_stream_new(
        options: *const libc::c_double,
        stream: *mut *mut ti_stream,
    ) -> libc::c_int;
    fn ti_sma_stream_run(
        stream: *mut ti_stream,
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sma_stream_free(stream: *mut ti_stream);
    fn ti_sqrt_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sqrt(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_stddev_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_stddev(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_stderr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_stderr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_stoch_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_stoch(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_stochrsi_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_stochrsi(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sub_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sub(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_sum_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_sum(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_tan_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_tan(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_tanh_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_tanh(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_tema_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_tema(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_todeg_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_todeg(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_torad_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_torad(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_tr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_tr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_trima_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_trima(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_trix_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_trix(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_trunc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_trunc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_tsf_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_tsf(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_typprice_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_typprice(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_ultosc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_ultosc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_var_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_var(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_vhf_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_vhf(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_vidya_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_vidya(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_volatility_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_volatility(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_vosc_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_vosc(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_vwma_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_vwma(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_wad_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_wad(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_wcprice_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_wcprice(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_wilders_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_wilders(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_willr_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_willr(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_wma_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_wma(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
    fn ti_zlema_start(options: *const libc::c_double) -> libc::c_int;
    fn ti_zlema(
        size: libc::c_int,
        inputs: *const *const libc::c_double,
        options: *const libc::c_double,
        outputs: *const *mut libc::c_double,
    ) -> libc::c_int;
}
pub type ti_indicator_start_function = Option::<
    unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
>;
pub type ti_indicator_function = Option::<
    unsafe extern "C" fn(
        libc::c_int,
        *const *const libc::c_double,
        *const libc::c_double,
        *const *mut libc::c_double,
    ) -> libc::c_int,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ti_stream {
    pub index: libc::c_int,
    pub progress: libc::c_int,
}
pub type ti_indicator_stream_new = Option::<
    unsafe extern "C" fn(*const libc::c_double, *mut *mut ti_stream) -> libc::c_int,
>;
pub type ti_indicator_stream_run = Option::<
    unsafe extern "C" fn(
        *mut ti_stream,
        libc::c_int,
        *const *const libc::c_double,
        *const *mut libc::c_double,
    ) -> libc::c_int,
>;
pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ti_indicator_info {
    pub name: *const libc::c_char,
    pub full_name: *const libc::c_char,
    pub start: ti_indicator_start_function,
    pub indicator: ti_indicator_function,
    pub indicator_ref: ti_indicator_function,
    pub type_0: libc::c_int,
    pub inputs: libc::c_int,
    pub options: libc::c_int,
    pub outputs: libc::c_int,
    pub input_names: [*const libc::c_char; 16],
    pub option_names: [*const libc::c_char; 16],
    pub output_names: [*const libc::c_char; 16],
    pub stream_new: ti_indicator_stream_new,
    pub stream_run: ti_indicator_stream_run,
    pub stream_free: ti_indicator_stream_free,
}
#[no_mangle]
pub unsafe extern "C" fn ti_version() -> *const libc::c_char {
    return b"0.9.2\0" as *const u8 as *const libc::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn ti_build() -> libc::c_long {
    return 1746800254 as libc::c_int as libc::c_long;
}
#[no_mangle]
pub unsafe extern "C" fn ti_indicator_count() -> libc::c_int {
    return 104 as libc::c_int;
}
#[no_mangle]
pub static mut ti_indicators: [ti_indicator_info; 105] = unsafe {
    [
        {
            let mut init = ti_indicator_info {
                name: b"abs\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Absolute Value\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_abs_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_abs
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"abs\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"acos\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Arccosine\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_acos_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_acos
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"acos\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ad\0" as *const u8 as *const libc::c_char,
                full_name: b"Accumulation/Distribution Line\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_ad_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ad
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ad\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"add\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Addition\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_add_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_add
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"add\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"adosc\0" as *const u8 as *const libc::c_char,
                full_name: b"Accumulation/Distribution Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_adosc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_adosc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"adosc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"adx\0" as *const u8 as *const libc::c_char,
                full_name: b"Average Directional Movement Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_adx_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_adx
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"adx\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"adxr\0" as *const u8 as *const libc::c_char,
                full_name: b"Average Directional Movement Rating\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_adxr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_adxr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"adxr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ao\0" as *const u8 as *const libc::c_char,
                full_name: b"Awesome Oscillator\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_ao_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ao
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ao\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"apo\0" as *const u8 as *const libc::c_char,
                full_name: b"Absolute Price Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_apo_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_apo
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"apo\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"aroon\0" as *const u8 as *const libc::c_char,
                full_name: b"Aroon\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_aroon_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_aroon
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"aroon_down\0" as *const u8 as *const libc::c_char,
                    b"aroon_up\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"aroonosc\0" as *const u8 as *const libc::c_char,
                full_name: b"Aroon Oscillator\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_aroonosc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_aroonosc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"aroonosc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"asin\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Arcsine\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_asin_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_asin
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"asin\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"atan\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Arctangent\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_atan_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_atan
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"atan\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"atr\0" as *const u8 as *const libc::c_char,
                full_name: b"Average True Range\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_atr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_atr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: Some(
                    ti_atr_ref
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"atr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: Some(
                    ti_atr_stream_new
                        as unsafe extern "C" fn(
                            *const libc::c_double,
                            *mut *mut ti_stream,
                        ) -> libc::c_int,
                ),
                stream_run: Some(
                    ti_atr_stream_run
                        as unsafe extern "C" fn(
                            *mut ti_stream,
                            libc::c_int,
                            *const *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                stream_free: Some(
                    ti_atr_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
                ),
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"avgprice\0" as *const u8 as *const libc::c_char,
                full_name: b"Average Price\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_avgprice_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_avgprice
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"open\0" as *const u8 as *const libc::c_char,
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"avgprice\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"bbands\0" as *const u8 as *const libc::c_char,
                full_name: b"Bollinger Bands\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_bbands_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_bbands
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 3 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    b"stddev\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"bbands_lower\0" as *const u8 as *const libc::c_char,
                    b"bbands_middle\0" as *const u8 as *const libc::c_char,
                    b"bbands_upper\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"bop\0" as *const u8 as *const libc::c_char,
                full_name: b"Balance of Power\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_bop_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_bop
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"open\0" as *const u8 as *const libc::c_char,
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"bop\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"cci\0" as *const u8 as *const libc::c_char,
                full_name: b"Commodity Channel Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_cci_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_cci
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"cci\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ceil\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Ceiling\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_ceil_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ceil
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ceil\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"cmo\0" as *const u8 as *const libc::c_char,
                full_name: b"Chande Momentum Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_cmo_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_cmo
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"cmo\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"cos\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Cosine\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_cos_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_cos
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"cos\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"cosh\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Hyperbolic Cosine\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_cosh_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_cosh
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"cosh\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"crossany\0" as *const u8 as *const libc::c_char,
                full_name: b"Crossany\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_crossany_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_crossany
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"crossany\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"crossover\0" as *const u8 as *const libc::c_char,
                full_name: b"Crossover\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_crossover_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_crossover
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"crossover\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"cvi\0" as *const u8 as *const libc::c_char,
                full_name: b"Chaikins Volatility\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_cvi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_cvi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"cvi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"decay\0" as *const u8 as *const libc::c_char,
                full_name: b"Linear Decay\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_decay_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_decay
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"decay\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"dema\0" as *const u8 as *const libc::c_char,
                full_name: b"Double Exponential Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_dema_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_dema
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"dema\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"di\0" as *const u8 as *const libc::c_char,
                full_name: b"Directional Indicator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_di_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_di
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"plus_di\0" as *const u8 as *const libc::c_char,
                    b"minus_di\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"div\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Division\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_div_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_div
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"div\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"dm\0" as *const u8 as *const libc::c_char,
                full_name: b"Directional Movement\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_dm_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_dm
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"plus_dm\0" as *const u8 as *const libc::c_char,
                    b"minus_dm\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"dpo\0" as *const u8 as *const libc::c_char,
                full_name: b"Detrended Price Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_dpo_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_dpo
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"dpo\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"dx\0" as *const u8 as *const libc::c_char,
                full_name: b"Directional Movement Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_dx_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_dx
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"dx\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"edecay\0" as *const u8 as *const libc::c_char,
                full_name: b"Exponential Decay\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_edecay_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_edecay
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"edecay\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ema\0" as *const u8 as *const libc::c_char,
                full_name: b"Exponential Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_ema_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ema
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ema\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"emv\0" as *const u8 as *const libc::c_char,
                full_name: b"Ease of Movement\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_emv_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_emv
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"emv\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"exp\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Exponential\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_exp_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_exp
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"exp\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"fisher\0" as *const u8 as *const libc::c_char,
                full_name: b"Fisher Transform\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_fisher_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_fisher
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"fisher\0" as *const u8 as *const libc::c_char,
                    b"fisher_signal\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"floor\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Floor\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_floor_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_floor
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"floor\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"fosc\0" as *const u8 as *const libc::c_char,
                full_name: b"Forecast Oscillator\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_fosc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_fosc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"fosc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"hma\0" as *const u8 as *const libc::c_char,
                full_name: b"Hull Moving Average\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_hma_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_hma
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"hma\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"kama\0" as *const u8 as *const libc::c_char,
                full_name: b"Kaufman Adaptive Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_kama_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_kama
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"kama\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"kvo\0" as *const u8 as *const libc::c_char,
                full_name: b"Klinger Volume Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_kvo_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_kvo
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"kvo\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"lag\0" as *const u8 as *const libc::c_char,
                full_name: b"Lag\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_lag_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_lag
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"lag\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"linreg\0" as *const u8 as *const libc::c_char,
                full_name: b"Linear Regression\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_linreg_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_linreg
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"linreg\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"linregintercept\0" as *const u8 as *const libc::c_char,
                full_name: b"Linear Regression Intercept\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_linregintercept_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_linregintercept
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"linregintercept\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"linregslope\0" as *const u8 as *const libc::c_char,
                full_name: b"Linear Regression Slope\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_linregslope_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_linregslope
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"linregslope\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ln\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Natural Log\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_ln_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ln
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ln\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"log10\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Base-10 Log\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_log10_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_log10
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"log10\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"macd\0" as *const u8 as *const libc::c_char,
                full_name: b"Moving Average Convergence/Divergence\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_macd_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_macd
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 3 as libc::c_int,
                outputs: 3 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    b"signal_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"macd\0" as *const u8 as *const libc::c_char,
                    b"macd_signal\0" as *const u8 as *const libc::c_char,
                    b"macd_histogram\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"marketfi\0" as *const u8 as *const libc::c_char,
                full_name: b"Market Facilitation Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_marketfi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_marketfi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"marketfi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"mass\0" as *const u8 as *const libc::c_char,
                full_name: b"Mass Index\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_mass_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_mass
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"mass\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"max\0" as *const u8 as *const libc::c_char,
                full_name: b"Maximum In Period\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_max_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_max
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: Some(
                    ti_max_ref
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"max\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"md\0" as *const u8 as *const libc::c_char,
                full_name: b"Mean Deviation Over Period\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_md_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_md
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"md\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"medprice\0" as *const u8 as *const libc::c_char,
                full_name: b"Median Price\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_medprice_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_medprice
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"medprice\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"mfi\0" as *const u8 as *const libc::c_char,
                full_name: b"Money Flow Index\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_mfi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_mfi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 4 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"mfi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"min\0" as *const u8 as *const libc::c_char,
                full_name: b"Minimum In Period\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_min_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_min
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: Some(
                    ti_min_ref
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"min\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"mom\0" as *const u8 as *const libc::c_char,
                full_name: b"Momentum\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_mom_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_mom
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"mom\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"msw\0" as *const u8 as *const libc::c_char,
                full_name: b"Mesa Sine Wave\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_msw_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_msw
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"msw_sine\0" as *const u8 as *const libc::c_char,
                    b"msw_lead\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"mul\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Multiplication\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_mul_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_mul
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"mul\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"natr\0" as *const u8 as *const libc::c_char,
                full_name: b"Normalized Average True Range\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_natr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_natr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"natr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"nvi\0" as *const u8 as *const libc::c_char,
                full_name: b"Negative Volume Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_nvi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_nvi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"nvi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"obv\0" as *const u8 as *const libc::c_char,
                full_name: b"On Balance Volume\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_obv_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_obv
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"obv\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ppo\0" as *const u8 as *const libc::c_char,
                full_name: b"Percentage Price Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_ppo_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ppo
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ppo\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"psar\0" as *const u8 as *const libc::c_char,
                full_name: b"Parabolic SAR\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_psar_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_psar
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"acceleration_factor_step\0" as *const u8 as *const libc::c_char,
                    b"acceleration_factor_maximum\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"psar\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"pvi\0" as *const u8 as *const libc::c_char,
                full_name: b"Positive Volume Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_pvi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_pvi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"pvi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"qstick\0" as *const u8 as *const libc::c_char,
                full_name: b"Qstick\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_qstick_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_qstick
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"open\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"qstick\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"roc\0" as *const u8 as *const libc::c_char,
                full_name: b"Rate of Change\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_roc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_roc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"roc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"rocr\0" as *const u8 as *const libc::c_char,
                full_name: b"Rate of Change Ratio\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_rocr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_rocr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"rocr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"round\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Round\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_round_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_round
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"round\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"rsi\0" as *const u8 as *const libc::c_char,
                full_name: b"Relative Strength Index\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_rsi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_rsi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"rsi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sin\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Sine\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_sin_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sin
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sin\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sinh\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Hyperbolic Sine\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_sinh_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sinh
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sinh\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sma\0" as *const u8 as *const libc::c_char,
                full_name: b"Simple Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_sma_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sma
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sma\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: Some(
                    ti_sma_stream_new
                        as unsafe extern "C" fn(
                            *const libc::c_double,
                            *mut *mut ti_stream,
                        ) -> libc::c_int,
                ),
                stream_run: Some(
                    ti_sma_stream_run
                        as unsafe extern "C" fn(
                            *mut ti_stream,
                            libc::c_int,
                            *const *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                stream_free: Some(
                    ti_sma_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
                ),
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sqrt\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Square Root\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_sqrt_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sqrt
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sqrt\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"stddev\0" as *const u8 as *const libc::c_char,
                full_name: b"Standard Deviation Over Period\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_stddev_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_stddev
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"stddev\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"stderr\0" as *const u8 as *const libc::c_char,
                full_name: b"Standard Error Over Period\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_stderr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_stderr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"stderr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"stoch\0" as *const u8 as *const libc::c_char,
                full_name: b"Stochastic Oscillator\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_stoch_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_stoch
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 3 as libc::c_int,
                outputs: 2 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"k_period\0" as *const u8 as *const libc::c_char,
                    b"k_slowing_period\0" as *const u8 as *const libc::c_char,
                    b"d_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"stoch_k\0" as *const u8 as *const libc::c_char,
                    b"stoch_d\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"stochrsi\0" as *const u8 as *const libc::c_char,
                full_name: b"Stochastic RSI\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_stochrsi_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_stochrsi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"stochrsi\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sub\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Subtraction\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_sub_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sub
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sub\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"sum\0" as *const u8 as *const libc::c_char,
                full_name: b"Sum Over Period\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_sum_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_sum
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"sum\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"tan\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Tangent\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_tan_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_tan
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"tan\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"tanh\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Hyperbolic Tangent\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_tanh_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_tanh
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"tanh\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"tema\0" as *const u8 as *const libc::c_char,
                full_name: b"Triple Exponential Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_tema_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_tema
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"tema\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"todeg\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Degree Conversion\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_todeg_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_todeg
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"degrees\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"torad\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Radian Conversion\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_torad_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_torad
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"radians\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"tr\0" as *const u8 as *const libc::c_char,
                full_name: b"True Range\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_tr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_tr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"tr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"trima\0" as *const u8 as *const libc::c_char,
                full_name: b"Triangular Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_trima_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_trima
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"trima\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"trix\0" as *const u8 as *const libc::c_char,
                full_name: b"Trix\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_trix_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_trix
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"trix\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"trunc\0" as *const u8 as *const libc::c_char,
                full_name: b"Vector Truncate\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_trunc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_trunc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 4 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"trunc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"tsf\0" as *const u8 as *const libc::c_char,
                full_name: b"Time Series Forecast\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_tsf_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_tsf
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"tsf\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"typprice\0" as *const u8 as *const libc::c_char,
                full_name: b"Typical Price\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_typprice_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_typprice
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"typprice\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"ultosc\0" as *const u8 as *const libc::c_char,
                full_name: b"Ultimate Oscillator\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_ultosc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_ultosc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 3 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"medium_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"ultosc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"var\0" as *const u8 as *const libc::c_char,
                full_name: b"Variance Over Period\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_var_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_var
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 3 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"var\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"vhf\0" as *const u8 as *const libc::c_char,
                full_name: b"Vertical Horizontal Filter\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_vhf_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_vhf
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"vhf\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"vidya\0" as *const u8 as *const libc::c_char,
                full_name: b"Variable Index Dynamic Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_vidya_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_vidya
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 3 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    b"alpha\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"vidya\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"volatility\0" as *const u8 as *const libc::c_char,
                full_name: b"Annualized Historical Volatility\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_volatility_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_volatility
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"volatility\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"vosc\0" as *const u8 as *const libc::c_char,
                full_name: b"Volume Oscillator\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_vosc_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_vosc
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 2 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"short_period\0" as *const u8 as *const libc::c_char,
                    b"long_period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"vosc\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"vwma\0" as *const u8 as *const libc::c_char,
                full_name: b"Volume Weighted Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_vwma_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_vwma
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 2 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"close\0" as *const u8 as *const libc::c_char,
                    b"volume\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"vwma\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"wad\0" as *const u8 as *const libc::c_char,
                full_name: b"Williams Accumulation/Distribution\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_wad_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_wad
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"wad\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"wcprice\0" as *const u8 as *const libc::c_char,
                full_name: b"Weighted Close Price\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_wcprice_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_wcprice
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"wcprice\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"wilders\0" as *const u8 as *const libc::c_char,
                full_name: b"Wilders Smoothing\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_wilders_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_wilders
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"wilders\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"willr\0" as *const u8 as *const libc::c_char,
                full_name: b"Williams %R\0" as *const u8 as *const libc::c_char,
                start: Some(
                    ti_willr_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_willr
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 2 as libc::c_int,
                inputs: 3 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"high\0" as *const u8 as *const libc::c_char,
                    b"low\0" as *const u8 as *const libc::c_char,
                    b"close\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"willr\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"wma\0" as *const u8 as *const libc::c_char,
                full_name: b"Weighted Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_wma_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_wma
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"wma\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: b"zlema\0" as *const u8 as *const libc::c_char,
                full_name: b"Zero-Lag Exponential Moving Average\0" as *const u8
                    as *const libc::c_char,
                start: Some(
                    ti_zlema_start
                        as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
                ),
                indicator: Some(
                    ti_zlema
                        as unsafe extern "C" fn(
                            libc::c_int,
                            *const *const libc::c_double,
                            *const libc::c_double,
                            *const *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                indicator_ref: None,
                type_0: 1 as libc::c_int,
                inputs: 1 as libc::c_int,
                options: 1 as libc::c_int,
                outputs: 1 as libc::c_int,
                input_names: [
                    b"real\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    b"period\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    b"zlema\0" as *const u8 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
        {
            let mut init = ti_indicator_info {
                name: 0 as *const libc::c_char,
                full_name: 0 as *const libc::c_char,
                start: None,
                indicator: None,
                indicator_ref: None,
                type_0: 0 as libc::c_int,
                inputs: 0 as libc::c_int,
                options: 0 as libc::c_int,
                outputs: 0 as libc::c_int,
                input_names: [
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                option_names: [
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                output_names: [
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                    0 as *const libc::c_char,
                ],
                stream_new: None,
                stream_run: None,
                stream_free: None,
            };
            init
        },
    ]
};
#[no_mangle]
pub unsafe extern "C" fn ti_stream_run(
    mut stream: *mut ti_stream,
    mut size: libc::c_int,
    mut inputs: *const *const libc::c_double,
    mut outputs: *const *mut libc::c_double,
) -> libc::c_int {
    return (ti_indicators[(*stream).index as usize].stream_run)
        .expect("non-null function pointer")(stream, size, inputs, outputs);
}
#[no_mangle]
pub unsafe extern "C" fn ti_stream_get_info(
    mut stream: *mut ti_stream,
) -> *mut ti_indicator_info {
    return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
}
#[no_mangle]
pub unsafe extern "C" fn ti_stream_get_progress(
    mut stream: *mut ti_stream,
) -> libc::c_int {
    return (*stream).progress;
}
#[no_mangle]
pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
    (ti_indicators[(*stream).index as usize].stream_free)
        .expect("non-null function pointer")(stream);
}
#[no_mangle]
pub unsafe extern "C" fn ti_find_indicator(
    mut name: *const libc::c_char,
) -> *const ti_indicator_info {
    let mut imin: libc::c_int = 0 as libc::c_int;
    let mut imax: libc::c_int = (::core::mem::size_of::<[ti_indicator_info; 105]>()
        as libc::c_ulong)
        .wrapping_div(::core::mem::size_of::<ti_indicator_info>() as libc::c_ulong)
        .wrapping_sub(2 as libc::c_int as libc::c_ulong) as libc::c_int;
    while imax >= imin {
        let i: libc::c_int = imin + (imax - imin) / 2 as libc::c_int;
        let c: libc::c_int = strcmp(name, ti_indicators[i as usize].name);
        if c == 0 as libc::c_int {
            return ti_indicators.as_mut_ptr().offset(i as isize)
        } else if c > 0 as libc::c_int {
            imin = i + 1 as libc::c_int;
        } else {
            imax = i - 1 as libc::c_int;
        }
    }
    return 0 as *const ti_indicator_info;
}
