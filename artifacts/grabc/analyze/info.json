{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XErrorEvent",
            "names": [
                "typedef struct XErrorEvent XErrorEvent"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XWindowAttributes",
            "names": [
                "typedef struct XWindowAttributes XWindowAttributes"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "Window",
            "names": [
                "typedef struct Window Window"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "Cursor",
            "names": [
                "typedef struct Cursor Cursor"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "Display",
            "names": [
                "typedef struct Display Display"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "Screen",
            "names": [
                "typedef struct Screen Screen"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "Status",
            "names": [
                "typedef struct Status Status"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XColor",
            "names": [
                "typedef struct XColor XColor"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XEvent",
            "names": [
                "typedef struct XEvent XEvent"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XGCValues",
            "names": [
                "typedef struct XGCValues XGCValues"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "_XGC",
            "names": [
                "typedef struct _XGC *GC"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "",
            "name": "XImage",
            "names": [
                "typedef struct _XImage XImage"
            ]
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "g_debug",
            "type": "int",
            "definition": [
                "static int g_debug = 0"
            ]
        },
        {
            "path": null,
            "name": "g_print_in_hex",
            "type": "int",
            "definition": [
                "static int g_print_in_hex = 1"
            ]
        },
        {
            "path": null,
            "name": "g_print_in_rgb",
            "type": "int",
            "definition": [
                "static int g_print_in_rgb = 0"
            ]
        },
        {
            "path": null,
            "name": "g_print_all_16_bits",
            "type": "int",
            "definition": [
                "static int g_print_all_16_bits = 0"
            ]
        },
        {
            "path": null,
            "name": "g_window_id",
            "type": "Window",
            "definition": [
                "static Window g_window_id = (Window) 0"
            ]
        },
        {
            "path": null,
            "name": "g_loc_specified",
            "type": "int",
            "definition": [
                "static int g_loc_specified = 0"
            ]
        },
        {
            "path": null,
            "name": "g_x",
            "type": "int",
            "definition": [
                "static int g_x = 1"
            ]
        },
        {
            "path": null,
            "name": "g_y",
            "type": "int",
            "definition": [
                "static int g_y = 1"
            ]
        },
        {
            "path": null,
            "name": "g_width",
            "type": "unsigned int",
            "definition": [
                "static unsigned int g_width = 0"
            ]
        },
        {
            "path": null,
            "name": "g_height",
            "type": "unsigned int",
            "definition": [
                "static unsigned int g_height = 0"
            ]
        },
        {
            "path": null,
            "name": "g_cross_cursor",
            "type": "Cursor",
            "definition": [
                "static Cursor g_cross_cursor = (Cursor) 0"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "select_window",
            "header": "static Window select_window(Display *, int *x, int *y)",
            "params": [
                "Display *display",
                "int *x",
                "int *y"
            ],
            "definition": "static Window select_window(Display *display, int *x, int *y)\n{\n  Cursor target_cursor;\n  int status;\n  Window target_window;\n  Window root_window;\n  XEvent event;\n  if ((g_window_id != ((Window) 0)) && g_loc_specified)\n  {\n    log_debug(\"Returning passing window: %lx\", g_window_id);\n    *x = g_x;\n    *y = g_y;\n    return g_window_id;\n  }\n  target_window = (Window) 0;\n  target_cursor = get_cross_cursor(display);\n  root_window = XRootWindow(display, XDefaultScreen(display));\n  status = XGrabPointer(display, root_window, 0, (unsigned int) ButtonPressMask, GrabModeSync, GrabModeAsync, root_window, target_cursor, CurrentTime);\n  if (status == GrabSuccess)\n  {\n    helper_select_window_1(&target_window, display, root_window, event);\n  }\n  else\n  {\n    (void) fprintf(stderr, \"ERROR: Failed to grab mouse pointer!\\n\");\n    exit(1);\n  }\n  *x = event.xbutton.x;\n  *y = event.xbutton.y;\n  return target_window;\n}\n\n",
            "calle": [
                "XDefaultScreen",
                "XGrabPointer",
                "XRootWindow",
                "exit",
                "fprintf",
                "get_cross_cursor",
                "helper_select_window_1",
                "log_debug"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int *",
                        "definition": [
                            "int *x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int *",
                        "definition": [
                            "int *y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_cursor",
                        "type": "Cursor",
                        "definition": [
                            "Cursor target_cursor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root_window",
                        "type": "Window",
                        "definition": [
                            "Window root_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event",
                        "type": "XEvent",
                        "definition": [
                            "XEvent event"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_window_id",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_loc_specified",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_x",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_y",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "findSubWindow",
            "header": "static Window findSubWindow(Display *display, Window top_winodw, Window window_to_check, int *x, int *y)",
            "params": [
                "Display *display",
                "Window top_window",
                "Window window_to_check",
                "int *x",
                "int *y"
            ],
            "definition": "static Window findSubWindow(Display *display, Window top_window, Window window_to_check, int *x, int *y)\n{\n  int newx;\n  int newy;\n  Window window;\n  if (top_window == ((Window) 0))\n  {\n    return (Window) 0;\n  }\n  if (window_to_check == ((Window) 0))\n  {\n    return (Window) 0;\n  }\n  window = window_to_check;\n  while ((XTranslateCoordinates(display, top_window, window_to_check, *x, *y, &newx, &newy, &window) != 0) && (window != ((Window) 0)))\n  {\n    if (window != ((Window) 0))\n    {\n      top_window = window_to_check;\n      window_to_check = window;\n      *x = newx;\n      *y = newy;\n    }\n  }\n\n  if (window == ((Window) 0))\n  {\n    window = window_to_check;\n  }\n  *x = newx;\n  *y = newy;\n  return window;\n}\n\n",
            "calle": [
                "XTranslateCoordinates"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top_window",
                        "type": "Window",
                        "definition": [
                            "Window top_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_to_check",
                        "type": "Window",
                        "definition": [
                            "Window window_to_check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int *",
                        "definition": [
                            "int *x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int *",
                        "definition": [
                            "int *y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newx",
                        "type": "int",
                        "definition": [
                            "int newx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newy",
                        "type": "int",
                        "definition": [
                            "int newy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "Window",
                        "definition": [
                            "Window window"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_window_color",
            "header": "static Window get_window_color(Display *display, XColor *color)",
            "params": [
                "Display *display",
                "XColor *color"
            ],
            "definition": "static Window get_window_color(Display *display, XColor *color)\n{\n  Window root_window;\n  Window target_window;\n  XImage *ximage;\n  unsigned int ximage_idx = 0;\n  int x;\n  int y;\n  Status status;\n  root_window = XRootWindow(display, XDefaultScreen(display));\n  target_window = select_window(display, &x, &y);\n  log_debug(\"  Root Window Id: 0x%08lx\", root_window);\n  log_debug(\"Target Window Id: 0x%08lx  X,Y: +%d+%d\", target_window, x, y);\n  if (target_window == ((Window) 0))\n  {\n    return (Window) 0;\n  }\n  ximage_idx = XGetImage(display, target_window, x, y, 1, 1, AllPlanes, ZPixmap);\n  if ((&ximage[ximage_idx]) == ((XImage *) 0))\n  {\n    helper_get_window_color_1(&target_window, &ximage_idx, display, root_window, ximage, x, y);\n  }\n  color->pixel = XGetPixel(ximage, 0, 0);\n  XDestroyImage(ximage);\n  return target_window;\n}\n\n",
            "calle": [
                "XDefaultScreen",
                "XDestroyImage",
                "XGetImage",
                "XGetPixel",
                "XRootWindow",
                "helper_get_window_color_1",
                "log_debug",
                "select_window"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "XColor *",
                        "definition": [
                            "XColor *color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root_window",
                        "type": "Window",
                        "definition": [
                            "Window root_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ximage",
                        "type": "XImage *",
                        "definition": [
                            "XImage *ximage"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ximage_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ximage_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "Status",
                        "definition": [
                            "Status status"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "MXError",
            "header": "static int MXError(Display *display, XErrorEvent *error)",
            "params": [
                "Display *display",
                "XErrorEvent *error"
            ],
            "definition": "static int MXError(Display *display, XErrorEvent *error)\n{\n  int xerrcode;\n  xerrcode = error->error_code;\n  if ((xerrcode == BadAlloc) || ((xerrcode == BadAccess) && (error->request_code == 88)))\n  {\n    return 0;\n  }\n  else\n  {\n    switch (error->request_code)\n    {\n      case X_GetGeometry:\n      {\n        if (error->error_code == BadDrawable)\n        {\n          return 0;\n        }\n        break;\n      }\n\n      case X_GetWindowAttributes:\n\n      case X_QueryTree:\n      {\n        if (error->error_code == BadWindow)\n        {\n          return 0;\n        }\n        break;\n      }\n\n      case X_QueryColors:\n      {\n        if (error->error_code == BadValue)\n        {\n          return 0;\n        }\n        break;\n      }\n\n    }\n\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "XErrorEvent *",
                        "definition": [
                            "XErrorEvent *error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xerrcode",
                        "type": "int",
                        "definition": [
                            "int xerrcode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "show_usage",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void show_usage(void)\n{\n  char **p;\n  unsigned int p_idx = 0;\n  static char *options[] = {\" -v      - show version info\", \" -h      - show this usage\", \" -hex    - print pixel value as Hex on stdout\", \" -rgb    - print pixel value as RGB on stderr\", \" -W      - print the Window id at mouse click\", \" -w id   - window id in hex, use -l +x+y\", \" -l +x+y - pixel co-ordinate. requires window id\", \" -d      - show debug messages\", \" -a      - Print all 16 bits RGB components of color\", \"           Default is high order 8 bits of components\", \"Example:\", \"* Print pixel color in hex on stdout:\", \"   $ grabc\", \"* Show usage:\", \"   $ grabc -h\", \"* Print Window Id (Note the upper case W):\", \"   $ grabc -W\", \"* Print pixel color of Window iwith id 0x13234 at location 10,20\", \"   $ grabc -w 0x13234 -l +10+20\", (char *) 0};\n  (void) printf(\"\\n\");\n  (void) printf(\"grabc v%s\\n\", \"1.0.2\");\n  (void) printf(\"A program to identify a pixel color of an X Window\\n\");\n  (void) printf(\"by muquit@muquit.com https://www.muquit.com/\\n\\n\");\n  (void) printf(\"Usage: grabc [options]\\n\");\n  (void) printf(\"Where the options are:\\n\");\n  for (p_idx = options; p[p_idx] != 0; p_idx += 1)\n  {\n    (void) fprintf(stdout, \"%s\\n\", *(&p[p_idx]));\n    (void) fflush(stdout);\n  }\n\n}\n\n",
            "calle": [
                "fflush",
                "fprintf",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char **",
                        "definition": [
                            "char **p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "char *[]",
                        "definition": [
                            "static char *options[] = {\" -v      - show version info\", \" -h      - show this usage\", \" -hex    - print pixel value as Hex on stdout\", \" -rgb    - print pixel value as RGB on stderr\", \" -W      - print the Window id at mouse click\", \" -w id   - window id in hex, use -l +x+y\", \" -l +x+y - pixel co-ordinate. requires window id\", \" -d      - show debug messages\", \" -a      - Print all 16 bits RGB components of color\", \"           Default is high order 8 bits of components\", \"Example:\", \"* Print pixel color in hex on stdout:\", \"   $ grabc\", \"* Show usage:\", \"   $ grabc -h\", \"* Print Window Id (Note the upper case W):\", \"   $ grabc -W\", \"* Print pixel color of Window iwith id 0x13234 at location 10,20\", \"   $ grabc -w 0x13234 -l +10+20\", (char *) 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "log_debug",
            "header": "",
            "params": [
                "const char *fmt",
                "..."
            ],
            "definition": "static void log_debug(const char *fmt, ...)\n{\n  va_list args;\n  if (!g_debug)\n  {\n    return;\n  }\n  __builtin_va_start(args);\n  (void) fprintf(stderr, \"[Debug]: \");\n  vfprintf(stderr, fmt, args);\n  (void) fprintf(stderr, \"\\n\");\n  ;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "fprintf",
                "vfprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "va_list",
                        "definition": [
                            "va_list args"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_debug",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_cross_cursor",
            "header": "",
            "params": [
                "Display *display"
            ],
            "definition": "static Cursor get_cross_cursor(Display *display)\n{\n  if (g_cross_cursor == ((Cursor) 0))\n  {\n    g_cross_cursor = XCreateFontCursor(display, XC_tcross);\n    if (g_cross_cursor == ((Cursor) 0))\n    {\n      (void) fprintf(stderr, \"ERROR: Failed to create Cross Cursor!\\n\");\n      exit(1);\n    }\n  }\n  return g_cross_cursor;\n}\n\n",
            "calle": [
                "XCreateFontCursor",
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_cross_cursor",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "grab_mouse",
            "header": "",
            "params": [
                "Display *display",
                "Window root_window"
            ],
            "definition": "static Window grab_mouse(Display *display, Window root_window)\n{\n  int status;\n  Window subwindow;\n  XEvent event;\n  Cursor target_cursor;\n  if (g_window_id != ((Window) 0))\n  {\n    return g_window_id;\n  }\n  target_cursor = get_cross_cursor(display);\n  status = XGrabPointer(display, root_window, 0, (unsigned int) ButtonPressMask, GrabModeSync, GrabModeAsync, root_window, target_cursor, CurrentTime);\n  if (status == GrabSuccess)\n  {\n    XAllowEvents(display, SyncPointer, CurrentTime);\n    XWindowEvent(display, root_window, ButtonPressMask, &event);\n    subwindow = event.xbutton.subwindow;\n  }\n  else\n  {\n    return root_window;\n  }\n  return subwindow;\n}\n\n",
            "calle": [
                "XAllowEvents",
                "XGrabPointer",
                "XWindowEvent",
                "get_cross_cursor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root_window",
                        "type": "Window",
                        "definition": [
                            "Window root_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subwindow",
                        "type": "Window",
                        "definition": [
                            "Window subwindow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event",
                        "type": "XEvent",
                        "definition": [
                            "XEvent event"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_cursor",
                        "type": "Cursor",
                        "definition": [
                            "Cursor target_cursor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_window_id",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "upgrab_mouse",
            "header": "",
            "params": [
                "Display *display"
            ],
            "definition": "static void upgrab_mouse(Display *display)\n{\n  if (g_window_id != ((Window) 0))\n  {\n    XUngrabPointer(display, CurrentTime);\n  }\n}\n\n",
            "calle": [
                "XUngrabPointer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_window_id",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#grabc",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  Display *display;\n  unsigned int display_idx = 0;\n  int x;\n  int y;\n  int status;\n  XColor color;\n  int rc;\n  int i;\n  int r;\n  int g;\n  int b;\n  Window window_id;\n  Window target_window;\n  XWindowAttributes window_attributes;\n  char *option;\n  unsigned int option_idx = 0;\n  for (i = 1; i < argc; i += 1)\n  {\n    helper_main_2(&display_idx, &rc, &i, &option_idx, argc, argv, display, x, y, option);\n  }\n\n  if (g_loc_specified && (g_window_id == ((Window) 0)))\n  {\n    (void) fprintf(stderr, \"ERROR: Please specify window id with -w in hex to use this option\\n\");\n    (void) fprintf(stderr, \"Use -W option to find the Window Id\\n\");\n    return 1;\n  }\n  display_idx = XOpenDisplay((char *) 0);\n  XSetErrorHandler(MXError);\n  if ((&display[display_idx]) == ((Display *) 0))\n  {\n    (void) fprintf(stderr, \"ERROR: Failed to open DISPLAY!\\n\");\n    exit(1);\n  }\n  target_window = get_window_color(display, &color);\n  if (target_window != ((Window) 0))\n  {\n    helper_main_1(&status, &r, &g, &b, display, color, target_window, window_attributes);\n  }\n  else\n  {\n    (void) fprintf(stderr, \"ERROR: Failed to grab color!\\n\");\n  }\n  return 0;\n}\n\n",
            "calle": [
                "MXError",
                "XOpenDisplay",
                "XSetErrorHandler",
                "exit",
                "fprintf",
                "get_window_color",
                "helper_main_1",
                "helper_main_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display *",
                        "definition": [
                            "Display *display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int display_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "XColor",
                        "definition": [
                            "XColor color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "int",
                        "definition": [
                            "int g"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_id",
                        "type": "Window",
                        "definition": [
                            "Window window_id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_attributes",
                        "type": "XWindowAttributes",
                        "definition": [
                            "XWindowAttributes window_attributes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option",
                        "type": "char *",
                        "definition": [
                            "char *option"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int option_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_loc_specified",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_window_id",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_select_window_1",
            "header": "",
            "params": [
                "Window * const target_window_ref",
                "Display * const display",
                "Window root_window",
                "XEvent event"
            ],
            "definition": "void helper_select_window_1(Window * const target_window_ref, Display * const display, Window root_window, XEvent event)\n{\n  Window target_window = *target_window_ref;\n  XAllowEvents(display, SyncPointer, CurrentTime);\n  XWindowEvent(display, root_window, ButtonPressMask, &event);\n  Window subwindow = event.xbutton.subwindow;\n  if (event.type == ButtonPress)\n  {\n    target_window = findSubWindow(display, root_window, subwindow, &event.xbutton.x, &event.xbutton.y);\n    if (target_window == ((Window) 0))\n    {\n      (void) fprintf(stderr, \"ERROR: Failed to get target window, getting root window!\\n\");\n      target_window = root_window;\n    }\n    if (!g_loc_specified)\n    {\n      XUngrabPointer(display, CurrentTime);\n    }\n  }\n  *target_window_ref = target_window;\n}\n\n",
            "calle": [
                "XAllowEvents",
                "XUngrabPointer",
                "XWindowEvent",
                "findSubWindow",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target_window_ref",
                        "type": "Window * const",
                        "definition": [
                            "Window * const target_window_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display * const",
                        "definition": [
                            "Display * const display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root_window",
                        "type": "Window",
                        "definition": [
                            "Window root_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event",
                        "type": "XEvent",
                        "definition": [
                            "XEvent event"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window = *target_window_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subwindow",
                        "type": "Window",
                        "definition": [
                            "Window subwindow = event.xbutton.subwindow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_loc_specified",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_get_window_color_1",
            "header": "",
            "params": [
                "Window * const target_window_ref",
                "unsigned int * const ximage_idx_ref",
                "Display * const display",
                "Window root_window",
                "XImage * const ximage",
                "int x",
                "int y"
            ],
            "definition": "Window helper_get_window_color_1(Window * const target_window_ref, unsigned int * const ximage_idx_ref, Display * const display, Window root_window, XImage * const ximage, int x, int y)\n{\n  Window target_window = *target_window_ref;\n  unsigned int ximage_idx = *ximage_idx_ref;\n  log_debug(\"Could not get XImage from Window: 0x%08lx\", target_window);\n  log_debug(\"Trying to get XImage from root window: 0x%08lx\", root_window);\n  ximage_idx = XGetImage(display, root_window, x, y, 1, 1, AllPlanes, ZPixmap);\n  if ((&ximage[ximage_idx]) == ((XImage *) 0))\n  {\n    log_debug(\"Could not get XImage from target or root window\");\n    return (Window) 0;\n  }\n  else\n  {\n    log_debug(\"OK successfully got XImage from root window\");\n    target_window = root_window;\n  }\n  *target_window_ref = target_window;\n  *ximage_idx_ref = ximage_idx;\n}\n\n",
            "calle": [
                "XGetImage",
                "log_debug"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target_window_ref",
                        "type": "Window * const",
                        "definition": [
                            "Window * const target_window_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ximage_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const ximage_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display * const",
                        "definition": [
                            "Display * const display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root_window",
                        "type": "Window",
                        "definition": [
                            "Window root_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ximage",
                        "type": "XImage * const",
                        "definition": [
                            "XImage * const ximage"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window = *target_window_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ximage_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ximage_idx = *ximage_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "int * const status_ref",
                "int * const r_ref",
                "int * const g_ref",
                "int * const b_ref",
                "Display * const display",
                "XColor color",
                "Window target_window",
                "XWindowAttributes window_attributes"
            ],
            "definition": "int helper_main_1(int * const status_ref, int * const r_ref, int * const g_ref, int * const b_ref, Display * const display, XColor color, Window target_window, XWindowAttributes window_attributes)\n{\n  int status = *status_ref;\n  int r = *r_ref;\n  int g = *g_ref;\n  int b = *b_ref;\n  status = XGetWindowAttributes(display, target_window, &window_attributes);\n  if ((status == 0) || (window_attributes.map_state != IsViewable))\n  {\n    (void) fprintf(stderr, \"ERROR: Could not get Window Attributes\\n\");\n    return 1;\n  }\n  XQueryColor(display, window_attributes.colormap, &color);\n  if (g_print_all_16_bits)\n  {\n    (void) fprintf(stdout, \"#%04x%04x%04x\\n\", (unsigned int) color.red, (unsigned int) color.green, (unsigned int) color.blue);\n    (void) fflush(stdout);\n    if (g_print_in_rgb)\n    {\n      (void) fprintf(stderr, \"%d,%d,%d\\n\", (unsigned int) color.red, (unsigned int) color.green, (unsigned int) color.blue);\n    }\n  }\n  else\n  {\n    helper_helper_main_1_1(&r, &g, &b, color);\n  }\n  *status_ref = status;\n  *r_ref = r;\n  *g_ref = g;\n  *b_ref = b;\n}\n\n",
            "calle": [
                "XGetWindowAttributes",
                "XQueryColor",
                "fflush",
                "fprintf",
                "helper_helper_main_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const g_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display * const",
                        "definition": [
                            "Display * const display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "XColor",
                        "definition": [
                            "XColor color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target_window",
                        "type": "Window",
                        "definition": [
                            "Window target_window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_attributes",
                        "type": "XWindowAttributes",
                        "definition": [
                            "XWindowAttributes window_attributes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "int",
                        "definition": [
                            "int g = *g_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_print_all_16_bits",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_print_in_rgb",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_2",
            "header": "",
            "params": [
                "unsigned int * const display_idx_ref",
                "int * const rc_ref",
                "int * const i_ref",
                "unsigned int * const option_idx_ref",
                "int argc",
                "char ** const argv",
                "Display * const display",
                "int x",
                "int y",
                "char * const option"
            ],
            "definition": "int helper_main_2(unsigned int * const display_idx_ref, int * const rc_ref, int * const i_ref, unsigned int * const option_idx_ref, int argc, char ** const argv, Display * const display, int x, int y, char * const option)\n{\n  unsigned int display_idx = *display_idx_ref;\n  int rc = *rc_ref;\n  int i = *i_ref;\n  unsigned int option_idx = *option_idx_ref;\n  option_idx = argv[i];\n  switch (*((&option[option_idx]) + 1))\n  {\n    case 'a':\n    {\n      g_print_all_16_bits = 1;\n      break;\n    }\n\n    case 'd':\n    {\n      g_debug = 1;\n      break;\n    }\n\n    case 'h':\n    {\n      if (strncmp(\"hex\", (&option[option_idx]) + 1, 3) == 0)\n      {\n        g_print_in_hex = 1;\n      }\n      else\n      {\n        show_usage();\n        return 1;\n      }\n      break;\n    }\n\n    case 'r':\n    {\n      if (strncmp(\"rgb\", (&option[option_idx]) + 1, 3) == 0)\n      {\n        g_print_in_rgb = 1;\n      }\n      break;\n    }\n\n    case 'w':\n    {\n      helper_helper_main_2_1(&i, argc, argv, option, option_idx);\n    }\n\n    case 'W':\n    {\n      helper_helper_main_2_2(&display_idx, display, x, y);\n    }\n\n    case 'l':\n    {\n      helper_helper_main_2_3(&rc, &i, argc, argv, option, option_idx);\n    }\n\n    case 'v':\n    {\n      (void) fprintf(stderr, \"grabc v%s\\n\", \"1.0.2\");\n      return 1;\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  *display_idx_ref = display_idx;\n  *rc_ref = rc;\n  *i_ref = i;\n  *option_idx_ref = option_idx;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_helper_main_2_1",
                "helper_helper_main_2_2",
                "helper_helper_main_2_3",
                "show_usage",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const display_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const option_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display * const",
                        "definition": [
                            "Display * const display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option",
                        "type": "char * const",
                        "definition": [
                            "char * const option"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int display_idx = *display_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = *rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int option_idx = *option_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_print_all_16_bits",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_debug",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_print_in_hex",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_print_in_rgb",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_1_1",
            "header": "",
            "params": [
                "int * const r_ref",
                "int * const g_ref",
                "int * const b_ref",
                "XColor color"
            ],
            "definition": "void helper_helper_main_1_1(int * const r_ref, int * const g_ref, int * const b_ref, XColor color)\n{\n  int r = *r_ref;\n  int g = *g_ref;\n  int b = *b_ref;\n  r = color.red >> 8;\n  g = color.green >> 8;\n  b = color.blue >> 8;\n  log_debug(\"Color: #%02x%02x%02x\", r, g, b);\n  (void) fprintf(stdout, \"#%02x%02x%02x\\n\", r, g, b);\n  (void) fflush(stdout);\n  if (g_print_in_rgb)\n  {\n    (void) fprintf(stderr, \"%d,%d,%d\\n\", r, g, b);\n  }\n  *r_ref = r;\n  *g_ref = g;\n  *b_ref = b;\n}\n\n",
            "calle": [
                "fflush",
                "fprintf",
                "log_debug"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const g_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "XColor",
                        "definition": [
                            "XColor color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = *r_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "int",
                        "definition": [
                            "int g = *g_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_print_in_rgb",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "int argc",
                "char ** const argv",
                "char * const option",
                "unsigned int option_idx"
            ],
            "definition": "int helper_helper_main_2_1(int * const i_ref, int argc, char ** const argv, char * const option, unsigned int option_idx)\n{\n  int i = *i_ref;\n  if (option[option_idx] == '-')\n  {\n    i += 1;\n    if (i == argc)\n    {\n      (void) fprintf(stderr, \"ERROR: Missing Window id\\n\");\n      return 1;\n    }\n  }\n  g_window_id = (Window) strtol(argv[i], 0, 16);\n  break;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fprintf",
                "strtol"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option",
                        "type": "char * const",
                        "definition": [
                            "char * const option"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int option_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_window_id",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_2",
            "header": "",
            "params": [
                "unsigned int * const display_idx_ref",
                "Display * const display",
                "int x",
                "int y"
            ],
            "definition": "int helper_helper_main_2_2(unsigned int * const display_idx_ref, Display * const display, int x, int y)\n{\n  unsigned int display_idx = *display_idx_ref;\n  display_idx = XOpenDisplay((char *) 0);\n  if ((&display[display_idx]) == 0)\n  {\n    (void) fprintf(stderr, \"ERROR: Could not open Display\\n\");\n    return 1;\n  }\n  Window window = select_window(display, &x, &y);\n  if (window != ((Window) 0))\n  {\n    log_debug(\"Window ID: 0x%08lx\", window);\n    (void) fprintf(stdout, \"0x%lx\\n\", window);\n  }\n  return 1;\n  break;\n  *display_idx_ref = display_idx;\n}\n\n",
            "calle": [
                "XOpenDisplay",
                "fprintf",
                "log_debug",
                "select_window"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "display_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const display_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "Display * const",
                        "definition": [
                            "Display * const display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int display_idx = *display_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "Window",
                        "definition": [
                            "Window window = select_window(display, &x, &y)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_3",
            "header": "",
            "params": [
                "int * const rc_ref",
                "int * const i_ref",
                "int argc",
                "char ** const argv",
                "char * const option",
                "unsigned int option_idx"
            ],
            "definition": "int helper_helper_main_2_3(int * const rc_ref, int * const i_ref, int argc, char ** const argv, char * const option, unsigned int option_idx)\n{\n  int rc = *rc_ref;\n  int i = *i_ref;\n  if (option[option_idx] == '-')\n  {\n    i += 1;\n    if (i == argc)\n    {\n      (void) fprintf(stderr, \"ERROR: Missing location +x+y\\n\");\n      return 1;\n    }\n  }\n  rc = XParseGeometry(argv[i], &g_x, &g_y, &g_width, &g_height);\n  if (rc == 0)\n  {\n    (void) fprintf(stderr, \"ERROR: Could not parse location: %s\\n\", argv[i]);\n    (void) fprintf(stderr, \"Example: -l +10+20\\n\");\n    return 1;\n  }\n  g_loc_specified = 1;\n  break;\n  *rc_ref = rc;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "XParseGeometry",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option",
                        "type": "char * const",
                        "definition": [
                            "char * const option"
                        ]
                    },
                    {
                        "path": null,
                        "name": "option_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int option_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = *rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g_x",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_y",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_width",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_height",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "g_loc_specified",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}