{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  uint32_t bitmask : 31;\n  unsigned int generic : 1;\n  union \n  {\n    const void *table;\n    bool (*lookup_fn)(ucs4_t uc, uint32_t bitmask);\n  } lookup;\n} uc_general_category_t",
            "name": "uc_general_category_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bitmask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t bitmask : 31"
                        ]
                    },
                    {
                        "path": null,
                        "name": "generic",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int generic : 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lookup",
                        "type": "union \n{\n  const void *table;\n  bool (*lookup_fn)(ucs4_t uc, uint32_t bitmask);\n}",
                        "definition": [
                            "union \n{\n  const void *table;\n  bool (*lookup_fn)(ucs4_t uc, uint32_t bitmask);\n} lookup"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum \n{\n  COPYRIGHT_YEAR = 2024\n}",
            "name": null,
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  int numerator;\n  int denominator;\n} uc_fraction_t",
            "name": "uc_fraction_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "numerator",
                        "type": "int",
                        "definition": [
                            "int numerator"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denominator",
                        "type": "int",
                        "definition": [
                            "int denominator"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  bool (*test_fn)(ucs4_t uc);\n} uc_property_t",
            "name": "uc_property_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_fn",
                        "type": "bool (*)(ucs4_t uc)",
                        "definition": [
                            "bool (*test_fn)(ucs4_t uc)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  unsigned int code : 21;\n  unsigned int start : 1;\n  unsigned int end : 1;\n} uc_interval_t",
            "name": "uc_interval_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int code : 21"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int start : 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int end : 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  unsigned int nintervals;\n  const uc_interval_t *intervals;\n  const char *name;\n} uc_script_t",
            "name": "uc_script_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "nintervals",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nintervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intervals",
                        "type": "const uc_interval_t *",
                        "definition": [
                            "const uc_interval_t *intervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  ucs4_t start;\n  ucs4_t end;\n  const char *name;\n} uc_block_t",
            "name": "uc_block_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start",
                        "type": "ucs4_t",
                        "definition": [
                            "ucs4_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "ucs4_t",
                        "definition": [
                            "ucs4_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum quoting_style\n{\n  literal_quoting_style,\n  shell_quoting_style,\n  shell_always_quoting_style,\n  shell_escape_quoting_style,\n  shell_escape_always_quoting_style,\n  c_quoting_style,\n  c_maybe_quoting_style,\n  escape_quoting_style,\n  locale_quoting_style,\n  clocale_quoting_style,\n  custom_quoting_style\n}",
            "name": "quoting_style",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum quoting_flags\n{\n  QA_ELIDE_NULL_BYTES = 0x01,\n  QA_ELIDE_OUTER_QUOTES = 0x02,\n  QA_SPLIT_TRIGRAPHS = 0x04\n}",
            "name": "quoting_flags",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct table_entry\n{\n  const char alias[11 + 1];\n  const char canonical[11 + 1];\n}",
            "name": "table_entry",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "alias",
                        "type": "const char [11 + 1]",
                        "definition": [
                            "const char alias[11 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "canonical",
                        "type": "const char [11 + 1]",
                        "definition": [
                            "const char canonical[11 + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct dev_ino\n{\n  ino_t st_ino;\n  dev_t st_dev;\n}",
            "name": "dev_ino",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "st_ino",
                        "type": "ino_t",
                        "definition": [
                            "ino_t st_ino"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st_dev",
                        "type": "dev_t",
                        "definition": [
                            "dev_t st_dev"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct file_name\n{\n  char *buf;\n  size_t n_alloc;\n  char *start;\n}",
            "name": "file_name",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_alloc",
                        "type": "size_t",
                        "definition": [
                            "size_t n_alloc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "char *",
                        "definition": [
                            "char *start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct quoting_options\n{\n  enum quoting_style style;\n  int flags;\n  unsigned int quote_these_too[(255 / ((sizeof(int)) * 8)) + 1];\n  const char *left_quote;\n  const char *right_quote;\n}",
            "name": "quoting_options",
            "names": [
                "struct quoting_options"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_these_too",
                        "type": "unsigned int [(255 / ((sizeof(int)) * 8)) + 1]",
                        "definition": [
                            "unsigned int quote_these_too[(255 / ((sizeof(int)) * 8)) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct slotvec\n{\n  size_t size;\n  char *val;\n}",
            "name": "slotvec",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "char *",
                        "definition": [
                            "char *val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "UC_CATEGORY_L",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_L"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_LC",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_LC"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Lu",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Lu"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Ll",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Ll"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Lt",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Lt"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Lm",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Lm"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Lo",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Lo"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_M",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_M"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Mn",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Mn"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Mc",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Mc"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Me",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Me"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_N",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_N"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Nd",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Nd"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Nl",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Nl"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_No",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_No"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_P",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_P"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Pc",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Pc"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Pd",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Pd"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Ps",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Ps"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Pe",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Pe"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Pi",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Pi"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Pf",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Pf"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Po",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Po"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_S",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_S"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Sm",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Sm"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Sc",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Sc"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Sk",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Sk"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_So",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_So"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Z",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Z"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Zs",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Zs"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Zl",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Zl"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Zp",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Zp"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_C",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_C"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Cc",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Cc"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Cf",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Cf"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Cs",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Cs"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Co",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Co"
            ]
        },
        {
            "path": null,
            "name": "UC_CATEGORY_Cn",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t UC_CATEGORY_Cn"
            ]
        },
        {
            "path": null,
            "name": "_UC_CATEGORY_NONE",
            "type": "const uc_general_category_t",
            "definition": [
                "extern const uc_general_category_t _UC_CATEGORY_NONE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_WHITE_SPACE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_WHITE_SPACE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ALPHABETIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ALPHABETIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_ALPHABETIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_ALPHABETIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_NOT_A_CHARACTER",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_NOT_A_CHARACTER"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_DEFAULT_IGNORABLE_CODE_POINT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_DEFAULT_IGNORABLE_CODE_POINT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_DEFAULT_IGNORABLE_CODE_POINT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_DEFAULT_IGNORABLE_CODE_POINT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_DEPRECATED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_DEPRECATED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_LOGICAL_ORDER_EXCEPTION",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_LOGICAL_ORDER_EXCEPTION"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_VARIATION_SELECTOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_VARIATION_SELECTOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PRIVATE_USE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PRIVATE_USE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_UNASSIGNED_CODE_VALUE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_UNASSIGNED_CODE_VALUE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_UPPERCASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_UPPERCASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_UPPERCASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_UPPERCASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_LOWERCASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_LOWERCASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_LOWERCASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_LOWERCASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_TITLECASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_TITLECASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CASED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CASED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CASE_IGNORABLE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CASE_IGNORABLE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CHANGES_WHEN_LOWERCASED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CHANGES_WHEN_LOWERCASED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CHANGES_WHEN_UPPERCASED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CHANGES_WHEN_UPPERCASED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CHANGES_WHEN_TITLECASED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CHANGES_WHEN_TITLECASED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CHANGES_WHEN_CASEFOLDED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CHANGES_WHEN_CASEFOLDED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CHANGES_WHEN_CASEMAPPED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CHANGES_WHEN_CASEMAPPED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_SOFT_DOTTED",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_SOFT_DOTTED"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ID_START",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ID_START"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_ID_START",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_ID_START"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ID_CONTINUE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ID_CONTINUE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_ID_CONTINUE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_ID_CONTINUE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_XID_START",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_XID_START"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_XID_CONTINUE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_XID_CONTINUE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ID_COMPAT_MATH_START",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ID_COMPAT_MATH_START"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ID_COMPAT_MATH_CONTINUE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ID_COMPAT_MATH_CONTINUE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PATTERN_WHITE_SPACE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PATTERN_WHITE_SPACE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PATTERN_SYNTAX",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PATTERN_SYNTAX"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_JOIN_CONTROL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_JOIN_CONTROL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_GRAPHEME_BASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_GRAPHEME_BASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_GRAPHEME_EXTEND",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_GRAPHEME_EXTEND"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_GRAPHEME_EXTEND",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_GRAPHEME_EXTEND"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_GRAPHEME_LINK",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_GRAPHEME_LINK"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_CONTROL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_CONTROL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_LEFT_TO_RIGHT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_LEFT_TO_RIGHT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_HEBREW_RIGHT_TO_LEFT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_HEBREW_RIGHT_TO_LEFT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_ARABIC_RIGHT_TO_LEFT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_ARABIC_RIGHT_TO_LEFT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_EUROPEAN_DIGIT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_EUROPEAN_DIGIT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_EUR_NUM_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_EUR_NUM_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_EUR_NUM_TERMINATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_EUR_NUM_TERMINATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_ARABIC_DIGIT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_ARABIC_DIGIT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_COMMON_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_COMMON_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_BLOCK_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_BLOCK_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_SEGMENT_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_SEGMENT_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_WHITESPACE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_WHITESPACE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_NON_SPACING_MARK",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_NON_SPACING_MARK"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_BOUNDARY_NEUTRAL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_BOUNDARY_NEUTRAL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_PDF",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_PDF"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_EMBEDDING_OR_OVERRIDE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_EMBEDDING_OR_OVERRIDE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_BIDI_OTHER_NEUTRAL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_BIDI_OTHER_NEUTRAL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_HEX_DIGIT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_HEX_DIGIT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ASCII_HEX_DIGIT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ASCII_HEX_DIGIT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_IDEOGRAPHIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_IDEOGRAPHIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_UNIFIED_IDEOGRAPH",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_UNIFIED_IDEOGRAPH"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_RADICAL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_RADICAL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_IDS_UNARY_OPERATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_IDS_UNARY_OPERATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_IDS_BINARY_OPERATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_IDS_BINARY_OPERATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_IDS_TRINARY_OPERATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_IDS_TRINARY_OPERATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EMOJI",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EMOJI"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EMOJI_PRESENTATION",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EMOJI_PRESENTATION"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EMOJI_MODIFIER",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EMOJI_MODIFIER"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EMOJI_MODIFIER_BASE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EMOJI_MODIFIER_BASE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EMOJI_COMPONENT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EMOJI_COMPONENT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EXTENDED_PICTOGRAPHIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EXTENDED_PICTOGRAPHIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ZERO_WIDTH",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ZERO_WIDTH"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_SPACE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_SPACE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_NON_BREAK",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_NON_BREAK"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_ISO_CONTROL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_ISO_CONTROL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_FORMAT_CONTROL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_FORMAT_CONTROL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PREPENDED_CONCATENATION_MARK",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PREPENDED_CONCATENATION_MARK"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_DASH",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_DASH"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_HYPHEN",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_HYPHEN"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PUNCTUATION",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PUNCTUATION"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_LINE_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_LINE_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PARAGRAPH_SEPARATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PARAGRAPH_SEPARATOR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_QUOTATION_MARK",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_QUOTATION_MARK"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_SENTENCE_TERMINAL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_SENTENCE_TERMINAL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_TERMINAL_PUNCTUATION",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_TERMINAL_PUNCTUATION"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_CURRENCY_SYMBOL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_CURRENCY_SYMBOL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_MATH",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_MATH"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_OTHER_MATH",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_OTHER_MATH"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_PAIRED_PUNCTUATION",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_PAIRED_PUNCTUATION"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_LEFT_OF_PAIR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_LEFT_OF_PAIR"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_COMBINING",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_COMBINING"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_COMPOSITE",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_COMPOSITE"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_DECIMAL_DIGIT",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_DECIMAL_DIGIT"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_NUMERIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_NUMERIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_DIACRITIC",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_DIACRITIC"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_EXTENDER",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_EXTENDER"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_IGNORABLE_CONTROL",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_IGNORABLE_CONTROL"
            ]
        },
        {
            "path": null,
            "name": "UC_PROPERTY_REGIONAL_INDICATOR",
            "type": "const uc_property_t",
            "definition": [
                "extern const uc_property_t UC_PROPERTY_REGIONAL_INDICATOR"
            ]
        },
        {
            "path": null,
            "name": "exit_failure",
            "type": "volatile int",
            "definition": [
                "extern volatile int exit_failure"
            ]
        },
        {
            "path": null,
            "name": "quoting_style_args",
            "type": "const char * const []",
            "definition": [
                "const char * const quoting_style_args[] = {\"literal\", \"shell\", \"shell-always\", \"shell-escape\", \"shell-escape-always\", \"c\", \"c-maybe\", \"escape\", \"locale\", \"clocale\", 0}",
                "extern const char * const quoting_style_args[]"
            ]
        },
        {
            "path": null,
            "name": "quoting_style_vals",
            "type": "const enum quoting_style []",
            "definition": [
                "const enum quoting_style quoting_style_vals[] = {literal_quoting_style, shell_quoting_style, shell_always_quoting_style, shell_escape_quoting_style, shell_escape_always_quoting_style, c_quoting_style, c_maybe_quoting_style, escape_quoting_style, locale_quoting_style, clocale_quoting_style}",
                "extern const enum quoting_style quoting_style_vals[]"
            ]
        },
        {
            "path": null,
            "name": "file_name",
            "type": "const char *",
            "definition": [
                "static const char *file_name"
            ]
        },
        {
            "path": null,
            "name": "ignore_EPIPE",
            "type": "bool",
            "definition": [
                "static bool ignore_EPIPE"
            ]
        },
        {
            "path": null,
            "name": "alias_table",
            "type": "const struct table_entry []",
            "definition": [
                "static const struct table_entry alias_table[] = {{\"\", \"\"}}"
            ]
        },
        {
            "path": null,
            "name": "internal_state",
            "type": "mbstate_t",
            "definition": [
                "static mbstate_t internal_state"
            ]
        },
        {
            "path": null,
            "name": "program_name",
            "type": "const char *",
            "definition": [
                "extern const char *program_name"
            ]
        },
        {
            "path": null,
            "name": "Version",
            "type": "const char *",
            "definition": [
                "const char *Version = \"9.5.42-bbc97\"",
                "extern const char *Version"
            ]
        },
        {
            "path": null,
            "name": "version_etc_copyright",
            "type": "const char []",
            "definition": [
                "const char version_etc_copyright[] = \"Copyright %s %d Free Software Foundation, Inc.\"",
                "extern const char version_etc_copyright[]"
            ]
        },
        {
            "path": null,
            "name": "quote_quoting_options",
            "type": "struct quoting_options",
            "definition": [
                "extern struct quoting_options quote_quoting_options",
                "struct quoting_options quote_quoting_options = {locale_quoting_style, 0, {0}, 0, 0}"
            ]
        },
        {
            "path": null,
            "name": "longopts",
            "type": "const struct option []",
            "definition": [
                "static const struct option longopts[] = {{\"logical\", no_argument, (void *) 0, 'L'}, {\"physical\", no_argument, (void *) 0, 'P'}, {\"help\", no_argument, (void *) 0, GETOPT_HELP_CHAR}, {\"version\", no_argument, (void *) 0, GETOPT_VERSION_CHAR}, {(void *) 0, 0, (void *) 0, 0}}"
            ]
        },
        {
            "path": null,
            "name": "default_quoting_options",
            "type": "struct quoting_options",
            "definition": [
                "static struct quoting_options default_quoting_options"
            ]
        },
        {
            "path": null,
            "name": "slot0",
            "type": "char [256]",
            "definition": [
                "static char slot0[256]"
            ]
        },
        {
            "path": null,
            "name": "nslots",
            "type": "int",
            "definition": [
                "static int nslots = 1"
            ]
        },
        {
            "path": null,
            "name": "slotvec0",
            "type": "struct slotvec",
            "definition": [
                "static struct slotvec slotvec0 = {sizeof(slot0), slot0}"
            ]
        },
        {
            "path": null,
            "name": "struct slotvec",
            "type": "struct slotvec *",
            "definition": [
                "static struct slotvec *slotvec = &slotvec0"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "c32isprint",
            "header": "",
            "params": [
                "wint_t wc"
            ],
            "definition": "int c32isprint(wint_t wc)\n{\n  if (wc != WEOF)\n  {\n    return uc_is_print(wc);\n  }\n  else\n    return 0;\n}\n\n",
            "calle": [
                "uc_is_print"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "wc",
                        "type": "wint_t",
                        "definition": [
                            "wint_t wc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isalnum",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isalnum(int c)\n{\n  switch (c)\n  {\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isalpha",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isalpha(int c)\n{\n  switch (c)\n  {\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isascii",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isascii(int c)\n{\n  switch (c)\n  {\n    case ' ':\n\n    case '\\a':\n\n    case '\\b':\n\n    case '\\f':\n\n    case '\\n':\n\n    case '\\r':\n\n    case '\\t':\n\n    case '\\v':\n\n    case '\\x00':\n\n    case '\\x01':\n\n    case '\\x02':\n\n    case '\\x03':\n\n    case '\\x04':\n\n    case '\\x05':\n\n    case '\\x06':\n\n    case '\\x0e':\n\n    case '\\x0f':\n\n    case '\\x10':\n\n    case '\\x11':\n\n    case '\\x12':\n\n    case '\\x13':\n\n    case '\\x14':\n\n    case '\\x15':\n\n    case '\\x16':\n\n    case '\\x17':\n\n    case '\\x18':\n\n    case '\\x19':\n\n    case '\\x1a':\n\n    case '\\x1b':\n\n    case '\\x1c':\n\n    case '\\x1d':\n\n    case '\\x1e':\n\n    case '\\x1f':\n\n    case '\\x7f':\n\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n\n    case '!':\n\n    case '\"':\n\n    case '#':\n\n    case '$':\n\n    case '%':\n\n    case '&':\n\n    case '\\'':\n\n    case '(':\n\n    case ')':\n\n    case '*':\n\n    case '+':\n\n    case ',':\n\n    case '-':\n\n    case '.':\n\n    case '/':\n\n    case ':':\n\n    case ';':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n\n    case '?':\n\n    case '@':\n\n    case '[':\n\n    case '\\\\':\n\n    case ']':\n\n    case '^':\n\n    case '_':\n\n    case '`':\n\n    case '{':\n\n    case '|':\n\n    case '}':\n\n    case '~':\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isblank",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isblank(int c)\n{\n  return (c == ' ') || (c == '\\t');\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_iscntrl",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_iscntrl(int c)\n{\n  switch (c)\n  {\n    case '\\a':\n\n    case '\\b':\n\n    case '\\f':\n\n    case '\\n':\n\n    case '\\r':\n\n    case '\\t':\n\n    case '\\v':\n\n    case '\\x00':\n\n    case '\\x01':\n\n    case '\\x02':\n\n    case '\\x03':\n\n    case '\\x04':\n\n    case '\\x05':\n\n    case '\\x06':\n\n    case '\\x0e':\n\n    case '\\x0f':\n\n    case '\\x10':\n\n    case '\\x11':\n\n    case '\\x12':\n\n    case '\\x13':\n\n    case '\\x14':\n\n    case '\\x15':\n\n    case '\\x16':\n\n    case '\\x17':\n\n    case '\\x18':\n\n    case '\\x19':\n\n    case '\\x1a':\n\n    case '\\x1b':\n\n    case '\\x1c':\n\n    case '\\x1d':\n\n    case '\\x1e':\n\n    case '\\x1f':\n\n    case '\\x7f':\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isdigit",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isdigit(int c)\n{\n  switch (c)\n  {\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isgraph",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isgraph(int c)\n{\n  switch (c)\n  {\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n\n    case '!':\n\n    case '\"':\n\n    case '#':\n\n    case '$':\n\n    case '%':\n\n    case '&':\n\n    case '\\'':\n\n    case '(':\n\n    case ')':\n\n    case '*':\n\n    case '+':\n\n    case ',':\n\n    case '-':\n\n    case '.':\n\n    case '/':\n\n    case ':':\n\n    case ';':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n\n    case '?':\n\n    case '@':\n\n    case '[':\n\n    case '\\\\':\n\n    case ']':\n\n    case '^':\n\n    case '_':\n\n    case '`':\n\n    case '{':\n\n    case '|':\n\n    case '}':\n\n    case '~':\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_islower",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_islower(int c)\n{\n  switch (c)\n  {\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isprint",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isprint(int c)\n{\n  switch (c)\n  {\n    case ' ':\n\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n\n    case '!':\n\n    case '\"':\n\n    case '#':\n\n    case '$':\n\n    case '%':\n\n    case '&':\n\n    case '\\'':\n\n    case '(':\n\n    case ')':\n\n    case '*':\n\n    case '+':\n\n    case ',':\n\n    case '-':\n\n    case '.':\n\n    case '/':\n\n    case ':':\n\n    case ';':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n\n    case '?':\n\n    case '@':\n\n    case '[':\n\n    case '\\\\':\n\n    case ']':\n\n    case '^':\n\n    case '_':\n\n    case '`':\n\n    case '{':\n\n    case '|':\n\n    case '}':\n\n    case '~':\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_ispunct",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_ispunct(int c)\n{\n  switch (c)\n  {\n    case '!':\n\n    case '\"':\n\n    case '#':\n\n    case '$':\n\n    case '%':\n\n    case '&':\n\n    case '\\'':\n\n    case '(':\n\n    case ')':\n\n    case '*':\n\n    case '+':\n\n    case ',':\n\n    case '-':\n\n    case '.':\n\n    case '/':\n\n    case ':':\n\n    case ';':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n\n    case '?':\n\n    case '@':\n\n    case '[':\n\n    case '\\\\':\n\n    case ']':\n\n    case '^':\n\n    case '_':\n\n    case '`':\n\n    case '{':\n\n    case '|':\n\n    case '}':\n\n    case '~':\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isspace",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isspace(int c)\n{\n  switch (c)\n  {\n    case ' ':\n\n    case '\\t':\n\n    case '\\n':\n\n    case '\\v':\n\n    case '\\f':\n\n    case '\\r':\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isupper",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isupper(int c)\n{\n  switch (c)\n  {\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_isxdigit",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern bool c_isxdigit(int c)\n{\n  switch (c)\n  {\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_tolower",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern int c_tolower(int c)\n{\n  switch (c)\n  {\n    case 'a' + ('A' - 'a'):\n\n    case 'b' + ('A' - 'a'):\n\n    case 'c' + ('A' - 'a'):\n\n    case 'd' + ('A' - 'a'):\n\n    case 'e' + ('A' - 'a'):\n\n    case 'f' + ('A' - 'a'):\n\n    case 'g' + ('A' - 'a'):\n\n    case 'h' + ('A' - 'a'):\n\n    case 'i' + ('A' - 'a'):\n\n    case 'j' + ('A' - 'a'):\n\n    case 'k' + ('A' - 'a'):\n\n    case 'l' + ('A' - 'a'):\n\n    case 'm' + ('A' - 'a'):\n\n    case 'n' + ('A' - 'a'):\n\n    case 'o' + ('A' - 'a'):\n\n    case 'p' + ('A' - 'a'):\n\n    case 'q' + ('A' - 'a'):\n\n    case 'r' + ('A' - 'a'):\n\n    case 's' + ('A' - 'a'):\n\n    case 't' + ('A' - 'a'):\n\n    case 'u' + ('A' - 'a'):\n\n    case 'v' + ('A' - 'a'):\n\n    case 'w' + ('A' - 'a'):\n\n    case 'x' + ('A' - 'a'):\n\n    case 'y' + ('A' - 'a'):\n\n    case 'z' + ('A' - 'a'):\n    {\n      return (c - 'A') + 'a';\n    }\n\n    default:\n    {\n      return c;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_toupper",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline extern int c_toupper(int c)\n{\n  switch (c)\n  {\n    case 'a' + 0:\n\n    case 'b' + 0:\n\n    case 'c' + 0:\n\n    case 'd' + 0:\n\n    case 'e' + 0:\n\n    case 'f' + 0:\n\n    case 'g' + 0:\n\n    case 'h' + 0:\n\n    case 'i' + 0:\n\n    case 'j' + 0:\n\n    case 'k' + 0:\n\n    case 'l' + 0:\n\n    case 'm' + 0:\n\n    case 'n' + 0:\n\n    case 'o' + 0:\n\n    case 'p' + 0:\n\n    case 'q' + 0:\n\n    case 'r' + 0:\n\n    case 's' + 0:\n\n    case 't' + 0:\n\n    case 'u' + 0:\n\n    case 'v' + 0:\n\n    case 'w' + 0:\n\n    case 'x' + 0:\n\n    case 'y' + 0:\n\n    case 'z' + 0:\n    {\n      return (c - 'a') + 'A';\n    }\n\n    default:\n    {\n      return c;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "close_stdout_set_file_name",
            "header": "void close_stdout_set_file_name(const char *file)",
            "params": [
                "const char *file"
            ],
            "definition": "void close_stdout_set_file_name(const char *file)\n{\n  file_name = file;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "close_stdout_set_ignore_EPIPE",
            "header": "void close_stdout_set_ignore_EPIPE(bool ignore)",
            "params": [
                "bool ignore"
            ],
            "definition": "void close_stdout_set_ignore_EPIPE(bool ignore)\n{\n  ignore_EPIPE = ignore;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ignore",
                        "type": "bool",
                        "definition": [
                            "bool ignore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ignore_EPIPE",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "close_stdout",
            "header": "void close_stdout(void)",
            "params": [
                "void"
            ],
            "definition": "void close_stdout(void)\n{\n  if ((close_stream(stdout) != 0) && (!(ignore_EPIPE && (errno == EPIPE))))\n  {\n    const char *write_error = gettext(\"write error\");\n    if (file_name)\n    {\n      error(0, errno, \"%s: %s\", quotearg_colon(file_name), write_error);\n    }\n    else\n      error(0, errno, \"%s\", write_error);\n    _exit(exit_failure);\n  }\n  if ((!SANITIZE_ADDRESS) && (close_stream(stderr) != 0))\n  {\n    _exit(exit_failure);\n  }\n}\n\n",
            "calle": [
                "_exit",
                "close_stream",
                "error",
                "gettext",
                "quotearg_colon"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "write_error",
                        "type": "const char *",
                        "definition": [
                            "const char *write_error = gettext(\"write error\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ignore_EPIPE",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "file_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "exit_failure",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pgettext_aux",
            "header": "",
            "params": [
                "const char *domain",
                "const char *msg_ctxt_id",
                "const char *msgid",
                "int category"
            ],
            "definition": "static const char *pgettext_aux(const char *domain, const char *msg_ctxt_id, const char *msgid, int category)\n{\n  const char *translation = dcgettext(domain, msg_ctxt_id, category);\n  if (translation == msg_ctxt_id)\n  {\n    return msgid;\n  }\n  else\n    return translation;\n}\n\n",
            "calle": [
                "dcgettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "domain",
                        "type": "const char *",
                        "definition": [
                            "const char *domain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_ctxt_id",
                        "type": "const char *",
                        "definition": [
                            "const char *msg_ctxt_id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation = dcgettext(domain, msg_ctxt_id, category)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "npgettext_aux",
            "header": "",
            "params": [
                "const char *domain",
                "const char *msg_ctxt_id",
                "const char *msgid",
                "const char *msgid_plural",
                "unsigned long int n",
                "int category"
            ],
            "definition": "static const char *npgettext_aux(const char *domain, const char *msg_ctxt_id, const char *msgid, const char *msgid_plural, unsigned long int n, int category)\n{\n  const char *translation = dcngettext(domain, msg_ctxt_id, msgid_plural, n, category);\n  if ((translation == msg_ctxt_id) || (translation == msgid_plural))\n  {\n    return (n == 1) ? (msgid) : (msgid_plural);\n  }\n  else\n    return translation;\n}\n\n",
            "calle": [
                "dcngettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "domain",
                        "type": "const char *",
                        "definition": [
                            "const char *domain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_ctxt_id",
                        "type": "const char *",
                        "definition": [
                            "const char *msg_ctxt_id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid_plural",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid_plural"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned long int",
                        "definition": [
                            "unsigned long int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation = dcngettext(domain, msg_ctxt_id, msgid_plural, n, category)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "dcpgettext_expr",
            "header": "",
            "params": [
                "const char *domain",
                "const char *msgctxt",
                "const char *msgid",
                "int category"
            ],
            "definition": "static const char *dcpgettext_expr(const char *domain, const char *msgctxt, const char *msgid, int category)\n{\n  size_t msgctxt_len = strlen(msgctxt) + 1;\n  size_t msgid_len = strlen(msgid) + 1;\n  const char *translation;\n  unsigned int translation_idx = 0;\n  char buf[1024];\n  char *msg_ctxt_id = ((msgctxt_len + msgid_len) <= (sizeof(buf))) ? (buf) : ((char *) malloc(msgctxt_len + msgid_len));\n  if (msg_ctxt_id != 0)\n  {\n    int found_translation;\n    memcpy(msg_ctxt_id, msgctxt, msgctxt_len - 1);\n    msg_ctxt_id[msgctxt_len - 1] = '\\004';\n    memcpy(msg_ctxt_id + msgctxt_len, msgid, msgid_len);\n    translation_idx = dcgettext(domain, msg_ctxt_id, category);\n    found_translation = (&translation[translation_idx]) != msg_ctxt_id;\n    if (msg_ctxt_id != buf)\n    {\n      free(msg_ctxt_id);\n    }\n    if (found_translation)\n    {\n      return translation;\n    }\n  }\n  return msgid;\n}\n\n",
            "calle": [
                "dcgettext",
                "free",
                "malloc",
                "memcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "domain",
                        "type": "const char *",
                        "definition": [
                            "const char *domain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgctxt",
                        "type": "const char *",
                        "definition": [
                            "const char *msgctxt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgctxt_len",
                        "type": "size_t",
                        "definition": [
                            "size_t msgctxt_len = strlen(msgctxt) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid_len",
                        "type": "size_t",
                        "definition": [
                            "size_t msgid_len = strlen(msgid) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int translation_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [1024]",
                        "definition": [
                            "char buf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_ctxt_id",
                        "type": "char *",
                        "definition": [
                            "char *msg_ctxt_id = ((msgctxt_len + msgid_len) <= (sizeof(buf))) ? (buf) : ((char *) malloc(msgctxt_len + msgid_len))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_translation",
                        "type": "int",
                        "definition": [
                            "int found_translation"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "dcnpgettext_expr",
            "header": "",
            "params": [
                "const char *domain",
                "const char *msgctxt",
                "const char *msgid",
                "const char *msgid_plural",
                "unsigned long int n",
                "int category"
            ],
            "definition": "static const char *dcnpgettext_expr(const char *domain, const char *msgctxt, const char *msgid, const char *msgid_plural, unsigned long int n, int category)\n{\n  size_t msgctxt_len = strlen(msgctxt) + 1;\n  size_t msgid_len = strlen(msgid) + 1;\n  const char *translation;\n  unsigned int translation_idx = 0;\n  char buf[1024];\n  char *msg_ctxt_id = ((msgctxt_len + msgid_len) <= (sizeof(buf))) ? (buf) : ((char *) malloc(msgctxt_len + msgid_len));\n  if (msg_ctxt_id != 0)\n  {\n    int found_translation;\n    memcpy(msg_ctxt_id, msgctxt, msgctxt_len - 1);\n    msg_ctxt_id[msgctxt_len - 1] = '\\004';\n    memcpy(msg_ctxt_id + msgctxt_len, msgid, msgid_len);\n    translation_idx = dcngettext(domain, msg_ctxt_id, msgid_plural, n, category);\n    found_translation = !(((&translation[translation_idx]) == msg_ctxt_id) || ((&translation[translation_idx]) == msgid_plural));\n    if (msg_ctxt_id != buf)\n    {\n      free(msg_ctxt_id);\n    }\n    if (found_translation)\n    {\n      return translation;\n    }\n  }\n  return (n == 1) ? (msgid) : (msgid_plural);\n}\n\n",
            "calle": [
                "dcngettext",
                "free",
                "malloc",
                "memcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "domain",
                        "type": "const char *",
                        "definition": [
                            "const char *domain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgctxt",
                        "type": "const char *",
                        "definition": [
                            "const char *msgctxt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid_plural",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid_plural"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned long int",
                        "definition": [
                            "unsigned long int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgctxt_len",
                        "type": "size_t",
                        "definition": [
                            "size_t msgctxt_len = strlen(msgctxt) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msgid_len",
                        "type": "size_t",
                        "definition": [
                            "size_t msgid_len = strlen(msgid) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int translation_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [1024]",
                        "definition": [
                            "char buf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_ctxt_id",
                        "type": "char *",
                        "definition": [
                            "char *msg_ctxt_id = ((msgctxt_len + msgid_len) <= (sizeof(buf))) ? (buf) : ((char *) malloc(msgctxt_len + msgid_len))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_translation",
                        "type": "int",
                        "definition": [
                            "int found_translation"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "close_stream",
            "header": "int close_stream(FILE *stream)",
            "params": [
                "FILE *stream"
            ],
            "definition": "int close_stream(FILE *stream)\n{\n  const bool some_pending = __fpending(stream) != 0;\n  const bool prev_fail = ferror_unlocked(stream) != 0;\n  const bool fclose_fail = fclose(stream) != 0;\n  if (prev_fail || (fclose_fail && (some_pending || (errno != EBADF))))\n  {\n    if (!fclose_fail)\n    {\n      errno = 0;\n    }\n    return EOF;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "__fpending",
                "fclose",
                "ferror_unlocked"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "some_pending",
                        "type": "const bool",
                        "definition": [
                            "const bool some_pending = __fpending(stream) != 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_fail",
                        "type": "const bool",
                        "definition": [
                            "const bool prev_fail = ferror_unlocked(stream) != 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fclose_fail",
                        "type": "const bool",
                        "definition": [
                            "const bool fclose_fail = fclose(stream) != 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "c_strcasecmp",
            "header": "extern int c_strcasecmp(const char *s1, const char *s2)",
            "params": [
                "const char *s1",
                "const char *s2"
            ],
            "definition": "int c_strcasecmp(const char *s1, const char *s2)\n{\n  register const unsigned char *p1 = (const unsigned char *) s1;\n  unsigned int p1_idx = 0;\n  register const unsigned char *p2 = (const unsigned char *) s2;\n  unsigned int p2_idx = 0;\n  unsigned char c1;\n  unsigned char c2;\n  if ((&p1[p1_idx]) == (&p2[p2_idx]))\n  {\n    return 0;\n  }\n  do\n  {\n    c1 = c_tolower(*(&p1[p1_idx]));\n    c2 = c_tolower(*(&p2[p2_idx]));\n    if (c1 == '\\0')\n    {\n      break;\n    }\n    p1_idx += 1;\n    p2_idx += 1;\n  }\n  while (c1 == c2);\n  if (255 <= 2147483647)\n  {\n    return c1 - c2;\n  }\n  else\n    return (c1 > c2) - (c1 < c2);\n}\n\n",
            "calle": [
                "c_tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s1",
                        "type": "const char *",
                        "definition": [
                            "const char *s1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2",
                        "type": "const char *",
                        "definition": [
                            "const char *s2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const unsigned char *",
                        "definition": [
                            "register const unsigned char *p1 = (const unsigned char *) s1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const unsigned char *",
                        "definition": [
                            "register const unsigned char *p2 = (const unsigned char *) s2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rpl_fclose",
            "header": "",
            "params": [
                "FILE *fp"
            ],
            "definition": "int rpl_fclose(FILE *fp)\n{\n  int saved_errno = 0;\n  int fd;\n  int result = 0;\n  fd = fileno(fp);\n  if (fd < 0)\n  {\n    return fclose(fp);\n  }\n  if (((!(__freading(fp) != 0)) || (lseek(fileno(fp), 0, 1) != (-1))) && fflush(fp))\n  {\n    saved_errno = errno;\n  }\n  result = fclose(fp);\n  if (saved_errno != 0)\n  {\n    errno = saved_errno;\n    result = EOF;\n  }\n  return result;\n}\n\n",
            "calle": [
                "__freading",
                "fclose",
                "fflush",
                "fileno",
                "lseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "saved_errno",
                        "type": "int",
                        "definition": [
                            "int saved_errno = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "clear_ungetc_buffer",
            "header": "",
            "params": [
                "FILE *fp"
            ],
            "definition": "static void clear_ungetc_buffer(FILE *fp)\n{\n  fseeko(fp, 0, 1);\n}\n\n",
            "calle": [
                "fseeko"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "update_fpos_cache",
            "header": "",
            "params": [
                "FILE *fp",
                "off_t pos"
            ],
            "definition": "static void update_fpos_cache(FILE *fp, off_t pos)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "off_t",
                        "definition": [
                            "off_t pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rpl_fflush",
            "header": "",
            "params": [
                "FILE *stream"
            ],
            "definition": "int rpl_fflush(FILE *stream)\n{\n  if ((stream == 0) || (!(__freading(stream) != 0)))\n  {\n    return fflush(stream);\n  }\n  {\n    off_t pos = ftello(stream);\n    if (pos == (-1))\n    {\n      errno = EBADF;\n      return EOF;\n    }\n    clear_ungetc_buffer(stream);\n    {\n      int result = fpurge(stream);\n      if (result != 0)\n      {\n        return result;\n      }\n    }\n    pos = lseek(fileno(stream), pos, 0);\n    if (pos == (-1))\n    {\n      return EOF;\n    }\n    update_fpos_cache(stream, pos);\n    return 0;\n  }\n}\n\n",
            "calle": [
                "__freading",
                "clear_ungetc_buffer",
                "fflush",
                "fileno",
                "fpurge",
                "ftello",
                "lseek",
                "update_fpos_cache"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "off_t",
                        "definition": [
                            "off_t pos = ftello(stream)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result = fpurge(stream)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fseeko",
            "header": "",
            "params": [
                "FILE *fp",
                "off_t offset",
                "int whence"
            ],
            "definition": "int fseeko(FILE *fp, off_t offset, int whence)\n{\n  {\n    off_t pos = lseek(fileno(fp), offset, whence);\n    if (pos == (-1))\n    {\n      return -1;\n    }\n    return 0;\n  }\n  return fseeko(fp, offset, whence);\n}\n\n",
            "calle": [
                "fileno",
                "fseeko",
                "lseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "off_t",
                        "definition": [
                            "off_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "off_t",
                        "definition": [
                            "off_t pos = lseek(fileno(fp), offset, whence)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hard_locale",
            "header": "extern bool hard_locale(int category)",
            "params": [
                "int category"
            ],
            "definition": "bool hard_locale(int category)\n{\n  char locale[256 + 1];\n  if (setlocale_null_r(category, locale, sizeof(locale)))\n  {\n    return 0;\n  }\n  if (!((strcmp(locale, \"C\") == 0) || (strcmp(locale, \"POSIX\") == 0)))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "setlocale_null_r",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "locale",
                        "type": "char [256 + 1]",
                        "definition": [
                            "char locale[256 + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_gl_alloc_nomem",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline extern void *_gl_alloc_nomem(void)\n{\n  errno = ENOMEM;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "imalloc",
            "header": "",
            "params": [
                "idx_t s"
            ],
            "definition": "inline extern void *imalloc(idx_t s)\n{\n  return (s <= SIZE_MAX) ? (malloc(s)) : (_gl_alloc_nomem());\n}\n\n",
            "calle": [
                "_gl_alloc_nomem",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "irealloc",
            "header": "",
            "params": [
                "void *p",
                "idx_t s"
            ],
            "definition": "inline extern void *irealloc(void *p, idx_t s)\n{\n  unsigned int p_idx = 0;\n  if (s <= SIZE_MAX)\n  {\n    p_idx = realloc(p_idx, s | (!s));\n    return p;\n  }\n  else\n    return _gl_alloc_nomem();\n}\n\n",
            "calle": [
                "_gl_alloc_nomem",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "icalloc",
            "header": "",
            "params": [
                "idx_t n",
                "idx_t s"
            ],
            "definition": "inline extern void *icalloc(idx_t n, idx_t s)\n{\n  if (SIZE_MAX < n)\n  {\n    if (s != 0)\n    {\n      return _gl_alloc_nomem();\n    }\n    n = 0;\n  }\n  if (SIZE_MAX < s)\n  {\n    if (n != 0)\n    {\n      return _gl_alloc_nomem();\n    }\n    s = 0;\n  }\n  return calloc(n, s);\n}\n\n",
            "calle": [
                "_gl_alloc_nomem",
                "calloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ireallocarray",
            "header": "",
            "params": [
                "void *p",
                "idx_t n",
                "idx_t s"
            ],
            "definition": "inline extern void *ireallocarray(void *p, idx_t n, idx_t s)\n{\n  unsigned int p_idx = 0;\n  if ((n <= SIZE_MAX) && (s <= SIZE_MAX))\n  {\n    size_t nx = n;\n    size_t sx = s;\n    if ((n == 0) || (s == 0))\n    {\n      nx = (sx = 1);\n    }\n    p_idx = reallocarray(p_idx, nx, sx);\n    return p;\n  }\n  else\n    return _gl_alloc_nomem();\n}\n\n",
            "calle": [
                "_gl_alloc_nomem",
                "reallocarray"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nx",
                        "type": "size_t",
                        "definition": [
                            "size_t nx = n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx",
                        "type": "size_t",
                        "definition": [
                            "size_t sx = s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "locale_charset",
            "header": "extern const char *locale_charset(void)",
            "params": [
                "void"
            ],
            "definition": "const char *locale_charset(void)\n{\n  const char *codeset;\n  unsigned int codeset_idx = 0;\n  codeset_idx = nl_langinfo(CODESET);\n  if ((&codeset[codeset_idx]) == 0)\n  {\n    codeset_idx = \"\";\n  }\n  {\n    {\n      if (codeset[0 + codeset_idx] == '\\0')\n      {\n        codeset_idx = \"ASCII\";\n      }\n    }\n  }\n  return codeset;\n}\n\n",
            "calle": [
                "nl_langinfo"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeset",
                        "type": "const char *",
                        "definition": [
                            "const char *codeset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeset_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int codeset_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mbrtoc32",
            "header": "",
            "params": [
                "char32_t *pwc",
                "const char *s",
                "size_t n",
                "mbstate_t *ps"
            ],
            "definition": "size_t mbrtoc32(char32_t *pwc, const char *s, size_t n, mbstate_t *ps)\n{\n  unsigned int ps_idx = 0;\n  unsigned int s_idx = 0;\n  unsigned int pwc_idx = 0;\n  if ((&s[s_idx]) == 0)\n  {\n    pwc_idx = 0;\n    s_idx = \"\";\n    n = 1;\n  }\n  if ((&ps[ps_idx]) == 0)\n  {\n    ps_idx = &internal_state;\n  }\n  size_t ret = mbrtoc32(pwc, s, n, ps);\n  if ((ret < ((size_t) (-3))) && (!mbsinit(ps)))\n  {\n    mbszero(ps);\n  }\n  if (ret == ((size_t) (-3)))\n  {\n    abort();\n  }\n  if (((((size_t) (-2)) <= ret) && (n != 0)) && (!hard_locale(LC_CTYPE)))\n  {\n    if ((&pwc[pwc_idx]) != 0)\n    {\n      pwc[pwc_idx] = (unsigned char) s[s_idx];\n    }\n    return 1;\n  }\n  return ret;\n}\n\n",
            "calle": [
                "abort",
                "hard_locale",
                "mbrtoc32",
                "mbsinit",
                "mbszero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pwc",
                        "type": "char32_t *",
                        "definition": [
                            "char32_t *pwc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ps",
                        "type": "mbstate_t *",
                        "definition": [
                            "mbstate_t *ps"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ps_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ps_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pwc_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pwc_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "size_t",
                        "definition": [
                            "size_t ret = mbrtoc32(pwc, s, n, ps)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "internal_state",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_program_name",
            "header": "extern void set_program_name(const char *argv0)",
            "params": [
                "const char *argv0"
            ],
            "definition": "void set_program_name(const char *argv0)\n{\n  unsigned int argv0_idx = 0;\n  const char *slash;\n  unsigned int slash_idx = 0;\n  const char *base;\n  unsigned int base_idx = 0;\n  if ((&argv0[argv0_idx]) == 0)\n  {\n    fputs(\"A NULL argv[0] was passed through an exec system call.\\n\", stderr);\n    abort();\n  }\n  slash_idx = strrchr(argv0, '/');\n  base_idx = ((&slash[slash_idx]) != 0) ? ((&slash[slash_idx]) + 1) : (argv0);\n  if ((((&base[base_idx]) - (&argv0[argv0_idx])) >= 7) && (strncmp((&base[base_idx]) - 7, \"/.libs/\", 7) == 0))\n  {\n    argv0_idx = &base[base_idx];\n    if (strncmp(base, \"lt-\", 3) == 0)\n    {\n      argv0_idx = (&base[base_idx]) + 3;\n      program_invocation_short_name = (char *) argv0;\n    }\n  }\n  program_name = &argv0[argv0_idx];\n  program_invocation_name = (char *) argv0;\n}\n\n",
            "calle": [
                "abort",
                "fputs",
                "strncmp",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argv0",
                        "type": "const char *",
                        "definition": [
                            "const char *argv0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv0_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argv0_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slash",
                        "type": "const char *",
                        "definition": [
                            "const char *slash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slash_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int slash_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "const char *",
                        "definition": [
                            "const char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "program_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "proper_name_lite",
            "header": "extern const char *proper_name_lite(const char *name_ascii, const char *name_utf8)",
            "params": [
                "const char *name_ascii",
                "const char *name_utf8"
            ],
            "definition": "const char *proper_name_lite(const char *name_ascii, const char *name_utf8)\n{\n  const char *translation = gettext(name_ascii);\n  return (translation != name_ascii) ? (translation) : ((c_strcasecmp(locale_charset(), \"UTF-8\") == 0) ? (name_utf8) : (name_ascii));\n}\n\n",
            "calle": [
                "c_strcasecmp",
                "gettext",
                "locale_charset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name_ascii",
                        "type": "const char *",
                        "definition": [
                            "const char *name_ascii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_utf8",
                        "type": "const char *",
                        "definition": [
                            "const char *name_utf8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation = gettext(name_ascii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "initialize_exit_failure",
            "header": "",
            "params": [
                "int status"
            ],
            "definition": "inline static void initialize_exit_failure(int status)\n{\n  if (status != 1)\n  {\n    exit_failure = status;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_failure",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "make_timespec",
            "header": "",
            "params": [
                "time_t s",
                "long int ns"
            ],
            "definition": "inline struct timespec make_timespec(time_t s, long int ns)\n{\n  return (struct timespec){.tv_sec = s, .tv_nsec = ns};\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "time_t",
                        "definition": [
                            "time_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ns",
                        "type": "long int",
                        "definition": [
                            "long int ns"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "timespec_cmp",
            "header": "",
            "params": [
                "struct timespec a",
                "struct timespec b"
            ],
            "definition": "inline int timespec_cmp(struct timespec a, struct timespec b)\n{\n  return (2 * ((a.tv_sec > b.tv_sec) - (a.tv_sec < b.tv_sec))) + ((a.tv_nsec > b.tv_nsec) - (a.tv_nsec < b.tv_nsec));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "struct timespec",
                        "definition": [
                            "struct timespec a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "struct timespec",
                        "definition": [
                            "struct timespec b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "timespec_sign",
            "header": "",
            "params": [
                "struct timespec a"
            ],
            "definition": "inline int timespec_sign(struct timespec a)\n{\n  return ((a.tv_sec > 0) - (a.tv_sec < 0)) + ((!a.tv_sec) & (!(!a.tv_nsec)));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "struct timespec",
                        "definition": [
                            "struct timespec a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "timespectod",
            "header": "",
            "params": [
                "struct timespec a"
            ],
            "definition": "inline double timespectod(struct timespec a)\n{\n  return a.tv_sec + (a.tv_nsec / 1e9);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "struct timespec",
                        "definition": [
                            "struct timespec a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "to_uchar",
            "header": "",
            "params": [
                "char ch"
            ],
            "definition": "inline static unsigned char to_uchar(char ch)\n{\n  return ch;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch",
                        "type": "char",
                        "definition": [
                            "char ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "select_plural",
            "header": "",
            "params": [
                "uintmax_t n"
            ],
            "definition": "inline static unsigned long int select_plural(uintmax_t n)\n{\n  enum \n  {\n    PLURAL_REDUCER = 1000000\n  };\n  return (n <= 18446744073709551615UL) ? (n) : ((n % PLURAL_REDUCER) + PLURAL_REDUCER);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Enum'>",
                        "definition": "enum \n{\n  PLURAL_REDUCER = 1000000\n}",
                        "name": null,
                        "names": []
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "uintmax_t",
                        "definition": [
                            "uintmax_t n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xnrealloc",
            "header": "inline void *xnrealloc(void *p, size_t n, size_t s)",
            "params": [
                "void *p",
                "size_t n",
                "size_t s"
            ],
            "definition": "inline void *xnrealloc(void *p, size_t n, size_t s)\n{\n  return xreallocarray(p, n, s);\n}\n\n",
            "calle": [
                "xreallocarray"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "psame_inode",
            "header": "",
            "params": [
                "const struct stat *a",
                "const struct stat *b"
            ],
            "definition": "inline bool psame_inode(const struct stat *a, const struct stat *b)\n{\n  return !((a->st_dev ^ b->st_dev) | (a->st_ino ^ b->st_ino));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "const struct stat *",
                        "definition": [
                            "const struct stat *a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "const struct stat *",
                        "definition": [
                            "const struct stat *b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "chownat",
            "header": "",
            "params": [
                "int fd",
                "const char *file",
                "uid_t owner",
                "gid_t group"
            ],
            "definition": "inline int chownat(int fd, const char *file, uid_t owner, gid_t group)\n{\n  return fchownat(fd, file, owner, group, 0);\n}\n\n",
            "calle": [
                "fchownat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "uid_t",
                        "definition": [
                            "uid_t owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "group",
                        "type": "gid_t",
                        "definition": [
                            "gid_t group"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lchownat",
            "header": "",
            "params": [
                "int fd",
                "const char *file",
                "uid_t owner",
                "gid_t group"
            ],
            "definition": "inline int lchownat(int fd, const char *file, uid_t owner, gid_t group)\n{\n  return fchownat(fd, file, owner, group, AT_SYMLINK_NOFOLLOW);\n}\n\n",
            "calle": [
                "fchownat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "uid_t",
                        "definition": [
                            "uid_t owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "group",
                        "type": "gid_t",
                        "definition": [
                            "gid_t group"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "chmodat",
            "header": "",
            "params": [
                "int fd",
                "const char *file",
                "mode_t mode"
            ],
            "definition": "inline int chmodat(int fd, const char *file, mode_t mode)\n{\n  return fchmodat(fd, file, mode, 0);\n}\n\n",
            "calle": [
                "fchmodat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "mode_t",
                        "definition": [
                            "mode_t mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lchmodat",
            "header": "",
            "params": [
                "int fd",
                "const char *file",
                "mode_t mode"
            ],
            "definition": "inline int lchmodat(int fd, const char *file, mode_t mode)\n{\n  return fchmodat(fd, file, mode, AT_SYMLINK_NOFOLLOW);\n}\n\n",
            "calle": [
                "fchmodat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "mode_t",
                        "definition": [
                            "mode_t mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "dot_or_dotdot",
            "header": "",
            "params": [
                "const char *file_name"
            ],
            "definition": "inline static bool dot_or_dotdot(const char *file_name)\n{\n  if (file_name[0] == '.')\n  {\n    char sep = file_name[(file_name[1] == '.') + 1];\n    return (!sep) || (sep == '/');\n  }\n  else\n    return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file_name",
                        "type": "const char *",
                        "definition": [
                            "const char *file_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sep",
                        "type": "char",
                        "definition": [
                            "char sep = file_name[(file_name[1] == '.') + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "readdir_ignoring_dot_and_dotdot",
            "header": "",
            "params": [
                "DIR *dirp"
            ],
            "definition": "inline static const struct dirent *readdir_ignoring_dot_and_dotdot(DIR *dirp)\n{\n  while (1)\n  {\n    const struct dirent *dp = readdir(dirp);\n    if ((dp == ((void *) 0)) || (!dot_or_dotdot(dp->d_name)))\n    {\n      return dp;\n    }\n  }\n\n}\n\n",
            "calle": [
                "dot_or_dotdot",
                "readdir"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dirp",
                        "type": "DIR *",
                        "definition": [
                            "DIR *dirp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct dirent",
                        "type": "const struct dirent *",
                        "definition": [
                            "const struct dirent *dp = readdir(dirp)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "directory_status",
            "header": "",
            "params": [
                "int fd_cwd",
                "const char *dir"
            ],
            "definition": "inline static int directory_status(int fd_cwd, const char *dir)\n{\n  DIR *dirp;\n  unsigned int dirp_idx = 0;\n  bool no_direntries;\n  int saved_errno;\n  int fd = openat(fd_cwd, dir, (((O_RDONLY | O_DIRECTORY) | O_NOCTTY) | O_NOFOLLOW) | O_NONBLOCK);\n  if (fd < 0)\n  {\n    return errno;\n  }\n  dirp_idx = fdopendir(fd);\n  if ((&dirp[dirp_idx]) == ((void *) 0))\n  {\n    saved_errno = errno;\n    close(fd);\n    return saved_errno;\n  }\n  errno = 0;\n  no_direntries = !readdir_ignoring_dot_and_dotdot(dirp);\n  saved_errno = errno;\n  closedir(dirp);\n  return (no_direntries && (saved_errno == 0)) ? (DS_EMPTY) : (saved_errno);\n}\n\n",
            "calle": [
                "close",
                "closedir",
                "fdopendir",
                "openat",
                "readdir_ignoring_dot_and_dotdot"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd_cwd",
                        "type": "int",
                        "definition": [
                            "int fd_cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const char *",
                        "definition": [
                            "const char *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp",
                        "type": "DIR *",
                        "definition": [
                            "DIR *dirp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dirp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_direntries",
                        "type": "bool",
                        "definition": [
                            "bool no_direntries"
                        ]
                    },
                    {
                        "path": null,
                        "name": "saved_errno",
                        "type": "int",
                        "definition": [
                            "int saved_errno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd = openat(fd_cwd, dir, (((O_RDONLY | O_DIRECTORY) | O_NOCTTY) | O_NOFOLLOW) | O_NONBLOCK)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gcd",
            "header": "",
            "params": [
                "size_t u",
                "size_t v"
            ],
            "definition": "static size_t gcd(size_t u, size_t v)\n{\n  do\n  {\n    size_t t = u % v;\n    u = v;\n    v = t;\n  }\n  while (v);\n  return u;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "u",
                        "type": "size_t",
                        "definition": [
                            "size_t u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "size_t",
                        "definition": [
                            "size_t v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "size_t",
                        "definition": [
                            "size_t t = u % v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lcm",
            "header": "",
            "params": [
                "size_t u",
                "size_t v"
            ],
            "definition": "inline static size_t lcm(size_t u, size_t v)\n{\n  return u * (v / gcd(u, v));\n}\n\n",
            "calle": [
                "gcd"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "u",
                        "type": "size_t",
                        "definition": [
                            "size_t u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "size_t",
                        "definition": [
                            "size_t v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ptr_align",
            "header": "",
            "params": [
                "const void *ptr",
                "size_t alignment"
            ],
            "definition": "inline static void *ptr_align(const void *ptr, size_t alignment)\n{\n  const char *p0 = ptr;\n  const char *p1 = (p0 + alignment) - 1;\n  return (void *) (p1 - (((size_t) p1) % alignment));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const void *",
                        "definition": [
                            "const void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alignment",
                        "type": "size_t",
                        "definition": [
                            "size_t alignment"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p0",
                        "type": "const char *",
                        "definition": [
                            "const char *p0 = ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const char *",
                        "definition": [
                            "const char *p1 = (p0 + alignment) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_nul",
            "header": "",
            "params": [
                "const void *buf",
                "size_t length"
            ],
            "definition": "inline static bool is_nul(const void *buf, size_t length)\n{\n  const unsigned char *p = buf;\n  unsigned int p_idx = 0;\n  unsigned char word;\n  if (!length)\n  {\n    return 1;\n  }\n  while (__builtin_expect(length & ((sizeof(word)) - 1), 0))\n  {\n    if (p[p_idx])\n    {\n      return 0;\n    }\n    p_idx += 1;\n    length -= 1;\n    if (!length)\n    {\n      return 1;\n    }\n  }\n\n  for (;;)\n  {\n    memcpy(&word, p, sizeof(word));\n    if (word)\n    {\n      return 0;\n    }\n    p_idx += sizeof(word);\n    length -= sizeof(word);\n    if (!length)\n    {\n      return 1;\n    }\n    if (__builtin_expect(length & 15, 0) == 0)\n    {\n      break;\n    }\n  }\n\n  return memcmp(buf, p, length) == 0;\n}\n\n",
            "calle": [
                "__builtin_expect",
                "memcmp",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const void *",
                        "definition": [
                            "const void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *p = buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char word"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_stdin_note",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void emit_stdin_note(void)\n{\n  fputs_unlocked(gettext(\"\\nWith no FILE, or when FILE is -, read standard input.\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_mandatory_arg_note",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void emit_mandatory_arg_note(void)\n{\n  fputs_unlocked(gettext(\"\\nMandatory arguments to long options are mandatory for short options too.\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_size_note",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void emit_size_note(void)\n{\n  fputs_unlocked(gettext(\"\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y,R,Q (powers of 1024) or KB,MB,... (powers of 1000).\\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_blocksize_note",
            "header": "",
            "params": [
                "const char *program"
            ],
            "definition": "inline static void emit_blocksize_note(const char *program)\n{\n  printf(gettext(\"\\nDisplay values are in units of the first available SIZE from --block-size,\\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n\"), program);\n}\n\n",
            "calle": [
                "gettext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "program",
                        "type": "const char *",
                        "definition": [
                            "const char *program"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_update_parameters_note",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void emit_update_parameters_note(void)\n{\n  fputs_unlocked(gettext(\"\\nUPDATE controls which existing files in the destination are replaced.\\n'all' is the default operation when an --update option is not specified,\\nand results in all existing files in the destination being replaced.\\n'none' is like the --no-clobber option, in that no files in the\\ndestination are replaced, and skipped files do not induce a failure.\\n'none-fail' also ensures no files are replaced in the destination,\\nbut any skipped files are diagnosed and induce a failure.\\n'older' is the default operation when --update is specified, and results\\nin files being replaced if they're older than the corresponding source file.\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_backup_suffix_note",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void emit_backup_suffix_note(void)\n{\n  fputs_unlocked(gettext(\"\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n\"), stdout);\n  fputs_unlocked(gettext(\"  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_symlink_recurse_options",
            "header": "",
            "params": [
                "const char *default_opt"
            ],
            "definition": "inline static void emit_symlink_recurse_options(const char *default_opt)\n{\n  printf(gettext(\"\\nThe following options modify how a hierarchy is traversed when the -R\\noption is also specified.  If more than one is specified, only the final\\none takes effect. '%s' is the default.\\n\\n  -H                     if a command line argument is a symbolic link\\n                         to a directory, traverse it\\n  -L                     traverse every symbolic link to a directory\\n                         encountered\\n  -P                     do not traverse any symbolic links\\n\\n\"), default_opt);\n}\n\n",
            "calle": [
                "gettext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "default_opt",
                        "type": "const char *",
                        "definition": [
                            "const char *default_opt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_exec_status",
            "header": "",
            "params": [
                "const char *program"
            ],
            "definition": "inline static void emit_exec_status(const char *program)\n{\n  printf(gettext(\"\\nExit status:\\n  125  if the %s command itself fails\\n  126  if COMMAND is found but cannot be invoked\\n  127  if COMMAND cannot be found\\n  -    the exit status of COMMAND otherwise\\n\"), program);\n}\n\n",
            "calle": [
                "gettext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "program",
                        "type": "const char *",
                        "definition": [
                            "const char *program"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_ancillary_info",
            "header": "",
            "params": [
                "const char *program"
            ],
            "definition": "inline static void emit_ancillary_info(const char *program)\n{\n  const struct infomap\n  {\n    const char *program;\n    const char *node;\n  } infomap[] = {{\"[\", \"test invocation\"}, {\"coreutils\", \"Multi-call invocation\"}, {\"sha224sum\", \"sha2 utilities\"}, {\"sha256sum\", \"sha2 utilities\"}, {\"sha384sum\", \"sha2 utilities\"}, {\"sha512sum\", \"sha2 utilities\"}, {(void *) 0, (void *) 0}};\n  unsigned int node_idx = 0;\n  const char *node = program;\n  unsigned int node_idx = 0;\n  const struct infomap *map_prog = infomap;\n  unsigned int map_prog_idx = 0;\n  while (map_prog->program && (!(strcmp(program, map_prog->program) == 0)))\n  {\n    map_prog_idx += 1;\n  }\n\n  if (map_prog->node)\n  {\n    node_idx = map_prog->node_idx;\n  }\n  printf(gettext(\"\\n%s online help: <%s>\\n\"), \"GNU coreutils\", \"https://www.gnu.org/software/coreutils/\");\n  const char *lc_messages = setlocale(LC_MESSAGES, (void *) 0);\n  if (lc_messages && strncmp(lc_messages, \"en_\", (sizeof(\"en_\")) - 1))\n  {\n    fputs_unlocked(gettext(\"Report any translation bugs to <https://translationproject.org/team/>\\n\"), stdout);\n  }\n  const char *url_program = (strcmp(program, \"[\") == 0) ? (\"test\") : (program);\n  printf(gettext(\"Full documentation <%s%s>\\n\"), \"https://www.gnu.org/software/coreutils/\", url_program);\n  printf(gettext(\"or available locally via: info '(coreutils) %s%s'\\n\"), node, ((&node[node_idx]) == program) ? (\" invocation\") : (\"\"));\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext",
                "printf",
                "setlocale",
                "strcmp",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "program",
                        "type": "const char *",
                        "definition": [
                            "const char *program"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infomap",
                        "type": "const struct infomap\n{\n  const char *program;\n  const char *node;\n} []",
                        "definition": [
                            "const struct infomap\n{\n  const char *program;\n  const char *node;\n} infomap[] = {{\"[\", \"test invocation\"}, {\"coreutils\", \"Multi-call invocation\"}, {\"sha224sum\", \"sha2 utilities\"}, {\"sha256sum\", \"sha2 utilities\"}, {\"sha384sum\", \"sha2 utilities\"}, {\"sha512sum\", \"sha2 utilities\"}, {(void *) 0, (void *) 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int node_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node",
                        "type": "const char *",
                        "definition": [
                            "const char *node = program"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct infomap",
                        "type": "const struct infomap *",
                        "definition": [
                            "const struct infomap *map_prog = infomap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map_prog_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int map_prog_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc_messages",
                        "type": "const char *",
                        "definition": [
                            "const char *lc_messages = setlocale(LC_MESSAGES, (void *) 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "url_program",
                        "type": "const char *",
                        "definition": [
                            "const char *url_program = (strcmp(program, \"[\") == 0) ? (\"test\") : (program)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "timetostr",
            "header": "",
            "params": [
                "time_t t",
                "char *buf"
            ],
            "definition": "inline static char *timetostr(time_t t, char *buf)\n{\n  return (!(((time_t) 0) < ((time_t) (-1)))) ? (imaxtostr(t, buf)) : (umaxtostr(t, buf));\n}\n\n",
            "calle": [
                "imaxtostr",
                "umaxtostr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "t",
                        "type": "time_t",
                        "definition": [
                            "time_t t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bad_cast",
            "header": "",
            "params": [
                "const char *s"
            ],
            "definition": "inline static char *bad_cast(const char *s)\n{\n  return (char *) s;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "usable_st_size",
            "header": "",
            "params": [
                "const struct stat *sb"
            ],
            "definition": "inline static bool usable_st_size(const struct stat *sb)\n{\n  return ((S_ISREG(sb->st_mode) || S_ISLNK(sb->st_mode)) || S_TYPEISSHM(sb)) || S_TYPEISTMO(sb);\n}\n\n",
            "calle": [
                "S_ISLNK",
                "S_ISREG",
                "S_TYPEISSHM",
                "S_TYPEISTMO"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "const struct stat *",
                        "definition": [
                            "const struct stat *sb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "usage",
            "header": "_Noreturn void usage(int status)",
            "params": [
                "int status"
            ],
            "definition": "void usage(int status)\n{\n  if (status != 0)\n  {\n    do\n    {\n      fprintf(stderr, gettext(\"Try '%s --help' for more information.\\n\"), program_name);\n    }\n    while (0);\n  }\n  else\n  {\n    printf(gettext(\"Usage: %s [OPTION]...\\n\"), program_name);\n    fputs_unlocked(gettext(\"Print the full filename of the current working directory.\\n\\n\"), stdout);\n    fputs_unlocked(gettext(\"  -L, --logical   use PWD from environment, even if it contains symlinks\\n\"), stdout);\n    fputs_unlocked(gettext(\"  -P, --physical  resolve all symlinks\\n\"), stdout);\n    fputs_unlocked(gettext(\"      --help        display this help and exit\\n\"), stdout);\n    fputs_unlocked(gettext(\"      --version     output version information and exit\\n\"), stdout);\n    fputs_unlocked(gettext(\"\\nIf no option is specified, -P is assumed.\\n\"), stdout);\n    printf(gettext(\"\\nYour shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\"), \"pwd\");\n    emit_ancillary_info(\"pwd\");\n  }\n  exit(status);\n}\n\n",
            "calle": [
                "emit_ancillary_info",
                "exit",
                "fprintf",
                "fputs_unlocked",
                "gettext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "program_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "write_error",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "inline static void write_error(void)\n{\n  int saved_errno = errno;\n  fflush_unlocked(stdout);\n  fpurge(stdout);\n  clearerr_unlocked(stdout);\n  error(1, saved_errno, gettext(\"write error\"));\n}\n\n",
            "calle": [
                "clearerr_unlocked",
                "error",
                "fflush_unlocked",
                "fpurge",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "saved_errno",
                        "type": "int",
                        "definition": [
                            "int saved_errno = errno"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stzncpy",
            "header": "",
            "params": [
                "char *dest",
                "const char *src",
                "size_t len"
            ],
            "definition": "inline static char *stzncpy(char *dest, const char *src, size_t len)\n{\n  unsigned int src_idx = 0;\n  unsigned int dest_idx = 0;\n  size_t i;\n  for (i = 0; (i < len) && src[src_idx]; i += 1)\n  {\n    dest[dest_idx] = src[src_idx];\n    src_idx += 1;\n    dest_idx += 1;\n  }\n\n  dest[dest_idx] = 0;\n  return dest;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "char *",
                        "definition": [
                            "char *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const char *",
                        "definition": [
                            "const char *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_ENOTSUP",
            "header": "",
            "params": [
                "int err"
            ],
            "definition": "inline static bool is_ENOTSUP(int err)\n{\n  return (err == EOPNOTSUPP) || ((ENOTSUP != EOPNOTSUPP) && (err == ENOTSUP));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "file_name_free",
            "header": "",
            "params": [
                "struct file_name *p"
            ],
            "definition": "static void file_name_free(struct file_name *p)\n{\n  free(p->buf);\n  free(p);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "file_name_init",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static struct file_name *file_name_init(void)\n{\n  struct file_name *p = xmalloc(sizeof(*p));\n  p->n_alloc = ((2 * 8192) < (32 * 1024)) ? (2 * 8192) : (32 * 1024);\n  p->buf = xmalloc(p->n_alloc);\n  p->start = p->buf + (p->n_alloc - 1);\n  p->start[0] = '\\0';\n  return p;\n}\n\n",
            "calle": [
                "xmalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *p = xmalloc(sizeof(*p))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "file_name_prepend",
            "header": "",
            "params": [
                "struct file_name *p",
                "const char *s",
                "size_t s_len"
            ],
            "definition": "static void file_name_prepend(struct file_name *p, const char *s, size_t s_len)\n{\n  size_t n_free = p->start - p->buf;\n  if (n_free < (1 + s_len))\n  {\n    size_t half = (p->n_alloc + 1) + s_len;\n    char *q = xnmalloc(2, half);\n    size_t n_used = p->n_alloc - n_free;\n    p->start = (q + (2 * half)) - n_used;\n    memcpy(p->start, p->buf + n_free, n_used);\n    free(p->buf);\n    p->buf = q;\n    p->n_alloc = 2 * half;\n  }\n  p->start -= 1 + s_len;\n  p->start[0] = '/';\n  memcpy(p->start + 1, s, s_len);\n}\n\n",
            "calle": [
                "free",
                "memcpy",
                "xnmalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_len",
                        "type": "size_t",
                        "definition": [
                            "size_t s_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_free",
                        "type": "size_t",
                        "definition": [
                            "size_t n_free = p->start - p->buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "half",
                        "type": "size_t",
                        "definition": [
                            "size_t half = (p->n_alloc + 1) + s_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "char *",
                        "definition": [
                            "char *q = xnmalloc(2, half)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_used",
                        "type": "size_t",
                        "definition": [
                            "size_t n_used = p->n_alloc - n_free"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "nth_parent",
            "header": "",
            "params": [
                "size_t n"
            ],
            "definition": "static char *nth_parent(size_t n)\n{\n  char *buf = xnmalloc(3, n);\n  char *p = buf;\n  unsigned int p_idx = 0;\n  for (size_t i = 0; i < n; i += 1)\n  {\n    memcpy(p, \"../\", 3);\n    p_idx += 3;\n  }\n\n  p[(-1) + p_idx] = '\\0';\n  return buf;\n}\n\n",
            "calle": [
                "memcpy",
                "xnmalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf = xnmalloc(3, n)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "find_dir_entry",
            "header": "",
            "params": [
                "struct stat *dot_sb",
                "struct file_name *file_name",
                "size_t parent_height"
            ],
            "definition": "static void find_dir_entry(struct stat *dot_sb, struct file_name *file_name, size_t parent_height)\n{\n  DIR *dirp;\n  unsigned int dirp_idx = 0;\n  int fd;\n  struct stat parent_sb;\n  bool use_lstat;\n  bool found;\n  dirp_idx = opendir(\"..\");\n  if ((&dirp[dirp_idx]) == ((void *) 0))\n  {\n    error(1, errno, gettext(\"cannot open directory %s\"), quote(nth_parent(parent_height)));\n  }\n  fd = dirfd(dirp);\n  if (((0 <= fd) ? (fchdir(fd)) : (chdir(\"..\"))) < 0)\n  {\n    error(1, errno, gettext(\"failed to chdir to %s\"), quote(nth_parent(parent_height)));\n  }\n  if (((0 <= fd) ? (fstat(fd, &parent_sb)) : (stat(\".\", &parent_sb))) < 0)\n  {\n    error(1, errno, gettext(\"failed to stat %s\"), quote(nth_parent(parent_height)));\n  }\n  use_lstat = parent_sb.st_dev != dot_sb->st_dev;\n  found = 0;\n  while (1)\n  {\n    helper_find_dir_entry_1(&dirp_idx, &found, dot_sb, file_name, dirp, use_lstat);\n  }\n\n  if (((&dirp[dirp_idx]) == ((void *) 0)) || (closedir(dirp) != 0))\n  {\n    error(1, errno, gettext(\"reading directory %s\"), quote(nth_parent(parent_height)));\n  }\n  if (!found)\n  {\n    error(1, 0, gettext(\"couldn't find directory entry in %s with matching i-node\"), quote(nth_parent(parent_height)));\n  }\n  *dot_sb = parent_sb;\n}\n\n",
            "calle": [
                "chdir",
                "closedir",
                "dirfd",
                "error",
                "fchdir",
                "fstat",
                "gettext",
                "helper_find_dir_entry_1",
                "nth_parent",
                "opendir",
                "quote",
                "stat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "struct stat *",
                        "definition": [
                            "struct stat *dot_sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *file_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_height",
                        "type": "size_t",
                        "definition": [
                            "size_t parent_height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp",
                        "type": "DIR *",
                        "definition": [
                            "DIR *dirp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dirp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_sb",
                        "type": "struct stat",
                        "definition": [
                            "struct stat parent_sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_lstat",
                        "type": "bool",
                        "definition": [
                            "bool use_lstat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "bool",
                        "definition": [
                            "bool found"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "robust_getcwd",
            "header": "",
            "params": [
                "struct file_name *file_name"
            ],
            "definition": "static void robust_getcwd(struct file_name *file_name)\n{\n  size_t height = 1;\n  struct dev_ino dev_ino_buf;\n  struct dev_ino *root_dev_ino = get_root_dev_ino(&dev_ino_buf);\n  struct stat dot_sb;\n  if (root_dev_ino == ((void *) 0))\n  {\n    error(1, errno, gettext(\"failed to get attributes of %s\"), quotearg_style(shell_escape_always_quoting_style, \"/\"));\n  }\n  if (stat(\".\", &dot_sb) < 0)\n  {\n    error(1, errno, gettext(\"failed to stat %s\"), quotearg_style(shell_escape_always_quoting_style, \".\"));\n  }\n  while (1)\n  {\n    if (!(((&dot_sb)->st_dev ^ root_dev_ino->st_dev) | ((&dot_sb)->st_ino ^ root_dev_ino->st_ino)))\n    {\n      break;\n    }\n    find_dir_entry(&dot_sb, file_name, height);\n    height += 1;\n  }\n\n  if (file_name->start[0] == '\\0')\n  {\n    file_name_prepend(file_name, \"\", 0);\n  }\n}\n\n",
            "calle": [
                "error",
                "file_name_prepend",
                "find_dir_entry",
                "get_root_dev_ino",
                "gettext",
                "quotearg_style",
                "stat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *file_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "size_t",
                        "definition": [
                            "size_t height = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dev_ino_buf",
                        "type": "struct dev_ino",
                        "definition": [
                            "struct dev_ino dev_ino_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct dev_ino",
                        "type": "struct dev_ino *",
                        "definition": [
                            "struct dev_ino *root_dev_ino = get_root_dev_ino(&dev_ino_buf)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dot_sb",
                        "type": "struct stat",
                        "definition": [
                            "struct stat dot_sb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "logical_getcwd",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static char *logical_getcwd(void)\n{\n  struct stat st1;\n  struct stat st2;\n  char *wd = getenv(\"PWD\");\n  char *p;\n  unsigned int p_idx = 0;\n  if ((!wd) || (wd[0] != '/'))\n  {\n    return (void *) 0;\n  }\n  p_idx = wd;\n  while (p_idx = strstr(p_idx, \"/.\"))\n  {\n    if (((!p[2 + p_idx]) || (p[2 + p_idx] == '/')) || ((p[2 + p_idx] == '.') && ((!p[3 + p_idx]) || (p[3 + p_idx] == '/'))))\n    {\n      return (void *) 0;\n    }\n    p_idx += 1;\n  }\n\n  if (((stat(wd, &st1) == 0) && (stat(\".\", &st2) == 0)) && psame_inode(&st1, &st2))\n  {\n    return wd;\n  }\n  return (void *) 0;\n}\n\n",
            "calle": [
                "getenv",
                "psame_inode",
                "stat",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st1",
                        "type": "struct stat",
                        "definition": [
                            "struct stat st1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st2",
                        "type": "struct stat",
                        "definition": [
                            "struct stat st2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd",
                        "type": "char *",
                        "definition": [
                            "char *wd = getenv(\"PWD\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#pwd",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  char *wd;\n  unsigned int wd_idx = 0;\n  bool logical = getenv(\"POSIXLY_CORRECT\") != ((void *) 0);\n  ;\n  set_program_name(argv[0]);\n  setlocale(LC_ALL, \"\");\n  bindtextdomain(\"coreutils\", \"/usr/local/share/locale\");\n  textdomain(\"coreutils\");\n  atexit(close_stdout);\n  while (1)\n  {\n    helper_main_1(&logical, argc, argv);\n  }\n\n  if (optind < argc)\n  {\n    error(0, 0, gettext(\"ignoring non-option arguments\"));\n  }\n  if (logical)\n  {\n    wd_idx = logical_getcwd();\n    if (wd)\n    {\n      puts(wd);\n      return 0;\n    }\n  }\n  wd_idx = xgetcwd();\n  if ((&wd[wd_idx]) != ((void *) 0))\n  {\n    puts(wd);\n    free(wd);\n  }\n  else\n  {\n    struct file_name *file_name = file_name_init();\n    robust_getcwd(file_name);\n    puts(file_name->start);\n    file_name_free(file_name);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "atexit",
                "bindtextdomain",
                "close_stdout",
                "error",
                "file_name_free",
                "file_name_init",
                "free",
                "getenv",
                "gettext",
                "helper_main_1",
                "logical_getcwd",
                "puts",
                "robust_getcwd",
                "set_program_name",
                "setlocale",
                "textdomain",
                "xgetcwd"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd",
                        "type": "char *",
                        "definition": [
                            "char *wd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int wd_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "logical",
                        "type": "bool",
                        "definition": [
                            "bool logical = getenv(\"POSIXLY_CORRECT\") != ((void *) 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name *",
                        "definition": [
                            "struct file_name *file_name = file_name_init()"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_find_dir_entry_1",
            "header": "",
            "params": [
                "unsigned int * const dirp_idx_ref",
                "bool * const found_ref",
                "struct stat * const dot_sb",
                "struct file_name * const file_name",
                "DIR * const dirp",
                "bool use_lstat"
            ],
            "definition": "void helper_find_dir_entry_1(unsigned int * const dirp_idx_ref, bool * const found_ref, struct stat * const dot_sb, struct file_name * const file_name, DIR * const dirp, bool use_lstat)\n{\n  unsigned int dirp_idx = *dirp_idx_ref;\n  bool found = *found_ref;\n  const struct dirent *dp;\n  unsigned int dp_idx = 0;\n  struct stat ent_sb;\n  ino_t ino;\n  errno = 0;\n  if ((dp_idx = readdir_ignoring_dot_and_dotdot(dirp)) == ((void *) 0))\n  {\n    if (errno)\n    {\n      int e = errno;\n      closedir(dirp);\n      errno = e;\n      dirp_idx = (void *) 0;\n    }\n    break;\n  }\n  ino = dp->d_ino;\n  if ((ino == NOT_AN_INODE_NUMBER) || use_lstat)\n  {\n    if (lstat(dp->d_name, &ent_sb) < 0)\n    {\n      continue;\n    }\n    ino = ent_sb.st_ino;\n  }\n  if (ino != dot_sb->st_ino)\n  {\n    continue;\n  }\n  if ((!use_lstat) || (ent_sb.st_dev == dot_sb->st_dev))\n  {\n    file_name_prepend(file_name, dp->d_name, strlen(dp->d_name));\n    found = 1;\n    break;\n  }\n  *dirp_idx_ref = dirp_idx;\n  *found_ref = found;\n}\n\n",
            "calle": [
                "closedir",
                "file_name_prepend",
                "lstat",
                "readdir_ignoring_dot_and_dotdot",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dirp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dirp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "struct stat * const",
                        "definition": [
                            "struct stat * const dot_sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct file_name",
                        "type": "struct file_name * const",
                        "definition": [
                            "struct file_name * const file_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp",
                        "type": "DIR * const",
                        "definition": [
                            "DIR * const dirp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_lstat",
                        "type": "bool",
                        "definition": [
                            "bool use_lstat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dirp_idx = *dirp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "bool",
                        "definition": [
                            "bool found = *found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct dirent",
                        "type": "const struct dirent *",
                        "definition": [
                            "const struct dirent *dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ent_sb",
                        "type": "struct stat",
                        "definition": [
                            "struct stat ent_sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ino",
                        "type": "ino_t",
                        "definition": [
                            "ino_t ino"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int",
                        "definition": [
                            "int e = errno"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "bool * const logical_ref",
                "int argc",
                "char ** const argv"
            ],
            "definition": "void helper_main_1(bool * const logical_ref, int argc, char ** const argv)\n{\n  bool logical = *logical_ref;\n  int c = getopt_long(argc, argv, \"LP\", longopts, (void *) 0);\n  if (c == (-1))\n  {\n    break;\n  }\n  switch (c)\n  {\n    case 'L':\n    {\n      logical = 1;\n      break;\n    }\n\n    case 'P':\n    {\n      logical = 0;\n      break;\n    }\n\n    case GETOPT_HELP_CHAR:\n    {\n      usage(0);\n      break;\n      ;\n    }\n\n    case GETOPT_VERSION_CHAR:\n    {\n      version_etc(stdout, \"pwd\", \"GNU coreutils\", Version, proper_name_lite(\"Jim Meyering\", \"Jim Meyering\"), (char *) ((void *) 0));\n      exit(0);\n      break;\n      ;\n    }\n\n    default:\n    {\n      usage(1);\n    }\n\n  }\n\n  *logical_ref = logical;\n}\n\n",
            "calle": [
                "exit",
                "getopt_long",
                "proper_name_lite",
                "usage",
                "version_etc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "logical_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const logical_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "logical",
                        "type": "bool",
                        "definition": [
                            "bool logical = *logical_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = getopt_long(argc, argv, \"LP\", longopts, (void *) 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "longopts",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "Version",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "clone_quoting_options",
            "header": "struct quoting_options *clone_quoting_options(struct quoting_options *o)",
            "params": [
                "struct quoting_options *o"
            ],
            "definition": "struct quoting_options *clone_quoting_options(struct quoting_options *o)\n{\n  int e = errno;\n  struct quoting_options *p = xmemdup((o) ? (o) : (&default_quoting_options), sizeof(*o));\n  errno = e;\n  return p;\n}\n\n",
            "calle": [
                "xmemdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int",
                        "definition": [
                            "int e = errno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *p = xmemdup((o) ? (o) : (&default_quoting_options), sizeof(*o))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_quoting_style",
            "header": "enum quoting_style get_quoting_style(const struct quoting_options *o)",
            "params": [
                "const struct quoting_options *o"
            ],
            "definition": "enum quoting_style get_quoting_style(const struct quoting_options *o)\n{\n  return ((o) ? (o) : (&default_quoting_options))->style;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_quoting_style",
            "header": "void set_quoting_style(struct quoting_options *o, enum quoting_style s)",
            "params": [
                "struct quoting_options *o",
                "enum quoting_style s"
            ],
            "definition": "void set_quoting_style(struct quoting_options *o, enum quoting_style s)\n{\n  ((o) ? (o) : (&default_quoting_options))->style = s;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_char_quoting",
            "header": "int set_char_quoting(struct quoting_options *o, char c, int i)",
            "params": [
                "struct quoting_options *o",
                "char c",
                "int i"
            ],
            "definition": "int set_char_quoting(struct quoting_options *o, char c, int i)\n{\n  unsigned char uc = c;\n  unsigned int *p = ((o) ? (o) : (&default_quoting_options))->quote_these_too + (uc / ((sizeof(int)) * 8));\n  int shift = uc % ((sizeof(int)) * 8);\n  int r = ((*p) >> shift) & 1;\n  *p ^= ((i & 1) ^ r) << shift;\n  return r;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uc",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char uc = c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *p = ((o) ? (o) : (&default_quoting_options))->quote_these_too + (uc / ((sizeof(int)) * 8))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int",
                        "definition": [
                            "int shift = uc % ((sizeof(int)) * 8)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = ((*p) >> shift) & 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_quoting_flags",
            "header": "int set_quoting_flags(struct quoting_options *o, int i)",
            "params": [
                "struct quoting_options *o",
                "int i"
            ],
            "definition": "int set_quoting_flags(struct quoting_options *o, int i)\n{\n  unsigned int o_idx = 0;\n  int r;\n  if (!(&o[o_idx]))\n  {\n    o_idx = &default_quoting_options;\n  }\n  r = o->flags;\n  o->flags = i;\n  return r;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int o_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_custom_quoting",
            "header": "void set_custom_quoting(struct quoting_options *o, const char *left_quote, const char *right_quote)",
            "params": [
                "struct quoting_options *o",
                "const char *left_quote",
                "const char *right_quote"
            ],
            "definition": "void set_custom_quoting(struct quoting_options *o, const char *left_quote, const char *right_quote)\n{\n  unsigned int o_idx = 0;\n  if (!(&o[o_idx]))\n  {\n    o_idx = &default_quoting_options;\n  }\n  o->style = custom_quoting_style;\n  if ((!left_quote) || (!right_quote))\n  {\n    abort();\n  }\n  o->left_quote = left_quote;\n  o->right_quote = right_quote;\n}\n\n",
            "calle": [
                "abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "struct quoting_options *",
                        "definition": [
                            "struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int o_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_buffer",
            "header": "size_t quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const struct quoting_options *o)",
            "params": [
                "char *buffer",
                "size_t buffersize",
                "const char *arg",
                "size_t argsize",
                "const struct quoting_options *o"
            ],
            "definition": "size_t quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const struct quoting_options *o)\n{\n  const struct quoting_options *p = (o) ? (o) : (&default_quoting_options);\n  int e = errno;\n  size_t r = quotearg_buffer_restyled(buffer, buffersize, arg, argsize, p->style, p->flags, p->quote_these_too, p->left_quote, p->right_quote);\n  errno = e;\n  return r;\n}\n\n",
            "calle": [
                "quotearg_buffer_restyled"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *p = (o) ? (o) : (&default_quoting_options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int",
                        "definition": [
                            "int e = errno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "size_t",
                        "definition": [
                            "size_t r = quotearg_buffer_restyled(buffer, buffersize, arg, argsize, p->style, p->flags, p->quote_these_too, p->left_quote, p->right_quote)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_alloc",
            "header": "char *quotearg_alloc(const char *arg, size_t argsize, const struct quoting_options *o)",
            "params": [
                "const char *arg",
                "size_t argsize",
                "const struct quoting_options *o"
            ],
            "definition": "char *quotearg_alloc(const char *arg, size_t argsize, const struct quoting_options *o)\n{\n  return quotearg_alloc_mem(arg, argsize, 0, o);\n}\n\n",
            "calle": [
                "quotearg_alloc_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *o"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_alloc_mem",
            "header": "char *quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const struct quoting_options *o)",
            "params": [
                "const char *arg",
                "size_t argsize",
                "size_t *size",
                "const struct quoting_options *o"
            ],
            "definition": "char *quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const struct quoting_options *o)\n{\n  const struct quoting_options *p = (o) ? (o) : (&default_quoting_options);\n  int e = errno;\n  int flags = p->flags | ((size) ? (0) : (QA_ELIDE_NULL_BYTES));\n  size_t bufsize = quotearg_buffer_restyled(0, 0, arg, argsize, p->style, flags, p->quote_these_too, p->left_quote, p->right_quote) + 1;\n  char *buf = xcharalloc(bufsize);\n  quotearg_buffer_restyled(buf, bufsize, arg, argsize, p->style, flags, p->quote_these_too, p->left_quote, p->right_quote);\n  errno = e;\n  if (size)\n  {\n    *size = bufsize - 1;\n  }\n  return buf;\n}\n\n",
            "calle": [
                "quotearg_buffer_restyled",
                "xcharalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t *",
                        "definition": [
                            "size_t *size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *p = (o) ? (o) : (&default_quoting_options)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int",
                        "definition": [
                            "int e = errno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags = p->flags | ((size) ? (0) : (QA_ELIDE_NULL_BYTES))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize = quotearg_buffer_restyled(0, 0, arg, argsize, p->style, flags, p->quote_these_too, p->left_quote, p->right_quote) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf = xcharalloc(bufsize)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n",
            "header": "char *quotearg_n(int n, const char *arg)",
            "params": [
                "int n",
                "const char *arg"
            ],
            "definition": "char *quotearg_n(int n, const char *arg)\n{\n  return quotearg_n_options(n, arg, (size_t) (-1), &default_quoting_options);\n}\n\n",
            "calle": [
                "quotearg_n_options"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg",
            "header": "char *quotearg(const char *arg)",
            "params": [
                "const char *arg"
            ],
            "definition": "char *quotearg(const char *arg)\n{\n  return quotearg_n(0, arg);\n}\n\n",
            "calle": [
                "quotearg_n"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_mem",
            "header": "char *quotearg_n_mem(int n, const char *arg, size_t argsize)",
            "params": [
                "int n",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_n_mem(int n, const char *arg, size_t argsize)\n{\n  return quotearg_n_options(n, arg, argsize, &default_quoting_options);\n}\n\n",
            "calle": [
                "quotearg_n_options"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_mem",
            "header": "char *quotearg_mem(const char *arg, size_t argsize)",
            "params": [
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_mem(const char *arg, size_t argsize)\n{\n  return quotearg_n_mem(0, arg, argsize);\n}\n\n",
            "calle": [
                "quotearg_n_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_style",
            "header": "char *quotearg_n_style(int n, enum quoting_style s, const char *arg)",
            "params": [
                "int n",
                "enum quoting_style s",
                "const char *arg"
            ],
            "definition": "char *quotearg_n_style(int n, enum quoting_style s, const char *arg)\n{\n  const struct quoting_options o = quoting_options_from_style(s);\n  return quotearg_n_options(n, arg, (size_t) (-1), &o);\n}\n\n",
            "calle": [
                "quotearg_n_options",
                "quoting_options_from_style"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "const struct quoting_options",
                        "definition": [
                            "const struct quoting_options o = quoting_options_from_style(s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_style_mem",
            "header": "char *quotearg_n_style_mem(int n, enum quoting_style s, const char *arg, size_t argsize)",
            "params": [
                "int n",
                "enum quoting_style s",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_n_style_mem(int n, enum quoting_style s, const char *arg, size_t argsize)\n{\n  const struct quoting_options o = quoting_options_from_style(s);\n  return quotearg_n_options(n, arg, argsize, &o);\n}\n\n",
            "calle": [
                "quotearg_n_options",
                "quoting_options_from_style"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "const struct quoting_options",
                        "definition": [
                            "const struct quoting_options o = quoting_options_from_style(s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_style",
            "header": "char *quotearg_style(enum quoting_style s, const char *arg)",
            "params": [
                "enum quoting_style s",
                "const char *arg"
            ],
            "definition": "char *quotearg_style(enum quoting_style s, const char *arg)\n{\n  return quotearg_n_style(0, s, arg);\n}\n\n",
            "calle": [
                "quotearg_n_style"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_style_mem",
            "header": "char *quotearg_style_mem(enum quoting_style s, const char *arg, size_t argsize)",
            "params": [
                "enum quoting_style s",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_style_mem(enum quoting_style s, const char *arg, size_t argsize)\n{\n  return quotearg_n_style_mem(0, s, arg, argsize);\n}\n\n",
            "calle": [
                "quotearg_n_style_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_char",
            "header": "char *quotearg_char(const char *arg, char ch)",
            "params": [
                "const char *arg",
                "char ch"
            ],
            "definition": "char *quotearg_char(const char *arg, char ch)\n{\n  return quotearg_char_mem(arg, (size_t) (-1), ch);\n}\n\n",
            "calle": [
                "quotearg_char_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "char",
                        "definition": [
                            "char ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_char_mem",
            "header": "char *quotearg_char_mem(const char *arg, size_t argsize, char ch)",
            "params": [
                "const char *arg",
                "size_t argsize",
                "char ch"
            ],
            "definition": "char *quotearg_char_mem(const char *arg, size_t argsize, char ch)\n{\n  struct quoting_options options;\n  options = default_quoting_options;\n  set_char_quoting(&options, ch, 1);\n  return quotearg_n_options(0, arg, argsize, &options);\n}\n\n",
            "calle": [
                "quotearg_n_options",
                "set_char_quoting"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "char",
                        "definition": [
                            "char ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "struct quoting_options",
                        "definition": [
                            "struct quoting_options options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_colon",
            "header": "char *quotearg_colon(const char *arg)",
            "params": [
                "const char *arg"
            ],
            "definition": "char *quotearg_colon(const char *arg)\n{\n  return quotearg_char(arg, ':');\n}\n\n",
            "calle": [
                "quotearg_char"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_colon_mem",
            "header": "char *quotearg_colon_mem(const char *arg, size_t argsize)",
            "params": [
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_colon_mem(const char *arg, size_t argsize)\n{\n  return quotearg_char_mem(arg, argsize, ':');\n}\n\n",
            "calle": [
                "quotearg_char_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_style_colon",
            "header": "char *quotearg_n_style_colon(int n, enum quoting_style s, const char *arg)",
            "params": [
                "int n",
                "enum quoting_style s",
                "const char *arg"
            ],
            "definition": "char *quotearg_n_style_colon(int n, enum quoting_style s, const char *arg)\n{\n  struct quoting_options options;\n  options = quoting_options_from_style(s);\n  set_char_quoting(&options, ':', 1);\n  return quotearg_n_options(n, arg, (size_t) (-1), &options);\n}\n\n",
            "calle": [
                "quotearg_n_options",
                "quoting_options_from_style",
                "set_char_quoting"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "struct quoting_options",
                        "definition": [
                            "struct quoting_options options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_custom",
            "header": "char *quotearg_n_custom(int n, const char *left_quote, const char *right_quote, const char *arg)",
            "params": [
                "int n",
                "const char *left_quote",
                "const char *right_quote",
                "const char *arg"
            ],
            "definition": "char *quotearg_n_custom(int n, const char *left_quote, const char *right_quote, const char *arg)\n{\n  return quotearg_n_custom_mem(n, left_quote, right_quote, arg, (size_t) (-1));\n}\n\n",
            "calle": [
                "quotearg_n_custom_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_custom_mem",
            "header": "char *quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)",
            "params": [
                "int n",
                "const char *left_quote",
                "const char *right_quote",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)\n{\n  struct quoting_options o = default_quoting_options;\n  set_custom_quoting(&o, left_quote, right_quote);\n  return quotearg_n_options(n, arg, argsize, &o);\n}\n\n",
            "calle": [
                "quotearg_n_options",
                "set_custom_quoting"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "struct quoting_options",
                        "definition": [
                            "struct quoting_options o = default_quoting_options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_custom",
            "header": "char *quotearg_custom(const char *left_quote, const char *right_quote, const char *arg)",
            "params": [
                "const char *left_quote",
                "const char *right_quote",
                "const char *arg"
            ],
            "definition": "char *quotearg_custom(const char *left_quote, const char *right_quote, const char *arg)\n{\n  return quotearg_n_custom(0, left_quote, right_quote, arg);\n}\n\n",
            "calle": [
                "quotearg_n_custom"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_custom_mem",
            "header": "char *quotearg_custom_mem(const char *left_quote, const char *right_quote, const char *arg, size_t argsize)",
            "params": [
                "const char *left_quote",
                "const char *right_quote",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "char *quotearg_custom_mem(const char *left_quote, const char *right_quote, const char *arg, size_t argsize)\n{\n  return quotearg_n_custom_mem(0, left_quote, right_quote, arg, argsize);\n}\n\n",
            "calle": [
                "quotearg_n_custom_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_free",
            "header": "void quotearg_free(void)",
            "params": [
                "void"
            ],
            "definition": "void quotearg_free(void)\n{\n  struct slotvec *sv = slotvec;\n  int i;\n  for (i = 1; i < nslots; i += 1)\n  {\n    free(sv[i].val);\n  }\n\n  if (sv[0].val != slot0)\n  {\n    free(sv[0].val);\n    slotvec0.size = sizeof(slot0);\n    slotvec0.val = slot0;\n  }\n  if (sv != (&slotvec0))\n  {\n    free(sv);\n    slotvec = &slotvec0;\n  }\n  nslots = 1;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct slotvec",
                        "type": "struct slotvec *",
                        "definition": [
                            "struct slotvec *sv = slotvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nslots",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "slot0",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "slotvec0",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quote_n_mem",
            "header": "const char *quote_n_mem(int n, const char *arg, size_t argsize)",
            "params": [
                "int n",
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "const char *quote_n_mem(int n, const char *arg, size_t argsize)\n{\n  return quotearg_n_options(n, arg, argsize, &quote_quoting_options);\n}\n\n",
            "calle": [
                "quotearg_n_options"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_quoting_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quote_mem",
            "header": "const char *quote_mem(const char *arg, size_t argsize)",
            "params": [
                "const char *arg",
                "size_t argsize"
            ],
            "definition": "const char *quote_mem(const char *arg, size_t argsize)\n{\n  return quote_n_mem(0, arg, argsize);\n}\n\n",
            "calle": [
                "quote_n_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quote_n",
            "header": "const char *quote_n(int n, const char *arg)",
            "params": [
                "int n",
                "const char *arg"
            ],
            "definition": "const char *quote_n(int n, const char *arg)\n{\n  return quote_n_mem(n, arg, (size_t) (-1));\n}\n\n",
            "calle": [
                "quote_n_mem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quote",
            "header": "const char *quote(const char *arg)",
            "params": [
                "const char *arg"
            ],
            "definition": "const char *quote(const char *arg)\n{\n  return quote_n(0, arg);\n}\n\n",
            "calle": [
                "quote_n"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quoting_options_from_style",
            "header": "",
            "params": [
                "enum quoting_style style"
            ],
            "definition": "static struct quoting_options quoting_options_from_style(enum quoting_style style)\n{\n  struct quoting_options o = {literal_quoting_style, 0, {0}, 0, 0};\n  if (style == custom_quoting_style)\n  {\n    abort();\n  }\n  o.style = style;\n  return o;\n}\n\n",
            "calle": [
                "abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o",
                        "type": "struct quoting_options",
                        "definition": [
                            "struct quoting_options o = {literal_quoting_style, 0, {0}, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gettext_quote",
            "header": "",
            "params": [
                "const char *msgid",
                "enum quoting_style s"
            ],
            "definition": "static const char *gettext_quote(const char *msgid, enum quoting_style s)\n{\n  const char *translation = gettext(msgid);\n  const char *locale_code;\n  unsigned int locale_code_idx = 0;\n  if (translation != msgid)\n  {\n    return translation;\n  }\n  locale_code_idx = locale_charset();\n  if (c_strcasecmp(locale_code, \"UTF-8\") == 0)\n  {\n    return (msgid[0] == '`') ? (\"\\xe2\\x80\\x98\") : (\"\\xe2\\x80\\x99\");\n  }\n  if (c_strcasecmp(locale_code, \"GB18030\") == 0)\n  {\n    return (msgid[0] == '`') ? (\"\\xa1\\ae\") : (\"\\xa1\\xaf\");\n  }\n  return (s == clocale_quoting_style) ? (\"\\\"\") : (\"'\");\n}\n\n",
            "calle": [
                "c_strcasecmp",
                "gettext",
                "locale_charset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msgid",
                        "type": "const char *",
                        "definition": [
                            "const char *msgid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const char *",
                        "definition": [
                            "const char *translation = gettext(msgid)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "locale_code",
                        "type": "const char *",
                        "definition": [
                            "const char *locale_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "locale_code_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int locale_code_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_buffer_restyled",
            "header": "",
            "params": [
                "char *buffer",
                "size_t buffersize",
                "const char *arg",
                "size_t argsize",
                "enum quoting_style quoting_style",
                "int flags",
                "const unsigned int *quote_these_too",
                "const char *left_quote",
                "const char *right_quote"
            ],
            "definition": "static size_t quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, enum quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)\n{\n  unsigned int right_quote_idx = 0;\n  unsigned int left_quote_idx = 0;\n  size_t i;\n  size_t len = 0;\n  size_t orig_buffersize = 0;\n  const char *quote_string = 0;\n  unsigned int quote_string_idx = 0;\n  size_t quote_string_len = 0;\n  bool backslash_escapes = 0;\n  bool unibyte_locale = MB_CUR_MAX == 1;\n  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;\n  bool encountered_single_quote = 0;\n  bool all_c_and_shell_quote_compat = 1;\n  process_input:\n  ;\n\n  bool pending_shell_escape_end = 0;\n  switch (quoting_style)\n  {\n    case c_maybe_quoting_style:\n    {\n      quoting_style = c_quoting_style;\n      elide_outer_quotes = 1;\n      ;\n    }\n\n    case c_quoting_style:\n    {\n      if (!elide_outer_quotes)\n      {\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = '\"';\n          }\n          len += 1;\n        }\n        while (0);\n      }\n      backslash_escapes = 1;\n      quote_string_idx = \"\\\"\";\n      quote_string_len = 1;\n      break;\n    }\n\n    case escape_quoting_style:\n    {\n      backslash_escapes = 1;\n      elide_outer_quotes = 0;\n      break;\n    }\n\n    case locale_quoting_style:\n\n    case clocale_quoting_style:\n\n    case custom_quoting_style:\n    {\n      helper_quotearg_buffer_restyled_1(&right_quote_idx, &left_quote_idx, &len, &quote_string_idx, &quote_string_len, &backslash_escapes, buffer, buffersize, quoting_style, left_quote, right_quote, quote_string, elide_outer_quotes);\n    }\n\n    case shell_escape_quoting_style:\n    {\n      backslash_escapes = 1;\n      ;\n    }\n\n    case shell_quoting_style:\n    {\n      elide_outer_quotes = 1;\n      ;\n    }\n\n    case shell_escape_always_quoting_style:\n    {\n      if (!elide_outer_quotes)\n      {\n        backslash_escapes = 1;\n      }\n      ;\n    }\n\n    case shell_always_quoting_style:\n    {\n      quoting_style = shell_always_quoting_style;\n      if (!elide_outer_quotes)\n      {\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = '\\'';\n          }\n          len += 1;\n        }\n        while (0);\n      }\n      quote_string_idx = \"'\";\n      quote_string_len = 1;\n      break;\n    }\n\n    case literal_quoting_style:\n    {\n      elide_outer_quotes = 0;\n      break;\n    }\n\n    default:\n    {\n      abort();\n    }\n\n  }\n\n  for (i = 0; !((argsize == ((size_t) (-1))) ? (arg[i] == '\\0') : (i == argsize)); i += 1)\n  {\n    helper_quotearg_buffer_restyled_2(&buffersize, &argsize, &i, &len, &orig_buffersize, &encountered_single_quote, &all_c_and_shell_quote_compat, &pending_shell_escape_end, buffer, arg, quoting_style, flags, quote_these_too, quote_string, quote_string_len, backslash_escapes, unibyte_locale, elide_outer_quotes);\n  }\n\n  if (((len == 0) && (quoting_style == shell_always_quoting_style)) && elide_outer_quotes)\n  {\n    goto force_outer_quoting_style;\n  }\n  if (((quoting_style == shell_always_quoting_style) && (!elide_outer_quotes)) && encountered_single_quote)\n  {\n    if (all_c_and_shell_quote_compat)\n    {\n      return quotearg_buffer_restyled(buffer, orig_buffersize, arg, argsize, c_quoting_style, flags, quote_these_too, left_quote, right_quote);\n    }\n    else\n      if ((!buffersize) && orig_buffersize)\n    {\n      buffersize = orig_buffersize;\n      len = 0;\n      goto process_input;\n    }\n  }\n  if ((&quote_string[quote_string_idx]) && (!elide_outer_quotes))\n  {\n    for (; quote_string[quote_string_idx]; quote_string_idx += 1)\n    {\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = quote_string[quote_string_idx];\n        }\n        len += 1;\n      }\n      while (0);\n    }\n\n  }\n  if (len < buffersize)\n  {\n    buffer[len] = '\\0';\n  }\n  return len;\n  force_outer_quoting_style:\n  if ((quoting_style == shell_always_quoting_style) && backslash_escapes)\n  {\n    quoting_style = shell_escape_always_quoting_style;\n  }\n\n  return quotearg_buffer_restyled(buffer, buffersize, arg, argsize, quoting_style, flags & (~QA_ELIDE_OUTER_QUOTES), 0, left_quote, right_quote);\n}\n\n",
            "calle": [
                "abort",
                "helper_quotearg_buffer_restyled_1",
                "helper_quotearg_buffer_restyled_2",
                "quotearg_buffer_restyled"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_these_too",
                        "type": "const unsigned int *",
                        "definition": [
                            "const unsigned int *quote_these_too"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char *",
                        "definition": [
                            "const char *right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int right_quote_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int left_quote_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t orig_buffersize = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string",
                        "type": "const char *",
                        "definition": [
                            "const char *quote_string = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int quote_string_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t quote_string_len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unibyte_locale",
                        "type": "bool",
                        "definition": [
                            "bool unibyte_locale = MB_CUR_MAX == 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encountered_single_quote",
                        "type": "bool",
                        "definition": [
                            "bool encountered_single_quote = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_c_and_shell_quote_compat",
                        "type": "bool",
                        "definition": [
                            "bool all_c_and_shell_quote_compat = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "quotearg_n_options",
            "header": "",
            "params": [
                "int n",
                "const char *arg",
                "size_t argsize",
                "const struct quoting_options *options"
            ],
            "definition": "static char *quotearg_n_options(int n, const char *arg, size_t argsize, const struct quoting_options *options)\n{\n  int e = errno;\n  struct slotvec *sv = slotvec;\n  int nslots_max = (2147483647 < PTRDIFF_MAX) ? (2147483647) : (PTRDIFF_MAX);\n  if (!((0 <= n) && (n < nslots_max)))\n  {\n    abort();\n  }\n  if (nslots <= n)\n  {\n    bool preallocated = sv == (&slotvec0);\n    idx_t new_nslots = nslots;\n    slotvec = (sv = xpalloc((preallocated) ? (0) : (sv), &new_nslots, (n - nslots) + 1, nslots_max, sizeof(*sv)));\n    if (preallocated)\n    {\n      *sv = slotvec0;\n    }\n    memset(sv + nslots, 0, (new_nslots - nslots) * (sizeof(*sv)));\n    nslots = new_nslots;\n  }\n  {\n    size_t size = sv[n].size;\n    char *val = sv[n].val;\n    int flags = options->flags | QA_ELIDE_NULL_BYTES;\n    size_t qsize = quotearg_buffer_restyled(val, size, arg, argsize, options->style, flags, options->quote_these_too, options->left_quote, options->right_quote);\n    if (size <= qsize)\n    {\n      sv[n].size = (size = qsize + 1);\n      if (val != slot0)\n      {\n        free(val);\n      }\n      sv[n].val = (val = xcharalloc(size));\n      quotearg_buffer_restyled(val, size, arg, argsize, options->style, flags, options->quote_these_too, options->left_quote, options->right_quote);\n    }\n    errno = e;\n    return val;\n  }\n}\n\n",
            "calle": [
                "abort",
                "free",
                "memset",
                "quotearg_buffer_restyled",
                "xcharalloc",
                "xpalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char *",
                        "definition": [
                            "const char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct quoting_options",
                        "type": "const struct quoting_options *",
                        "definition": [
                            "const struct quoting_options *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int",
                        "definition": [
                            "int e = errno"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct slotvec",
                        "type": "struct slotvec *",
                        "definition": [
                            "struct slotvec *sv = slotvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nslots_max",
                        "type": "int",
                        "definition": [
                            "int nslots_max = (2147483647 < PTRDIFF_MAX) ? (2147483647) : (PTRDIFF_MAX)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "preallocated",
                        "type": "bool",
                        "definition": [
                            "bool preallocated = sv == (&slotvec0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_nslots",
                        "type": "idx_t",
                        "definition": [
                            "idx_t new_nslots = nslots"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = sv[n].size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "char *",
                        "definition": [
                            "char *val = sv[n].val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags = options->flags | QA_ELIDE_NULL_BYTES"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qsize",
                        "type": "size_t",
                        "definition": [
                            "size_t qsize = quotearg_buffer_restyled(val, size, arg, argsize, options->style, flags, options->quote_these_too, options->left_quote, options->right_quote)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nslots",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "slotvec0",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "slot0",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_quotearg_buffer_restyled_1",
            "header": "",
            "params": [
                "unsigned int * const right_quote_idx_ref",
                "unsigned int * const left_quote_idx_ref",
                "size_t * const len_ref",
                "unsigned int * const quote_string_idx_ref",
                "size_t * const quote_string_len_ref",
                "bool * const backslash_escapes_ref",
                "char * const buffer",
                "size_t buffersize",
                "enum quoting_style quoting_style",
                "const char * const left_quote",
                "const char * const right_quote",
                "const char * const quote_string",
                "bool elide_outer_quotes"
            ],
            "definition": "void helper_quotearg_buffer_restyled_1(unsigned int * const right_quote_idx_ref, unsigned int * const left_quote_idx_ref, size_t * const len_ref, unsigned int * const quote_string_idx_ref, size_t * const quote_string_len_ref, bool * const backslash_escapes_ref, char * const buffer, size_t buffersize, enum quoting_style quoting_style, const char * const left_quote, const char * const right_quote, const char * const quote_string, bool elide_outer_quotes)\n{\n  unsigned int right_quote_idx = *right_quote_idx_ref;\n  unsigned int left_quote_idx = *left_quote_idx_ref;\n  size_t len = *len_ref;\n  unsigned int quote_string_idx = *quote_string_idx_ref;\n  size_t quote_string_len = *quote_string_len_ref;\n  bool backslash_escapes = *backslash_escapes_ref;\n  {\n    if (quoting_style != custom_quoting_style)\n    {\n      left_quote_idx = gettext_quote(\"`\", quoting_style);\n      right_quote_idx = gettext_quote(\"'\", quoting_style);\n    }\n    if (!elide_outer_quotes)\n    {\n      for (quote_string_idx = &left_quote[left_quote_idx]; quote_string[quote_string_idx]; quote_string_idx += 1)\n      {\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = quote_string[quote_string_idx];\n          }\n          len += 1;\n        }\n        while (0);\n      }\n\n    }\n    backslash_escapes = 1;\n    quote_string_idx = &right_quote[right_quote_idx];\n    quote_string_len = strlen(quote_string);\n  }\n  break;\n  *right_quote_idx_ref = right_quote_idx;\n  *left_quote_idx_ref = left_quote_idx;\n  *len_ref = len;\n  *quote_string_idx_ref = quote_string_idx;\n  *quote_string_len_ref = quote_string_len;\n  *backslash_escapes_ref = backslash_escapes;\n}\n\n",
            "calle": [
                "gettext_quote",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "right_quote_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const right_quote_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const left_quote_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const quote_string_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const quote_string_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const backslash_escapes_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote",
                        "type": "const char * const",
                        "definition": [
                            "const char * const left_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote",
                        "type": "const char * const",
                        "definition": [
                            "const char * const right_quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string",
                        "type": "const char * const",
                        "definition": [
                            "const char * const quote_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right_quote_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int right_quote_idx = *right_quote_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_quote_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int left_quote_idx = *left_quote_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int quote_string_idx = *quote_string_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t quote_string_len = *quote_string_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes = *backslash_escapes_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_quotearg_buffer_restyled_2",
            "header": "",
            "params": [
                "size_t * const buffersize_ref",
                "size_t * const argsize_ref",
                "size_t * const i_ref",
                "size_t * const len_ref",
                "size_t * const orig_buffersize_ref",
                "bool * const encountered_single_quote_ref",
                "bool * const all_c_and_shell_quote_compat_ref",
                "bool * const pending_shell_escape_end_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "int flags",
                "const unsigned int * const quote_these_too",
                "const char * const quote_string",
                "size_t quote_string_len",
                "bool backslash_escapes",
                "bool unibyte_locale",
                "bool elide_outer_quotes"
            ],
            "definition": "void helper_quotearg_buffer_restyled_2(size_t * const buffersize_ref, size_t * const argsize_ref, size_t * const i_ref, size_t * const len_ref, size_t * const orig_buffersize_ref, bool * const encountered_single_quote_ref, bool * const all_c_and_shell_quote_compat_ref, bool * const pending_shell_escape_end_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, int flags, const unsigned int * const quote_these_too, const char * const quote_string, size_t quote_string_len, bool backslash_escapes, bool unibyte_locale, bool elide_outer_quotes)\n{\n  size_t buffersize = *buffersize_ref;\n  size_t argsize = *argsize_ref;\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  size_t orig_buffersize = *orig_buffersize_ref;\n  bool encountered_single_quote = *encountered_single_quote_ref;\n  bool all_c_and_shell_quote_compat = *all_c_and_shell_quote_compat_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c;\n  unsigned char esc;\n  bool is_right_quote = 0;\n  bool escaping = 0;\n  bool c_and_shell_quote_compat = 0;\n  if ((((backslash_escapes && (quoting_style != shell_always_quoting_style)) && quote_string_len) && ((i + quote_string_len) <= (((argsize == ((size_t) (-1))) && (1 < quote_string_len)) ? (argsize = strlen(arg)) : (argsize)))) && (memcmp(arg + i, quote_string, quote_string_len) == 0))\n  {\n    if (elide_outer_quotes)\n    {\n      goto force_outer_quoting_style;\n    }\n    is_right_quote = 1;\n  }\n  c = arg[i];\n  switch (c)\n  {\n    case '\\0':\n    {\n      helper_helper_quotearg_buffer_restyled_2_5(&len, &pending_shell_escape_end, &c, &escaping, buffer, arg, quoting_style, flags, backslash_escapes, elide_outer_quotes, buffersize, argsize, i);\n    }\n\n    case '?':\n    {\n      helper_helper_quotearg_buffer_restyled_2_4(&i, &len, &c, buffer, arg, quoting_style, flags, elide_outer_quotes, buffersize, argsize);\n    }\n\n    case '\\a':\n    {\n      esc = 'a';\n      goto c_escape;\n    }\n\n    case '\\b':\n    {\n      esc = 'b';\n      goto c_escape;\n    }\n\n    case '\\f':\n    {\n      esc = 'f';\n      goto c_escape;\n    }\n\n    case '\\n':\n    {\n      esc = 'n';\n      goto c_and_shell_escape;\n    }\n\n    case '\\r':\n    {\n      esc = 'r';\n      goto c_and_shell_escape;\n    }\n\n    case '\\t':\n    {\n      esc = 't';\n      goto c_and_shell_escape;\n    }\n\n    case '\\v':\n    {\n      esc = 'v';\n      goto c_escape;\n    }\n\n    case '\\\\':\n    {\n      helper_helper_quotearg_buffer_restyled_2_1(&c, &esc, quoting_style, quote_string_len, backslash_escapes, elide_outer_quotes);\n    }\n\n    case '{':\n\n    case '}':\n    {\n      if (!((argsize == ((size_t) (-1))) ? (arg[1] == '\\0') : (argsize == 1)))\n      {\n        break;\n      }\n      ;\n    }\n\n    case '#':\n\n    case '~':\n    {\n      if (i != 0)\n      {\n        break;\n      }\n      ;\n    }\n\n    case ' ':\n    {\n      c_and_shell_quote_compat = 1;\n      ;\n    }\n\n    case '!':\n\n    case '\"':\n\n    case '$':\n\n    case '&':\n\n    case '(':\n\n    case ')':\n\n    case '*':\n\n    case ';':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n\n    case '[':\n\n    case '^':\n\n    case '`':\n\n    case '|':\n    {\n      if ((quoting_style == shell_always_quoting_style) && elide_outer_quotes)\n      {\n        goto force_outer_quoting_style;\n      }\n      break;\n    }\n\n    case '\\'':\n    {\n      helper_helper_quotearg_buffer_restyled_2_3(&buffersize, &len, &orig_buffersize, &encountered_single_quote, &pending_shell_escape_end, &c_and_shell_quote_compat, buffer, quoting_style, elide_outer_quotes);\n    }\n\n    case '%':\n\n    case '+':\n\n    case ',':\n\n    case '-':\n\n    case '.':\n\n    case '/':\n\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case ':':\n\n    case 'A':\n\n    case 'B':\n\n    case 'C':\n\n    case 'D':\n\n    case 'E':\n\n    case 'F':\n\n    case 'G':\n\n    case 'H':\n\n    case 'I':\n\n    case 'J':\n\n    case 'K':\n\n    case 'L':\n\n    case 'M':\n\n    case 'N':\n\n    case 'O':\n\n    case 'P':\n\n    case 'Q':\n\n    case 'R':\n\n    case 'S':\n\n    case 'T':\n\n    case 'U':\n\n    case 'V':\n\n    case 'W':\n\n    case 'X':\n\n    case 'Y':\n\n    case 'Z':\n\n    case ']':\n\n    case '_':\n\n    case 'a':\n\n    case 'b':\n\n    case 'c':\n\n    case 'd':\n\n    case 'e':\n\n    case 'f':\n\n    case 'g':\n\n    case 'h':\n\n    case 'i':\n\n    case 'j':\n\n    case 'k':\n\n    case 'l':\n\n    case 'm':\n\n    case 'n':\n\n    case 'o':\n\n    case 'p':\n\n    case 'q':\n\n    case 'r':\n\n    case 's':\n\n    case 't':\n\n    case 'u':\n\n    case 'v':\n\n    case 'w':\n\n    case 'x':\n\n    case 'y':\n\n    case 'z':\n    {\n      c_and_shell_quote_compat = 1;\n      break;\n    }\n\n    default:\n    {\n      helper_helper_quotearg_buffer_restyled_2_6(&argsize, &i, &len, &pending_shell_escape_end, &c, &is_right_quote, &escaping, &c_and_shell_quote_compat, buffer, arg, quoting_style, backslash_escapes, unibyte_locale, elide_outer_quotes, buffersize);\n    }\n\n  }\n\n  if ((!((((backslash_escapes && (quoting_style != shell_always_quoting_style)) || elide_outer_quotes) && quote_these_too) && ((quote_these_too[c / ((sizeof(int)) * 8)] >> (c % ((sizeof(int)) * 8))) & 1))) && (!is_right_quote))\n  {\n    goto store_c;\n  }\n  store_escape:\n  do\n  {\n    helper_helper_quotearg_buffer_restyled_2_2(&len, &pending_shell_escape_end, &escaping, buffer, quoting_style, elide_outer_quotes, buffersize);\n  }\n  while (0);\n\n  store_c:\n  do\n  {\n    if (pending_shell_escape_end && (!escaping))\n    {\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\\'';\n        }\n        len += 1;\n      }\n      while (0);\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\\'';\n        }\n        len += 1;\n      }\n      while (0);\n      pending_shell_escape_end = 0;\n    }\n  }\n  while (0);\n\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = c;\n    }\n    len += 1;\n  }\n  while (0);\n  if (!c_and_shell_quote_compat)\n  {\n    all_c_and_shell_quote_compat = 0;\n  }\n  *buffersize_ref = buffersize;\n  *argsize_ref = argsize;\n  *i_ref = i;\n  *len_ref = len;\n  *orig_buffersize_ref = orig_buffersize;\n  *encountered_single_quote_ref = encountered_single_quote;\n  *all_c_and_shell_quote_compat_ref = all_c_and_shell_quote_compat;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n}\n\n",
            "calle": [
                "helper_helper_quotearg_buffer_restyled_2_1",
                "helper_helper_quotearg_buffer_restyled_2_2",
                "helper_helper_quotearg_buffer_restyled_2_3",
                "helper_helper_quotearg_buffer_restyled_2_4",
                "helper_helper_quotearg_buffer_restyled_2_5",
                "helper_helper_quotearg_buffer_restyled_2_6",
                "memcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encountered_single_quote_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const encountered_single_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_c_and_shell_quote_compat_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const all_c_and_shell_quote_compat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_these_too",
                        "type": "const unsigned int * const",
                        "definition": [
                            "const unsigned int * const quote_these_too"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string",
                        "type": "const char * const",
                        "definition": [
                            "const char * const quote_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t quote_string_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unibyte_locale",
                        "type": "bool",
                        "definition": [
                            "bool unibyte_locale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize = *buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize = *argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t orig_buffersize = *orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encountered_single_quote",
                        "type": "bool",
                        "definition": [
                            "bool encountered_single_quote = *encountered_single_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_c_and_shell_quote_compat",
                        "type": "bool",
                        "definition": [
                            "bool all_c_and_shell_quote_compat = *all_c_and_shell_quote_compat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "esc",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char esc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote",
                        "type": "bool",
                        "definition": [
                            "bool is_right_quote = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_and_shell_quote_compat",
                        "type": "bool",
                        "definition": [
                            "bool c_and_shell_quote_compat = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_1",
            "header": "",
            "params": [
                "unsigned char * const c_ref",
                "unsigned char * const esc_ref",
                "enum quoting_style quoting_style",
                "size_t quote_string_len",
                "bool backslash_escapes",
                "bool elide_outer_quotes"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_1(unsigned char * const c_ref, unsigned char * const esc_ref, enum quoting_style quoting_style, size_t quote_string_len, bool backslash_escapes, bool elide_outer_quotes)\n{\n  unsigned char c = *c_ref;\n  unsigned char esc = *esc_ref;\n  esc = c;\n  if (quoting_style == shell_always_quoting_style)\n  {\n    if (elide_outer_quotes)\n    {\n      goto force_outer_quoting_style;\n    }\n    goto store_c;\n  }\n  if ((backslash_escapes && elide_outer_quotes) && quote_string_len)\n  {\n    goto store_c;\n  }\n  c_and_shell_escape:\n  if ((quoting_style == shell_always_quoting_style) && elide_outer_quotes)\n  {\n    goto force_outer_quoting_style;\n  }\n\n  c_escape:\n  if (backslash_escapes)\n  {\n    c = esc;\n    goto store_escape;\n  }\n\n  break;\n  *c_ref = c;\n  *esc_ref = esc;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "esc_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const esc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t quote_string_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "esc",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char esc = *esc_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_2",
            "header": "",
            "params": [
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes",
                "size_t buffersize"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_2(size_t * const len_ref, bool * const pending_shell_escape_end_ref, bool * const escaping_ref, char * const buffer, enum quoting_style quoting_style, bool elide_outer_quotes, size_t buffersize)\n{\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  bool escaping = *escaping_ref;\n  if (elide_outer_quotes)\n  {\n    goto force_outer_quoting_style;\n  }\n  escaping = 1;\n  if ((quoting_style == shell_always_quoting_style) && (!pending_shell_escape_end))\n  {\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '\\'';\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '$';\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '\\'';\n      }\n      len += 1;\n    }\n    while (0);\n    pending_shell_escape_end = 1;\n  }\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = '\\\\';\n    }\n    len += 1;\n  }\n  while (0);\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_3",
            "header": "",
            "params": [
                "size_t * const buffersize_ref",
                "size_t * const len_ref",
                "size_t * const orig_buffersize_ref",
                "bool * const encountered_single_quote_ref",
                "bool * const pending_shell_escape_end_ref",
                "bool * const c_and_shell_quote_compat_ref",
                "char * const buffer",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_3(size_t * const buffersize_ref, size_t * const len_ref, size_t * const orig_buffersize_ref, bool * const encountered_single_quote_ref, bool * const pending_shell_escape_end_ref, bool * const c_and_shell_quote_compat_ref, char * const buffer, enum quoting_style quoting_style, bool elide_outer_quotes)\n{\n  size_t buffersize = *buffersize_ref;\n  size_t len = *len_ref;\n  size_t orig_buffersize = *orig_buffersize_ref;\n  bool encountered_single_quote = *encountered_single_quote_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  bool c_and_shell_quote_compat = *c_and_shell_quote_compat_ref;\n  encountered_single_quote = 1;\n  c_and_shell_quote_compat = 1;\n  if (quoting_style == shell_always_quoting_style)\n  {\n    helper_helper_helper_quotearg_buffer_restyled_2_3_1(&buffersize, &len, &orig_buffersize, &pending_shell_escape_end, buffer, elide_outer_quotes);\n  }\n  break;\n  *buffersize_ref = buffersize;\n  *len_ref = len;\n  *orig_buffersize_ref = orig_buffersize;\n  *encountered_single_quote_ref = encountered_single_quote;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_and_shell_quote_compat_ref = c_and_shell_quote_compat;\n}\n\n",
            "calle": [
                "helper_helper_helper_quotearg_buffer_restyled_2_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encountered_single_quote_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const encountered_single_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_and_shell_quote_compat_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const c_and_shell_quote_compat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize = *buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t orig_buffersize = *orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encountered_single_quote",
                        "type": "bool",
                        "definition": [
                            "bool encountered_single_quote = *encountered_single_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_and_shell_quote_compat",
                        "type": "bool",
                        "definition": [
                            "bool c_and_shell_quote_compat = *c_and_shell_quote_compat_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_4",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const len_ref",
                "unsigned char * const c_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "int flags",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "size_t argsize"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_4(size_t * const i_ref, size_t * const len_ref, unsigned char * const c_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, int flags, bool elide_outer_quotes, size_t buffersize, size_t argsize)\n{\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  unsigned char c = *c_ref;\n  switch (quoting_style)\n  {\n    case shell_always_quoting_style:\n    {\n      if (elide_outer_quotes)\n      {\n        goto force_outer_quoting_style;\n      }\n      break;\n    }\n\n    case c_quoting_style:\n    {\n      helper_helper_helper_quotearg_buffer_restyled_2_4_1(&i, &len, &c, buffer, arg, flags, elide_outer_quotes, buffersize, argsize);\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  break;\n  *i_ref = i;\n  *len_ref = len;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_quotearg_buffer_restyled_2_4_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_5",
            "header": "",
            "params": [
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "unsigned char * const c_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "int flags",
                "bool backslash_escapes",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "size_t argsize",
                "size_t i"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_5(size_t * const len_ref, bool * const pending_shell_escape_end_ref, unsigned char * const c_ref, bool * const escaping_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, int flags, bool backslash_escapes, bool elide_outer_quotes, size_t buffersize, size_t argsize, size_t i)\n{\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c = *c_ref;\n  bool escaping = *escaping_ref;\n  if (backslash_escapes)\n  {\n    helper_helper_helper_quotearg_buffer_restyled_2_5_1(&len, &pending_shell_escape_end, &c, &escaping, buffer, arg, quoting_style, elide_outer_quotes, buffersize, argsize, i);\n  }\n  else\n    if (flags & QA_ELIDE_NULL_BYTES)\n  {\n    continue;\n  }\n  break;\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_ref = c;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [
                "helper_helper_helper_quotearg_buffer_restyled_2_5_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_quotearg_buffer_restyled_2_6",
            "header": "",
            "params": [
                "size_t * const argsize_ref",
                "size_t * const i_ref",
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "unsigned char * const c_ref",
                "bool * const is_right_quote_ref",
                "bool * const escaping_ref",
                "bool * const c_and_shell_quote_compat_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool backslash_escapes",
                "bool unibyte_locale",
                "bool elide_outer_quotes",
                "size_t buffersize"
            ],
            "definition": "void helper_helper_quotearg_buffer_restyled_2_6(size_t * const argsize_ref, size_t * const i_ref, size_t * const len_ref, bool * const pending_shell_escape_end_ref, unsigned char * const c_ref, bool * const is_right_quote_ref, bool * const escaping_ref, bool * const c_and_shell_quote_compat_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, bool backslash_escapes, bool unibyte_locale, bool elide_outer_quotes, size_t buffersize)\n{\n  size_t argsize = *argsize_ref;\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c = *c_ref;\n  bool is_right_quote = *is_right_quote_ref;\n  bool escaping = *escaping_ref;\n  bool c_and_shell_quote_compat = *c_and_shell_quote_compat_ref;\n  size_t m;\n  bool printable;\n  if (unibyte_locale)\n  {\n    m = 1;\n    printable = isprint(c) != 0;\n  }\n  else\n  {\n    helper_helper_helper_quotearg_buffer_restyled_2_6_1(&argsize, &m, &printable, arg, quoting_style, elide_outer_quotes, i);\n  }\n  c_and_shell_quote_compat = printable;\n  if ((1 < m) || (backslash_escapes && (!printable)))\n  {\n    helper_helper_helper_quotearg_buffer_restyled_2_6_2(&i, &len, &pending_shell_escape_end, &c, &is_right_quote, &escaping, buffer, arg, quoting_style, backslash_escapes, elide_outer_quotes, buffersize, m, printable);\n  }\n  *argsize_ref = argsize;\n  *i_ref = i;\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_ref = c;\n  *is_right_quote_ref = is_right_quote;\n  *escaping_ref = escaping;\n  *c_and_shell_quote_compat_ref = c_and_shell_quote_compat;\n}\n\n",
            "calle": [
                "helper_helper_helper_quotearg_buffer_restyled_2_6_1",
                "helper_helper_helper_quotearg_buffer_restyled_2_6_2",
                "isprint"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argsize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_and_shell_quote_compat_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const c_and_shell_quote_compat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unibyte_locale",
                        "type": "bool",
                        "definition": [
                            "bool unibyte_locale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize = *argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote",
                        "type": "bool",
                        "definition": [
                            "bool is_right_quote = *is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_and_shell_quote_compat",
                        "type": "bool",
                        "definition": [
                            "bool c_and_shell_quote_compat = *c_and_shell_quote_compat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable",
                        "type": "bool",
                        "definition": [
                            "bool printable"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_quotearg_buffer_restyled_2_3_1",
            "header": "",
            "params": [
                "size_t * const buffersize_ref",
                "size_t * const len_ref",
                "size_t * const orig_buffersize_ref",
                "bool * const pending_shell_escape_end_ref",
                "char * const buffer",
                "bool elide_outer_quotes"
            ],
            "definition": "void helper_helper_helper_quotearg_buffer_restyled_2_3_1(size_t * const buffersize_ref, size_t * const len_ref, size_t * const orig_buffersize_ref, bool * const pending_shell_escape_end_ref, char * const buffer, bool elide_outer_quotes)\n{\n  size_t buffersize = *buffersize_ref;\n  size_t len = *len_ref;\n  size_t orig_buffersize = *orig_buffersize_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  if (elide_outer_quotes)\n  {\n    goto force_outer_quoting_style;\n  }\n  if (buffersize && (!orig_buffersize))\n  {\n    orig_buffersize = buffersize;\n    buffersize = 0;\n  }\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = '\\'';\n    }\n    len += 1;\n  }\n  while (0);\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = '\\\\';\n    }\n    len += 1;\n  }\n  while (0);\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = '\\'';\n    }\n    len += 1;\n  }\n  while (0);\n  pending_shell_escape_end = 0;\n  *buffersize_ref = buffersize;\n  *len_ref = len;\n  *orig_buffersize_ref = orig_buffersize;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize = *buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t orig_buffersize = *orig_buffersize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_quotearg_buffer_restyled_2_4_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const len_ref",
                "unsigned char * const c_ref",
                "char * const buffer",
                "const char * const arg",
                "int flags",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "size_t argsize"
            ],
            "definition": "void helper_helper_helper_quotearg_buffer_restyled_2_4_1(size_t * const i_ref, size_t * const len_ref, unsigned char * const c_ref, char * const buffer, const char * const arg, int flags, bool elide_outer_quotes, size_t buffersize, size_t argsize)\n{\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  unsigned char c = *c_ref;\n  if (((flags & QA_SPLIT_TRIGRAPHS) && ((i + 2) < argsize)) && (arg[i + 1] == '?'))\n  {\n    helper_helper_helper_helper_quotearg_buffer_restyled_2_4_1_1(&i, &len, &c, buffer, arg, elide_outer_quotes, buffersize);\n  }\n  break;\n  *i_ref = i;\n  *len_ref = len;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_quotearg_buffer_restyled_2_4_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_quotearg_buffer_restyled_2_5_1",
            "header": "",
            "params": [
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "unsigned char * const c_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "size_t argsize",
                "size_t i"
            ],
            "definition": "void helper_helper_helper_quotearg_buffer_restyled_2_5_1(size_t * const len_ref, bool * const pending_shell_escape_end_ref, unsigned char * const c_ref, bool * const escaping_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, bool elide_outer_quotes, size_t buffersize, size_t argsize, size_t i)\n{\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c = *c_ref;\n  bool escaping = *escaping_ref;\n  do\n  {\n    helper_helper_helper_helper_quotearg_buffer_restyled_2_5_1_1(&len, &pending_shell_escape_end, &escaping, buffer, quoting_style, elide_outer_quotes, buffersize);\n  }\n  while (0);\n  if ((((quoting_style != shell_always_quoting_style) && ((i + 1) < argsize)) && ('0' <= arg[i + 1])) && (arg[i + 1] <= '9'))\n  {\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '0';\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '0';\n      }\n      len += 1;\n    }\n    while (0);\n  }\n  c = '0';\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_ref = c;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_quotearg_buffer_restyled_2_5_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_quotearg_buffer_restyled_2_6_1",
            "header": "",
            "params": [
                "size_t * const argsize_ref",
                "size_t * const m_ref",
                "bool * const printable_ref",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes",
                "size_t i"
            ],
            "definition": "void helper_helper_helper_quotearg_buffer_restyled_2_6_1(size_t * const argsize_ref, size_t * const m_ref, bool * const printable_ref, const char * const arg, enum quoting_style quoting_style, bool elide_outer_quotes, size_t i)\n{\n  size_t argsize = *argsize_ref;\n  size_t m = *m_ref;\n  bool printable = *printable_ref;\n  mbstate_t mbstate;\n  mbszero(&mbstate);\n  m = 0;\n  printable = 1;\n  if (argsize == ((size_t) (-1)))\n  {\n    argsize = strlen(arg);\n  }\n  for (;;)\n  {\n    helper_helper_helper_helper_quotearg_buffer_restyled_2_6_1_1(&m, &printable, arg, quoting_style, elide_outer_quotes, i, argsize, mbstate);\n  }\n\n  *argsize_ref = argsize;\n  *m_ref = m;\n  *printable_ref = printable;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_quotearg_buffer_restyled_2_6_1_1",
                "mbszero",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argsize_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const printable_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize = *argsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m = *m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable",
                        "type": "bool",
                        "definition": [
                            "bool printable = *printable_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mbstate",
                        "type": "mbstate_t",
                        "definition": [
                            "mbstate_t mbstate"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_quotearg_buffer_restyled_2_6_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "unsigned char * const c_ref",
                "bool * const is_right_quote_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool backslash_escapes",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "size_t m",
                "bool printable"
            ],
            "definition": "void helper_helper_helper_quotearg_buffer_restyled_2_6_2(size_t * const i_ref, size_t * const len_ref, bool * const pending_shell_escape_end_ref, unsigned char * const c_ref, bool * const is_right_quote_ref, bool * const escaping_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, bool backslash_escapes, bool elide_outer_quotes, size_t buffersize, size_t m, bool printable)\n{\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c = *c_ref;\n  bool is_right_quote = *is_right_quote_ref;\n  bool escaping = *escaping_ref;\n  size_t ilim = i + m;\n  for (;;)\n  {\n    helper_helper_helper_helper_quotearg_buffer_restyled_2_6_2_1(&i, &len, &pending_shell_escape_end, &c, &is_right_quote, &escaping, buffer, arg, quoting_style, backslash_escapes, elide_outer_quotes, buffersize, printable, ilim);\n  }\n\n  goto store_c;\n  *i_ref = i;\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_ref = c;\n  *is_right_quote_ref = is_right_quote;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_quotearg_buffer_restyled_2_6_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable",
                        "type": "bool",
                        "definition": [
                            "bool printable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote",
                        "type": "bool",
                        "definition": [
                            "bool is_right_quote = *is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ilim",
                        "type": "size_t",
                        "definition": [
                            "size_t ilim = i + m"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_quotearg_buffer_restyled_2_4_1_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const len_ref",
                "unsigned char * const c_ref",
                "char * const buffer",
                "const char * const arg",
                "bool elide_outer_quotes",
                "size_t buffersize"
            ],
            "definition": "void helper_helper_helper_helper_quotearg_buffer_restyled_2_4_1_1(size_t * const i_ref, size_t * const len_ref, unsigned char * const c_ref, char * const buffer, const char * const arg, bool elide_outer_quotes, size_t buffersize)\n{\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  unsigned char c = *c_ref;\n  switch (arg[i + 2])\n  {\n    case '!':\n\n    case '\\'':\n\n    case '(':\n\n    case ')':\n\n    case '-':\n\n    case '/':\n\n    case '<':\n\n    case '=':\n\n    case '>':\n    {\n      if (elide_outer_quotes)\n      {\n        goto force_outer_quoting_style;\n      }\n      c = arg[i + 2];\n      i += 2;\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '?';\n        }\n        len += 1;\n      }\n      while (0);\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\"';\n        }\n        len += 1;\n      }\n      while (0);\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\"';\n        }\n        len += 1;\n      }\n      while (0);\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '?';\n        }\n        len += 1;\n      }\n      while (0);\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  *i_ref = i;\n  *len_ref = len;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_quotearg_buffer_restyled_2_5_1_1",
            "header": "",
            "params": [
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes",
                "size_t buffersize"
            ],
            "definition": "void helper_helper_helper_helper_quotearg_buffer_restyled_2_5_1_1(size_t * const len_ref, bool * const pending_shell_escape_end_ref, bool * const escaping_ref, char * const buffer, enum quoting_style quoting_style, bool elide_outer_quotes, size_t buffersize)\n{\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  bool escaping = *escaping_ref;\n  if (elide_outer_quotes)\n  {\n    goto force_outer_quoting_style;\n  }\n  escaping = 1;\n  if ((quoting_style == shell_always_quoting_style) && (!pending_shell_escape_end))\n  {\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '\\'';\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '$';\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '\\'';\n      }\n      len += 1;\n    }\n    while (0);\n    pending_shell_escape_end = 1;\n  }\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = '\\\\';\n    }\n    len += 1;\n  }\n  while (0);\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_quotearg_buffer_restyled_2_6_1_1",
            "header": "",
            "params": [
                "size_t * const m_ref",
                "bool * const printable_ref",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool elide_outer_quotes",
                "size_t i",
                "size_t argsize",
                "mbstate_t mbstate"
            ],
            "definition": "void helper_helper_helper_helper_quotearg_buffer_restyled_2_6_1_1(size_t * const m_ref, bool * const printable_ref, const char * const arg, enum quoting_style quoting_style, bool elide_outer_quotes, size_t i, size_t argsize, mbstate_t mbstate)\n{\n  size_t m = *m_ref;\n  bool printable = *printable_ref;\n  char32_t w;\n  size_t bytes = mbrtoc32(&w, &arg[i + m], argsize - (i + m), &mbstate);\n  if (bytes == 0)\n  {\n    break;\n  }\n  else\n    if (bytes == ((size_t) (-1)))\n  {\n    printable = 0;\n    break;\n  }\n  else\n    if (bytes == ((size_t) (-2)))\n  {\n    printable = 0;\n    while (((i + m) < argsize) && arg[i + m])\n    {\n      m += 1;\n    }\n\n    break;\n  }\n  else\n  {\n    if ((('[' == 0x5b) && elide_outer_quotes) && (quoting_style == shell_always_quoting_style))\n    {\n      size_t j;\n      for (j = 1; j < bytes; j += 1)\n      {\n        switch (arg[(i + m) + j])\n        {\n          case '[':\n\n          case '\\\\':\n\n          case '^':\n\n          case '`':\n\n          case '|':\n          {\n            goto force_outer_quoting_style;\n          }\n\n          default:\n          {\n            break;\n          }\n\n        }\n\n      }\n\n    }\n    if (!c32isprint(w))\n    {\n      printable = 0;\n    }\n    m += bytes;\n  }\n  break;\n  *m_ref = m;\n  *printable_ref = printable;\n}\n\n",
            "calle": [
                "c32isprint",
                "mbrtoc32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const printable_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argsize",
                        "type": "size_t",
                        "definition": [
                            "size_t argsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mbstate",
                        "type": "mbstate_t",
                        "definition": [
                            "mbstate_t mbstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m = *m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable",
                        "type": "bool",
                        "definition": [
                            "bool printable = *printable_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "char32_t",
                        "definition": [
                            "char32_t w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes = mbrtoc32(&w, &arg[i + m], argsize - (i + m), &mbstate)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_quotearg_buffer_restyled_2_6_2_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const len_ref",
                "bool * const pending_shell_escape_end_ref",
                "unsigned char * const c_ref",
                "bool * const is_right_quote_ref",
                "bool * const escaping_ref",
                "char * const buffer",
                "const char * const arg",
                "enum quoting_style quoting_style",
                "bool backslash_escapes",
                "bool elide_outer_quotes",
                "size_t buffersize",
                "bool printable",
                "size_t ilim"
            ],
            "definition": "void helper_helper_helper_helper_quotearg_buffer_restyled_2_6_2_1(size_t * const i_ref, size_t * const len_ref, bool * const pending_shell_escape_end_ref, unsigned char * const c_ref, bool * const is_right_quote_ref, bool * const escaping_ref, char * const buffer, const char * const arg, enum quoting_style quoting_style, bool backslash_escapes, bool elide_outer_quotes, size_t buffersize, bool printable, size_t ilim)\n{\n  size_t i = *i_ref;\n  size_t len = *len_ref;\n  bool pending_shell_escape_end = *pending_shell_escape_end_ref;\n  unsigned char c = *c_ref;\n  bool is_right_quote = *is_right_quote_ref;\n  bool escaping = *escaping_ref;\n  if (backslash_escapes && (!printable))\n  {\n    do\n    {\n      if (elide_outer_quotes)\n      {\n        goto force_outer_quoting_style;\n      }\n      escaping = 1;\n      if ((quoting_style == shell_always_quoting_style) && (!pending_shell_escape_end))\n      {\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = '\\'';\n          }\n          len += 1;\n        }\n        while (0);\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = '$';\n          }\n          len += 1;\n        }\n        while (0);\n        do\n        {\n          if (len < buffersize)\n          {\n            buffer[len] = '\\'';\n          }\n          len += 1;\n        }\n        while (0);\n        pending_shell_escape_end = 1;\n      }\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\\\\';\n        }\n        len += 1;\n      }\n      while (0);\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '0' + (c >> 6);\n      }\n      len += 1;\n    }\n    while (0);\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '0' + ((c >> 3) & 7);\n      }\n      len += 1;\n    }\n    while (0);\n    c = '0' + (c & 7);\n  }\n  else\n    if (is_right_quote)\n  {\n    do\n    {\n      if (len < buffersize)\n      {\n        buffer[len] = '\\\\';\n      }\n      len += 1;\n    }\n    while (0);\n    is_right_quote = 0;\n  }\n  if (ilim <= (i + 1))\n  {\n    break;\n  }\n  do\n  {\n    if (pending_shell_escape_end && (!escaping))\n    {\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\\'';\n        }\n        len += 1;\n      }\n      while (0);\n      do\n      {\n        if (len < buffersize)\n        {\n          buffer[len] = '\\'';\n        }\n        len += 1;\n      }\n      while (0);\n      pending_shell_escape_end = 0;\n    }\n  }\n  while (0);\n  do\n  {\n    if (len < buffersize)\n    {\n      buffer[len] = c;\n    }\n    len += 1;\n  }\n  while (0);\n  i += 1;\n  c = arg[i];\n  *i_ref = i;\n  *len_ref = len;\n  *pending_shell_escape_end_ref = pending_shell_escape_end;\n  *c_ref = c;\n  *is_right_quote_ref = is_right_quote;\n  *escaping_ref = escaping;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const escaping_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char * const",
                        "definition": [
                            "char * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "const char * const",
                        "definition": [
                            "const char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoting_style",
                        "type": "enum quoting_style",
                        "definition": [
                            "enum quoting_style quoting_style"
                        ]
                    },
                    {
                        "path": null,
                        "name": "backslash_escapes",
                        "type": "bool",
                        "definition": [
                            "bool backslash_escapes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elide_outer_quotes",
                        "type": "bool",
                        "definition": [
                            "bool elide_outer_quotes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffersize",
                        "type": "size_t",
                        "definition": [
                            "size_t buffersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printable",
                        "type": "bool",
                        "definition": [
                            "bool printable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ilim",
                        "type": "size_t",
                        "definition": [
                            "size_t ilim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_shell_escape_end",
                        "type": "bool",
                        "definition": [
                            "bool pending_shell_escape_end = *pending_shell_escape_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_right_quote",
                        "type": "bool",
                        "definition": [
                            "bool is_right_quote = *is_right_quote_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escaping",
                        "type": "bool",
                        "definition": [
                            "bool escaping = *escaping_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_root_dev_ino",
            "header": "struct dev_ino *get_root_dev_ino(struct dev_ino *root_d_i)",
            "params": [
                "struct dev_ino *root_d_i"
            ],
            "definition": "struct dev_ino *get_root_dev_ino(struct dev_ino *root_d_i)\n{\n  struct stat statbuf;\n  if (lstat(\"/\", &statbuf))\n  {\n    return (void *) 0;\n  }\n  root_d_i->st_ino = statbuf.st_ino;\n  root_d_i->st_dev = statbuf.st_dev;\n  return root_d_i;\n}\n\n",
            "calle": [
                "lstat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct dev_ino",
                        "type": "struct dev_ino *",
                        "definition": [
                            "struct dev_ino *root_d_i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "statbuf",
                        "type": "struct stat",
                        "definition": [
                            "struct stat statbuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "setlocale_null_r",
            "header": "extern int setlocale_null_r(int category, char *buf, size_t bufsize)",
            "params": [
                "int category",
                "char *buf",
                "size_t bufsize"
            ],
            "definition": "int setlocale_null_r(int category, char *buf, size_t bufsize)\n{\n  return setlocale_null_r_unlocked(category, buf, bufsize);\n}\n\n",
            "calle": [
                "setlocale_null_r_unlocked"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "setlocale_null",
            "header": "extern const char *setlocale_null(int category)",
            "params": [
                "int category"
            ],
            "definition": "const char *setlocale_null(int category)\n{\n  return setlocale_null_unlocked(category);\n}\n\n",
            "calle": [
                "setlocale_null_unlocked"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "setlocale_null_r_unlocked",
            "header": "extern int setlocale_null_r_unlocked(int category, char *buf, size_t bufsize)",
            "params": [
                "int category",
                "char *buf",
                "size_t bufsize"
            ],
            "definition": "int setlocale_null_r_unlocked(int category, char *buf, size_t bufsize)\n{\n  const char *result = setlocale_null_unlocked(category);\n  if (result == 0)\n  {\n    if (bufsize > 0)\n    {\n      buf[0] = '\\0';\n    }\n    return EINVAL;\n  }\n  else\n  {\n    size_t length = strlen(result);\n    if (length < bufsize)\n    {\n      memcpy(buf, result, length + 1);\n      return 0;\n    }\n    else\n    {\n      if (bufsize > 0)\n      {\n        memcpy(buf, result, bufsize - 1);\n        buf[bufsize - 1] = '\\0';\n      }\n      return ERANGE;\n    }\n  }\n}\n\n",
            "calle": [
                "memcpy",
                "setlocale_null_unlocked",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "const char *",
                        "definition": [
                            "const char *result = setlocale_null_unlocked(category)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = strlen(result)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "setlocale_null_unlocked",
            "header": "extern const char *setlocale_null_unlocked(int category)",
            "params": [
                "int category"
            ],
            "definition": "const char *setlocale_null_unlocked(int category)\n{\n  const char *result = setlocale(category, 0);\n  return result;\n}\n\n",
            "calle": [
                "setlocale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "category",
                        "type": "int",
                        "definition": [
                            "int category"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "const char *",
                        "definition": [
                            "const char *result = setlocale(category, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "version_etc_arn",
            "header": "extern void version_etc_arn(FILE *stream, const char *command_name, const char *package, const char *version, const char * const *authors, size_t n_authors)",
            "params": [
                "FILE *stream",
                "const char *command_name",
                "const char *package",
                "const char *version",
                "const char * const *authors",
                "size_t n_authors"
            ],
            "definition": "void version_etc_arn(FILE *stream, const char *command_name, const char *package, const char *version, const char * const *authors, size_t n_authors)\n{\n  if (command_name)\n  {\n    fprintf(stream, \"%s (%s) %s\\n\", command_name, package, version);\n  }\n  else\n    fprintf(stream, \"%s %s\\n\", package, version);\n  fprintf(stream, version_etc_copyright, gettext(\"(C)\"), COPYRIGHT_YEAR);\n  fputs_unlocked(\"\\n\", stream);\n  fprintf(stream, gettext(\"License GPLv3+: GNU GPL version 3 or later <%s>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\"), \"https://gnu.org/licenses/gpl.html\");\n  fputs_unlocked(\"\\n\", stream);\n  switch (n_authors)\n  {\n    case 0:\n    {\n      break;\n    }\n\n    case 1:\n    {\n      fprintf(stream, gettext(\"Written by %s.\\n\"), authors[0]);\n      break;\n    }\n\n    case 2:\n    {\n      fprintf(stream, gettext(\"Written by %s and %s.\\n\"), authors[0], authors[1]);\n      break;\n    }\n\n    case 3:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, and %s.\\n\"), authors[0], authors[1], authors[2]);\n      break;\n    }\n\n    case 4:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\nand %s.\\n\"), authors[0], authors[1], authors[2], authors[3]);\n      break;\n    }\n\n    case 5:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4]);\n      break;\n    }\n\n    case 6:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4], authors[5]);\n      break;\n    }\n\n    case 7:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4], authors[5], authors[6]);\n      break;\n    }\n\n    case 8:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4], authors[5], authors[6], authors[7]);\n      break;\n    }\n\n    case 9:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4], authors[5], authors[6], authors[7], authors[8]);\n      break;\n    }\n\n    default:\n    {\n      fprintf(stream, gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\"), authors[0], authors[1], authors[2], authors[3], authors[4], authors[5], authors[6], authors[7], authors[8]);\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "fprintf",
                "fputs_unlocked",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "command_name",
                        "type": "const char *",
                        "definition": [
                            "const char *command_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "package",
                        "type": "const char *",
                        "definition": [
                            "const char *package"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "authors",
                        "type": "const char * const *",
                        "definition": [
                            "const char * const *authors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_authors",
                        "type": "size_t",
                        "definition": [
                            "size_t n_authors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version_etc_copyright",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "version_etc_ar",
            "header": "extern void version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char * const *authors)",
            "params": [
                "FILE *stream",
                "const char *command_name",
                "const char *package",
                "const char *version",
                "const char * const *authors"
            ],
            "definition": "void version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char * const *authors)\n{\n  size_t n_authors;\n  for (n_authors = 0; authors[n_authors]; n_authors += 1)\n  {\n    ;\n  }\n\n  version_etc_arn(stream, command_name, package, version, authors, n_authors);\n}\n\n",
            "calle": [
                "version_etc_arn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "command_name",
                        "type": "const char *",
                        "definition": [
                            "const char *command_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "package",
                        "type": "const char *",
                        "definition": [
                            "const char *package"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "authors",
                        "type": "const char * const *",
                        "definition": [
                            "const char * const *authors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_authors",
                        "type": "size_t",
                        "definition": [
                            "size_t n_authors"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "version_etc_va",
            "header": "extern void version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, va_list authors)",
            "params": [
                "FILE *stream",
                "const char *command_name",
                "const char *package",
                "const char *version",
                "va_list authors"
            ],
            "definition": "void version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, va_list authors)\n{\n  size_t n_authors;\n  const char *authtab[10];\n  for (n_authors = 0; (n_authors < 10) && ((authtab[n_authors] = __builtin_va_arg(authors)) != 0); n_authors += 1)\n  {\n    ;\n  }\n\n  version_etc_arn(stream, command_name, package, version, authtab, n_authors);\n}\n\n",
            "calle": [
                "__builtin_va_arg",
                "version_etc_arn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "command_name",
                        "type": "const char *",
                        "definition": [
                            "const char *command_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "package",
                        "type": "const char *",
                        "definition": [
                            "const char *package"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "authors",
                        "type": "va_list",
                        "definition": [
                            "va_list authors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_authors",
                        "type": "size_t",
                        "definition": [
                            "size_t n_authors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "authtab",
                        "type": "const char *[10]",
                        "definition": [
                            "const char *authtab[10]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "version_etc",
            "header": "extern void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)",
            "params": [
                "FILE *stream",
                "const char *command_name",
                "const char *package",
                "const char *version",
                "..."
            ],
            "definition": "void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)\n{\n  va_list authors;\n  __builtin_va_start(authors);\n  version_etc_va(stream, command_name, package, version, authors);\n  ;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "version_etc_va"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "command_name",
                        "type": "const char *",
                        "definition": [
                            "const char *command_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "package",
                        "type": "const char *",
                        "definition": [
                            "const char *package"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "authors",
                        "type": "va_list",
                        "definition": [
                            "va_list authors"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_bug_reporting_address",
            "header": "extern void emit_bug_reporting_address(void)",
            "params": [
                "void"
            ],
            "definition": "void emit_bug_reporting_address(void)\n{\n  fputs_unlocked(\"\\n\", stdout);\n  printf(gettext(\"Report bugs to: %s\\n\"), \"bug-coreutils@gnu.org\");\n  printf(gettext(\"%s home page: <%s>\\n\"), \"GNU coreutils\", \"https://www.gnu.org/software/coreutils/\");\n  printf(gettext(\"General help using GNU software: <%s>\\n\"), \"https://www.gnu.org/gethelp/\");\n}\n\n",
            "calle": [
                "fputs_unlocked",
                "gettext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xalloc_die",
            "header": "_Noreturn void xalloc_die(void)",
            "params": [
                "void"
            ],
            "definition": "void xalloc_die(void)\n{\n  error(exit_failure, 0, \"%s\", gettext(\"memory exhausted\"));\n  abort();\n}\n\n",
            "calle": [
                "abort",
                "error",
                "gettext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_failure",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xgetcwd",
            "header": "extern char *xgetcwd(void)",
            "params": [
                "void"
            ],
            "definition": "char *xgetcwd(void)\n{\n  char *cwd = getcwd(0, 0);\n  if ((!cwd) && (errno == ENOMEM))\n  {\n    xalloc_die();\n  }\n  return cwd;\n}\n\n",
            "calle": [
                "getcwd",
                "xalloc_die"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "char *",
                        "definition": [
                            "char *cwd = getcwd(0, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xmalloc",
            "header": "void *xmalloc(size_t s)",
            "params": [
                "size_t s"
            ],
            "definition": "void *xmalloc(size_t s)\n{\n  return check_nonnull(malloc(s));\n}\n\n",
            "calle": [
                "check_nonnull",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ximalloc",
            "header": "void *ximalloc(idx_t s)",
            "params": [
                "idx_t s"
            ],
            "definition": "void *ximalloc(idx_t s)\n{\n  return check_nonnull(imalloc(s));\n}\n\n",
            "calle": [
                "check_nonnull",
                "imalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xinmalloc",
            "header": "void *xinmalloc(idx_t n, idx_t s)",
            "params": [
                "idx_t n",
                "idx_t s"
            ],
            "definition": "void *xinmalloc(idx_t n, idx_t s)\n{\n  return xireallocarray(0, n, s);\n}\n\n",
            "calle": [
                "xireallocarray"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xzalloc",
            "header": "void *xzalloc(size_t s)",
            "params": [
                "size_t s"
            ],
            "definition": "void *xzalloc(size_t s)\n{\n  return xcalloc(s, 1);\n}\n\n",
            "calle": [
                "xcalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xizalloc",
            "header": "void *xizalloc(idx_t s)",
            "params": [
                "idx_t s"
            ],
            "definition": "void *xizalloc(idx_t s)\n{\n  return xicalloc(s, 1);\n}\n\n",
            "calle": [
                "xicalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xcalloc",
            "header": "void *xcalloc(size_t n, size_t s)",
            "params": [
                "size_t n",
                "size_t s"
            ],
            "definition": "void *xcalloc(size_t n, size_t s)\n{\n  return check_nonnull(calloc(n, s));\n}\n\n",
            "calle": [
                "calloc",
                "check_nonnull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xicalloc",
            "header": "void *xicalloc(idx_t n, idx_t s)",
            "params": [
                "idx_t n",
                "idx_t s"
            ],
            "definition": "void *xicalloc(idx_t n, idx_t s)\n{\n  return check_nonnull(icalloc(n, s));\n}\n\n",
            "calle": [
                "check_nonnull",
                "icalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xrealloc",
            "header": "void *xrealloc(void *p, size_t s)",
            "params": [
                "void *p",
                "size_t s"
            ],
            "definition": "void *xrealloc(void *p, size_t s)\n{\n  void *r = realloc(p, s);\n  if ((!r) && ((!p) || s))\n  {\n    xalloc_die();\n  }\n  return r;\n}\n\n",
            "calle": [
                "realloc",
                "xalloc_die"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "void *",
                        "definition": [
                            "void *r = realloc(p, s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xirealloc",
            "header": "void *xirealloc(void *p, idx_t s)",
            "params": [
                "void *p",
                "idx_t s"
            ],
            "definition": "void *xirealloc(void *p, idx_t s)\n{\n  return check_nonnull(irealloc(p, s));\n}\n\n",
            "calle": [
                "check_nonnull",
                "irealloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xreallocarray",
            "header": "void *xreallocarray(void *p, size_t n, size_t s)",
            "params": [
                "void *p",
                "size_t n",
                "size_t s"
            ],
            "definition": "void *xreallocarray(void *p, size_t n, size_t s)\n{\n  void *r = reallocarray(p, n, s);\n  if ((!r) && ((!p) || (n && s)))\n  {\n    xalloc_die();\n  }\n  return r;\n}\n\n",
            "calle": [
                "reallocarray",
                "xalloc_die"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "void *",
                        "definition": [
                            "void *r = reallocarray(p, n, s)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xireallocarray",
            "header": "void *xireallocarray(void *p, idx_t n, idx_t s)",
            "params": [
                "void *p",
                "idx_t n",
                "idx_t s"
            ],
            "definition": "void *xireallocarray(void *p, idx_t n, idx_t s)\n{\n  return check_nonnull(ireallocarray(p, n, s));\n}\n\n",
            "calle": [
                "check_nonnull",
                "ireallocarray"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "x2realloc",
            "header": "void *x2realloc(void *p, size_t *ps)",
            "params": [
                "void *p",
                "size_t *ps"
            ],
            "definition": "void *x2realloc(void *p, size_t *ps)\n{\n  return x2nrealloc(p, ps, 1);\n}\n\n",
            "calle": [
                "x2nrealloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ps",
                        "type": "size_t *",
                        "definition": [
                            "size_t *ps"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "x2nrealloc",
            "header": "void *x2nrealloc(void *p, size_t *pn, size_t s)",
            "params": [
                "void *p",
                "size_t *pn",
                "size_t s"
            ],
            "definition": "void *x2nrealloc(void *p, size_t *pn, size_t s)\n{\n  unsigned int p_idx = 0;\n  size_t n = *pn;\n  if (!(&p[p_idx]))\n  {\n    if (!n)\n    {\n      enum \n      {\n        DEFAULT_MXFAST = (64 * (sizeof(size_t))) / 4\n      };\n      n = DEFAULT_MXFAST / s;\n      n += !n;\n    }\n  }\n  else\n  {\n    if ((bool) __builtin_add_overflow(n, (n >> 1) + 1, &n))\n    {\n      xalloc_die();\n    }\n  }\n  p_idx = xreallocarray(p_idx, n, s);\n  *pn = n;\n  return p;\n}\n\n",
            "calle": [
                "__builtin_add_overflow",
                "xalloc_die",
                "xreallocarray"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Enum'>",
                        "definition": "enum \n{\n  DEFAULT_MXFAST = (64 * (sizeof(size_t))) / 4\n}",
                        "name": null,
                        "names": []
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pn",
                        "type": "size_t *",
                        "definition": [
                            "size_t *pn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = *pn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xpalloc",
            "header": "void *xpalloc(void *pa, idx_t *pn, idx_t n_incr_min, ptrdiff_t n_max, idx_t s)",
            "params": [
                "void *pa",
                "idx_t *pn",
                "idx_t n_incr_min",
                "ptrdiff_t n_max",
                "idx_t s"
            ],
            "definition": "void *xpalloc(void *pa, idx_t *pn, idx_t n_incr_min, ptrdiff_t n_max, idx_t s)\n{\n  unsigned int pa_idx = 0;\n  idx_t n0 = *pn;\n  enum \n  {\n    DEFAULT_MXFAST = (64 * (sizeof(size_t))) / 4\n  };\n  idx_t n;\n  if ((bool) __builtin_add_overflow(n0, n0 >> 1, &n))\n  {\n    n = PTRDIFF_MAX;\n  }\n  if ((0 <= n_max) && (n_max < n))\n  {\n    n = n_max;\n  }\n  idx_t nbytes;\n  idx_t adjusted_nbytes = ((bool) __builtin_mul_overflow(n, s, &nbytes)) ? ((PTRDIFF_MAX < SIZE_MAX) ? (PTRDIFF_MAX) : (SIZE_MAX)) : ((nbytes < DEFAULT_MXFAST) ? (DEFAULT_MXFAST) : (0));\n  if (adjusted_nbytes)\n  {\n    n = adjusted_nbytes / s;\n    nbytes = adjusted_nbytes - (adjusted_nbytes % s);\n  }\n  if (!(&pa[pa_idx]))\n  {\n    *pn = 0;\n  }\n  if (((n - n0) < n_incr_min) && ((((bool) __builtin_add_overflow(n0, n_incr_min, &n)) || ((0 <= n_max) && (n_max < n))) || ((bool) __builtin_mul_overflow(n, s, &nbytes))))\n  {\n    xalloc_die();\n  }\n  pa_idx = xrealloc(pa_idx, nbytes);\n  *pn = n;\n  return pa;\n}\n\n",
            "calle": [
                "__builtin_add_overflow",
                "__builtin_mul_overflow",
                "xalloc_die",
                "xrealloc"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Enum'>",
                        "definition": "enum \n{\n  DEFAULT_MXFAST = (64 * (sizeof(size_t))) / 4\n}",
                        "name": null,
                        "names": []
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pa",
                        "type": "void *",
                        "definition": [
                            "void *pa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pn",
                        "type": "idx_t *",
                        "definition": [
                            "idx_t *pn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_incr_min",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n_incr_min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_max",
                        "type": "ptrdiff_t",
                        "definition": [
                            "ptrdiff_t n_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pa_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pa_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n0",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n0 = *pn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "idx_t",
                        "definition": [
                            "idx_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes",
                        "type": "idx_t",
                        "definition": [
                            "idx_t nbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adjusted_nbytes",
                        "type": "idx_t",
                        "definition": [
                            "idx_t adjusted_nbytes = ((bool) __builtin_mul_overflow(n, s, &nbytes)) ? ((PTRDIFF_MAX < SIZE_MAX) ? (PTRDIFF_MAX) : (SIZE_MAX)) : ((nbytes < DEFAULT_MXFAST) ? (DEFAULT_MXFAST) : (0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xmemdup",
            "header": "void *xmemdup(const void *p, size_t s)",
            "params": [
                "const void *p",
                "size_t s"
            ],
            "definition": "void *xmemdup(const void *p, size_t s)\n{\n  return memcpy(xmalloc(s), p, s);\n}\n\n",
            "calle": [
                "memcpy",
                "xmalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "const void *",
                        "definition": [
                            "const void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ximemdup",
            "header": "void *ximemdup(const void *p, idx_t s)",
            "params": [
                "const void *p",
                "idx_t s"
            ],
            "definition": "void *ximemdup(const void *p, idx_t s)\n{\n  return memcpy(ximalloc(s), p, s);\n}\n\n",
            "calle": [
                "memcpy",
                "ximalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "const void *",
                        "definition": [
                            "const void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ximemdup0",
            "header": "char *ximemdup0(const void *p, idx_t s)",
            "params": [
                "const void *p",
                "idx_t s"
            ],
            "definition": "char *ximemdup0(const void *p, idx_t s)\n{\n  char *result = ximalloc(s + 1);\n  result[s] = 0;\n  return memcpy(result, p, s);\n}\n\n",
            "calle": [
                "memcpy",
                "ximalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "const void *",
                        "definition": [
                            "const void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "idx_t",
                        "definition": [
                            "idx_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "char *",
                        "definition": [
                            "char *result = ximalloc(s + 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xstrdup",
            "header": "char *xstrdup(const char *str)",
            "params": [
                "const char *string"
            ],
            "definition": "char *xstrdup(const char *string)\n{\n  return xmemdup(string, strlen(string) + 1);\n}\n\n",
            "calle": [
                "strlen",
                "xmemdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "string",
                        "type": "const char *",
                        "definition": [
                            "const char *string"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xnmalloc",
            "header": "void *xnmalloc(size_t n, size_t s)",
            "params": [
                "size_t n",
                "size_t s"
            ],
            "definition": "void *xnmalloc(size_t n, size_t s)\n{\n  return xreallocarray(0, n, s);\n}\n\n",
            "calle": [
                "xreallocarray"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "xcharalloc",
            "header": "char *xcharalloc(size_t n)",
            "params": [
                "size_t n"
            ],
            "definition": "char *xcharalloc(size_t n)\n{\n  return (char *) (((sizeof(char)) == 1) ? (xmalloc(n)) : (xnmalloc(n, sizeof(char))));\n}\n\n",
            "calle": [
                "xmalloc",
                "xnmalloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_nonnull",
            "header": "",
            "params": [
                "void *p"
            ],
            "definition": "static void *check_nonnull(void *p)\n{\n  if (!p)\n  {\n    xalloc_die();\n  }\n  return p;\n}\n\n",
            "calle": [
                "xalloc_die"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef uint32_t ucs4_t",
        "typedef ptrdiff_t idx_t"
    ]
}