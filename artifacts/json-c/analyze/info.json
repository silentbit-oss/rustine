{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void array_list_free_fn(void *data)",
            "name": "array_list_free_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct array_list\n{\n  void **array;\n  size_t length;\n  size_t size;\n  array_list_free_fn *free_fn;\n}",
            "name": "array_list",
            "names": [
                "typedef struct array_list array_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "array",
                        "type": "void **",
                        "definition": [
                            "void **array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "array_list_free_fn *",
                        "definition": [
                            "array_list_free_fn *free_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct printbuf\n{\n  char *buf;\n  int bpos;\n  int size;\n}",
            "name": "printbuf",
            "names": [
                "struct printbuf",
                "typedef struct printbuf printbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpos",
                        "type": "int",
                        "definition": [
                            "int bpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_iter\n{\n  char *key;\n  struct json_object *val;\n  struct lh_entry *entry;\n}",
            "name": "json_object_iter",
            "names": [
                "typedef struct json_object_iter json_object_iter"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "key",
                        "type": "char *",
                        "definition": [
                            "char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object\n{\n  enum json_type o_type;\n  uint32_t _ref_count;\n  json_object_to_json_string_fn *_to_json_string;\n  struct printbuf *_pb;\n  json_object_delete_fn *_user_delete;\n  void *_userdata;\n}",
            "name": "json_object",
            "names": [
                "struct json_object",
                "typedef struct json_object json_object"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "o_type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type o_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_ref_count",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t _ref_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_to_json_string",
                        "type": "json_object_to_json_string_fn *",
                        "definition": [
                            "json_object_to_json_string_fn *_to_json_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *_pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_user_delete",
                        "type": "json_object_delete_fn *",
                        "definition": [
                            "json_object_delete_fn *_user_delete"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_userdata",
                        "type": "void *",
                        "definition": [
                            "void *_userdata"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void json_object_delete_fn(struct json_object *jso, void *userdata)",
            "name": "json_object_delete_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int json_object_to_json_string_fn(struct json_object *jso, struct printbuf *pb, int level, int flags)",
            "name": "json_object_to_json_string_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum json_type\n{\n  json_type_null,\n  json_type_boolean,\n  json_type_double,\n  json_type_int,\n  json_type_object,\n  json_type_array,\n  json_type_string\n} json_type",
            "name": "json_type",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int json_c_shallow_copy_fn(json_object *src, json_object *parent, const char *key, size_t index, json_object **dst)",
            "name": "json_c_shallow_copy_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum json_object_int_type\n{\n  json_object_int_type_int64,\n  json_object_int_type_uint64\n} json_object_int_type",
            "name": "json_object_int_type",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_object\n{\n  struct json_object base;\n  struct lh_table *c_object;\n}",
            "name": "json_object_object",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *c_object"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_array\n{\n  struct json_object base;\n  struct array_list *c_array;\n}",
            "name": "json_object_array",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *c_array"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_boolean\n{\n  struct json_object base;\n  json_bool c_boolean;\n}",
            "name": "json_object_boolean",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_boolean",
                        "type": "json_bool",
                        "definition": [
                            "json_bool c_boolean"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_double\n{\n  struct json_object base;\n  double c_double;\n}",
            "name": "json_object_double",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_double",
                        "type": "double",
                        "definition": [
                            "double c_double"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_int\n{\n  struct json_object base;\n  enum json_object_int_type cint_type;\n  union \n  {\n    int64_t c_int64;\n    uint64_t c_uint64;\n  } cint;\n}",
            "name": "json_object_int",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cint_type",
                        "type": "enum json_object_int_type",
                        "definition": [
                            "enum json_object_int_type cint_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cint",
                        "type": "union \n{\n  int64_t c_int64;\n  uint64_t c_uint64;\n}",
                        "definition": [
                            "union \n{\n  int64_t c_int64;\n  uint64_t c_uint64;\n} cint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_string\n{\n  struct json_object base;\n  ssize_t len;\n  union \n  {\n    char idata[1];\n    char *pdata;\n  } c_string;\n}",
            "name": "json_object_string",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object",
                        "definition": [
                            "struct json_object base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_string",
                        "type": "union \n{\n  char idata[1];\n  char *pdata;\n}",
                        "definition": [
                            "union \n{\n  char idata[1];\n  char *pdata;\n} c_string"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lh_entry\n{\n  const void *k;\n  int k_is_constant;\n  const void *v;\n  struct lh_entry *next;\n  struct lh_entry *prev;\n}",
            "name": "lh_entry",
            "names": [
                "struct lh_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_is_constant",
                        "type": "int",
                        "definition": [
                            "int k_is_constant"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "const void *",
                        "definition": [
                            "const void *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *prev"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void lh_entry_free_fn(struct lh_entry *e)",
            "name": "lh_entry_free_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef unsigned long lh_hash_fn(const void *k)",
            "name": "lh_hash_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int lh_equal_fn(const void *k1, const void *k2)",
            "name": "lh_equal_fn",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lh_table\n{\n  int size;\n  int count;\n  struct lh_entry *head;\n  struct lh_entry *tail;\n  struct lh_entry *table;\n  lh_entry_free_fn *free_fn;\n  lh_hash_fn *hash_fn;\n  lh_equal_fn *equal_fn;\n}",
            "name": "lh_table",
            "names": [
                "typedef struct lh_table lh_table"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *tail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "lh_entry_free_fn *",
                        "definition": [
                            "lh_entry_free_fn *free_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_fn",
                        "type": "lh_hash_fn *",
                        "definition": [
                            "lh_hash_fn *hash_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "equal_fn",
                        "type": "lh_equal_fn *",
                        "definition": [
                            "lh_equal_fn *equal_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_object_iterator\n{\n  const void *opaque_;\n}",
            "name": "json_object_iterator",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque_",
                        "type": "const void *",
                        "definition": [
                            "const void *opaque_"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_patch_error\n{\n  int errno_code;\n  size_t patch_failure_idx;\n  const char *errmsg;\n}",
            "name": "json_patch_error",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "errno_code",
                        "type": "int",
                        "definition": [
                            "int errno_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "patch_failure_idx",
                        "type": "size_t",
                        "definition": [
                            "size_t patch_failure_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errmsg",
                        "type": "const char *",
                        "definition": [
                            "const char *errmsg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum json_tokener_error\n{\n  json_tokener_success,\n  json_tokener_continue,\n  json_tokener_error_depth,\n  json_tokener_error_parse_eof,\n  json_tokener_error_parse_unexpected,\n  json_tokener_error_parse_null,\n  json_tokener_error_parse_boolean,\n  json_tokener_error_parse_number,\n  json_tokener_error_parse_array,\n  json_tokener_error_parse_object_key_name,\n  json_tokener_error_parse_object_key_sep,\n  json_tokener_error_parse_object_value_sep,\n  json_tokener_error_parse_string,\n  json_tokener_error_parse_comment,\n  json_tokener_error_parse_utf8_string,\n  json_tokener_error_size,\n  json_tokener_error_memory\n}",
            "name": "json_tokener_error",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum json_tokener_state\n{\n  json_tokener_state_eatws,\n  json_tokener_state_start,\n  json_tokener_state_finish,\n  json_tokener_state_null,\n  json_tokener_state_comment_start,\n  json_tokener_state_comment,\n  json_tokener_state_comment_eol,\n  json_tokener_state_comment_end,\n  json_tokener_state_string,\n  json_tokener_state_string_escape,\n  json_tokener_state_escape_unicode,\n  json_tokener_state_escape_unicode_need_escape,\n  json_tokener_state_escape_unicode_need_u,\n  json_tokener_state_boolean,\n  json_tokener_state_number,\n  json_tokener_state_array,\n  json_tokener_state_array_add,\n  json_tokener_state_array_sep,\n  json_tokener_state_object_field_start,\n  json_tokener_state_object_field,\n  json_tokener_state_object_field_end,\n  json_tokener_state_object_value,\n  json_tokener_state_object_value_add,\n  json_tokener_state_object_sep,\n  json_tokener_state_array_after_sep,\n  json_tokener_state_object_field_start_after_sep,\n  json_tokener_state_inf\n}",
            "name": "json_tokener_state",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_tokener_srec\n{\n  enum json_tokener_state state;\n  enum json_tokener_state saved_state;\n  struct json_object *obj;\n  struct json_object *current;\n  char *obj_field_name;\n}",
            "name": "json_tokener_srec",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "enum json_tokener_state",
                        "definition": [
                            "enum json_tokener_state state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "saved_state",
                        "type": "enum json_tokener_state",
                        "definition": [
                            "enum json_tokener_state saved_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *current"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_field_name",
                        "type": "char *",
                        "definition": [
                            "char *obj_field_name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_tokener\n{\n  char *str;\n  struct printbuf *pb;\n  int max_depth;\n  int depth;\n  int is_double;\n  int st_pos;\n  int char_offset;\n  enum json_tokener_error err;\n  unsigned int ucs_char;\n  unsigned int high_surrogate;\n  char quote_char;\n  struct json_tokener_srec *stack;\n  int flags;\n}",
            "name": "json_tokener",
            "names": [
                "typedef struct json_tokener json_tokener"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_depth",
                        "type": "int",
                        "definition": [
                            "int max_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_double",
                        "type": "int",
                        "definition": [
                            "int is_double"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st_pos",
                        "type": "int",
                        "definition": [
                            "int st_pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "char_offset",
                        "type": "int",
                        "definition": [
                            "int char_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ucs_char",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ucs_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high_surrogate",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int high_surrogate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_char",
                        "type": "char",
                        "definition": [
                            "char quote_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener_srec",
                        "type": "struct json_tokener_srec *",
                        "definition": [
                            "struct json_tokener_srec *stack"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int json_c_visit_userfunc(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)",
            "name": "json_c_visit_userfunc",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct json_pointer_get_result\n{\n  struct json_object *parent;\n  struct json_object *obj;\n  const char *key_in_parent;\n  uint32_t index_in_parent;\n}",
            "name": "json_pointer_get_result",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_in_parent",
                        "type": "const char *",
                        "definition": [
                            "const char *key_in_parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index_in_parent",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t index_in_parent"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*json_pointer_array_set_cb)(json_object *parent, size_t idx, json_object *value, void *priv)",
            "name": "json_pointer_array_set_cb",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "parent",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "json_object *",
                        "definition": [
                            "json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct myinfo\n{\n  int value;\n}",
            "name": "myinfo",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "_syslog",
            "type": "int",
            "definition": [
                "static int _syslog = 0"
            ]
        },
        {
            "path": null,
            "name": "_debug",
            "type": "int",
            "definition": [
                "static int _debug = 0"
            ]
        },
        {
            "path": null,
            "name": "json_object_free_userdata",
            "type": "json_object_delete_fn",
            "definition": [
                "extern json_object_delete_fn json_object_free_userdata"
            ]
        },
        {
            "path": null,
            "name": "json_object_userdata_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "extern json_object_to_json_string_fn json_object_userdata_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "json_c_shallow_copy_default",
            "type": "json_c_shallow_copy_fn",
            "definition": [
                "extern json_c_shallow_copy_fn json_c_shallow_copy_default"
            ]
        },
        {
            "path": null,
            "name": "json_hex_chars",
            "type": "const char *",
            "definition": [
                "extern const char *json_hex_chars"
            ]
        },
        {
            "path": null,
            "name": "json_number_chars",
            "type": "const char *",
            "definition": [
                "const char *json_number_chars = \"0123456789.+-eE\""
            ]
        },
        {
            "path": null,
            "name": "json_object_object_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_object_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "json_object_boolean_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_boolean_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "json_object_double_to_json_string_default",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_double_to_json_string_default"
            ]
        },
        {
            "path": null,
            "name": "json_object_int_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_int_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "json_object_string_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_string_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "json_object_array_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn json_object_array_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "_json_object_userdata_to_json_string",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "static json_object_to_json_string_fn _json_object_userdata_to_json_string"
            ]
        },
        {
            "path": null,
            "name": "tls_serialization_float_format",
            "type": "char *",
            "definition": [
                "static char *tls_serialization_float_format = 0"
            ]
        },
        {
            "path": null,
            "name": "global_serialization_float_format",
            "type": "char *",
            "definition": [
                "static char *global_serialization_float_format = 0"
            ]
        },
        {
            "path": null,
            "name": "kObjectEndIterValue",
            "type": "const void *",
            "definition": [
                "static const void *kObjectEndIterValue = 0"
            ]
        },
        {
            "path": null,
            "name": "json_null_str",
            "type": "const char []",
            "definition": [
                "static const char json_null_str[] = \"null\""
            ]
        },
        {
            "path": null,
            "name": "json_null_str_len",
            "type": "const int",
            "definition": [
                "static const int json_null_str_len = (sizeof(json_null_str)) - 1"
            ]
        },
        {
            "path": null,
            "name": "json_inf_str",
            "type": "const char []",
            "definition": [
                "static const char json_inf_str[] = \"Infinity\""
            ]
        },
        {
            "path": null,
            "name": "json_inf_str_invert",
            "type": "const char []",
            "definition": [
                "static const char json_inf_str_invert[] = \"iNFINITY\""
            ]
        },
        {
            "path": null,
            "name": "json_inf_str_len",
            "type": "const unsigned int",
            "definition": [
                "static const unsigned int json_inf_str_len = (sizeof(json_inf_str)) - 1"
            ]
        },
        {
            "path": null,
            "name": "json_nan_str",
            "type": "const char []",
            "definition": [
                "static const char json_nan_str[] = \"NaN\""
            ]
        },
        {
            "path": null,
            "name": "json_nan_str_len",
            "type": "const int",
            "definition": [
                "static const int json_nan_str_len = (sizeof(json_nan_str)) - 1"
            ]
        },
        {
            "path": null,
            "name": "json_true_str",
            "type": "const char []",
            "definition": [
                "static const char json_true_str[] = \"true\""
            ]
        },
        {
            "path": null,
            "name": "json_true_str_len",
            "type": "const int",
            "definition": [
                "static const int json_true_str_len = (sizeof(json_true_str)) - 1"
            ]
        },
        {
            "path": null,
            "name": "json_false_str",
            "type": "const char []",
            "definition": [
                "static const char json_false_str[] = \"false\""
            ]
        },
        {
            "path": null,
            "name": "json_false_str_len",
            "type": "const int",
            "definition": [
                "static const int json_false_str_len = (sizeof(json_false_str)) - 1"
            ]
        },
        {
            "path": null,
            "name": "json_tokener_errors",
            "type": "const char *[]",
            "definition": [
                "static const char *json_tokener_errors[] = {\"success\", \"continue\", \"nesting too deep\", \"unexpected end of data\", \"unexpected character\", \"null expected\", \"boolean expected\", \"number expected\", \"array value separator ',' expected\", \"quoted object property name expected\", \"object property name separator ':' expected\", \"object value separator ',' expected\", \"invalid string sequence\", \"expected comment\", \"invalid utf-8 string\", \"buffer size overflow\", \"out of memory\"}"
            ]
        },
        {
            "path": null,
            "name": "utf8_replacement_char",
            "type": "unsigned char [3]",
            "definition": [
                "static unsigned char utf8_replacement_char[3] = {0xEF, 0xBF, 0xBD}"
            ]
        },
        {
            "path": null,
            "name": "_last_err",
            "type": "char [256]",
            "definition": [
                "static char _last_err[256] = \"\""
            ]
        },
        {
            "path": null,
            "name": "json_type_name",
            "type": "const char *[]",
            "definition": [
                "static const char *json_type_name[] = {\"null\", \"boolean\", \"double\", \"int\", \"object\", \"array\", \"string\"}"
            ]
        },
        {
            "path": null,
            "name": "char_hash_fn",
            "type": "lh_hash_fn *",
            "definition": [
                "static lh_hash_fn *char_hash_fn = lh_char_hash"
            ]
        },
        {
            "path": null,
            "name": "errno_list",
            "type": "struct \n{\n  int errno_value;\n  const char *errno_str;\n} []",
            "definition": [
                "static struct \n{\n  int errno_value;\n  const char *errno_str;\n} errno_list[] = {{EPERM, &\"undef_EPERM\"[6]}, {ENOENT, &\"undef_ENOENT\"[6]}, {ESRCH, &\"undef_ESRCH\"[6]}, {EINTR, &\"undef_EINTR\"[6]}, {EIO, &\"undef_EIO\"[6]}, {ENXIO, &\"undef_ENXIO\"[6]}, {E2BIG, &\"undef_E2BIG\"[6]}, {EBADF, &\"undef_EBADF\"[6]}, {ECHILD, &\"undef_ECHILD\"[6]}, {EDEADLK, &\"undef_EDEADLK\"[6]}, {ENOMEM, &\"undef_ENOMEM\"[6]}, {EACCES, &\"undef_EACCES\"[6]}, {EFAULT, &\"undef_EFAULT\"[6]}, {EBUSY, &\"undef_EBUSY\"[6]}, {EEXIST, &\"undef_EEXIST\"[6]}, {EXDEV, &\"undef_EXDEV\"[6]}, {ENODEV, &\"undef_ENODEV\"[6]}, {ENOTDIR, &\"undef_ENOTDIR\"[6]}, {EISDIR, &\"undef_EISDIR\"[6]}, {EINVAL, &\"undef_EINVAL\"[6]}, {ENFILE, &\"undef_ENFILE\"[6]}, {EMFILE, &\"undef_EMFILE\"[6]}, {ENOTTY, &\"undef_ENOTTY\"[6]}, {EFBIG, &\"undef_EFBIG\"[6]}, {ENOSPC, &\"undef_ENOSPC\"[6]}, {ESPIPE, &\"undef_ESPIPE\"[6]}, {EROFS, &\"undef_EROFS\"[6]}, {EMLINK, &\"undef_EMLINK\"[6]}, {EPIPE, &\"undef_EPIPE\"[6]}, {EDOM, &\"undef_EDOM\"[6]}, {ERANGE, &\"undef_ERANGE\"[6]}, {EAGAIN, &\"undef_EAGAIN\"[6]}, {0, (char *) 0}}"
            ]
        },
        {
            "path": null,
            "name": "_json_c_strerror_enable",
            "type": "int",
            "definition": [
                "static int _json_c_strerror_enable = 0"
            ]
        },
        {
            "path": null,
            "name": "errno_buf",
            "type": "char [128]",
            "definition": [
                "static char errno_buf[128] = \"ERRNO=\""
            ]
        },
        {
            "path": null,
            "name": "format_args",
            "type": "struct \n{\n  const char *arg;\n  int flag;\n} []",
            "definition": [
                "static struct \n{\n  const char *arg;\n  int flag;\n} format_args[] = {{\"plain\", 0}, {\"spaced\", 1 << 0}, {\"pretty\", 1 << 1}, {\"pretty_tab\", 1 << 3}}"
            ]
        },
        {
            "path": null,
            "name": "json_str1",
            "type": "const char *",
            "definition": [
                "static const char *json_str1 = \"{    \\\"glossary\\\": {        \\\"title\\\": \\\"example glossary\\\",        \\\"GlossDiv\\\": {            \\\"number\\\": 16446744073709551615,            \\\"title\\\": \\\"S\\\",            \\\"null_obj\\\": null,             \\\"exist\\\": false,            \\\"quantity\\\":20,            \\\"univalent\\\":19.8,            \\\"GlossList\\\": {                \\\"GlossEntry\\\": {                    \\\"ID\\\": \\\"SGML\\\",                    \\\"SortAs\\\": \\\"SGML\\\",                    \\\"GlossTerm\\\": \\\"Standard Generalized Markup Language\\\",                    \\\"Acronym\\\": \\\"SGML\\\",                    \\\"Abbrev\\\": \\\"ISO 8879:1986\\\",                    \\\"GlossDef\\\": {                        \\\"para\\\": \\\"A meta-markup language, used to create markup languages such as DocBook.\\\",                        \\\"GlossSeeAlso\\\": [\\\"GML\\\", \\\"XML\\\"]                    },                    \\\"GlossSee\\\": \\\"markup\\\"                }            }        }    }}\""
            ]
        },
        {
            "path": null,
            "name": "json_str2",
            "type": "const char *",
            "definition": [
                "static const char *json_str2 = \"{\\\"menu\\\": {    \\\"header\\\": \\\"SVG Viewer\\\",    \\\"items\\\": [        {\\\"id\\\": \\\"Open\\\"},        {\\\"id\\\": \\\"OpenNew\\\", \\\"label\\\": \\\"Open New\\\"},        null,        {\\\"id\\\": \\\"ZoomIn\\\", \\\"label\\\": \\\"Zoom In\\\"},        {\\\"id\\\": \\\"ZoomOut\\\", \\\"label\\\": \\\"Zoom Out\\\"},        {\\\"id\\\": \\\"OriginalView\\\", \\\"label\\\": \\\"Original View\\\"},        null,        {\\\"id\\\": \\\"Quality\\\", \\\"another_null\\\": null},        {\\\"id\\\": \\\"Pause\\\"},        {\\\"id\\\": \\\"Mute\\\"},        null,        {\\\"id\\\": \\\"Find\\\", \\\"label\\\": \\\"Find...\\\"},        {\\\"id\\\": \\\"FindAgain\\\", \\\"label\\\": \\\"Find Again\\\"},        {\\\"id\\\": \\\"Copy\\\"},        {\\\"id\\\": \\\"CopyAgain\\\", \\\"label\\\": \\\"Copy Again\\\"},        {\\\"id\\\": \\\"CopySVG\\\", \\\"label\\\": \\\"Copy SVG\\\"},        {\\\"id\\\": \\\"ViewSVG\\\", \\\"label\\\": \\\"View SVG\\\"},        {\\\"id\\\": \\\"ViewSource\\\", \\\"label\\\": \\\"View Source\\\"},        {\\\"id\\\": \\\"SaveAs\\\", \\\"label\\\": \\\"Save As\\\"},        null,        {\\\"id\\\": \\\"Help\\\"},        {\\\"id\\\": \\\"About\\\", \\\"label\\\": \\\"About Adobe CVG Viewer...\\\"}    ]}}\""
            ]
        },
        {
            "path": null,
            "name": "json_str3",
            "type": "const char *",
            "definition": [
                "static const char *json_str3 = \"{\\\"menu\\\": {  \\\"id\\\": \\\"file\\\",  \\\"value\\\": \\\"File\\\",  \\\"popup\\\": {    \\\"menuitem\\\": [      {\\\"value\\\": \\\"New\\\", \\\"onclick\\\": \\\"CreateNewDoc()\\\"},      {\\\"value\\\": \\\"Open\\\", \\\"onclick\\\": \\\"OpenDoc()\\\"},      {\\\"value\\\": \\\"Close\\\", \\\"onclick\\\": \\\"CloseDoc()\\\"}    ]  }}}\""
            ]
        },
        {
            "path": null,
            "name": "my_custom_serializer",
            "type": "json_object_to_json_string_fn",
            "definition": [
                "json_object_to_json_string_fn my_custom_serializer"
            ]
        },
        {
            "path": null,
            "name": "my_shallow_copy",
            "type": "json_c_shallow_copy_fn",
            "definition": [
                "json_c_shallow_copy_fn my_shallow_copy"
            ]
        },
        {
            "path": null,
            "name": "zero_dot_zero",
            "type": "double",
            "definition": [
                "double zero_dot_zero = 0.0"
            ]
        },
        {
            "path": null,
            "name": "clear_serializer",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc clear_serializer"
            ]
        },
        {
            "path": null,
            "name": "incremental_steps",
            "type": "struct incremental_step\n{\n  const char *string_to_parse;\n  int length;\n  int char_offset;\n  enum json_tokener_error expected_error;\n  int reset_tokener;\n  int tok_flags;\n} []",
            "definition": [
                "struct incremental_step\n{\n  const char *string_to_parse;\n  int length;\n  int char_offset;\n  enum json_tokener_error expected_error;\n  int reset_tokener;\n  int tok_flags;\n} incremental_steps[] = {{\"{ \\\"foo\\\": 123 }\", -1, -1, json_tokener_success, 0, 0}, {\"{ \\\"foo\\\": 456 }\", -1, -1, json_tokener_success, 1, 0}, {\"{ \\\"foo\\\": 789 }\", -1, -1, json_tokener_success, 1, 0}, {\"/* hello */{ \\\"foo\\\"\", -1, -1, json_tokener_continue, 0, 0}, {\"/* hello */:/* hello */\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\"bar\\\"/* hello */\", -1, -1, json_tokener_continue, 0, 0}, {\"}/* hello */\", -1, -1, json_tokener_success, 1, 0}, {\"/ hello \", -1, 1, json_tokener_error_parse_comment, 1, 0}, {\"/* hello\\\"foo\\\"\", -1, -1, json_tokener_continue, 1, 0}, {\"/* hello*\\\"foo\\\"\", -1, -1, json_tokener_continue, 1, 0}, {\"// hello\\\"foo\\\"\", -1, -1, json_tokener_continue, 1, 0}, {\"{ \\\"foo\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\": {\\\"bar\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\":13}}\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\\\\", -1, -1, json_tokener_continue, 0, 0}, {\"u\", -1, -1, json_tokener_continue, 0, 0}, {\"d\", -1, -1, json_tokener_continue, 0, 0}, {\"8\", -1, -1, json_tokener_continue, 0, 0}, {\"3\", -1, -1, json_tokener_continue, 0, 0}, {\"4\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\\\", -1, -1, json_tokener_continue, 0, 0}, {\"u\", -1, -1, json_tokener_continue, 0, 0}, {\"d\", -1, -1, json_tokener_continue, 0, 0}, {\"d\", -1, -1, json_tokener_continue, 0, 0}, {\"1\", -1, -1, json_tokener_continue, 0, 0}, {\"e\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\\\u\", -1, -1, json_tokener_continue, 0, 0}, {\"d8\", -1, -1, json_tokener_continue, 0, 0}, {\"34\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\\u\", -1, -1, json_tokener_continue, 0, 0}, {\"dd\", -1, -1, json_tokener_continue, 0, 0}, {\"1e\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\\\ud834\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\\udd1e\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\\\ud834\\\\\", -1, -1, json_tokener_continue, 0, 0}, {\"udd1e\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\\\ud834\\\\u\", -1, -1, json_tokener_continue, 0, 0}, {\"dd1e\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"fff \\\\ud834\\\\ud\", -1, -1, json_tokener_continue, 0, 0}, {\"d1e bar\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"fff \\\\ud834\\\\udd\", -1, -1, json_tokener_continue, 0, 0}, {\"1e bar\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"fff \\\\ud83d\\\\ude\", -1, -1, json_tokener_continue, 0, 0}, {\"00 bar\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\xc3\\xa4\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\xc3\\xa4\\\"\", -1, -1, json_tokener_success, 1, 0x01}, {\"{ \\\"foo\", -1, -1, json_tokener_continue, 1, 0}, {\": \\\"bar\\\"}\", -1, 0, json_tokener_error_parse_unexpected, 1, 0}, {\"{ \\\"foo\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\": {\\\"bar\", -1, -1, json_tokener_continue, 0, 0}, {\"\\\":13}}XXXX\", 10, 6, json_tokener_success, 0, 0}, {\"XXXX\", 4, 0, json_tokener_error_parse_unexpected, 1, 0}, {\"{\\\"x\\\": 123 }\\\"X\\\"\", -1, 11, json_tokener_success, 0, 0}, {\"\\\"Y\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"{\\\"foo\\\":9}{\\\"bar\\\":8}\", -1, 9, json_tokener_error_parse_unexpected, 1, 0x01}, {\"{\\\"foo\\\":9}{\\\"bar\\\":8}\", -1, 9, json_tokener_success, 0, 0x01 | 0x02}, {\"{\\\"b\\\":8}ignored garbage\", -1, 7, json_tokener_success, 1, 0x01 | 0x02}, {\"1\", 1, 1, json_tokener_continue, 0, 0}, {\"2\", 2, 1, json_tokener_success, 0, 0}, {\"12{\", 3, 2, json_tokener_success, 1, 0}, {\"[02]\", -1, 3, json_tokener_error_parse_number, 1, 0x01}, {\"0e+0\", 5, 4, json_tokener_success, 1, 0}, {\"[0e+0]\", -1, -1, json_tokener_success, 1, 0}, {\"0e\", 2, 2, json_tokener_continue, 1, 0}, {\"0e\", 3, 2, json_tokener_success, 1, 0}, {\"0e\", 3, 2, json_tokener_error_parse_eof, 1, 0x01}, {\"[0e]\", -1, -1, json_tokener_success, 1, 0}, {\"[0e]\", -1, 3, json_tokener_error_parse_number, 1, 0x01}, {\"0e+\", 3, 3, json_tokener_continue, 1, 0}, {\"0e+\", 4, 3, json_tokener_success, 1, 0}, {\"0e+\", 4, 3, json_tokener_error_parse_eof, 1, 0x01}, {\"[0e+]\", -1, -1, json_tokener_success, 1, 0}, {\"[0e+]\", -1, 4, json_tokener_error_parse_number, 1, 0x01}, {\"0e-\", 3, 3, json_tokener_continue, 1, 0}, {\"0e-\", 4, 3, json_tokener_success, 1, 0}, {\"0e-\", 4, 3, json_tokener_error_parse_eof, 1, 0x01}, {\"[0e-]\", -1, -1, json_tokener_success, 1, 0}, {\"[0e-]\", -1, 4, json_tokener_error_parse_number, 1, 0x01}, {\"0e+-\", 5, 3, json_tokener_success, 1, 0}, {\"0e+-\", 5, 3, json_tokener_error_parse_number, 1, 0x01}, {\"[0e+-]\", -1, 4, json_tokener_error_parse_number, 1, 0}, {\"false\", 5, 5, json_tokener_continue, 1, 0}, {\"false\", 6, 5, json_tokener_success, 1, 0}, {\"true\", 4, 4, json_tokener_continue, 1, 0}, {\"true\", 5, 4, json_tokener_success, 1, 0}, {\"null\", 4, 4, json_tokener_continue, 1, 0}, {\"null\", 5, 4, json_tokener_success, 1, 0}, {\"Infinity\", 9, 8, json_tokener_success, 1, 0}, {\"infinity\", 9, 8, json_tokener_success, 1, 0}, {\"infinity\", 9, 0, json_tokener_error_parse_unexpected, 1, 0x01}, {\"-infinity\", 10, 9, json_tokener_success, 1, 0}, {\"-infinity\", 10, 1, json_tokener_error_parse_unexpected, 1, 0x01}, {\"inf\", 3, 3, json_tokener_continue, 0, 0}, {\"inity\", 6, 5, json_tokener_success, 1, 0}, {\"-inf\", 4, 4, json_tokener_continue, 0, 0}, {\"inity\", 6, 5, json_tokener_success, 1, 0}, {\"i\", 1, 1, json_tokener_continue, 0, 0}, {\"n\", 1, 1, json_tokener_continue, 0, 0}, {\"f\", 1, 1, json_tokener_continue, 0, 0}, {\"i\", 1, 1, json_tokener_continue, 0, 0}, {\"n\", 1, 1, json_tokener_continue, 0, 0}, {\"i\", 1, 1, json_tokener_continue, 0, 0}, {\"t\", 1, 1, json_tokener_continue, 0, 0}, {\"y\", 1, 1, json_tokener_continue, 0, 0}, {\"\", 1, 0, json_tokener_success, 1, 0}, {\"-\", 1, 1, json_tokener_continue, 0, 0}, {\"inf\", 3, 3, json_tokener_continue, 0, 0}, {\"ini\", 3, 3, json_tokener_continue, 0, 0}, {\"ty\", 3, 2, json_tokener_success, 1, 0}, {\"-\", 1, 1, json_tokener_continue, 0, 0}, {\"i\", 1, 1, json_tokener_continue, 0, 0}, {\"nfini\", 5, 5, json_tokener_continue, 0, 0}, {\"ty\", 3, 2, json_tokener_success, 1, 0}, {\"-i\", 2, 2, json_tokener_continue, 0, 0}, {\"nfinity\", 8, 7, json_tokener_success, 1, 0}, {\"InfinityX\", 10, 8, json_tokener_success, 0, 0}, {\"X\", 1, 0, json_tokener_error_parse_unexpected, 1, 0}, {\"Infinity1234\", 13, 8, json_tokener_success, 0, 0}, {\"1234\", 5, 4, json_tokener_success, 1, 0}, {\"Infinity9999\", 8, 8, json_tokener_continue, 0, 0}, {\"1234\", 5, 0, json_tokener_success, 0, 0}, {\"1234\", 5, 4, json_tokener_success, 1, 0}, {\"[9223372036854775807]\", 22, 21, json_tokener_success, 1, 0}, {\"[9223372036854775808]\", 22, 21, json_tokener_success, 1, 0}, {\"[-9223372036854775808]\", 23, 22, json_tokener_success, 1, 0}, {\"[-9223372036854775809]\", 23, 22, json_tokener_success, 1, 0}, {\"[-9223372036854775809]\", 23, 21, json_tokener_error_parse_number, 1, 0x01}, {\"[18446744073709551615]\", 23, 22, json_tokener_success, 1, 0}, {\"[18446744073709551616]\", 23, 22, json_tokener_success, 1, 0}, {\"[18446744073709551616]\", 23, 21, json_tokener_error_parse_number, 1, 0x01}, {\"18446744073709551616\", 21, 20, json_tokener_success, 1, 0}, {\"18446744073709551616\", 21, 20, json_tokener_error_parse_eof, 1, 0x01}, {\"[9223372036854775808.0]\", 24, 23, json_tokener_success, 1, 0}, {\"[-9223372036854775809.0]\", 25, 24, json_tokener_success, 1, 0}, {\"[-9223372036854775809.0]\", 25, 24, json_tokener_success, 1, 0x01}, {\"[18446744073709551615.0]\", 25, 24, json_tokener_success, 1, 0}, {\"[18446744073709551616.0]\", 25, 24, json_tokener_success, 1, 0}, {\"[18446744073709551616.0]\", 25, 24, json_tokener_success, 1, 0x01}, {\"noodle\", 7, 1, json_tokener_error_parse_null, 1, 0}, {\"naodle\", 7, 2, json_tokener_error_parse_null, 1, 0}, {\"track\", 6, 2, json_tokener_error_parse_boolean, 1, 0}, {\"fail\", 5, 2, json_tokener_error_parse_boolean, 1, 0}, {\"null123\", 8, 4, json_tokener_success, 0, 0}, {&\"null123\"[4], 4, 3, json_tokener_success, 1, 0}, {\"nullx\", 6, 4, json_tokener_success, 0, 0}, {&\"nullx\"[4], 2, 0, json_tokener_error_parse_unexpected, 1, 0}, {\"{\\\"a\\\":1}{\\\"b\\\":2}\", 15, 7, json_tokener_success, 0, 0}, {&\"{\\\"a\\\":1}{\\\"b\\\":2}\"[7], 8, 7, json_tokener_success, 1, 0}, {&\"2015-01-15\"[0], 11, 4, json_tokener_success, 1, 0}, {&\"2015-01-15\"[4], 7, 3, json_tokener_success, 1, 0}, {&\"2015-01-15\"[7], 4, 3, json_tokener_success, 1, 0}, {&\"2015 01 15\"[0], 11, 5, json_tokener_success, 1, 0}, {&\"2015 01 15\"[4], 7, 4, json_tokener_success, 1, 0}, {&\"2015 01 15\"[7], 4, 3, json_tokener_success, 1, 0}, {\"\\\"blue\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\\\\"\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\\\\\\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\b\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\f\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\n\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\r\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\t\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\/\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"/\\\"\", -1, -1, json_tokener_success, 0, 0}, {\"\\\"\\\\a\\\"\", -1, 2, json_tokener_error_parse_string, 1, 0}, {\"\\'foo\\'\", -1, 5, json_tokener_success, 1, 0}, {\"\\'foo\\'\", -1, 0, json_tokener_error_parse_unexpected, 1, 0x01}, {\"[1,2,3]\", -1, -1, json_tokener_success, 0, 0}, {\"[1,2,3}\", -1, 6, json_tokener_error_parse_array, 1, 0}, {\"{\\\"a\\\"}\", -1, 4, json_tokener_error_parse_object_key_sep, 1, 0}, {\"{\\\"a\\\":1]\", -1, 6, json_tokener_error_parse_object_value_sep, 1, 0}, {\"{\\\"a\\\"::1}\", -1, 5, json_tokener_error_parse_unexpected, 1, 0}, {\"{\\\"a\\\":}\", -1, 5, json_tokener_error_parse_unexpected, 1, 0}, {\"{\\\"a\\\":1,\\\"a\\\":2}\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"a\\\":1}\", -1, 3, json_tokener_success, 1, 0}, {\"{\\\"a\\\":1\", -1, -1, json_tokener_continue, 1, 0}, {\"[,]\", -1, 1, json_tokener_error_parse_unexpected, 1, 0}, {\"[,1]\", -1, 1, json_tokener_error_parse_unexpected, 1, 0}, {\"[1,2,3,]\", -1, -1, json_tokener_success, 0, 0}, {\"[1,2,3,]\", -1, 7, json_tokener_error_parse_unexpected, 1, 0x01}, {\"[1,2,,3,]\", -1, 5, json_tokener_error_parse_unexpected, 0, 0}, {\"[1,2,,3,]\", -1, 5, json_tokener_error_parse_unexpected, 0, 0x01}, {\"{\\\"a\\\":1,}\", -1, 7, json_tokener_error_parse_unexpected, 1, 0x01}, {\"\\x22\\x31\\x32\\x33\\x61\\x73\\x63\\x24\\x25\\x26\\x22\", -1, -1, json_tokener_success, 1, 0x10}, {\"\\x22\\x31\\x32\\x33\\x61\\x73\\x63\\x24\\x25\\x26\\x22\", -1, -1, json_tokener_success, 1, 0}, {\"\\x22\\xe4\\xb8\\x96\\xe7\\x95\\x8c\\x22\", -1, -1, json_tokener_success, 1, 0x10}, {\"\\x22\\xe4\\xb8\", -1, 3, json_tokener_error_parse_utf8_string, 0, 0x10}, {\"\\x96\\xe7\\x95\\x8c\\x22\", -1, 0, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x22\\xe4\\xb8\\x96\\xe7\\x95\\x8c\\x22\", -1, -1, json_tokener_success, 1, 0}, {\"\\x22\\xcf\\x80\\xcf\\x86\\x22\", -1, -1, json_tokener_success, 1, 0x10}, {\"\\x22\\xf0\\xa5\\x91\\x95\\x22\", -1, -1, json_tokener_success, 1, 0x10}, {\"\\x22\\xe6\\x9d\\x4e\\x22\", -1, 3, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x22\\xe6\\x9d\\x4e\\x22\", -1, 5, json_tokener_success, 1, 0}, {\"\\x22\\xc0\\xee\\xc5\\xf4\\x22\", -1, 2, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x22\\xc0\\xee\\xc5\\xf4\\x22\", -1, 6, json_tokener_success, 1, 0}, {\"\\x20\\x20\\x22\\xe4\\xb8\\x96\\x22\", -1, -1, json_tokener_success, 1, 0x10}, {\"\\x20\\x20\\x81\\x22\\xe4\\xb8\\x96\\x22\", -1, 2, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x5b\\x20\\x81\\x31\\x5d\", -1, 2, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x49\\x6e\\x66\\x69\\x6e\\x69\\x74\\x79\", 9, 8, json_tokener_success, 1, 0}, {\"\\x49\\x6e\\x66\\x81\\x6e\\x69\\x74\\x79\", -1, 3, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x22\\x5c\\x75\\x64\\x38\\x35\\x35\\x5c\\x75\\x64\\x63\\x35\\x35\\x22\", 15, 14, json_tokener_success, 1, 0x10}, {\"\\x22\\x5c\\x75\\x64\\x38\\x35\\x35\\xc0\\x75\\x64\\x63\\x35\\x35\\x22\", -1, 8, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x22\\x5c\\x75\\x64\\x30\\x30\\x33\\x31\\xc0\\x22\", -1, 9, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x31\\x31\\x81\\x31\\x31\", -1, 2, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\x7b\\x22\\x31\\x81\\x22\\x3a\\x31\\x7d\", -1, 3, json_tokener_error_parse_utf8_string, 1, 0x10}, {\"\\\"0\\x01\\x02\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\\"\", -1, -1, json_tokener_success, 1, 0}, {\"\\\"\\x01\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x02\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x03\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x04\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x05\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x06\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x07\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x08\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x09\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0a\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0b\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0c\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0d\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0e\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x0f\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x10\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x11\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x12\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x13\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x14\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x15\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x16\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x17\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x18\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x19\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1a\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1b\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1c\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1d\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1e\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {\"\\\"\\x1f\\\"\", -1, 1, json_tokener_error_parse_string, 1, 0x01}, {0, -1, -1, json_tokener_success, 0, 0}}"
            ]
        },
        {
            "path": null,
            "name": "freeit_was_called",
            "type": "int",
            "definition": [
                "static int freeit_was_called = 0"
            ]
        },
        {
            "path": null,
            "name": "emit_object",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc emit_object"
            ]
        },
        {
            "path": null,
            "name": "skip_arrays",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc skip_arrays"
            ]
        },
        {
            "path": null,
            "name": "pop_and_stop",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc pop_and_stop"
            ]
        },
        {
            "path": null,
            "name": "err_on_subobj2",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc err_on_subobj2"
            ]
        },
        {
            "path": null,
            "name": "pop_array",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc pop_array"
            ]
        },
        {
            "path": null,
            "name": "stop_array",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc stop_array"
            ]
        },
        {
            "path": null,
            "name": "err_return",
            "type": "json_c_visit_userfunc",
            "definition": [
                "static json_c_visit_userfunc err_return"
            ]
        },
        {
            "path": null,
            "name": "input_json_str",
            "type": "const char *",
            "definition": [
                "static const char *input_json_str = \"{ 'foo': ['bar', 'baz'], '': 0, 'a/b': 1, 'c%d': 2, 'e^f': 3, 'g|h': 4, 'i\\\\\\\\j': 5, 'k\\\\\\\"l': 6, ' ': 7, 'm~n': 8 }\""
            ]
        },
        {
            "path": null,
            "name": "rec_input_json_str",
            "type": "const char *",
            "definition": [
                "static const char *rec_input_json_str = \"{'arr' : [{'obj': [{},{},{'obj1': 0,'obj2': \\\"1\\\"}]}],'obj' : {'obj': {'obj': [{'obj1': 0,'obj2': \\\"1\\\"}]}}}\""
            ]
        },
        {
            "path": null,
            "name": "formatted_output",
            "type": "int",
            "definition": [
                "static int formatted_output = 1 << 0"
            ]
        },
        {
            "path": null,
            "name": "show_output",
            "type": "int",
            "definition": [
                "static int show_output = 1"
            ]
        },
        {
            "path": null,
            "name": "strict_mode",
            "type": "int",
            "definition": [
                "static int strict_mode = 0"
            ]
        },
        {
            "path": null,
            "name": "color",
            "type": "int",
            "definition": [
                "static int color = 0"
            ]
        },
        {
            "path": null,
            "name": "fname",
            "type": "const char *",
            "definition": [
                "static const char *fname = 0"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "array_list_new",
            "header": "extern struct array_list *array_list_new(array_list_free_fn *free_fn)",
            "params": [
                "array_list_free_fn *free_fn"
            ],
            "definition": "struct array_list *array_list_new(array_list_free_fn *free_fn)\n{\n  return array_list_new2(free_fn, 32);\n}\n\n",
            "calle": [
                "array_list_new2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "array_list_free_fn *",
                        "definition": [
                            "array_list_free_fn *free_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_new2",
            "header": "extern struct array_list *array_list_new2(array_list_free_fn *free_fn, int initial_size)",
            "params": [
                "array_list_free_fn *free_fn",
                "int initial_size"
            ],
            "definition": "struct array_list *array_list_new2(array_list_free_fn *free_fn, int initial_size)\n{\n  struct array_list *arr;\n  unsigned int arr_idx = 0;\n  if ((initial_size < 0) || (((size_t) initial_size) >= (18446744073709551615UL / (sizeof(void *)))))\n  {\n    return 0;\n  }\n  arr_idx = (struct array_list *) malloc(sizeof(struct array_list));\n  if (!(&arr[arr_idx]))\n  {\n    return 0;\n  }\n  arr->size = initial_size;\n  arr->length = 0;\n  arr->free_fn = free_fn;\n  if (!(arr->array = (void **) malloc(arr->size * (sizeof(void *)))))\n  {\n    free(arr);\n    return 0;\n  }\n  return arr;\n}\n\n",
            "calle": [
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "array_list_free_fn *",
                        "definition": [
                            "array_list_free_fn *free_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_size",
                        "type": "int",
                        "definition": [
                            "int initial_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arr_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_free",
            "header": "extern void array_list_free(struct array_list *al)",
            "params": [
                "struct array_list *arr"
            ],
            "definition": "extern void array_list_free(struct array_list *arr)\n{\n  size_t i;\n  for (i = 0; i < arr->length; i += 1)\n    if (arr->array[i])\n  {\n    arr->free_fn(arr->array[i]);\n  }\n\n  free(arr->array);\n  free(arr);\n}\n\n",
            "calle": [
                "arr->free_fn",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_get_idx",
            "header": "extern void *array_list_get_idx(struct array_list *al, size_t i)",
            "params": [
                "struct array_list *arr",
                "size_t i"
            ],
            "definition": "void *array_list_get_idx(struct array_list *arr, size_t i)\n{\n  if (i >= arr->length)\n  {\n    return 0;\n  }\n  return arr->array[i];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_insert_idx",
            "header": "extern int array_list_insert_idx(struct array_list *al, size_t i, void *data)",
            "params": [
                "struct array_list *arr",
                "size_t idx",
                "void *data"
            ],
            "definition": "int array_list_insert_idx(struct array_list *arr, size_t idx, void *data)\n{\n  size_t move_amount;\n  if (idx >= arr->length)\n  {\n    return array_list_put_idx(arr, idx, data);\n  }\n  if (arr->length == 18446744073709551615UL)\n  {\n    return -1;\n  }\n  if (array_list_expand_internal(arr, arr->length + 1))\n  {\n    return -1;\n  }\n  move_amount = (arr->length - idx) * (sizeof(void *));\n  memmove((arr->array + idx) + 1, arr->array + idx, move_amount);\n  arr->array[idx] = data;\n  arr->length += 1;\n  return 0;\n}\n\n",
            "calle": [
                "array_list_expand_internal",
                "array_list_put_idx",
                "memmove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "move_amount",
                        "type": "size_t",
                        "definition": [
                            "size_t move_amount"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_put_idx",
            "header": "extern int array_list_put_idx(struct array_list *al, size_t i, void *data)",
            "params": [
                "struct array_list *arr",
                "size_t idx",
                "void *data"
            ],
            "definition": "int array_list_put_idx(struct array_list *arr, size_t idx, void *data)\n{\n  if (idx > (18446744073709551615UL - 1))\n  {\n    return -1;\n  }\n  if (array_list_expand_internal(arr, idx + 1))\n  {\n    return -1;\n  }\n  if ((idx < arr->length) && arr->array[idx])\n  {\n    arr->free_fn(arr->array[idx]);\n  }\n  arr->array[idx] = data;\n  if (idx > arr->length)\n  {\n    memset(arr->array + arr->length, 0, (idx - arr->length) * (sizeof(void *)));\n  }\n  if (arr->length <= idx)\n  {\n    arr->length = idx + 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "arr->free_fn",
                "array_list_expand_internal",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_add",
            "header": "extern int array_list_add(struct array_list *al, void *data)",
            "params": [
                "struct array_list *arr",
                "void *data"
            ],
            "definition": "int array_list_add(struct array_list *arr, void *data)\n{\n  size_t idx = arr->length;\n  if (idx > (18446744073709551615UL - 1))\n  {\n    return -1;\n  }\n  if (array_list_expand_internal(arr, idx + 1))\n  {\n    return -1;\n  }\n  arr->array[idx] = data;\n  arr->length += 1;\n  return 0;\n}\n\n",
            "calle": [
                "array_list_expand_internal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx = arr->length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_length",
            "header": "extern size_t array_list_length(struct array_list *al)",
            "params": [
                "struct array_list *arr"
            ],
            "definition": "size_t array_list_length(struct array_list *arr)\n{\n  return arr->length;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_sort",
            "header": "extern void array_list_sort(struct array_list *arr, int (*compar)(const void *, const void *))",
            "params": [
                "struct array_list *arr",
                "int (*compar)(const void *, const void *)"
            ],
            "definition": "void array_list_sort(struct array_list *arr, int (*compar)(const void *, const void *))\n{\n  qsort(arr->array, arr->length, sizeof(arr->array[0]), compar);\n}\n\n",
            "calle": [
                "qsort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compar",
                        "type": "int (*)(const void *, const void *)",
                        "definition": [
                            "int (*compar)(const void *, const void *)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_bsearch",
            "header": "extern void *array_list_bsearch(const void **key, struct array_list *arr, int (*compar)(const void *, const void *))",
            "params": [
                "const void **key",
                "struct array_list *arr",
                "int (*compar)(const void *, const void *)"
            ],
            "definition": "void *array_list_bsearch(const void **key, struct array_list *arr, int (*compar)(const void *, const void *))\n{\n  return bsearch(key, arr->array, arr->length, sizeof(arr->array[0]), compar);\n}\n\n",
            "calle": [
                "bsearch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "key",
                        "type": "const void **",
                        "definition": [
                            "const void **key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compar",
                        "type": "int (*)(const void *, const void *)",
                        "definition": [
                            "int (*compar)(const void *, const void *)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_del_idx",
            "header": "extern int array_list_del_idx(struct array_list *arr, size_t idx, size_t count)",
            "params": [
                "struct array_list *arr",
                "size_t idx",
                "size_t count"
            ],
            "definition": "int array_list_del_idx(struct array_list *arr, size_t idx, size_t count)\n{\n  size_t i;\n  size_t stop;\n  if (idx > (18446744073709551615UL - count))\n  {\n    return -1;\n  }\n  stop = idx + count;\n  if ((idx >= arr->length) || (stop > arr->length))\n  {\n    return -1;\n  }\n  for (i = idx; i < stop; i += 1)\n  {\n    if (arr->array[i])\n    {\n      arr->free_fn(arr->array[i]);\n    }\n  }\n\n  memmove(arr->array + idx, arr->array + stop, (arr->length - stop) * (sizeof(void *)));\n  arr->length -= count;\n  return 0;\n}\n\n",
            "calle": [
                "arr->free_fn",
                "memmove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stop",
                        "type": "size_t",
                        "definition": [
                            "size_t stop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_shrink",
            "header": "extern int array_list_shrink(struct array_list *arr, size_t empty_slots)",
            "params": [
                "struct array_list *arr",
                "size_t empty_slots"
            ],
            "definition": "int array_list_shrink(struct array_list *arr, size_t empty_slots)\n{\n  void *t;\n  unsigned int t_idx = 0;\n  size_t new_size;\n  if (empty_slots >= ((18446744073709551615UL / (sizeof(void *))) - arr->length))\n  {\n    return -1;\n  }\n  new_size = arr->length + empty_slots;\n  if (new_size == arr->size)\n  {\n    return 0;\n  }\n  if (new_size > arr->size)\n  {\n    return array_list_expand_internal(arr, new_size);\n  }\n  if (new_size == 0)\n  {\n    new_size = 1;\n  }\n  if (!(t_idx = realloc(arr->array, new_size * (sizeof(void *)))))\n  {\n    return -1;\n  }\n  arr->array = (void **) t;\n  arr->size = new_size;\n  return 0;\n}\n\n",
            "calle": [
                "array_list_expand_internal",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty_slots",
                        "type": "size_t",
                        "definition": [
                            "size_t empty_slots"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "void *",
                        "definition": [
                            "void *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int t_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "size_t",
                        "definition": [
                            "size_t new_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "array_list_expand_internal",
            "header": "",
            "params": [
                "struct array_list *arr",
                "size_t max"
            ],
            "definition": "static int array_list_expand_internal(struct array_list *arr, size_t max)\n{\n  void *t;\n  unsigned int t_idx = 0;\n  size_t new_size;\n  if (max < arr->size)\n  {\n    return 0;\n  }\n  if (arr->size >= (18446744073709551615UL / 2))\n  {\n    new_size = max;\n  }\n  else\n  {\n    new_size = arr->size << 1;\n    if (new_size < max)\n    {\n      new_size = max;\n    }\n  }\n  if (new_size > ((~((size_t) 0)) / (sizeof(void *))))\n  {\n    return -1;\n  }\n  if (!(t_idx = realloc(arr->array, new_size * (sizeof(void *)))))\n  {\n    return -1;\n  }\n  arr->array = (void **) t;\n  arr->size = new_size;\n  return 0;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct array_list",
                        "type": "struct array_list *",
                        "definition": [
                            "struct array_list *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "size_t",
                        "definition": [
                            "size_t max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "void *",
                        "definition": [
                            "void *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int t_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "size_t",
                        "definition": [
                            "size_t new_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_set_debug",
            "header": "extern void mc_set_debug(int debug)",
            "params": [
                "int debug"
            ],
            "definition": "void mc_set_debug(int debug)\n{\n  _debug = debug;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "debug",
                        "type": "int",
                        "definition": [
                            "int debug"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_debug",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_get_debug",
            "header": "extern int mc_get_debug(void)",
            "params": [
                "void"
            ],
            "definition": "int mc_get_debug(void)\n{\n  return _debug;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_debug",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_set_syslog",
            "header": "extern void mc_set_syslog(int syslog)",
            "params": [
                "int syslog"
            ],
            "definition": "extern void mc_set_syslog(int syslog)\n{\n  _syslog = syslog;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "syslog",
                        "type": "int",
                        "definition": [
                            "int syslog"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_syslog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_debug",
            "header": "extern void mc_debug(const char *msg, ...)",
            "params": [
                "const char *msg",
                "..."
            ],
            "definition": "void mc_debug(const char *msg, ...)\n{\n  va_list ap;\n  if (_debug)\n  {\n    __builtin_va_start(ap);\n    if (_syslog)\n    {\n      vsyslog(LOG_DEBUG, msg, ap);\n    }\n    else\n      vprintf(msg, ap);\n    ;\n  }\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "vprintf",
                "vsyslog"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_debug",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_syslog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_error",
            "header": "extern void mc_error(const char *msg, ...)",
            "params": [
                "const char *msg",
                "..."
            ],
            "definition": "void mc_error(const char *msg, ...)\n{\n  va_list ap;\n  __builtin_va_start(ap);\n  if (_syslog)\n  {\n    vsyslog(LOG_ERR, msg, ap);\n  }\n  else\n    vfprintf(stderr, msg, ap);\n  ;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "vfprintf",
                "vsyslog"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_syslog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mc_info",
            "header": "extern void mc_info(const char *msg, ...)",
            "params": [
                "const char *msg",
                "..."
            ],
            "definition": "void mc_info(const char *msg, ...)\n{\n  va_list ap;\n  __builtin_va_start(ap);\n  if (_syslog)\n  {\n    vsyslog(LOG_INFO, msg, ap);\n  }\n  else\n    vfprintf(stderr, msg, ap);\n  ;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "vfprintf",
                "vsyslog"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_syslog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_version",
            "header": "extern const char *json_c_version(void)",
            "params": [
                "void"
            ],
            "definition": "const char *json_c_version(void)\n{\n  return \"0.18.99\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_version_num",
            "header": "extern int json_c_version_num(void)",
            "params": [
                "void"
            ],
            "definition": "int json_c_version_num(void)\n{\n  return ((0 << 16) | (18 << 8)) | 99;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get",
            "header": "extern struct json_object *json_object_get(struct json_object *obj)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "struct json_object *json_object_get(struct json_object *jso)\n{\n  if (!jso)\n  {\n    return jso;\n  }\n  assert(jso->_ref_count < UINT32_MAX);\n  jso->_ref_count += 1;\n  return jso;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_put",
            "header": "extern int json_object_put(struct json_object *obj)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "int json_object_put(struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  assert(jso->_ref_count > 0);\n  if ((--jso->_ref_count) > 0)\n  {\n    return 0;\n  }\n  if (jso->_user_delete)\n  {\n    jso->_user_delete(jso, jso->_userdata);\n  }\n  switch (jso->o_type)\n  {\n    case json_type_object:\n    {\n      json_object_object_delete(jso);\n      break;\n    }\n\n    case json_type_array:\n    {\n      json_object_array_delete(jso);\n      break;\n    }\n\n    case json_type_string:\n    {\n      json_object_string_delete(jso);\n      break;\n    }\n\n    default:\n    {\n      json_object_generic_delete(jso);\n      break;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "assert",
                "jso->_user_delete",
                "json_object_array_delete",
                "json_object_generic_delete",
                "json_object_object_delete",
                "json_object_string_delete"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_is_type",
            "header": "extern int json_object_is_type(const struct json_object *obj, enum json_type type)",
            "params": [
                "const struct json_object *jso",
                "enum json_type type"
            ],
            "definition": "int json_object_is_type(const struct json_object *jso, enum json_type type)\n{\n  if (!jso)\n  {\n    return type == json_type_null;\n  }\n  return jso->o_type == type;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_type",
            "header": "extern enum json_type json_object_get_type(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "enum json_type json_object_get_type(const struct json_object *jso)\n{\n  if (!jso)\n  {\n    return json_type_null;\n  }\n  return jso->o_type;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_json_string",
            "header": "extern const char *json_object_to_json_string(struct json_object *obj)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "const char *json_object_to_json_string(struct json_object *jso)\n{\n  return json_object_to_json_string_ext(jso, 1 << 0);\n}\n\n",
            "calle": [
                "json_object_to_json_string_ext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_json_string_ext",
            "header": "extern const char *json_object_to_json_string_ext(struct json_object *obj, int flags)",
            "params": [
                "struct json_object *jso",
                "int flags"
            ],
            "definition": "const char *json_object_to_json_string_ext(struct json_object *jso, int flags)\n{\n  return json_object_to_json_string_length(jso, flags, 0);\n}\n\n",
            "calle": [
                "json_object_to_json_string_length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_json_string_length",
            "header": "extern const char *json_object_to_json_string_length(struct json_object *obj, int flags, size_t *length)",
            "params": [
                "struct json_object *jso",
                "int flags",
                "size_t *length"
            ],
            "definition": "const char *json_object_to_json_string_length(struct json_object *jso, int flags, size_t *length)\n{\n  const char *r = 0;\n  unsigned int r_idx = 0;\n  size_t s = 0;\n  if (!jso)\n  {\n    s = 4;\n    r_idx = \"null\";\n  }\n  else\n    if (jso->_pb || (jso->_pb = printbuf_new()))\n  {\n    printbuf_reset(jso->_pb);\n    if (jso->_to_json_string(jso, jso->_pb, 0, flags) >= 0)\n    {\n      s = (size_t) jso->_pb->bpos;\n      r_idx = jso->_pb->buf;\n    }\n  }\n  if (length)\n  {\n    *length = s;\n  }\n  return r;\n}\n\n",
            "calle": [
                "jso->_to_json_string",
                "printbuf_new",
                "printbuf_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t *",
                        "definition": [
                            "size_t *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "const char *",
                        "definition": [
                            "const char *r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int r_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "size_t",
                        "definition": [
                            "size_t s = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_userdata",
            "header": "extern void *json_object_get_userdata(json_object *jso)",
            "params": [
                "json_object *jso"
            ],
            "definition": "void *json_object_get_userdata(json_object *jso)\n{\n  return (jso) ? (jso->_userdata) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_userdata",
            "header": "extern void json_object_set_userdata(json_object *jso, void *userdata, json_object_delete_fn *user_delete)",
            "params": [
                "json_object *jso",
                "void *userdata",
                "json_object_delete_fn *user_delete"
            ],
            "definition": "void json_object_set_userdata(json_object *jso, void *userdata, json_object_delete_fn *user_delete)\n{\n  assert(jso != 0);\n  if (jso->_user_delete)\n  {\n    jso->_user_delete(jso, jso->_userdata);\n  }\n  jso->_userdata = userdata;\n  jso->_user_delete = user_delete;\n}\n\n",
            "calle": [
                "assert",
                "jso->_user_delete"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "void *",
                        "definition": [
                            "void *userdata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_delete",
                        "type": "json_object_delete_fn *",
                        "definition": [
                            "json_object_delete_fn *user_delete"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_serializer",
            "header": "extern void json_object_set_serializer(json_object *jso, json_object_to_json_string_fn *to_string_func, void *userdata, json_object_delete_fn *user_delete)",
            "params": [
                "json_object *jso",
                "json_object_to_json_string_fn *to_string_func",
                "void *userdata",
                "json_object_delete_fn *user_delete"
            ],
            "definition": "void json_object_set_serializer(json_object *jso, json_object_to_json_string_fn *to_string_func, void *userdata, json_object_delete_fn *user_delete)\n{\n  json_object_set_userdata(jso, userdata, user_delete);\n  if (to_string_func == 0)\n  {\n    switch (jso->o_type)\n    {\n      case json_type_null:\n      {\n        jso->_to_json_string = 0;\n        break;\n      }\n\n      case json_type_boolean:\n      {\n        jso->_to_json_string = &json_object_boolean_to_json_string;\n        break;\n      }\n\n      case json_type_double:\n      {\n        jso->_to_json_string = &json_object_double_to_json_string_default;\n        break;\n      }\n\n      case json_type_int:\n      {\n        jso->_to_json_string = &json_object_int_to_json_string;\n        break;\n      }\n\n      case json_type_object:\n      {\n        jso->_to_json_string = &json_object_object_to_json_string;\n        break;\n      }\n\n      case json_type_array:\n      {\n        jso->_to_json_string = &json_object_array_to_json_string;\n        break;\n      }\n\n      case json_type_string:\n      {\n        jso->_to_json_string = &json_object_string_to_json_string;\n        break;\n      }\n\n    }\n\n    return;\n  }\n  jso->_to_json_string = to_string_func;\n}\n\n",
            "calle": [
                "json_object_array_to_json_string",
                "json_object_boolean_to_json_string",
                "json_object_double_to_json_string_default",
                "json_object_int_to_json_string",
                "json_object_object_to_json_string",
                "json_object_set_userdata",
                "json_object_string_to_json_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_string_func",
                        "type": "json_object_to_json_string_fn *",
                        "definition": [
                            "json_object_to_json_string_fn *to_string_func"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "void *",
                        "definition": [
                            "void *userdata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_delete",
                        "type": "json_object_delete_fn *",
                        "definition": [
                            "json_object_delete_fn *user_delete"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_boolean_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_double_to_json_string_default",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_int_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_object_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_array_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_string_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_object",
            "header": "extern struct json_object *json_object_new_object(void)",
            "params": [
                "void"
            ],
            "definition": "struct json_object *json_object_new_object(void)\n{\n  struct json_object_object *jso = (struct json_object_object *) json_object_new(json_type_object, sizeof(struct json_object_object), &json_object_object_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->c_object = lh_kchar_table_new(16, &json_object_lh_entry_free);\n  if (!jso->c_object)\n  {\n    json_object_generic_delete(&jso->base);\n    errno = ENOMEM;\n    return 0;\n  }\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_generic_delete",
                "json_object_lh_entry_free",
                "json_object_new",
                "json_object_object_to_json_string",
                "lh_kchar_table_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_object",
                        "type": "struct json_object_object *",
                        "definition": [
                            "struct json_object_object *jso = (struct json_object_object *) json_object_new(json_type_object, sizeof(struct json_object_object), &json_object_object_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_object_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_object",
            "header": "extern struct lh_table *json_object_get_object(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "struct lh_table *json_object_get_object(const struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_object:\n    {\n      return JC_OBJECT_C(jso)->c_object;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_OBJECT_C"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_length",
            "header": "extern int json_object_object_length(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "int json_object_object_length(const struct json_object *jso)\n{\n  assert(json_object_get_type(jso) == json_type_object);\n  return lh_table_length(JC_OBJECT_C(jso)->c_object);\n}\n\n",
            "calle": [
                "JC_OBJECT_C",
                "assert",
                "json_object_get_type",
                "lh_table_length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_object_sizeof",
            "header": "extern size_t json_c_object_sizeof(void)",
            "params": [
                "void"
            ],
            "definition": "size_t json_c_object_sizeof(void)\n{\n  return sizeof(struct json_object);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_add",
            "header": "extern int json_object_object_add(struct json_object *obj, const char *key, struct json_object *val)",
            "params": [
                "struct json_object *jso",
                "const char *key",
                "struct json_object *val"
            ],
            "definition": "int json_object_object_add(struct json_object *jso, const char *key, struct json_object *val)\n{\n  return json_object_object_add_ex(jso, key, val, 0);\n}\n\n",
            "calle": [
                "json_object_object_add_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_add_ex",
            "header": "extern int json_object_object_add_ex(struct json_object *obj, const char * const key, struct json_object * const val, const unsigned opts)",
            "params": [
                "struct json_object *jso",
                "const char * const key",
                "struct json_object * const val",
                "const unsigned opts"
            ],
            "definition": "int json_object_object_add_ex(struct json_object *jso, const char * const key, struct json_object * const val, const unsigned opts)\n{\n  struct json_object *existing_value = 0;\n  unsigned int existing_value_idx = 0;\n  struct lh_entry *existing_entry;\n  unsigned int existing_entry_idx = 0;\n  unsigned long hash;\n  assert(json_object_get_type(jso) == json_type_object);\n  hash = lh_get_hash(JC_OBJECT(jso)->c_object, (const void *) key);\n  existing_entry_idx = (opts & (1 << 1)) ? (0) : (lh_table_lookup_entry_w_hash(JC_OBJECT(jso)->c_object, (const void *) key, hash));\n  if (jso == val)\n  {\n    return -1;\n  }\n  if (!(&existing_entry[existing_entry_idx]))\n  {\n    const void * const k = (opts & (1 << 2)) ? ((const void *) key) : (strdup(key));\n    if (k == 0)\n    {\n      return -1;\n    }\n    return lh_table_insert_w_hash(JC_OBJECT(jso)->c_object, k, val, hash, opts);\n  }\n  existing_value_idx = (json_object *) lh_entry_v(existing_entry);\n  if (existing_value)\n  {\n    json_object_put(existing_value);\n  }\n  lh_entry_set_val(existing_entry, val);\n  return 0;\n}\n\n",
            "calle": [
                "JC_OBJECT",
                "assert",
                "json_object_get_type",
                "json_object_put",
                "lh_entry_set_val",
                "lh_entry_v",
                "lh_get_hash",
                "lh_table_insert_w_hash",
                "lh_table_lookup_entry_w_hash",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char * const",
                        "definition": [
                            "const char * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opts",
                        "type": "const unsigned",
                        "definition": [
                            "const unsigned opts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *existing_value = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "existing_value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int existing_value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *existing_entry"
                        ]
                    },
                    {
                        "path": null,
                        "name": "existing_entry_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int existing_entry_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void * const",
                        "definition": [
                            "const void * const k = (opts & (1 << 2)) ? ((const void *) key) : (strdup(key))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_get",
            "header": "extern struct json_object *json_object_object_get(const struct json_object *obj, const char *key)",
            "params": [
                "const struct json_object *jso",
                "const char *key"
            ],
            "definition": "struct json_object *json_object_object_get(const struct json_object *jso, const char *key)\n{\n  struct json_object *result = 0;\n  json_object_object_get_ex(jso, key, &result);\n  return result;\n}\n\n",
            "calle": [
                "json_object_object_get_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *result = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_get_ex",
            "header": "extern int json_object_object_get_ex(const struct json_object *obj, const char *key, struct json_object **value)",
            "params": [
                "const struct json_object *jso",
                "const char *key",
                "struct json_object **value"
            ],
            "definition": "json_bool json_object_object_get_ex(const struct json_object *jso, const char *key, struct json_object **value)\n{\n  if (value != 0)\n  {\n    *value = 0;\n  }\n  if (0 == jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_object:\n    {\n      return lh_table_lookup_ex(JC_OBJECT_C(jso)->c_object, (const void *) key, (void **) value);\n    }\n\n    default:\n    {\n      if (value != 0)\n      {\n        *value = 0;\n      }\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_OBJECT_C",
                "lh_table_lookup_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_del",
            "header": "extern void json_object_object_del(struct json_object *obj, const char *key)",
            "params": [
                "struct json_object *jso",
                "const char *key"
            ],
            "definition": "void json_object_object_del(struct json_object *jso, const char *key)\n{\n  assert(json_object_get_type(jso) == json_type_object);\n  lh_table_delete(JC_OBJECT(jso)->c_object, key);\n}\n\n",
            "calle": [
                "JC_OBJECT",
                "assert",
                "json_object_get_type",
                "lh_table_delete"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_array",
            "header": "extern struct json_object *json_object_new_array(void)",
            "params": [
                "void"
            ],
            "definition": "struct json_object *json_object_new_array(void)\n{\n  return json_object_new_array_ext(32);\n}\n\n",
            "calle": [
                "json_object_new_array_ext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_array_ext",
            "header": "extern struct json_object *json_object_new_array_ext(int initial_size)",
            "params": [
                "int initial_size"
            ],
            "definition": "struct json_object *json_object_new_array_ext(int initial_size)\n{\n  struct json_object_array *jso = (struct json_object_array *) json_object_new(json_type_array, sizeof(struct json_object_array), &json_object_array_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->c_array = array_list_new2(&json_object_array_entry_free, initial_size);\n  if (jso->c_array == 0)\n  {\n    free(jso);\n    return 0;\n  }\n  return &jso->base;\n}\n\n",
            "calle": [
                "array_list_new2",
                "free",
                "json_object_array_entry_free",
                "json_object_array_to_json_string",
                "json_object_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "initial_size",
                        "type": "int",
                        "definition": [
                            "int initial_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_array",
                        "type": "struct json_object_array *",
                        "definition": [
                            "struct json_object_array *jso = (struct json_object_array *) json_object_new(json_type_array, sizeof(struct json_object_array), &json_object_array_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_array_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_array",
            "header": "extern struct array_list *json_object_get_array(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "struct array_list *json_object_get_array(const struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_array:\n    {\n      return JC_ARRAY_C(jso)->c_array;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_ARRAY_C"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_length",
            "header": "extern size_t json_object_array_length(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "size_t json_object_array_length(const struct json_object *jso)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return array_list_length(JC_ARRAY_C(jso)->c_array);\n}\n\n",
            "calle": [
                "JC_ARRAY_C",
                "array_list_length",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_sort",
            "header": "extern void json_object_array_sort(struct json_object *jso, int (*sort_fn)(const void *, const void *))",
            "params": [
                "struct json_object *jso",
                "int (*sort_fn)(const void *, const void *)"
            ],
            "definition": "void json_object_array_sort(struct json_object *jso, int (*sort_fn)(const void *, const void *))\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  array_list_sort(JC_ARRAY(jso)->c_array, sort_fn);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_sort",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sort_fn",
                        "type": "int (*)(const void *, const void *)",
                        "definition": [
                            "int (*sort_fn)(const void *, const void *)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_bsearch",
            "header": "extern struct json_object *json_object_array_bsearch(const struct json_object *key, const struct json_object *jso, int (*sort_fn)(const void *, const void *))",
            "params": [
                "const struct json_object *key",
                "const struct json_object *jso",
                "int (*sort_fn)(const void *, const void *)"
            ],
            "definition": "struct json_object *json_object_array_bsearch(const struct json_object *key, const struct json_object *jso, int (*sort_fn)(const void *, const void *))\n{\n  struct json_object **result;\n  unsigned int result_idx = 0;\n  assert(json_object_get_type(jso) == json_type_array);\n  result_idx = (struct json_object **) array_list_bsearch((const void **) ((void *) (&key)), JC_ARRAY_C(jso)->c_array, sort_fn);\n  if (!(&result[result_idx]))\n  {\n    return 0;\n  }\n  return result[result_idx];\n}\n\n",
            "calle": [
                "JC_ARRAY_C",
                "array_list_bsearch",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sort_fn",
                        "type": "int (*)(const void *, const void *)",
                        "definition": [
                            "int (*sort_fn)(const void *, const void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_add",
            "header": "extern int json_object_array_add(struct json_object *obj, struct json_object *val)",
            "params": [
                "struct json_object *jso",
                "struct json_object *val"
            ],
            "definition": "int json_object_array_add(struct json_object *jso, struct json_object *val)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return array_list_add(JC_ARRAY(jso)->c_array, val);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_add",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_put_idx",
            "header": "extern int json_object_array_put_idx(struct json_object *obj, size_t idx, struct json_object *val)",
            "params": [
                "struct json_object *jso",
                "size_t idx",
                "struct json_object *val"
            ],
            "definition": "int json_object_array_put_idx(struct json_object *jso, size_t idx, struct json_object *val)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return array_list_put_idx(JC_ARRAY(jso)->c_array, idx, val);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_put_idx",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_insert_idx",
            "header": "extern int json_object_array_insert_idx(struct json_object *obj, size_t idx, struct json_object *val)",
            "params": [
                "struct json_object *jso",
                "size_t idx",
                "struct json_object *val"
            ],
            "definition": "int json_object_array_insert_idx(struct json_object *jso, size_t idx, struct json_object *val)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return array_list_insert_idx(JC_ARRAY(jso)->c_array, idx, val);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_insert_idx",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_get_idx",
            "header": "extern struct json_object *json_object_array_get_idx(const struct json_object *obj, size_t idx)",
            "params": [
                "const struct json_object *jso",
                "size_t idx"
            ],
            "definition": "struct json_object *json_object_array_get_idx(const struct json_object *jso, size_t idx)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return (struct json_object *) array_list_get_idx(JC_ARRAY_C(jso)->c_array, idx);\n}\n\n",
            "calle": [
                "JC_ARRAY_C",
                "array_list_get_idx",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_del_idx",
            "header": "extern int json_object_array_del_idx(struct json_object *obj, size_t idx, size_t count)",
            "params": [
                "struct json_object *jso",
                "size_t idx",
                "size_t count"
            ],
            "definition": "int json_object_array_del_idx(struct json_object *jso, size_t idx, size_t count)\n{\n  assert(json_object_get_type(jso) == json_type_array);\n  return array_list_del_idx(JC_ARRAY(jso)->c_array, idx, count);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_del_idx",
                "assert",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_shrink",
            "header": "extern int json_object_array_shrink(struct json_object *jso, int empty_slots)",
            "params": [
                "struct json_object *jso",
                "int empty_slots"
            ],
            "definition": "int json_object_array_shrink(struct json_object *jso, int empty_slots)\n{\n  if (empty_slots < 0)\n  {\n    json_abort(\"json_object_array_shrink called with negative empty_slots\");\n  }\n  return array_list_shrink(JC_ARRAY(jso)->c_array, empty_slots);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_shrink",
                "json_abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty_slots",
                        "type": "int",
                        "definition": [
                            "int empty_slots"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_boolean",
            "header": "extern struct json_object *json_object_new_boolean(json_bool b)",
            "params": [
                "json_bool b"
            ],
            "definition": "struct json_object *json_object_new_boolean(json_bool b)\n{\n  struct json_object_boolean *jso = (struct json_object_boolean *) json_object_new(json_type_boolean, sizeof(struct json_object_boolean), &json_object_boolean_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->c_boolean = b;\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_boolean_to_json_string",
                "json_object_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b",
                        "type": "json_bool",
                        "definition": [
                            "json_bool b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_boolean",
                        "type": "struct json_object_boolean *",
                        "definition": [
                            "struct json_object_boolean *jso = (struct json_object_boolean *) json_object_new(json_type_boolean, sizeof(struct json_object_boolean), &json_object_boolean_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_boolean_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_boolean",
            "header": "extern json_bool json_object_get_boolean(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "json_bool json_object_get_boolean(const struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_boolean:\n    {\n      return JC_BOOL_C(jso)->c_boolean;\n    }\n\n    case json_type_int:\n    {\n      switch (JC_INT_C(jso)->cint_type)\n      {\n        case json_object_int_type_int64:\n        {\n          return JC_INT_C(jso)->cint.c_int64 != 0;\n        }\n\n        case json_object_int_type_uint64:\n        {\n          return JC_INT_C(jso)->cint.c_uint64 != 0;\n        }\n\n        default:\n        {\n          json_abort(\"invalid cint_type\");\n        }\n\n      }\n\n    }\n\n    case json_type_double:\n    {\n      return JC_DOUBLE_C(jso)->c_double != 0;\n    }\n\n    case json_type_string:\n    {\n      return JC_STRING_C(jso)->len != 0;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_BOOL_C",
                "JC_DOUBLE_C",
                "JC_INT_C",
                "JC_STRING_C",
                "json_abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_boolean",
            "header": "extern int json_object_set_boolean(struct json_object *obj, json_bool new_value)",
            "params": [
                "struct json_object *jso",
                "json_bool new_value"
            ],
            "definition": "int json_object_set_boolean(struct json_object *jso, json_bool new_value)\n{\n  if ((!jso) || (jso->o_type != json_type_boolean))\n  {\n    return 0;\n  }\n  JC_BOOL(jso)->c_boolean = new_value;\n  return 1;\n}\n\n",
            "calle": [
                "JC_BOOL"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_value",
                        "type": "json_bool",
                        "definition": [
                            "json_bool new_value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_int",
            "header": "extern struct json_object *json_object_new_int(int32_t i)",
            "params": [
                "int32_t i"
            ],
            "definition": "struct json_object *json_object_new_int(int32_t i)\n{\n  return json_object_new_int64(i);\n}\n\n",
            "calle": [
                "json_object_new_int64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i",
                        "type": "int32_t",
                        "definition": [
                            "int32_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_int64",
            "header": "extern struct json_object *json_object_new_int64(int64_t i)",
            "params": [
                "int64_t i"
            ],
            "definition": "struct json_object *json_object_new_int64(int64_t i)\n{\n  struct json_object_int *jso = (struct json_object_int *) json_object_new(json_type_int, sizeof(struct json_object_int), &json_object_int_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->cint.c_int64 = i;\n  jso->cint_type = json_object_int_type_int64;\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_int_to_json_string",
                "json_object_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i",
                        "type": "int64_t",
                        "definition": [
                            "int64_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "struct json_object_int *",
                        "definition": [
                            "struct json_object_int *jso = (struct json_object_int *) json_object_new(json_type_int, sizeof(struct json_object_int), &json_object_int_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_int_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_uint64",
            "header": "extern struct json_object *json_object_new_uint64(uint64_t i)",
            "params": [
                "uint64_t i"
            ],
            "definition": "struct json_object *json_object_new_uint64(uint64_t i)\n{\n  struct json_object_int *jso = (struct json_object_int *) json_object_new(json_type_int, sizeof(struct json_object_int), &json_object_int_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->cint.c_uint64 = i;\n  jso->cint_type = json_object_int_type_uint64;\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_int_to_json_string",
                "json_object_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "struct json_object_int *",
                        "definition": [
                            "struct json_object_int *jso = (struct json_object_int *) json_object_new(json_type_int, sizeof(struct json_object_int), &json_object_int_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_int_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_int",
            "header": "extern int32_t json_object_get_int(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "int32_t json_object_get_int(const struct json_object *jso)\n{\n  int64_t cint64 = 0;\n  double cdouble;\n  enum json_type o_type;\n  errno = 0;\n  if (!jso)\n  {\n    return 0;\n  }\n  o_type = jso->o_type;\n  if (o_type == json_type_int)\n  {\n    const struct json_object_int *jsoint = JC_INT_C(jso);\n    if (jsoint->cint_type == json_object_int_type_int64)\n    {\n      cint64 = jsoint->cint.c_int64;\n    }\n    else\n    {\n      if (jsoint->cint.c_uint64 >= INT64_MAX)\n      {\n        cint64 = INT64_MAX;\n      }\n      else\n        cint64 = (int64_t) jsoint->cint.c_uint64;\n    }\n  }\n  else\n    if (o_type == json_type_string)\n  {\n    if (json_parse_int64(get_string_component(jso), &cint64) != 0)\n    {\n      return 0;\n    }\n    o_type = json_type_int;\n  }\n  switch (o_type)\n  {\n    case json_type_int:\n    {\n      helper_json_object_get_int_1(cint64);\n    }\n\n    case json_type_double:\n    {\n      helper_json_object_get_int_2(&cdouble, jso);\n    }\n\n    case json_type_boolean:\n    {\n      return JC_BOOL_C(jso)->c_boolean;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_BOOL_C",
                "JC_INT_C",
                "get_string_component",
                "helper_json_object_get_int_1",
                "helper_json_object_get_int_2",
                "json_parse_int64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cint64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t cint64 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdouble",
                        "type": "double",
                        "definition": [
                            "double cdouble"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type o_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "const struct json_object_int *",
                        "definition": [
                            "const struct json_object_int *jsoint = JC_INT_C(jso)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_int",
            "header": "extern int json_object_set_int(struct json_object *obj, int new_value)",
            "params": [
                "struct json_object *jso",
                "int new_value"
            ],
            "definition": "int json_object_set_int(struct json_object *jso, int new_value)\n{\n  return json_object_set_int64(jso, (int64_t) new_value);\n}\n\n",
            "calle": [
                "json_object_set_int64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_value",
                        "type": "int",
                        "definition": [
                            "int new_value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_int_inc",
            "header": "extern int json_object_int_inc(struct json_object *obj, int64_t val)",
            "params": [
                "struct json_object *jso",
                "int64_t val"
            ],
            "definition": "int json_object_int_inc(struct json_object *jso, int64_t val)\n{\n  struct json_object_int *jsoint;\n  unsigned int jsoint_idx = 0;\n  if ((!jso) || (jso->o_type != json_type_int))\n  {\n    return 0;\n  }\n  jsoint_idx = JC_INT(jso);\n  switch (jsoint->cint_type)\n  {\n    case json_object_int_type_int64:\n    {\n      if ((val > 0) && (jsoint->cint.c_int64 > (INT64_MAX - val)))\n      {\n        jsoint->cint.c_uint64 = ((uint64_t) jsoint->cint.c_int64) + ((uint64_t) val);\n        jsoint->cint_type = json_object_int_type_uint64;\n      }\n      else\n        if ((val < 0) && (jsoint->cint.c_int64 < (INT64_MIN - val)))\n      {\n        jsoint->cint.c_int64 = INT64_MIN;\n      }\n      else\n      {\n        jsoint->cint.c_int64 += val;\n      }\n      return 1;\n    }\n\n    case json_object_int_type_uint64:\n    {\n      if ((val > 0) && (jsoint->cint.c_uint64 > (UINT64_MAX - ((uint64_t) val))))\n      {\n        jsoint->cint.c_uint64 = UINT64_MAX;\n      }\n      else\n        if ((val < 0) && (jsoint->cint.c_uint64 < ((uint64_t) (-val))))\n      {\n        jsoint->cint.c_int64 = ((int64_t) jsoint->cint.c_uint64) + val;\n        jsoint->cint_type = json_object_int_type_int64;\n      }\n      else\n        if ((val < 0) && (jsoint->cint.c_uint64 >= ((uint64_t) (-val))))\n      {\n        jsoint->cint.c_uint64 -= (uint64_t) (-val);\n      }\n      else\n      {\n        jsoint->cint.c_uint64 += val;\n      }\n      return 1;\n    }\n\n    default:\n    {\n      json_abort(\"invalid cint_type\");\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_INT",
                "json_abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int64_t",
                        "definition": [
                            "int64_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "struct json_object_int *",
                        "definition": [
                            "struct json_object_int *jsoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jsoint_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jsoint_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_int64",
            "header": "extern int64_t json_object_get_int64(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "int64_t json_object_get_int64(const struct json_object *jso)\n{\n  int64_t cint;\n  errno = 0;\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_int:\n    {\n      helper_json_object_get_int64_1(jso);\n    }\n\n    case json_type_double:\n    {\n      helper_json_object_get_int64_2(jso);\n    }\n\n    case json_type_boolean:\n    {\n      return JC_BOOL_C(jso)->c_boolean;\n    }\n\n    case json_type_string:\n    {\n      if (json_parse_int64(get_string_component(jso), &cint) == 0)\n      {\n        return cint;\n      }\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_BOOL_C",
                "get_string_component",
                "helper_json_object_get_int64_1",
                "helper_json_object_get_int64_2",
                "json_parse_int64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cint",
                        "type": "int64_t",
                        "definition": [
                            "int64_t cint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_uint64",
            "header": "extern uint64_t json_object_get_uint64(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "uint64_t json_object_get_uint64(const struct json_object *jso)\n{\n  uint64_t cuint;\n  errno = 0;\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_int:\n    {\n      helper_json_object_get_uint64_1(jso);\n    }\n\n    case json_type_double:\n    {\n      helper_json_object_get_uint64_2(jso);\n    }\n\n    case json_type_boolean:\n    {\n      return JC_BOOL_C(jso)->c_boolean;\n    }\n\n    case json_type_string:\n    {\n      if (json_parse_uint64(get_string_component(jso), &cuint) == 0)\n      {\n        return cuint;\n      }\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_BOOL_C",
                "get_string_component",
                "helper_json_object_get_uint64_1",
                "helper_json_object_get_uint64_2",
                "json_parse_uint64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cuint",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t cuint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_int64",
            "header": "extern int json_object_set_int64(struct json_object *obj, int64_t new_value)",
            "params": [
                "struct json_object *jso",
                "int64_t new_value"
            ],
            "definition": "int json_object_set_int64(struct json_object *jso, int64_t new_value)\n{\n  if ((!jso) || (jso->o_type != json_type_int))\n  {\n    return 0;\n  }\n  JC_INT(jso)->cint.c_int64 = new_value;\n  JC_INT(jso)->cint_type = json_object_int_type_int64;\n  return 1;\n}\n\n",
            "calle": [
                "JC_INT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_value",
                        "type": "int64_t",
                        "definition": [
                            "int64_t new_value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_uint64",
            "header": "extern int json_object_set_uint64(struct json_object *obj, uint64_t new_value)",
            "params": [
                "struct json_object *jso",
                "uint64_t new_value"
            ],
            "definition": "int json_object_set_uint64(struct json_object *jso, uint64_t new_value)\n{\n  if ((!jso) || (jso->o_type != json_type_int))\n  {\n    return 0;\n  }\n  JC_INT(jso)->cint.c_uint64 = new_value;\n  JC_INT(jso)->cint_type = json_object_int_type_uint64;\n  return 1;\n}\n\n",
            "calle": [
                "JC_INT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_value",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t new_value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_double",
            "header": "extern struct json_object *json_object_new_double(double d)",
            "params": [
                "double d"
            ],
            "definition": "struct json_object *json_object_new_double(double d)\n{\n  struct json_object_double *jso = (struct json_object_double *) json_object_new(json_type_double, sizeof(struct json_object_double), &json_object_double_to_json_string);\n  if (!jso)\n  {\n    return 0;\n  }\n  jso->base._to_json_string = &json_object_double_to_json_string_default;\n  jso->c_double = d;\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_double_to_json_string",
                "json_object_double_to_json_string_default",
                "json_object_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d",
                        "type": "double",
                        "definition": [
                            "double d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_double",
                        "type": "struct json_object_double *",
                        "definition": [
                            "struct json_object_double *jso = (struct json_object_double *) json_object_new(json_type_double, sizeof(struct json_object_double), &json_object_double_to_json_string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_double_to_json_string_default",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_double_s",
            "header": "extern struct json_object *json_object_new_double_s(double d, const char *ds)",
            "params": [
                "double d",
                "const char *ds"
            ],
            "definition": "struct json_object *json_object_new_double_s(double d, const char *ds)\n{\n  char *new_ds;\n  unsigned int new_ds_idx = 0;\n  struct json_object *jso = json_object_new_double(d);\n  if (!jso)\n  {\n    return 0;\n  }\n  new_ds_idx = strdup(ds);\n  if (!(&new_ds[new_ds_idx]))\n  {\n    json_object_generic_delete(jso);\n    errno = ENOMEM;\n    return 0;\n  }\n  json_object_set_serializer(jso, _json_object_userdata_to_json_string, new_ds, json_object_free_userdata);\n  return jso;\n}\n\n",
            "calle": [
                "_json_object_userdata_to_json_string",
                "json_object_free_userdata",
                "json_object_generic_delete",
                "json_object_new_double",
                "json_object_set_serializer",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d",
                        "type": "double",
                        "definition": [
                            "double d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ds",
                        "type": "const char *",
                        "definition": [
                            "const char *ds"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_ds",
                        "type": "char *",
                        "definition": [
                            "char *new_ds"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_ds_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_ds_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso = json_object_new_double(d)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_json_object_userdata_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_object_free_userdata",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_set_serialization_double_format",
            "header": "extern int json_c_set_serialization_double_format(const char *double_format, int global_or_thread)",
            "params": [
                "const char *double_format",
                "int global_or_thread"
            ],
            "definition": "int json_c_set_serialization_double_format(const char *double_format, int global_or_thread)\n{\n  if (global_or_thread == 0)\n  {\n    helper_json_c_set_serialization_double_format_2(double_format);\n  }\n  else\n    if (global_or_thread == 1)\n  {\n    helper_json_c_set_serialization_double_format_1(double_format);\n  }\n  else\n  {\n    _json_c_set_last_err(\"json_c_set_serialization_double_format: invalid global_or_thread value: %d\\n\", global_or_thread);\n    return -1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "helper_json_c_set_serialization_double_format_1",
                "helper_json_c_set_serialization_double_format_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "double_format",
                        "type": "const char *",
                        "definition": [
                            "const char *double_format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "global_or_thread",
                        "type": "int",
                        "definition": [
                            "int global_or_thread"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_double_to_json_string",
            "header": "extern int json_object_double_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "int json_object_double_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  return json_object_double_to_json_string_format(jso, pb, level, flags, (const char *) jso->_userdata);\n}\n\n",
            "calle": [
                "json_object_double_to_json_string_format"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_double",
            "header": "extern double json_object_get_double(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "double json_object_get_double(const struct json_object *jso)\n{\n  double cdouble;\n  char *errPtr = 0;\n  if (!jso)\n  {\n    return 0.0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_double:\n    {\n      return JC_DOUBLE_C(jso)->c_double;\n    }\n\n    case json_type_int:\n    {\n      switch (JC_INT_C(jso)->cint_type)\n      {\n        case json_object_int_type_int64:\n        {\n          return JC_INT_C(jso)->cint.c_int64;\n        }\n\n        case json_object_int_type_uint64:\n        {\n          return JC_INT_C(jso)->cint.c_uint64;\n        }\n\n        default:\n        {\n          json_abort(\"invalid cint_type\");\n        }\n\n      }\n\n    }\n\n    case json_type_boolean:\n    {\n      return JC_BOOL_C(jso)->c_boolean;\n    }\n\n    case json_type_string:\n    {\n      errno = 0;\n      cdouble = strtod(get_string_component(jso), &errPtr);\n      if (errPtr == get_string_component(jso))\n      {\n        errno = EINVAL;\n        return 0.0;\n      }\n      if ((*errPtr) != '\\0')\n      {\n        errno = EINVAL;\n        return 0.0;\n      }\n      if (((HUGE_VAL == cdouble) || ((-HUGE_VAL) == cdouble)) && (ERANGE == errno))\n      {\n        cdouble = 0.0;\n      }\n      return cdouble;\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0.0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_BOOL_C",
                "JC_DOUBLE_C",
                "JC_INT_C",
                "get_string_component",
                "json_abort",
                "strtod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdouble",
                        "type": "double",
                        "definition": [
                            "double cdouble"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errPtr",
                        "type": "char *",
                        "definition": [
                            "char *errPtr = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_double",
            "header": "extern int json_object_set_double(struct json_object *obj, double new_value)",
            "params": [
                "struct json_object *jso",
                "double new_value"
            ],
            "definition": "int json_object_set_double(struct json_object *jso, double new_value)\n{\n  if ((!jso) || (jso->o_type != json_type_double))\n  {\n    return 0;\n  }\n  JC_DOUBLE(jso)->c_double = new_value;\n  if (jso->_to_json_string == (&_json_object_userdata_to_json_string))\n  {\n    json_object_set_serializer(jso, 0, 0, 0);\n  }\n  return 1;\n}\n\n",
            "calle": [
                "JC_DOUBLE",
                "_json_object_userdata_to_json_string",
                "json_object_set_serializer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_value",
                        "type": "double",
                        "definition": [
                            "double new_value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_json_object_userdata_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_string",
            "header": "extern struct json_object *json_object_new_string(const char *s)",
            "params": [
                "const char *s"
            ],
            "definition": "struct json_object *json_object_new_string(const char *s)\n{\n  return _json_object_new_string(s, strlen(s));\n}\n\n",
            "calle": [
                "_json_object_new_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_string_len",
            "header": "extern struct json_object *json_object_new_string_len(const char *s, const int len)",
            "params": [
                "const char *s",
                "const int len"
            ],
            "definition": "struct json_object *json_object_new_string_len(const char *s, const int len)\n{\n  return _json_object_new_string(s, len);\n}\n\n",
            "calle": [
                "_json_object_new_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "const int",
                        "definition": [
                            "const int len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_string",
            "header": "extern const char *json_object_get_string(struct json_object *obj)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "const char *json_object_get_string(struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_string:\n    {\n      return get_string_component(jso);\n    }\n\n    default:\n    {\n      return json_object_to_json_string(jso);\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "get_string_component",
                "json_object_to_json_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_get_string_len",
            "header": "extern int json_object_get_string_len(const struct json_object *obj)",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "int json_object_get_string_len(const struct json_object *jso)\n{\n  if (!jso)\n  {\n    return 0;\n  }\n  switch (jso->o_type)\n  {\n    case json_type_string:\n    {\n      return _json_object_get_string_len(JC_STRING_C(jso));\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_STRING_C",
                "_json_object_get_string_len"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_string",
            "header": "extern int json_object_set_string(json_object *obj, const char *new_value)",
            "params": [
                "json_object *jso",
                "const char *s"
            ],
            "definition": "int json_object_set_string(json_object *jso, const char *s)\n{\n  return _json_object_set_string_len(jso, s, strlen(s));\n}\n\n",
            "calle": [
                "_json_object_set_string_len",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_set_string_len",
            "header": "extern int json_object_set_string_len(json_object *obj, const char *new_value, int len)",
            "params": [
                "json_object *jso",
                "const char *s",
                "int len"
            ],
            "definition": "int json_object_set_string_len(json_object *jso, const char *s, int len)\n{\n  return _json_object_set_string_len(jso, s, len);\n}\n\n",
            "calle": [
                "_json_object_set_string_len"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new_null",
            "header": "extern struct json_object *json_object_new_null(void)",
            "params": [
                "void"
            ],
            "definition": "struct json_object *json_object_new_null(void)\n{\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_equal",
            "header": "extern int json_object_equal(struct json_object *obj1, struct json_object *obj2)",
            "params": [
                "struct json_object *jso1",
                "struct json_object *jso2"
            ],
            "definition": "int json_object_equal(struct json_object *jso1, struct json_object *jso2)\n{\n  if (jso1 == jso2)\n  {\n    return 1;\n  }\n  if ((!jso1) || (!jso2))\n  {\n    return 0;\n  }\n  if (jso1->o_type != jso2->o_type)\n  {\n    return 0;\n  }\n  switch (jso1->o_type)\n  {\n    case json_type_boolean:\n    {\n      return JC_BOOL(jso1)->c_boolean == JC_BOOL(jso2)->c_boolean;\n    }\n\n    case json_type_double:\n    {\n      return JC_DOUBLE(jso1)->c_double == JC_DOUBLE(jso2)->c_double;\n    }\n\n    case json_type_int:\n    {\n      helper_json_object_equal_1(jso1, jso2);\n    }\n\n    case json_type_string:\n    {\n      return (_json_object_get_string_len(JC_STRING(jso1)) == _json_object_get_string_len(JC_STRING(jso2))) && (memcmp(get_string_component(jso1), get_string_component(jso2), _json_object_get_string_len(JC_STRING(jso1))) == 0);\n    }\n\n    case json_type_object:\n    {\n      return json_object_all_values_equal(jso1, jso2);\n    }\n\n    case json_type_array:\n    {\n      return json_array_equal(jso1, jso2);\n    }\n\n    case json_type_null:\n    {\n      return 1;\n    }\n\n  }\n\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "JC_BOOL",
                "JC_DOUBLE",
                "JC_STRING",
                "_json_object_get_string_len",
                "get_string_component",
                "helper_json_object_equal_1",
                "json_array_equal",
                "json_object_all_values_equal",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_deep_copy",
            "header": "extern int json_object_deep_copy(struct json_object *src, struct json_object **dst, json_c_shallow_copy_fn *shallow_copy)",
            "params": [
                "struct json_object *src",
                "struct json_object **dst",
                "json_c_shallow_copy_fn *shallow_copy"
            ],
            "definition": "int json_object_deep_copy(struct json_object *src, struct json_object **dst, json_c_shallow_copy_fn *shallow_copy)\n{\n  unsigned int shallow_copy_idx = 0;\n  int rc;\n  if (((!src) || (!dst)) || (*dst))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  if ((&shallow_copy[shallow_copy_idx]) == 0)\n  {\n    shallow_copy_idx = json_c_shallow_copy_default;\n  }\n  rc = json_object_deep_copy_recursive(src, 0, 0, 4294967295U, dst, shallow_copy);\n  if (rc < 0)\n  {\n    json_object_put(*dst);\n    *dst = 0;\n  }\n  return rc;\n}\n\n",
            "calle": [
                "json_c_shallow_copy_default",
                "json_object_deep_copy_recursive",
                "json_object_put"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy",
                        "type": "json_c_shallow_copy_fn *",
                        "definition": [
                            "json_c_shallow_copy_fn *shallow_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int shallow_copy_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_c_shallow_copy_default",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_head",
            "header": "",
            "params": [
                "const lh_table *t"
            ],
            "definition": "inline static struct lh_entry *lh_table_head(const lh_table *t)\n{\n  return t->head;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "t",
                        "type": "const lh_table *",
                        "definition": [
                            "const lh_table *t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_get_hash",
            "header": "",
            "params": [
                "const struct lh_table *t",
                "const void *k"
            ],
            "definition": "inline static unsigned long lh_get_hash(const struct lh_table *t, const void *k)\n{\n  return t->hash_fn(k);\n}\n\n",
            "calle": [
                "t->hash_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "const struct lh_table *",
                        "definition": [
                            "const struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_k",
            "header": "",
            "params": [
                "const struct lh_entry *e"
            ],
            "definition": "inline static void *lh_entry_k(const struct lh_entry *e)\n{\n  return (void *) ((uintptr_t) ((const void *) e->k));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "const struct lh_entry *",
                        "definition": [
                            "const struct lh_entry *e"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_k_is_constant",
            "header": "",
            "params": [
                "const struct lh_entry *e"
            ],
            "definition": "inline static int lh_entry_k_is_constant(const struct lh_entry *e)\n{\n  return e->k_is_constant;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "const struct lh_entry *",
                        "definition": [
                            "const struct lh_entry *e"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_v",
            "header": "",
            "params": [
                "const struct lh_entry *e"
            ],
            "definition": "inline static void *lh_entry_v(const struct lh_entry *e)\n{\n  return (void *) ((uintptr_t) ((const void *) e->v));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "const struct lh_entry *",
                        "definition": [
                            "const struct lh_entry *e"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_set_val",
            "header": "",
            "params": [
                "struct lh_entry *e",
                "void *newval"
            ],
            "definition": "inline static void lh_entry_set_val(struct lh_entry *e, void *newval)\n{\n  e->v = newval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newval",
                        "type": "void *",
                        "definition": [
                            "void *newval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_next",
            "header": "",
            "params": [
                "const struct lh_entry *e"
            ],
            "definition": "inline static struct lh_entry *lh_entry_next(const struct lh_entry *e)\n{\n  return e->next;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "const struct lh_entry *",
                        "definition": [
                            "const struct lh_entry *e"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_entry_prev",
            "header": "",
            "params": [
                "const struct lh_entry *e"
            ],
            "definition": "inline static struct lh_entry *lh_entry_prev(const struct lh_entry *e)\n{\n  return e->prev;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "const struct lh_entry *",
                        "definition": [
                            "const struct lh_entry *e"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_generic_delete",
            "header": "static void json_object_generic_delete(struct json_object *jso)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "static void json_object_generic_delete(struct json_object *jso)\n{\n  printbuf_free(jso->_pb);\n  free(jso);\n}\n\n",
            "calle": [
                "free",
                "printbuf_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_OBJECT",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_object *JC_OBJECT(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_OBJECT_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_object *JC_OBJECT_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_ARRAY",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_array *JC_ARRAY(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_ARRAY_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_array *JC_ARRAY_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_BOOL",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_boolean *JC_BOOL(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_BOOL_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_boolean *JC_BOOL_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_DOUBLE",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_double *JC_DOUBLE(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_DOUBLE_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_double *JC_DOUBLE_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_INT",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_int *JC_INT(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_INT_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_int *JC_INT_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_STRING",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static struct json_object_string *JC_STRING(struct json_object *jso)\n{\n  return (void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "JC_STRING_C",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const struct json_object_string *JC_STRING_C(const struct json_object *jso)\n{\n  return (const void *) jso;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_new",
            "header": "inline static struct json_object *json_object_new(enum json_type o_type, size_t alloc_size, json_object_to_json_string_fn *to_json_string)",
            "params": [
                "enum json_type o_type",
                "size_t alloc_size",
                "json_object_to_json_string_fn *to_json_string"
            ],
            "definition": "inline static struct json_object *json_object_new(enum json_type o_type, size_t alloc_size, json_object_to_json_string_fn *to_json_string)\n{\n  struct json_object *jso;\n  unsigned int jso_idx = 0;\n  jso_idx = (struct json_object *) malloc(alloc_size);\n  if (!(&jso[jso_idx]))\n  {\n    return 0;\n  }\n  jso->o_type = o_type;\n  jso->_ref_count = 1;\n  jso->_to_json_string = to_json_string;\n  jso->_pb = 0;\n  jso->_user_delete = 0;\n  jso->_userdata = 0;\n  return jso;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "o_type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type o_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alloc_size",
                        "type": "size_t",
                        "definition": [
                            "size_t alloc_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_json_string",
                        "type": "json_object_to_json_string_fn *",
                        "definition": [
                            "json_object_to_json_string_fn *to_json_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_delete",
            "header": "static void json_object_object_delete(struct json_object *jso_base)",
            "params": [
                "struct json_object *jso_base"
            ],
            "definition": "static void json_object_object_delete(struct json_object *jso_base)\n{\n  lh_table_free(JC_OBJECT(jso_base)->c_object);\n  json_object_generic_delete(jso_base);\n}\n\n",
            "calle": [
                "JC_OBJECT",
                "json_object_generic_delete",
                "lh_table_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso_base"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_string_delete",
            "header": "static void json_object_string_delete(struct json_object *jso)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "static void json_object_string_delete(struct json_object *jso)\n{\n  if (JC_STRING(jso)->len < 0)\n  {\n    free(JC_STRING(jso)->c_string.pdata);\n  }\n  json_object_generic_delete(jso);\n}\n\n",
            "calle": [
                "JC_STRING",
                "free",
                "json_object_generic_delete"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_delete",
            "header": "static void json_object_array_delete(struct json_object *jso)",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "static void json_object_array_delete(struct json_object *jso)\n{\n  array_list_free(JC_ARRAY(jso)->c_array);\n  json_object_generic_delete(jso);\n}\n\n",
            "calle": [
                "JC_ARRAY",
                "array_list_free",
                "json_object_generic_delete"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_abort",
            "header": "static void json_abort(const char *message)",
            "params": [
                "const char *message"
            ],
            "definition": "static void json_abort(const char *message)\n{\n  if (message != 0)\n  {\n    fprintf(stderr, \"json-c aborts with error: %s\\n\", message);\n  }\n  abort();\n}\n\n",
            "calle": [
                "abort",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "message",
                        "type": "const char *",
                        "definition": [
                            "const char *message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_string_component_mutable",
            "header": "",
            "params": [
                "struct json_object *jso"
            ],
            "definition": "inline static char *get_string_component_mutable(struct json_object *jso)\n{\n  if (JC_STRING_C(jso)->len < 0)\n  {\n    return JC_STRING(jso)->c_string.pdata;\n  }\n  return JC_STRING(jso)->c_string.idata;\n}\n\n",
            "calle": [
                "JC_STRING",
                "JC_STRING_C"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_string_component",
            "header": "",
            "params": [
                "const struct json_object *jso"
            ],
            "definition": "inline static const char *get_string_component(const struct json_object *jso)\n{\n  return get_string_component_mutable((void *) ((uintptr_t) ((const void *) jso)));\n}\n\n",
            "calle": [
                "get_string_component_mutable"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_escape_str",
            "header": "",
            "params": [
                "struct printbuf *pb",
                "const char *str",
                "size_t len",
                "int flags"
            ],
            "definition": "static int json_escape_str(struct printbuf *pb, const char *str, size_t len, int flags)\n{\n  size_t pos = 0;\n  size_t start_offset = 0;\n  unsigned char c;\n  while (len)\n  {\n    helper_json_escape_str_1(&len, &pos, &start_offset, &c, pb, str, flags);\n  }\n\n  if (pos > start_offset)\n  {\n    printbuf_memappend(pb, str + start_offset, pos - start_offset);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_json_escape_str_1",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t start_offset = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "indent",
            "header": "",
            "params": [
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static void indent(struct printbuf *pb, int level, int flags)\n{\n  if (flags & (1 << 1))\n  {\n    if (flags & (1 << 3))\n    {\n      printbuf_memset(pb, -1, '\\t', level);\n    }\n    else\n    {\n      printbuf_memset(pb, -1, ' ', level * 2);\n    }\n  }\n}\n\n",
            "calle": [
                "printbuf_memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_object_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_object_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  int had_children = 0;\n  struct json_object_iter iter;\n  printbuf_memappend(pb, \"{\", (sizeof(\"{\")) - 1);\n  for (iter.entry = lh_table_head(json_object_get_object(jso)); (iter.entry) ? ((iter.key = (char *) lh_entry_k(iter.entry), iter.val = (struct json_object *) lh_entry_v(iter.entry), iter.entry)) : (0); iter.entry = lh_entry_next(iter.entry))\n  {\n    helper_json_object_object_to_json_string_1(&had_children, pb, level, flags, iter);\n  }\n\n  if ((flags & (1 << 1)) && had_children)\n  {\n    printbuf_memappend(pb, \"\\n\", (sizeof(\"\\n\")) - 1);\n    indent(pb, level, flags);\n  }\n  if ((flags & (1 << 0)) && (!(flags & (1 << 1))))\n  {\n    return printbuf_memappend(pb, \" }\", (sizeof(\" }\")) - 1);\n  }\n  else\n    return printbuf_memappend(pb, \"}\", (sizeof(\"}\")) - 1);\n}\n\n",
            "calle": [
                "helper_json_object_object_to_json_string_1",
                "indent",
                "json_object_get_object",
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v",
                "lh_table_head",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "had_children",
                        "type": "int",
                        "definition": [
                            "int had_children = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iter",
                        "definition": [
                            "struct json_object_iter iter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_lh_entry_free",
            "header": "",
            "params": [
                "struct lh_entry *ent"
            ],
            "definition": "static void json_object_lh_entry_free(struct lh_entry *ent)\n{\n  if (!lh_entry_k_is_constant(ent))\n  {\n    free(lh_entry_k(ent));\n  }\n  json_object_put((struct json_object *) lh_entry_v(ent));\n}\n\n",
            "calle": [
                "free",
                "json_object_put",
                "lh_entry_k",
                "lh_entry_k_is_constant",
                "lh_entry_v"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *ent"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_boolean_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_boolean_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  int ret;\n  if (flags & (1 << 5))\n  {\n    printbuf_memappend(pb, \"\\033[0;35m\", (sizeof(\"\\033[0;35m\")) - 1);\n  }\n  if (JC_BOOL(jso)->c_boolean)\n  {\n    ret = printbuf_memappend(pb, \"true\", (sizeof(\"true\")) - 1);\n  }\n  else\n    ret = printbuf_memappend(pb, \"false\", (sizeof(\"false\")) - 1);\n  if ((ret > (-1)) && (flags & (1 << 5)))\n  {\n    return printbuf_memappend(pb, \"\\033[0m\", (sizeof(\"\\033[0m\")) - 1);\n  }\n  return ret;\n}\n\n",
            "calle": [
                "JC_BOOL",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_int_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_int_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  char sbuf[21];\n  if (JC_INT(jso)->cint_type == json_object_int_type_int64)\n  {\n    snprintf(sbuf, sizeof(sbuf), \"%d\", JC_INT(jso)->cint.c_int64);\n  }\n  else\n    snprintf(sbuf, sizeof(sbuf), \"%u\", JC_INT(jso)->cint.c_uint64);\n  return printbuf_memappend(pb, sbuf, strlen(sbuf));\n}\n\n",
            "calle": [
                "JC_INT",
                "printbuf_memappend",
                "snprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "char [21]",
                        "definition": [
                            "char sbuf[21]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_double_to_json_string_format",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags",
                "const char *format"
            ],
            "definition": "static int json_object_double_to_json_string_format(struct json_object *jso, struct printbuf *pb, int level, int flags, const char *format)\n{\n  unsigned int format_idx = 0;\n  struct json_object_double *jsodbl = JC_DOUBLE(jso);\n  char buf[128];\n  char *p;\n  unsigned int p_idx = 0;\n  char *q;\n  unsigned int q_idx = 0;\n  int size;\n  if (isnan(jsodbl->c_double))\n  {\n    size = snprintf(buf, sizeof(buf), \"NaN\");\n  }\n  else\n    if (isinf(jsodbl->c_double))\n  {\n    if (jsodbl->c_double > 0)\n    {\n      size = snprintf(buf, sizeof(buf), \"Infinity\");\n    }\n    else\n      size = snprintf(buf, sizeof(buf), \"-Infinity\");\n  }\n  else\n  {\n    helper_json_object_double_to_json_string_format_1(&format_idx, &p_idx, &q_idx, &size, flags, format, jsodbl, buf, p, q);\n  }\n  if (size < 0)\n  {\n    return -1;\n  }\n  if (size >= ((int) (sizeof(buf))))\n  {\n    size = (sizeof(buf)) - 1;\n  }\n  printbuf_memappend(pb, buf, size);\n  return size;\n}\n\n",
            "calle": [
                "JC_DOUBLE",
                "helper_json_object_double_to_json_string_format_1",
                "isinf",
                "isnan",
                "printbuf_memappend",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "const char *",
                        "definition": [
                            "const char *format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_double",
                        "type": "struct json_object_double *",
                        "definition": [
                            "struct json_object_double *jsodbl = JC_DOUBLE(jso)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "char *",
                        "definition": [
                            "char *q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int q_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_double_to_json_string_default",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_double_to_json_string_default(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  return json_object_double_to_json_string_format(jso, pb, level, flags, 0);\n}\n\n",
            "calle": [
                "json_object_double_to_json_string_format"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_object_userdata_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int _json_object_userdata_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  return json_object_userdata_to_json_string(jso, pb, level, flags);\n}\n\n",
            "calle": [
                "json_object_userdata_to_json_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_userdata_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_userdata_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "int json_object_userdata_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  int userdata_len = strlen((const char *) jso->_userdata);\n  printbuf_memappend(pb, (const char *) jso->_userdata, userdata_len);\n  return userdata_len;\n}\n\n",
            "calle": [
                "printbuf_memappend",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata_len",
                        "type": "int",
                        "definition": [
                            "int userdata_len = strlen((const char *) jso->_userdata)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_free_userdata",
            "header": "",
            "params": [
                "struct json_object *jso",
                "void *userdata"
            ],
            "definition": "void json_object_free_userdata(struct json_object *jso, void *userdata)\n{\n  free(userdata);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "void *",
                        "definition": [
                            "void *userdata"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_string_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_string_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  ssize_t len = JC_STRING(jso)->len;\n  if (flags & (1 << 5))\n  {\n    printbuf_memappend(pb, \"\\033[0;32m\", (sizeof(\"\\033[0;32m\")) - 1);\n  }\n  printbuf_memappend(pb, \"\\\"\", (sizeof(\"\\\"\")) - 1);\n  json_escape_str(pb, get_string_component(jso), (len < 0) ? (-((ssize_t) len)) : (len), flags);\n  printbuf_memappend(pb, \"\\\"\", (sizeof(\"\\\"\")) - 1);\n  if (flags & (1 << 5))\n  {\n    printbuf_memappend(pb, \"\\033[0m\", (sizeof(\"\\033[0m\")) - 1);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "JC_STRING",
                "get_string_component",
                "json_escape_str",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t len = JC_STRING(jso)->len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_object_new_string",
            "header": "",
            "params": [
                "const char *s",
                "const size_t len"
            ],
            "definition": "static struct json_object *_json_object_new_string(const char *s, const size_t len)\n{\n  size_t objsize;\n  struct json_object_string *jso;\n  unsigned int jso_idx = 0;\n  if (len > ((9223372036854775807L - ((sizeof(*(&jso[jso_idx]))) - (sizeof(jso->c_string)))) - 1))\n  {\n    return 0;\n  }\n  objsize = (((sizeof(*(&jso[jso_idx]))) - (sizeof(jso->c_string))) + len) + 1;\n  if (len < (sizeof(void *)))\n  {\n    objsize += (sizeof(void *)) - len;\n  }\n  jso_idx = (struct json_object_string *) json_object_new(json_type_string, objsize, &json_object_string_to_json_string);\n  if (!(&jso[jso_idx]))\n  {\n    return 0;\n  }\n  jso->len = len;\n  memcpy(jso->c_string.idata, s, len);\n  ((char *) jso->c_string.idata)[len] = '\\0';\n  return &jso->base;\n}\n\n",
            "calle": [
                "json_object_new",
                "json_object_string_to_json_string",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "const size_t",
                        "definition": [
                            "const size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "objsize",
                        "type": "size_t",
                        "definition": [
                            "size_t objsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_string",
                        "type": "struct json_object_string *",
                        "definition": [
                            "struct json_object_string *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_string_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_object_get_string_len",
            "header": "",
            "params": [
                "const struct json_object_string *jso"
            ],
            "definition": "inline static ssize_t _json_object_get_string_len(const struct json_object_string *jso)\n{\n  ssize_t len;\n  len = jso->len;\n  return (len < 0) ? (-((ssize_t) len)) : (len);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_string",
                        "type": "const struct json_object_string *",
                        "definition": [
                            "const struct json_object_string *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_object_set_string_len",
            "header": "",
            "params": [
                "json_object *jso",
                "const char *s",
                "size_t len"
            ],
            "definition": "static int _json_object_set_string_len(json_object *jso, const char *s, size_t len)\n{\n  char *dstbuf;\n  unsigned int dstbuf_idx = 0;\n  ssize_t curlen;\n  ssize_t newlen;\n  if ((jso == 0) || (jso->o_type != json_type_string))\n  {\n    return 0;\n  }\n  if (len >= (2147483647 - 1))\n  {\n    return 0;\n  }\n  curlen = JC_STRING(jso)->len;\n  if (curlen < 0)\n  {\n    if (len == 0)\n    {\n      free(JC_STRING(jso)->c_string.pdata);\n      JC_STRING(jso)->len = (curlen = 0);\n    }\n    else\n    {\n      curlen = -curlen;\n    }\n  }\n  newlen = len;\n  dstbuf_idx = get_string_component_mutable(jso);\n  if (((ssize_t) len) > curlen)\n  {\n    helper__json_object_set_string_len_1(&dstbuf_idx, &newlen, jso, len, dstbuf);\n  }\n  else\n    if (JC_STRING(jso)->len < 0)\n  {\n    newlen = -((ssize_t) len);\n  }\n  memcpy(dstbuf, (const void *) s, len);\n  dstbuf[len + dstbuf_idx] = '\\0';\n  JC_STRING(jso)->len = newlen;\n  return 1;\n}\n\n",
            "calle": [
                "JC_STRING",
                "free",
                "get_string_component_mutable",
                "helper__json_object_set_string_len_1",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstbuf",
                        "type": "char *",
                        "definition": [
                            "char *dstbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstbuf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dstbuf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newlen",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t newlen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_to_json_string",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int json_object_array_to_json_string(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  int had_children = 0;\n  size_t ii;\n  printbuf_memappend(pb, \"[\", (sizeof(\"[\")) - 1);\n  for (ii = 0; ii < json_object_array_length(jso); ii += 1)\n  {\n    helper_json_object_array_to_json_string_1(&had_children, jso, pb, level, flags, ii);\n  }\n\n  if ((flags & (1 << 1)) && had_children)\n  {\n    printbuf_memappend(pb, \"\\n\", (sizeof(\"\\n\")) - 1);\n    indent(pb, level, flags);\n  }\n  if ((flags & (1 << 0)) && (!(flags & (1 << 1))))\n  {\n    return printbuf_memappend(pb, \" ]\", (sizeof(\" ]\")) - 1);\n  }\n  return printbuf_memappend(pb, \"]\", (sizeof(\"]\")) - 1);\n}\n\n",
            "calle": [
                "helper_json_object_array_to_json_string_1",
                "indent",
                "json_object_array_length",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "had_children",
                        "type": "int",
                        "definition": [
                            "int had_children = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_entry_free",
            "header": "",
            "params": [
                "void *data"
            ],
            "definition": "static void json_object_array_entry_free(void *data)\n{\n  json_object_put((struct json_object *) data);\n}\n\n",
            "calle": [
                "json_object_put"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_array_equal",
            "header": "",
            "params": [
                "struct json_object *jso1",
                "struct json_object *jso2"
            ],
            "definition": "static int json_array_equal(struct json_object *jso1, struct json_object *jso2)\n{\n  size_t len;\n  size_t i;\n  len = json_object_array_length(jso1);\n  if (len != json_object_array_length(jso2))\n  {\n    return 0;\n  }\n  for (i = 0; i < len; i += 1)\n  {\n    if (!json_object_equal(json_object_array_get_idx(jso1, i), json_object_array_get_idx(jso2, i)))\n    {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_equal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_all_values_equal",
            "header": "",
            "params": [
                "struct json_object *jso1",
                "struct json_object *jso2"
            ],
            "definition": "static int json_object_all_values_equal(struct json_object *jso1, struct json_object *jso2)\n{\n  struct json_object_iter iter;\n  struct json_object *sub;\n  assert(json_object_get_type(jso1) == json_type_object);\n  assert(json_object_get_type(jso2) == json_type_object);\n  for (iter.entry = lh_table_head(json_object_get_object(jso1)); (iter.entry) ? ((iter.key = (char *) lh_entry_k(iter.entry), iter.val = (struct json_object *) lh_entry_v(iter.entry), iter.entry)) : (0); iter.entry = lh_entry_next(iter.entry))\n  {\n    if (!lh_table_lookup_ex(JC_OBJECT(jso2)->c_object, (void *) iter.key, (void **) ((void *) (&sub))))\n    {\n      return 0;\n    }\n    if (!json_object_equal(iter.val, sub))\n    {\n      return 0;\n    }\n  }\n\n  for (iter.entry = lh_table_head(json_object_get_object(jso2)); (iter.entry) ? ((iter.key = (char *) lh_entry_k(iter.entry), iter.val = (struct json_object *) lh_entry_v(iter.entry), iter.entry)) : (0); iter.entry = lh_entry_next(iter.entry))\n  {\n    if (!lh_table_lookup_ex(JC_OBJECT(jso1)->c_object, (void *) iter.key, (void **) ((void *) (&sub))))\n    {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "JC_OBJECT",
                "assert",
                "json_object_equal",
                "json_object_get_object",
                "json_object_get_type",
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v",
                "lh_table_head",
                "lh_table_lookup_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iter",
                        "definition": [
                            "struct json_object_iter iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *sub"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_copy_serializer_data",
            "header": "",
            "params": [
                "struct json_object *src",
                "struct json_object *dst"
            ],
            "definition": "static int json_object_copy_serializer_data(struct json_object *src, struct json_object *dst)\n{\n  if ((!src->_userdata) && (!src->_user_delete))\n  {\n    return 0;\n  }\n  if ((dst->_to_json_string == json_object_userdata_to_json_string) || (dst->_to_json_string == _json_object_userdata_to_json_string))\n  {\n    char *p;\n    unsigned int p_idx = 0;\n    assert(src->_userdata);\n    p_idx = strdup(src->_userdata);\n    if ((&p[p_idx]) == 0)\n    {\n      _json_c_set_last_err(\"json_object_copy_serializer_data: out of memory\\n\");\n      return -1;\n    }\n    dst->_userdata = &p[p_idx];\n  }\n  else\n  {\n    _json_c_set_last_err(\"json_object_copy_serializer_data: unable to copy unknown serializer data: %p\\n\", (void *) dst->_to_json_string);\n    return -1;\n  }\n  dst->_user_delete = src->_user_delete;\n  return 0;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_object_userdata_to_json_string",
                "assert",
                "json_object_userdata_to_json_string",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_object_userdata_to_json_string",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_json_object_userdata_to_json_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_shallow_copy_default",
            "header": "",
            "params": [
                "json_object *src",
                "json_object *parent",
                "const char *key",
                "size_t index",
                "json_object **dst"
            ],
            "definition": "int json_c_shallow_copy_default(json_object *src, json_object *parent, const char *key, size_t index, json_object **dst)\n{\n  switch (src->o_type)\n  {\n    case json_type_boolean:\n    {\n      *dst = json_object_new_boolean(JC_BOOL(src)->c_boolean);\n      break;\n    }\n\n    case json_type_double:\n    {\n      *dst = json_object_new_double(JC_DOUBLE(src)->c_double);\n      break;\n    }\n\n    case json_type_int:\n    {\n      switch (JC_INT(src)->cint_type)\n      {\n        case json_object_int_type_int64:\n        {\n          *dst = json_object_new_int64(JC_INT(src)->cint.c_int64);\n          break;\n        }\n\n        case json_object_int_type_uint64:\n        {\n          *dst = json_object_new_uint64(JC_INT(src)->cint.c_uint64);\n          break;\n        }\n\n        default:\n        {\n          json_abort(\"invalid cint_type\");\n        }\n\n      }\n\n      break;\n    }\n\n    case json_type_string:\n    {\n      *dst = json_object_new_string_len(get_string_component(src), _json_object_get_string_len(JC_STRING(src)));\n      break;\n    }\n\n    case json_type_object:\n    {\n      *dst = json_object_new_object();\n      break;\n    }\n\n    case json_type_array:\n    {\n      *dst = json_object_new_array();\n      break;\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return -1;\n    }\n\n  }\n\n  if (!(*dst))\n  {\n    errno = ENOMEM;\n    return -1;\n  }\n  (*dst)->_to_json_string = src->_to_json_string;\n  return 1;\n}\n\n",
            "calle": [
                "JC_BOOL",
                "JC_DOUBLE",
                "JC_INT",
                "JC_STRING",
                "_json_object_get_string_len",
                "get_string_component",
                "json_abort",
                "json_object_new_array",
                "json_object_new_boolean",
                "json_object_new_double",
                "json_object_new_int64",
                "json_object_new_object",
                "json_object_new_string_len",
                "json_object_new_uint64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "json_object *",
                        "definition": [
                            "json_object *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "json_object **",
                        "definition": [
                            "json_object **dst"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_deep_copy_recursive",
            "header": "",
            "params": [
                "struct json_object *src",
                "struct json_object *parent",
                "const char *key_in_parent",
                "size_t index_in_parent",
                "struct json_object **dst",
                "json_c_shallow_copy_fn *shallow_copy"
            ],
            "definition": "static int json_object_deep_copy_recursive(struct json_object *src, struct json_object *parent, const char *key_in_parent, size_t index_in_parent, struct json_object **dst, json_c_shallow_copy_fn *shallow_copy)\n{\n  struct json_object_iter iter;\n  size_t src_array_len;\n  size_t ii;\n  int shallow_copy_rc = 0;\n  shallow_copy_rc = shallow_copy(src, parent, key_in_parent, index_in_parent, dst);\n  if (shallow_copy_rc < 1)\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  assert((*dst) != 0);\n  switch (src->o_type)\n  {\n    case json_type_object:\n    {\n      helper_json_object_deep_copy_recursive_1(&iter, src, dst, shallow_copy);\n    }\n\n    case json_type_array:\n    {\n      helper_json_object_deep_copy_recursive_2(&src_array_len, &ii, src, dst, shallow_copy);\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  if (shallow_copy_rc != 2)\n  {\n    return json_object_copy_serializer_data(src, *dst);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_json_object_deep_copy_recursive_1",
                "helper_json_object_deep_copy_recursive_2",
                "json_object_copy_serializer_data",
                "shallow_copy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_in_parent",
                        "type": "const char *",
                        "definition": [
                            "const char *key_in_parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index_in_parent",
                        "type": "size_t",
                        "definition": [
                            "size_t index_in_parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy",
                        "type": "json_c_shallow_copy_fn *",
                        "definition": [
                            "json_c_shallow_copy_fn *shallow_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iter",
                        "definition": [
                            "struct json_object_iter iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_array_len",
                        "type": "size_t",
                        "definition": [
                            "size_t src_array_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy_rc",
                        "type": "int",
                        "definition": [
                            "int shallow_copy_rc = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_escape_str_1",
            "header": "",
            "params": [
                "size_t * const len_ref",
                "size_t * const pos_ref",
                "size_t * const start_offset_ref",
                "unsigned char * const c_ref",
                "struct printbuf * const pb",
                "const char * const str",
                "int flags"
            ],
            "definition": "void helper_json_escape_str_1(size_t * const len_ref, size_t * const pos_ref, size_t * const start_offset_ref, unsigned char * const c_ref, struct printbuf * const pb, const char * const str, int flags)\n{\n  size_t len = *len_ref;\n  size_t pos = *pos_ref;\n  size_t start_offset = *start_offset_ref;\n  unsigned char c = *c_ref;\n  len -= 1;\n  c = str[pos];\n  switch (c)\n  {\n    case '\\b':\n\n    case '\\n':\n\n    case '\\r':\n\n    case '\\t':\n\n    case '\\f':\n\n    case '\"':\n\n    case '\\\\':\n\n    case '/':\n    {\n      helper_helper_json_escape_str_1_2(&pos, &start_offset, pb, str, flags, c);\n    }\n\n    default:\n    {\n      helper_helper_json_escape_str_1_1(&pos, &start_offset, pb, str, c);\n    }\n\n  }\n\n  *len_ref = len;\n  *pos_ref = pos;\n  *start_offset_ref = start_offset;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_json_escape_str_1_1",
                "helper_helper_json_escape_str_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t start_offset = *start_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_object_to_json_string_1",
            "header": "",
            "params": [
                "int * const had_children_ref",
                "struct printbuf * const pb",
                "int level",
                "int flags",
                "struct json_object_iter iter"
            ],
            "definition": "int helper_json_object_object_to_json_string_1(int * const had_children_ref, struct printbuf * const pb, int level, int flags, struct json_object_iter iter)\n{\n  int had_children = *had_children_ref;\n  if (had_children)\n  {\n    printbuf_memappend(pb, \",\", (sizeof(\",\")) - 1);\n  }\n  if (flags & (1 << 1))\n  {\n    printbuf_memappend(pb, \"\\n\", (sizeof(\"\\n\")) - 1);\n  }\n  had_children = 1;\n  if ((flags & (1 << 0)) && (!(flags & (1 << 1))))\n  {\n    printbuf_memappend(pb, \" \", (sizeof(\" \")) - 1);\n  }\n  indent(pb, level + 1, flags);\n  if (flags & (1 << 5))\n  {\n    printbuf_memappend(pb, \"\\033[0;34m\", (sizeof(\"\\033[0;34m\")) - 1);\n  }\n  printbuf_memappend(pb, \"\\\"\", (sizeof(\"\\\"\")) - 1);\n  json_escape_str(pb, iter.key, strlen(iter.key), flags);\n  printbuf_memappend(pb, \"\\\"\", (sizeof(\"\\\"\")) - 1);\n  if (flags & (1 << 5))\n  {\n    printbuf_memappend(pb, \"\\033[0m\", (sizeof(\"\\033[0m\")) - 1);\n  }\n  if (flags & (1 << 0))\n  {\n    printbuf_memappend(pb, \": \", (sizeof(\": \")) - 1);\n  }\n  else\n    printbuf_memappend(pb, \":\", (sizeof(\":\")) - 1);\n  if (iter.val == 0)\n  {\n    if (flags & (1 << 5))\n    {\n      printbuf_memappend(pb, \"\\033[0;35m\", (sizeof(\"\\033[0;35m\")) - 1);\n    }\n    printbuf_memappend(pb, \"null\", (sizeof(\"null\")) - 1);\n    if (flags & (1 << 5))\n    {\n      printbuf_memappend(pb, \"\\033[0m\", (sizeof(\"\\033[0m\")) - 1);\n    }\n  }\n  else\n    if (iter.val->_to_json_string(iter.val, pb, level + 1, flags) < 0)\n  {\n    return -1;\n  }\n  *had_children_ref = had_children;\n}\n\n",
            "calle": [
                "indent",
                "iter.val->_to_json_string",
                "json_escape_str",
                "printbuf_memappend",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "had_children_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const had_children_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iter",
                        "definition": [
                            "struct json_object_iter iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "had_children",
                        "type": "int",
                        "definition": [
                            "int had_children = *had_children_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_int_1",
            "header": "",
            "params": [
                "int64_t cint64"
            ],
            "definition": "int32_t helper_json_object_get_int_1(int64_t cint64)\n{\n  if (cint64 < INT32_MIN)\n  {\n    errno = ERANGE;\n    return INT32_MIN;\n  }\n  if (cint64 > INT32_MAX)\n  {\n    errno = ERANGE;\n    return INT32_MAX;\n  }\n  return (int32_t) cint64;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cint64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t cint64"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_int_2",
            "header": "",
            "params": [
                "double * const cdouble_ref",
                "const struct json_object * const jso"
            ],
            "definition": "int32_t helper_json_object_get_int_2(double * const cdouble_ref, const struct json_object * const jso)\n{\n  double cdouble = *cdouble_ref;\n  cdouble = JC_DOUBLE_C(jso)->c_double;\n  if (cdouble < INT32_MIN)\n  {\n    errno = ERANGE;\n    return INT32_MIN;\n  }\n  if (cdouble > INT32_MAX)\n  {\n    errno = ERANGE;\n    return INT32_MAX;\n  }\n  if (isnan(cdouble))\n  {\n    errno = EINVAL;\n    return INT32_MIN;\n  }\n  return (int32_t) cdouble;\n  *cdouble_ref = cdouble;\n}\n\n",
            "calle": [
                "JC_DOUBLE_C",
                "isnan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cdouble_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const cdouble_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object * const",
                        "definition": [
                            "const struct json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdouble",
                        "type": "double",
                        "definition": [
                            "double cdouble = *cdouble_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_int64_1",
            "header": "",
            "params": [
                "const struct json_object * const jso"
            ],
            "definition": "int64_t helper_json_object_get_int64_1(const struct json_object * const jso)\n{\n  const struct json_object_int *jsoint = JC_INT_C(jso);\n  switch (jsoint->cint_type)\n  {\n    case json_object_int_type_int64:\n    {\n      return jsoint->cint.c_int64;\n    }\n\n    case json_object_int_type_uint64:\n    {\n      if (jsoint->cint.c_uint64 > INT64_MAX)\n      {\n        errno = ERANGE;\n        return INT64_MAX;\n      }\n      return (int64_t) jsoint->cint.c_uint64;\n    }\n\n    default:\n    {\n      json_abort(\"invalid cint_type\");\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_INT_C",
                "json_abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object * const",
                        "definition": [
                            "const struct json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "const struct json_object_int *",
                        "definition": [
                            "const struct json_object_int *jsoint = JC_INT_C(jso)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_int64_2",
            "header": "",
            "params": [
                "const struct json_object * const jso"
            ],
            "definition": "int64_t helper_json_object_get_int64_2(const struct json_object * const jso)\n{\n  if (JC_DOUBLE_C(jso)->c_double > ((double) INT64_MAX))\n  {\n    errno = ERANGE;\n    return INT64_MAX;\n  }\n  if (JC_DOUBLE_C(jso)->c_double < ((double) INT64_MIN))\n  {\n    errno = ERANGE;\n    return INT64_MIN;\n  }\n  if (isnan(JC_DOUBLE_C(jso)->c_double))\n  {\n    errno = EINVAL;\n    return INT64_MIN;\n  }\n  return (int64_t) JC_DOUBLE_C(jso)->c_double;\n}\n\n",
            "calle": [
                "JC_DOUBLE_C",
                "isnan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object * const",
                        "definition": [
                            "const struct json_object * const jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_uint64_1",
            "header": "",
            "params": [
                "const struct json_object * const jso"
            ],
            "definition": "uint64_t helper_json_object_get_uint64_1(const struct json_object * const jso)\n{\n  const struct json_object_int *jsoint = JC_INT_C(jso);\n  switch (jsoint->cint_type)\n  {\n    case json_object_int_type_int64:\n    {\n      if (jsoint->cint.c_int64 < 0)\n      {\n        errno = ERANGE;\n        return 0;\n      }\n      return (uint64_t) jsoint->cint.c_int64;\n    }\n\n    case json_object_int_type_uint64:\n    {\n      return jsoint->cint.c_uint64;\n    }\n\n    default:\n    {\n      json_abort(\"invalid cint_type\");\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "JC_INT_C",
                "json_abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object * const",
                        "definition": [
                            "const struct json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "const struct json_object_int *",
                        "definition": [
                            "const struct json_object_int *jsoint = JC_INT_C(jso)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_get_uint64_2",
            "header": "",
            "params": [
                "const struct json_object * const jso"
            ],
            "definition": "uint64_t helper_json_object_get_uint64_2(const struct json_object * const jso)\n{\n  if (JC_DOUBLE_C(jso)->c_double > ((double) UINT64_MAX))\n  {\n    errno = ERANGE;\n    return UINT64_MAX;\n  }\n  if (JC_DOUBLE_C(jso)->c_double < 0)\n  {\n    errno = ERANGE;\n    return 0;\n  }\n  if (isnan(JC_DOUBLE_C(jso)->c_double))\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  return (uint64_t) JC_DOUBLE_C(jso)->c_double;\n}\n\n",
            "calle": [
                "JC_DOUBLE_C",
                "isnan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object * const",
                        "definition": [
                            "const struct json_object * const jso"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_c_set_serialization_double_format_1",
            "header": "",
            "params": [
                "const char * const double_format"
            ],
            "definition": "int helper_json_c_set_serialization_double_format_1(const char * const double_format)\n{\n  if (tls_serialization_float_format)\n  {\n    free(tls_serialization_float_format);\n    tls_serialization_float_format = 0;\n  }\n  if (double_format)\n  {\n    char *p = strdup(double_format);\n    if (p == 0)\n    {\n      _json_c_set_last_err(\"json_c_set_serialization_double_format: out of memory\\n\");\n      return -1;\n    }\n    tls_serialization_float_format = p;\n  }\n  else\n  {\n    tls_serialization_float_format = 0;\n  }\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "free",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "double_format",
                        "type": "const char * const",
                        "definition": [
                            "const char * const double_format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = strdup(double_format)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tls_serialization_float_format",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_c_set_serialization_double_format_2",
            "header": "",
            "params": [
                "const char * const double_format"
            ],
            "definition": "int helper_json_c_set_serialization_double_format_2(const char * const double_format)\n{\n  if (tls_serialization_float_format)\n  {\n    free(tls_serialization_float_format);\n    tls_serialization_float_format = 0;\n  }\n  if (global_serialization_float_format)\n  {\n    free(global_serialization_float_format);\n  }\n  if (double_format)\n  {\n    char *p = strdup(double_format);\n    if (p == 0)\n    {\n      _json_c_set_last_err(\"json_c_set_serialization_double_format: out of memory\\n\");\n      return -1;\n    }\n    global_serialization_float_format = p;\n  }\n  else\n  {\n    global_serialization_float_format = 0;\n  }\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "free",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "double_format",
                        "type": "const char * const",
                        "definition": [
                            "const char * const double_format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = strdup(double_format)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tls_serialization_float_format",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "global_serialization_float_format",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_double_to_json_string_format_1",
            "header": "",
            "params": [
                "unsigned int * const format_idx_ref",
                "unsigned int * const p_idx_ref",
                "unsigned int * const q_idx_ref",
                "int * const size_ref",
                "int flags",
                "const char * const format",
                "struct json_object_double * const jsodbl",
                "char buf[128]",
                "char * const p",
                "char * const q"
            ],
            "definition": "int helper_json_object_double_to_json_string_format_1(unsigned int * const format_idx_ref, unsigned int * const p_idx_ref, unsigned int * const q_idx_ref, int * const size_ref, int flags, const char * const format, struct json_object_double * const jsodbl, char buf[128], char * const p, char * const q)\n{\n  unsigned int format_idx = *format_idx_ref;\n  unsigned int p_idx = *p_idx_ref;\n  unsigned int q_idx = *q_idx_ref;\n  int size = *size_ref;\n  const char *std_format = \"%.17g\";\n  int format_drops_decimals = 0;\n  int looks_numeric = 0;\n  if (!(&format[format_idx]))\n  {\n    if (tls_serialization_float_format)\n    {\n      format_idx = tls_serialization_float_format;\n    }\n    else\n      if (global_serialization_float_format)\n    {\n      format_idx = global_serialization_float_format;\n    }\n    else\n      format_idx = std_format;\n  }\n  size = snprintf(buf, sizeof(buf), format, jsodbl->c_double);\n  if (size < 0)\n  {\n    return -1;\n  }\n  p_idx = strchr(buf, ',');\n  if (p)\n  {\n    p[p_idx] = '.';\n  }\n  else\n    p_idx = strchr(buf, '.');\n  if (((&format[format_idx]) == std_format) || (strstr(format, \".0f\") == 0))\n  {\n    format_drops_decimals = 1;\n  }\n  looks_numeric = ((buf[0] >= '0') && (buf[0] <= '9')) || (((size > 1) && (buf[0] == '-')) && ((buf[1] >= '0') && (buf[1] <= '9')));\n  if (((((size < (((int) (sizeof(buf))) - 2)) && looks_numeric) && (!(&p[p_idx]))) && (strchr(buf, 'e') == 0)) && format_drops_decimals)\n  {\n    strcat(buf, \".0\");\n    size += 2;\n  }\n  if ((&p[p_idx]) && (flags & (1 << 2)))\n  {\n    helper_helper_json_object_double_to_json_string_format_1_1(&p_idx, &q_idx, &size, buf, p, q);\n  }\n  *format_idx_ref = format_idx;\n  *p_idx_ref = p_idx;\n  *q_idx_ref = q_idx;\n  *size_ref = size;\n}\n\n",
            "calle": [
                "helper_helper_json_object_double_to_json_string_format_1_1",
                "snprintf",
                "strcat",
                "strchr",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "format_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const format_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const q_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "const char * const",
                        "definition": [
                            "const char * const format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_double",
                        "type": "struct json_object_double * const",
                        "definition": [
                            "struct json_object_double * const jsodbl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char * const",
                        "definition": [
                            "char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "char * const",
                        "definition": [
                            "char * const q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format_idx = *format_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int q_idx = *q_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "std_format",
                        "type": "const char *",
                        "definition": [
                            "const char *std_format = \"%.17g\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "format_drops_decimals",
                        "type": "int",
                        "definition": [
                            "int format_drops_decimals = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "looks_numeric",
                        "type": "int",
                        "definition": [
                            "int looks_numeric = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tls_serialization_float_format",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "global_serialization_float_format",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__json_object_set_string_len_1",
            "header": "",
            "params": [
                "unsigned int * const dstbuf_idx_ref",
                "ssize_t * const newlen_ref",
                "json_object * const jso",
                "size_t len",
                "char * const dstbuf"
            ],
            "definition": "int helper__json_object_set_string_len_1(unsigned int * const dstbuf_idx_ref, ssize_t * const newlen_ref, json_object * const jso, size_t len, char * const dstbuf)\n{\n  unsigned int dstbuf_idx = *dstbuf_idx_ref;\n  ssize_t newlen = *newlen_ref;\n  dstbuf_idx = (char *) malloc(len + 1);\n  if ((&dstbuf[dstbuf_idx]) == 0)\n  {\n    return 0;\n  }\n  if (JC_STRING(jso)->len < 0)\n  {\n    free(JC_STRING(jso)->c_string.pdata);\n  }\n  JC_STRING(jso)->c_string.pdata = &dstbuf[dstbuf_idx];\n  newlen = -((ssize_t) len);\n  *dstbuf_idx_ref = dstbuf_idx;\n  *newlen_ref = newlen;\n}\n\n",
            "calle": [
                "JC_STRING",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dstbuf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dstbuf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newlen_ref",
                        "type": "ssize_t * const",
                        "definition": [
                            "ssize_t * const newlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstbuf",
                        "type": "char * const",
                        "definition": [
                            "char * const dstbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstbuf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dstbuf_idx = *dstbuf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newlen",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t newlen = *newlen_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_array_to_json_string_1",
            "header": "",
            "params": [
                "int * const had_children_ref",
                "struct json_object * const jso",
                "struct printbuf * const pb",
                "int level",
                "int flags",
                "size_t ii"
            ],
            "definition": "int helper_json_object_array_to_json_string_1(int * const had_children_ref, struct json_object * const jso, struct printbuf * const pb, int level, int flags, size_t ii)\n{\n  int had_children = *had_children_ref;\n  struct json_object *val;\n  unsigned int val_idx = 0;\n  if (had_children)\n  {\n    printbuf_memappend(pb, \",\", (sizeof(\",\")) - 1);\n  }\n  if (flags & (1 << 1))\n  {\n    printbuf_memappend(pb, \"\\n\", (sizeof(\"\\n\")) - 1);\n  }\n  had_children = 1;\n  if ((flags & (1 << 0)) && (!(flags & (1 << 1))))\n  {\n    printbuf_memappend(pb, \" \", (sizeof(\" \")) - 1);\n  }\n  indent(pb, level + 1, flags);\n  val_idx = json_object_array_get_idx(jso, ii);\n  if ((&val[val_idx]) == 0)\n  {\n    if (flags & (1 << 5))\n    {\n      printbuf_memappend(pb, \"\\033[0;35m\", (sizeof(\"\\033[0;35m\")) - 1);\n    }\n    printbuf_memappend(pb, \"null\", (sizeof(\"null\")) - 1);\n    if (flags & (1 << 5))\n    {\n      printbuf_memappend(pb, \"\\033[0m\", (sizeof(\"\\033[0m\")) - 1);\n    }\n  }\n  else\n    if (val->_to_json_string(val, pb, level + 1, flags) < 0)\n  {\n    return -1;\n  }\n  *had_children_ref = had_children;\n}\n\n",
            "calle": [
                "indent",
                "json_object_array_get_idx",
                "printbuf_memappend",
                "val->_to_json_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "had_children_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const had_children_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "had_children",
                        "type": "int",
                        "definition": [
                            "int had_children = *had_children_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_equal_1",
            "header": "",
            "params": [
                "struct json_object * const jso1",
                "struct json_object * const jso2"
            ],
            "definition": "int helper_json_object_equal_1(struct json_object * const jso1, struct json_object * const jso2)\n{\n  struct json_object_int *int1 = JC_INT(jso1);\n  struct json_object_int *int2 = JC_INT(jso2);\n  if (int1->cint_type == json_object_int_type_int64)\n  {\n    if (int2->cint_type == json_object_int_type_int64)\n    {\n      return int1->cint.c_int64 == int2->cint.c_int64;\n    }\n    if (int1->cint.c_int64 < 0)\n    {\n      return 0;\n    }\n    return ((uint64_t) int1->cint.c_int64) == int2->cint.c_uint64;\n  }\n  if (int2->cint_type == json_object_int_type_uint64)\n  {\n    return int1->cint.c_uint64 == int2->cint.c_uint64;\n  }\n  if (int2->cint.c_int64 < 0)\n  {\n    return 0;\n  }\n  return int1->cint.c_uint64 == ((uint64_t) int2->cint.c_int64);\n}\n\n",
            "calle": [
                "JC_INT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const jso1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const jso2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "struct json_object_int *",
                        "definition": [
                            "struct json_object_int *int1 = JC_INT(jso1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_int",
                        "type": "struct json_object_int *",
                        "definition": [
                            "struct json_object_int *int2 = JC_INT(jso2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_deep_copy_recursive_1",
            "header": "",
            "params": [
                "struct json_object_iter * const iter_ref",
                "struct json_object * const src",
                "struct json_object ** const dst",
                "json_c_shallow_copy_fn * const shallow_copy"
            ],
            "definition": "int helper_json_object_deep_copy_recursive_1(struct json_object_iter * const iter_ref, struct json_object * const src, struct json_object ** const dst, json_c_shallow_copy_fn * const shallow_copy)\n{\n  struct json_object_iter iter = *iter_ref;\n  for (iter.entry = lh_table_head(json_object_get_object(src)); (iter.entry) ? ((iter.key = (char *) lh_entry_k(iter.entry), iter.val = (struct json_object *) lh_entry_v(iter.entry), iter.entry)) : (0); iter.entry = lh_entry_next(iter.entry))\n  {\n    struct json_object *jso = 0;\n    unsigned int jso_idx = 0;\n    if (!iter.val)\n    {\n      jso_idx = 0;\n    }\n    else\n      if (json_object_deep_copy_recursive(iter.val, src, iter.key, 4294967295U, &(&jso[jso_idx]), shallow_copy) < 0)\n    {\n      json_object_put(jso);\n      return -1;\n    }\n    if (json_object_object_add(*dst, iter.key, jso) < 0)\n    {\n      json_object_put(jso);\n      return -1;\n    }\n  }\n\n  break;\n  *iter_ref = iter;\n}\n\n",
            "calle": [
                "json_object_deep_copy_recursive",
                "json_object_get_object",
                "json_object_object_add",
                "json_object_put",
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v",
                "lh_table_head"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_iter",
                        "type": "struct json_object_iter * const",
                        "definition": [
                            "struct json_object_iter * const iter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "struct json_object ** const",
                        "definition": [
                            "struct json_object ** const dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy",
                        "type": "json_c_shallow_copy_fn * const",
                        "definition": [
                            "json_c_shallow_copy_fn * const shallow_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iter",
                        "definition": [
                            "struct json_object_iter iter = *iter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_object_deep_copy_recursive_2",
            "header": "",
            "params": [
                "size_t * const src_array_len_ref",
                "size_t * const ii_ref",
                "struct json_object * const src",
                "struct json_object ** const dst",
                "json_c_shallow_copy_fn * const shallow_copy"
            ],
            "definition": "int helper_json_object_deep_copy_recursive_2(size_t * const src_array_len_ref, size_t * const ii_ref, struct json_object * const src, struct json_object ** const dst, json_c_shallow_copy_fn * const shallow_copy)\n{\n  size_t src_array_len = *src_array_len_ref;\n  size_t ii = *ii_ref;\n  src_array_len = json_object_array_length(src);\n  for (ii = 0; ii < src_array_len; ii += 1)\n  {\n    struct json_object *jso = 0;\n    unsigned int jso_idx = 0;\n    struct json_object *jso1 = json_object_array_get_idx(src, ii);\n    if (!jso1)\n    {\n      jso_idx = 0;\n    }\n    else\n      if (json_object_deep_copy_recursive(jso1, src, 0, ii, &(&jso[jso_idx]), shallow_copy) < 0)\n    {\n      json_object_put(jso);\n      return -1;\n    }\n    if (json_object_array_add(*dst, jso) < 0)\n    {\n      json_object_put(jso);\n      return -1;\n    }\n  }\n\n  break;\n  *src_array_len_ref = src_array_len;\n  *ii_ref = ii;\n}\n\n",
            "calle": [
                "json_object_array_add",
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_deep_copy_recursive",
                "json_object_put"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_array_len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const src_array_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const ii_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "struct json_object ** const",
                        "definition": [
                            "struct json_object ** const dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shallow_copy",
                        "type": "json_c_shallow_copy_fn * const",
                        "definition": [
                            "json_c_shallow_copy_fn * const shallow_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_array_len",
                        "type": "size_t",
                        "definition": [
                            "size_t src_array_len = *src_array_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii = *ii_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso1 = json_object_array_get_idx(src, ii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_escape_str_1_1",
            "header": "",
            "params": [
                "size_t * const pos_ref",
                "size_t * const start_offset_ref",
                "struct printbuf * const pb",
                "const char * const str",
                "unsigned char c"
            ],
            "definition": "void helper_helper_json_escape_str_1_1(size_t * const pos_ref, size_t * const start_offset_ref, struct printbuf * const pb, const char * const str, unsigned char c)\n{\n  size_t pos = *pos_ref;\n  size_t start_offset = *start_offset_ref;\n  if (c < ' ')\n  {\n    char sbuf[7];\n    if (pos > start_offset)\n    {\n      printbuf_memappend(pb, str + start_offset, pos - start_offset);\n    }\n    snprintf(sbuf, sizeof(sbuf), \"\\\\u00%c%c\", json_hex_chars[c >> 4], json_hex_chars[c & 0xf]);\n    do\n    {\n      if ((pb->size - pb->bpos) > (((int) (sizeof(sbuf))) - 1))\n      {\n        memcpy(pb->buf + pb->bpos, sbuf, ((int) (sizeof(sbuf))) - 1);\n        pb->bpos += ((int) (sizeof(sbuf))) - 1;\n        pb->buf[pb->bpos] = '\\0';\n      }\n      else\n      {\n        printbuf_memappend(pb, sbuf, ((int) (sizeof(sbuf))) - 1);\n      }\n    }\n    while (0);\n    pos += 1;\n    start_offset = pos;\n  }\n  else\n    pos++;\n  pos += 1;\n  *pos_ref = pos;\n  *start_offset_ref = start_offset;\n}\n\n",
            "calle": [
                "memcpy",
                "printbuf_memappend",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t start_offset = *start_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "char [7]",
                        "definition": [
                            "char sbuf[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_hex_chars",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_escape_str_1_2",
            "header": "",
            "params": [
                "size_t * const pos_ref",
                "size_t * const start_offset_ref",
                "struct printbuf * const pb",
                "const char * const str",
                "int flags",
                "unsigned char c"
            ],
            "definition": "void helper_helper_json_escape_str_1_2(size_t * const pos_ref, size_t * const start_offset_ref, struct printbuf * const pb, const char * const str, int flags, unsigned char c)\n{\n  size_t pos = *pos_ref;\n  size_t start_offset = *start_offset_ref;\n  if ((flags & (1 << 4)) && (c == '/'))\n  {\n    pos += 1;\n    break;\n  }\n  if (pos > start_offset)\n  {\n    printbuf_memappend(pb, str + start_offset, pos - start_offset);\n  }\n  if (c == '\\b')\n  {\n    printbuf_memappend(pb, \"\\\\b\", 2);\n  }\n  else\n    if (c == '\\n')\n  {\n    printbuf_memappend(pb, \"\\\\n\", 2);\n  }\n  else\n    if (c == '\\r')\n  {\n    printbuf_memappend(pb, \"\\\\r\", 2);\n  }\n  else\n    if (c == '\\t')\n  {\n    printbuf_memappend(pb, \"\\\\t\", 2);\n  }\n  else\n    if (c == '\\f')\n  {\n    printbuf_memappend(pb, \"\\\\f\", 2);\n  }\n  else\n    if (c == '\"')\n  {\n    printbuf_memappend(pb, \"\\\\\\\"\", 2);\n  }\n  else\n    if (c == '\\\\')\n  {\n    printbuf_memappend(pb, \"\\\\\\\\\", 2);\n  }\n  else\n    if (c == '/')\n  {\n    printbuf_memappend(pb, \"\\\\/\", 2);\n  }\n  pos += 1;\n  start_offset = pos;\n  break;\n  *pos_ref = pos;\n  *start_offset_ref = start_offset;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t start_offset = *start_offset_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_object_double_to_json_string_format_1_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "unsigned int * const q_idx_ref",
                "int * const size_ref",
                "char buf[128]",
                "char * const p",
                "char * const q"
            ],
            "definition": "void helper_helper_json_object_double_to_json_string_format_1_1(unsigned int * const p_idx_ref, unsigned int * const q_idx_ref, int * const size_ref, char buf[128], char * const p, char * const q)\n{\n  unsigned int p_idx = *p_idx_ref;\n  unsigned int q_idx = *q_idx_ref;\n  int size = *size_ref;\n  p_idx += 1;\n  for (q_idx = &p[p_idx]; q[q_idx]; q_idx += 1)\n  {\n    if (q[q_idx] != '0')\n    {\n      p_idx = &q[q_idx];\n    }\n  }\n\n  if (p[p_idx] != 0)\n  {\n    p_idx += 1;\n    p[p_idx] = 0;\n  }\n  size = (&p[p_idx]) - buf;\n  *p_idx_ref = p_idx;\n  *q_idx_ref = q_idx;\n  *size_ref = size;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const q_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char * const",
                        "definition": [
                            "char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "char * const",
                        "definition": [
                            "char * const q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int q_idx = *q_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = *size_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_init_default",
            "header": "extern struct json_object_iterator json_object_iter_init_default(void)",
            "params": [
                "void"
            ],
            "definition": "struct json_object_iterator json_object_iter_init_default(void)\n{\n  struct json_object_iterator iter;\n  iter.opaque_ = 0;\n  return iter;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iterator",
                        "definition": [
                            "struct json_object_iterator iter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_begin",
            "header": "extern struct json_object_iterator json_object_iter_begin(struct json_object *obj)",
            "params": [
                "struct json_object *obj"
            ],
            "definition": "struct json_object_iterator json_object_iter_begin(struct json_object *obj)\n{\n  struct json_object_iterator iter;\n  struct lh_table *pTable;\n  unsigned int pTable_idx = 0;\n  pTable_idx = json_object_get_object(obj);\n  do\n  {\n  }\n  while (0);\n  iter.opaque_ = lh_table_head(pTable);\n  return iter;\n}\n\n",
            "calle": [
                "json_object_get_object",
                "lh_table_head"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iterator",
                        "definition": [
                            "struct json_object_iterator iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *pTable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pTable_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pTable_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_end",
            "header": "extern struct json_object_iterator json_object_iter_end(const struct json_object *obj)",
            "params": [
                "const struct json_object *obj"
            ],
            "definition": "struct json_object_iterator json_object_iter_end(const struct json_object *obj)\n{\n  struct json_object_iterator iter;\n  do\n  {\n  }\n  while (0);\n  do\n  {\n  }\n  while (0);\n  iter.opaque_ = kObjectEndIterValue;\n  return iter;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "const struct json_object *",
                        "definition": [
                            "const struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "struct json_object_iterator",
                        "definition": [
                            "struct json_object_iterator iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kObjectEndIterValue",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_next",
            "header": "extern void json_object_iter_next(struct json_object_iterator *iter)",
            "params": [
                "struct json_object_iterator *iter"
            ],
            "definition": "void json_object_iter_next(struct json_object_iterator *iter)\n{\n  do\n  {\n  }\n  while (0);\n  do\n  {\n  }\n  while (0);\n  iter->opaque_ = lh_entry_next((const struct lh_entry *) iter->opaque_);\n}\n\n",
            "calle": [
                "lh_entry_next"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_iterator",
                        "type": "struct json_object_iterator *",
                        "definition": [
                            "struct json_object_iterator *iter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_peek_name",
            "header": "extern const char *json_object_iter_peek_name(const struct json_object_iterator *iter)",
            "params": [
                "const struct json_object_iterator *iter"
            ],
            "definition": "const char *json_object_iter_peek_name(const struct json_object_iterator *iter)\n{\n  do\n  {\n  }\n  while (0);\n  do\n  {\n  }\n  while (0);\n  return (const char *) ((const struct lh_entry *) iter->opaque_)->k;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_iterator",
                        "type": "const struct json_object_iterator *",
                        "definition": [
                            "const struct json_object_iterator *iter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_peek_value",
            "header": "extern struct json_object *json_object_iter_peek_value(const struct json_object_iterator *iter)",
            "params": [
                "const struct json_object_iterator *iter"
            ],
            "definition": "struct json_object *json_object_iter_peek_value(const struct json_object_iterator *iter)\n{\n  do\n  {\n  }\n  while (0);\n  do\n  {\n  }\n  while (0);\n  return (struct json_object *) lh_entry_v((const struct lh_entry *) iter->opaque_);\n}\n\n",
            "calle": [
                "lh_entry_v"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_iterator",
                        "type": "const struct json_object_iterator *",
                        "definition": [
                            "const struct json_object_iterator *iter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_iter_equal",
            "header": "extern json_bool json_object_iter_equal(const struct json_object_iterator *iter1, const struct json_object_iterator *iter2)",
            "params": [
                "const struct json_object_iterator *iter1",
                "const struct json_object_iterator *iter2"
            ],
            "definition": "json_bool json_object_iter_equal(const struct json_object_iterator *iter1, const struct json_object_iterator *iter2)\n{\n  do\n  {\n  }\n  while (0);\n  do\n  {\n  }\n  while (0);\n  return iter1->opaque_ == iter2->opaque_;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object_iterator",
                        "type": "const struct json_object_iterator *",
                        "definition": [
                            "const struct json_object_iterator *iter1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object_iterator",
                        "type": "const struct json_object_iterator *",
                        "definition": [
                            "const struct json_object_iterator *iter2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_get_parse_end",
            "header": "extern size_t json_tokener_get_parse_end(struct json_tokener *tok)",
            "params": [
                "struct json_tokener *tok"
            ],
            "definition": "size_t json_tokener_get_parse_end(struct json_tokener *tok)\n{\n  assert(tok->char_offset >= 0);\n  return (size_t) tok->char_offset;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_error_desc",
            "header": "extern const char *json_tokener_error_desc(enum json_tokener_error jerr)",
            "params": [
                "enum json_tokener_error jerr"
            ],
            "definition": "const char *json_tokener_error_desc(enum json_tokener_error jerr)\n{\n  int jerr_int = (int) jerr;\n  if ((jerr_int < 0) || (jerr_int >= ((int) ((sizeof(json_tokener_errors)) / (sizeof(json_tokener_errors[0]))))))\n  {\n    return \"Unknown error, invalid json_tokener_error value passed to json_tokener_error_desc()\";\n  }\n  return json_tokener_errors[jerr];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr_int",
                        "type": "int",
                        "definition": [
                            "int jerr_int = (int) jerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_tokener_errors",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_get_error",
            "header": "extern enum json_tokener_error json_tokener_get_error(struct json_tokener *tok)",
            "params": [
                "struct json_tokener *tok"
            ],
            "definition": "enum json_tokener_error json_tokener_get_error(struct json_tokener *tok)\n{\n  return tok->err;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_new",
            "header": "extern struct json_tokener *json_tokener_new(void)",
            "params": [
                "void"
            ],
            "definition": "struct json_tokener *json_tokener_new(void)\n{\n  return json_tokener_new_ex(32);\n}\n\n",
            "calle": [
                "json_tokener_new_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_new_ex",
            "header": "extern struct json_tokener *json_tokener_new_ex(int depth)",
            "params": [
                "int depth"
            ],
            "definition": "struct json_tokener *json_tokener_new_ex(int depth)\n{\n  struct json_tokener *tok;\n  unsigned int tok_idx = 0;\n  if (depth < 1)\n  {\n    return 0;\n  }\n  tok_idx = (struct json_tokener *) calloc(1, sizeof(struct json_tokener));\n  if (!(&tok[tok_idx]))\n  {\n    return 0;\n  }\n  tok->stack = (struct json_tokener_srec *) calloc(depth, sizeof(struct json_tokener_srec));\n  if (!tok->stack)\n  {\n    free(tok);\n    return 0;\n  }\n  tok->pb = printbuf_new();\n  if (!tok->pb)\n  {\n    free(tok->stack);\n    free(tok);\n    return 0;\n  }\n  tok->max_depth = depth;\n  json_tokener_reset(tok);\n  return tok;\n}\n\n",
            "calle": [
                "calloc",
                "free",
                "json_tokener_reset",
                "printbuf_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_free",
            "header": "extern void json_tokener_free(struct json_tokener *tok)",
            "params": [
                "struct json_tokener *tok"
            ],
            "definition": "void json_tokener_free(struct json_tokener *tok)\n{\n  if (!tok)\n  {\n    return;\n  }\n  json_tokener_reset(tok);\n  if (tok->pb)\n  {\n    printbuf_free(tok->pb);\n  }\n  free(tok->stack);\n  free(tok);\n}\n\n",
            "calle": [
                "free",
                "json_tokener_reset",
                "printbuf_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_reset",
            "header": "extern void json_tokener_reset(struct json_tokener *tok)",
            "params": [
                "struct json_tokener *tok"
            ],
            "definition": "void json_tokener_reset(struct json_tokener *tok)\n{\n  int i;\n  if (!tok)\n  {\n    return;\n  }\n  for (i = tok->depth; i >= 0; i -= 1)\n    json_tokener_reset_level(tok, i);\n\n  tok->depth = 0;\n  tok->err = json_tokener_success;\n}\n\n",
            "calle": [
                "json_tokener_reset_level"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_parse",
            "header": "extern struct json_object *json_tokener_parse(const char *str)",
            "params": [
                "const char *str"
            ],
            "definition": "struct json_object *json_tokener_parse(const char *str)\n{\n  enum json_tokener_error jerr_ignored;\n  struct json_object *obj;\n  unsigned int obj_idx = 0;\n  obj_idx = json_tokener_parse_verbose(str, &jerr_ignored);\n  return obj;\n}\n\n",
            "calle": [
                "json_tokener_parse_verbose"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr_ignored",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr_ignored"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_parse_verbose",
            "header": "extern struct json_object *json_tokener_parse_verbose(const char *str, enum json_tokener_error *error)",
            "params": [
                "const char *str",
                "enum json_tokener_error *error"
            ],
            "definition": "struct json_object *json_tokener_parse_verbose(const char *str, enum json_tokener_error *error)\n{\n  struct json_tokener *tok;\n  unsigned int tok_idx = 0;\n  struct json_object *obj;\n  unsigned int obj_idx = 0;\n  tok_idx = json_tokener_new();\n  if (!(&tok[tok_idx]))\n  {\n    *error = json_tokener_error_memory;\n    return 0;\n  }\n  obj_idx = json_tokener_parse_ex(tok, str, -1);\n  *error = tok->err;\n  if (tok->err != json_tokener_success)\n  {\n    if ((&obj[obj_idx]) != 0)\n    {\n      json_object_put(obj);\n    }\n    obj_idx = 0;\n  }\n  json_tokener_free(tok);\n  return obj;\n}\n\n",
            "calle": [
                "json_object_put",
                "json_tokener_free",
                "json_tokener_new",
                "json_tokener_parse_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "enum json_tokener_error *",
                        "definition": [
                            "enum json_tokener_error *error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_set_flags",
            "header": "extern void json_tokener_set_flags(struct json_tokener *tok, int flags)",
            "params": [
                "struct json_tokener *tok",
                "int flags"
            ],
            "definition": "void json_tokener_set_flags(struct json_tokener *tok, int flags)\n{\n  tok->flags = flags;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_parse_ex",
            "header": "extern struct json_object *json_tokener_parse_ex(struct json_tokener *tok, const char *str, int len)",
            "params": [
                "struct json_tokener *tok",
                "const char *str",
                "int len"
            ],
            "definition": "struct json_object *json_tokener_parse_ex(struct json_tokener *tok, const char *str, int len)\n{\n  unsigned int str_idx = 0;\n  struct json_object *obj = 0;\n  unsigned int obj_idx = 0;\n  char c = '\\1';\n  unsigned int nBytes = 0;\n  unsigned int *nBytesp = &nBytes;\n  locale_t oldlocale = uselocale(0);\n  locale_t newloc;\n  tok->char_offset = 0;\n  tok->err = json_tokener_success;\n  if ((len < (-1)) || ((len == (-1)) && (strlen(str) > INT32_MAX)))\n  {\n    tok->err = json_tokener_error_size;\n    return 0;\n  }\n  {\n    helper_json_tokener_parse_ex_1(&newloc, tok, oldlocale);\n  }\n  while ((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = str[str_idx], 1))))\n  {\n    helper_json_tokener_parse_ex_2(&str_idx, &obj_idx, &c, tok, str, len, obj, nBytesp);\n  }\n\n  out:\n  if ((tok->flags & 0x10) && (nBytes != 0))\n  {\n    tok->err = json_tokener_error_parse_utf8_string;\n  }\n\n  if (((c && (tok->stack[tok->depth].state == json_tokener_state_finish)) && (tok->depth == 0)) && ((tok->flags & (0x01 | 0x02)) == 0x01))\n  {\n    tok->err = json_tokener_error_parse_unexpected;\n  }\n  if (!c)\n  {\n    if ((tok->stack[tok->depth].state != json_tokener_state_finish) && (tok->stack[tok->depth].saved_state != json_tokener_state_finish))\n    {\n      tok->err = json_tokener_error_parse_eof;\n    }\n  }\n  uselocale(oldlocale);\n  freelocale(newloc);\n  if (tok->err == json_tokener_success)\n  {\n    json_object *ret = json_object_get(tok->stack[tok->depth].current);\n    int ii;\n    for (ii = tok->depth; ii >= 0; ii -= 1)\n      json_tokener_reset_level(tok, ii);\n\n    return ret;\n  }\n  if (0)\n  {\n    mc_debug(\"json_tokener_parse_ex: error %s at offset %d\\n\", json_tokener_errors[tok->err], tok->char_offset);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "freelocale",
                "helper_json_tokener_parse_ex_1",
                "helper_json_tokener_parse_ex_2",
                "json_object_get",
                "json_tokener_reset_level",
                "json_tokener_validate_utf8",
                "mc_debug",
                "strlen",
                "uselocale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = '\\1'"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytes",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nBytes = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nBytesp = &nBytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldlocale",
                        "type": "locale_t",
                        "definition": [
                            "locale_t oldlocale = uselocale(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newloc",
                        "type": "locale_t",
                        "definition": [
                            "locale_t newloc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "json_object *",
                        "definition": [
                            "json_object *ret = json_object_get(tok->stack[tok->depth].current)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_tokener_errors",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_ws_char",
            "header": "",
            "params": [
                "char c"
            ],
            "definition": "inline static int is_ws_char(char c)\n{\n  return (((c == ' ') || (c == '\\t')) || (c == '\\n')) || (c == '\\r');\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_hex_char",
            "header": "",
            "params": [
                "char c"
            ],
            "definition": "inline static int is_hex_char(char c)\n{\n  return (((c >= '0') && (c <= '9')) || ((c >= 'A') && (c <= 'F'))) || ((c >= 'a') && (c <= 'f'));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_validate_utf8",
            "header": "static json_bool json_tokener_validate_utf8(const char c, unsigned int *nBytes)",
            "params": [
                "const char c",
                "unsigned int *nBytes"
            ],
            "definition": "static json_bool json_tokener_validate_utf8(const char c, unsigned int *nBytes)\n{\n  unsigned char chr = c;\n  if ((*nBytes) == 0)\n  {\n    if (chr >= 0x80)\n    {\n      if ((chr & 0xe0) == 0xc0)\n      {\n        *nBytes = 1;\n      }\n      else\n        if ((chr & 0xf0) == 0xe0)\n      {\n        *nBytes = 2;\n      }\n      else\n        if ((chr & 0xf8) == 0xf0)\n      {\n        *nBytes = 3;\n      }\n      else\n        return 0;\n    }\n  }\n  else\n  {\n    if ((chr & 0xC0) != 0x80)\n    {\n      return 0;\n    }\n    *nBytes -= 1;\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "const char",
                        "definition": [
                            "const char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytes",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *nBytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chr",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char chr = c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_parse_double",
            "header": "static int json_tokener_parse_double(const char *buf, int len, double *retval)",
            "params": [
                "const char *buf",
                "int len",
                "double *retval"
            ],
            "definition": "static int json_tokener_parse_double(const char *buf, int len, double *retval)\n{\n  char *end;\n  *retval = strtod(buf, &end);\n  if ((buf + len) == end)\n  {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "strtod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "double *",
                        "definition": [
                            "double *retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_tokener_reset_level",
            "header": "",
            "params": [
                "struct json_tokener *tok",
                "int depth"
            ],
            "definition": "static void json_tokener_reset_level(struct json_tokener *tok, int depth)\n{\n  tok->stack[depth].state = json_tokener_state_eatws;\n  tok->stack[depth].saved_state = json_tokener_state_start;\n  json_object_put(tok->stack[depth].current);\n  tok->stack[depth].current = 0;\n  free(tok->stack[depth].obj_field_name);\n  tok->stack[depth].obj_field_name = 0;\n}\n\n",
            "calle": [
                "free",
                "json_object_put"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_tokener_parse_ex_1",
            "header": "",
            "params": [
                "locale_t * const newloc_ref",
                "struct json_tokener * const tok",
                "locale_t oldlocale"
            ],
            "definition": "struct json_object *helper_json_tokener_parse_ex_1(locale_t * const newloc_ref, struct json_tokener * const tok, locale_t oldlocale)\n{\n  locale_t newloc = *newloc_ref;\n  locale_t duploc = duplocale(oldlocale);\n  if ((duploc == 0) && (errno == ENOMEM))\n  {\n    tok->err = json_tokener_error_memory;\n    return 0;\n  }\n  newloc = newlocale(LC_NUMERIC_MASK, \"C\", duploc);\n  if (newloc == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    freelocale(duploc);\n    return 0;\n  }\n  uselocale(newloc);\n  *newloc_ref = newloc;\n}\n\n",
            "calle": [
                "duplocale",
                "freelocale",
                "newlocale",
                "uselocale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "newloc_ref",
                        "type": "locale_t * const",
                        "definition": [
                            "locale_t * const newloc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldlocale",
                        "type": "locale_t",
                        "definition": [
                            "locale_t oldlocale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newloc",
                        "type": "locale_t",
                        "definition": [
                            "locale_t newloc = *newloc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "duploc",
                        "type": "locale_t",
                        "definition": [
                            "locale_t duploc = duplocale(oldlocale)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_tokener_parse_ex_2",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "unsigned int * const obj_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "struct json_object * const obj",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_json_tokener_parse_ex_2(unsigned int * const str_idx_ref, unsigned int * const obj_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, struct json_object * const obj, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  unsigned int obj_idx = *obj_idx_ref;\n  char c = *c_ref;\n  redo_char:\n  switch (tok->stack[tok->depth].state)\n  {\n    case json_tokener_state_eatws:\n    {\n      helper_helper_json_tokener_parse_ex_2_13(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_start:\n    {\n      helper_helper_json_tokener_parse_ex_2_23(tok, c);\n    }\n\n    case json_tokener_state_finish:\n    {\n      helper_helper_json_tokener_parse_ex_2_1(&obj_idx, tok);\n    }\n\n    case json_tokener_state_inf:\n    {\n      helper_helper_json_tokener_parse_ex_2_17(&str_idx, &c, tok, str, len, nBytesp);\n    }\n\n    case json_tokener_state_null:\n    {\n      helper_helper_json_tokener_parse_ex_2_18(tok, c);\n    }\n\n    case json_tokener_state_comment_start:\n    {\n      helper_helper_json_tokener_parse_ex_2_8(tok, c);\n    }\n\n    case json_tokener_state_comment:\n    {\n      helper_helper_json_tokener_parse_ex_2_14(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_comment_eol:\n    {\n      helper_helper_json_tokener_parse_ex_2_16(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_comment_end:\n    {\n      helper_helper_json_tokener_parse_ex_2_9(tok, c);\n    }\n\n    case json_tokener_state_string:\n    {\n      helper_helper_json_tokener_parse_ex_2_21(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_string_escape:\n    {\n      helper_helper_json_tokener_parse_ex_2_22(tok, c);\n    }\n\n    case json_tokener_state_escape_unicode:\n    {\n      helper_helper_json_tokener_parse_ex_2_24(&str_idx, &c, tok, str, len, nBytesp);\n    }\n\n    case json_tokener_state_escape_unicode_need_escape:\n    {\n      helper_helper_json_tokener_parse_ex_2_10(tok, c);\n    }\n\n    case json_tokener_state_escape_unicode_need_u:\n    {\n      helper_helper_json_tokener_parse_ex_2_11(tok, c);\n    }\n\n    case json_tokener_state_boolean:\n    {\n      helper_helper_json_tokener_parse_ex_2_20(tok, c);\n    }\n\n    case json_tokener_state_number:\n    {\n      helper_helper_json_tokener_parse_ex_2_25(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_array_after_sep:\n\n    case json_tokener_state_array:\n    {\n      helper_helper_json_tokener_parse_ex_2_15(tok, c);\n    }\n\n    case json_tokener_state_array_add:\n    {\n      helper_helper_json_tokener_parse_ex_2_2(tok, obj);\n    }\n\n    case json_tokener_state_array_sep:\n    {\n      helper_helper_json_tokener_parse_ex_2_7(tok, c);\n    }\n\n    case json_tokener_state_object_field_start:\n\n    case json_tokener_state_object_field_start_after_sep:\n    {\n      helper_helper_json_tokener_parse_ex_2_12(tok, c);\n    }\n\n    case json_tokener_state_object_field:\n    {\n      helper_helper_json_tokener_parse_ex_2_19(&c, tok, str, len, nBytesp, str_idx);\n    }\n\n    case json_tokener_state_object_field_end:\n    {\n      helper_helper_json_tokener_parse_ex_2_3(tok, c);\n    }\n\n    case json_tokener_state_object_value:\n    {\n      helper_helper_json_tokener_parse_ex_2_4(tok);\n    }\n\n    case json_tokener_state_object_value_add:\n    {\n      helper_helper_json_tokener_parse_ex_2_5(tok, obj);\n    }\n\n    case json_tokener_state_object_sep:\n    {\n      helper_helper_json_tokener_parse_ex_2_6(tok, c);\n    }\n\n  }\n\n\n  str_idx += 1;\n  str_idx += 1;\n  (void) ((++(&str[str_idx]), tok->char_offset++, c));\n  if (!c)\n    break;\n  *str_idx_ref = str_idx;\n  *obj_idx_ref = obj_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_json_tokener_parse_ex_2_1",
                "helper_helper_json_tokener_parse_ex_2_10",
                "helper_helper_json_tokener_parse_ex_2_11",
                "helper_helper_json_tokener_parse_ex_2_12",
                "helper_helper_json_tokener_parse_ex_2_13",
                "helper_helper_json_tokener_parse_ex_2_14",
                "helper_helper_json_tokener_parse_ex_2_15",
                "helper_helper_json_tokener_parse_ex_2_16",
                "helper_helper_json_tokener_parse_ex_2_17",
                "helper_helper_json_tokener_parse_ex_2_18",
                "helper_helper_json_tokener_parse_ex_2_19",
                "helper_helper_json_tokener_parse_ex_2_2",
                "helper_helper_json_tokener_parse_ex_2_20",
                "helper_helper_json_tokener_parse_ex_2_21",
                "helper_helper_json_tokener_parse_ex_2_22",
                "helper_helper_json_tokener_parse_ex_2_23",
                "helper_helper_json_tokener_parse_ex_2_24",
                "helper_helper_json_tokener_parse_ex_2_25",
                "helper_helper_json_tokener_parse_ex_2_3",
                "helper_helper_json_tokener_parse_ex_2_4",
                "helper_helper_json_tokener_parse_ex_2_5",
                "helper_helper_json_tokener_parse_ex_2_6",
                "helper_helper_json_tokener_parse_ex_2_7",
                "helper_helper_json_tokener_parse_ex_2_8",
                "helper_helper_json_tokener_parse_ex_2_9"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = *obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_1",
            "header": "",
            "params": [
                "unsigned int * const obj_idx_ref",
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_1(unsigned int * const obj_idx_ref, struct json_tokener * const tok)\n{\n  unsigned int obj_idx = *obj_idx_ref;\n  if (tok->depth == 0)\n  {\n    goto out;\n  }\n  obj_idx = json_object_get(tok->stack[tok->depth].current);\n  json_tokener_reset_level(tok, tok->depth);\n  tok->depth -= 1;\n  goto redo_char;\n  *obj_idx_ref = obj_idx;\n}\n\n",
            "calle": [
                "json_object_get",
                "json_tokener_reset_level"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = *obj_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "struct json_object * const obj"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_2(struct json_tokener * const tok, struct json_object * const obj)\n{\n  if (json_object_array_add(tok->stack[tok->depth].current, obj) != 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  tok->stack[tok->depth].saved_state = json_tokener_state_array_sep;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  goto redo_char;\n}\n\n",
            "calle": [
                "json_object_array_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_3",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_3(struct json_tokener * const tok, char c)\n{\n  if (c == ':')\n  {\n    tok->stack[tok->depth].saved_state = json_tokener_state_object_value;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_object_key_sep;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_4",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_4(struct json_tokener * const tok)\n{\n  if (tok->depth >= (tok->max_depth - 1))\n  {\n    tok->err = json_tokener_error_depth;\n    goto out;\n  }\n  tok->stack[tok->depth].state = json_tokener_state_object_value_add;\n  tok->depth += 1;\n  json_tokener_reset_level(tok, tok->depth);\n  goto redo_char;\n}\n\n",
            "calle": [
                "json_tokener_reset_level"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_5",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "struct json_object * const obj"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_5(struct json_tokener * const tok, struct json_object * const obj)\n{\n  if (json_object_object_add(tok->stack[tok->depth].current, tok->stack[tok->depth].obj_field_name, obj) != 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  free(tok->stack[tok->depth].obj_field_name);\n  tok->stack[tok->depth].obj_field_name = 0;\n  tok->stack[tok->depth].saved_state = json_tokener_state_object_sep;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  goto redo_char;\n}\n\n",
            "calle": [
                "free",
                "json_object_object_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_6",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_6(struct json_tokener * const tok, char c)\n{\n  if (c == '}')\n  {\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n    if (c == ',')\n  {\n    tok->stack[tok->depth].saved_state = json_tokener_state_object_field_start_after_sep;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_object_value_sep;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_7",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_7(struct json_tokener * const tok, char c)\n{\n  if (c == ']')\n  {\n    json_object_array_shrink(tok->stack[tok->depth].current, 0);\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n    if (c == ',')\n  {\n    tok->stack[tok->depth].saved_state = json_tokener_state_array_after_sep;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_array;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [
                "json_object_array_shrink"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_8",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_8(struct json_tokener * const tok, char c)\n{\n  if (c == '*')\n  {\n    tok->stack[tok->depth].state = json_tokener_state_comment;\n  }\n  else\n    if (c == '/')\n  {\n    tok->stack[tok->depth].state = json_tokener_state_comment_eol;\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_comment;\n    goto out;\n  }\n  do\n  {\n    if (printbuf_memappend(tok->pb, &c, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_9",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_9(struct json_tokener * const tok, char c)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, &c, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  if (c == '/')\n  {\n    if (0)\n    {\n      mc_debug(\"json_tokener_comment: %s\\n\", tok->pb->buf);\n    }\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n  {\n    tok->stack[tok->depth].state = json_tokener_state_comment;\n  }\n  break;\n}\n\n",
            "calle": [
                "mc_debug",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_10",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_10(struct json_tokener * const tok, char c)\n{\n  if ((!c) || (c != '\\\\'))\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, (char *) utf8_replacement_char, 3) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    tok->high_surrogate = 0;\n    tok->ucs_char = 0;\n    tok->st_pos = 0;\n    tok->stack[tok->depth].state = tok->stack[tok->depth].saved_state;\n    goto redo_char;\n  }\n  tok->stack[tok->depth].state = json_tokener_state_escape_unicode_need_u;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_replacement_char",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_11",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_11(struct json_tokener * const tok, char c)\n{\n  if ((!c) || (c != 'u'))\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, (char *) utf8_replacement_char, 3) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    tok->high_surrogate = 0;\n    tok->ucs_char = 0;\n    tok->st_pos = 0;\n    tok->stack[tok->depth].state = json_tokener_state_string_escape;\n    goto redo_char;\n  }\n  tok->stack[tok->depth].state = json_tokener_state_escape_unicode;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_replacement_char",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_12",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_12(struct json_tokener * const tok, char c)\n{\n  if (c == '}')\n  {\n    if ((tok->stack[tok->depth].state == json_tokener_state_object_field_start_after_sep) && (tok->flags & 0x01))\n    {\n      tok->err = json_tokener_error_parse_unexpected;\n      goto out;\n    }\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n    if ((c == '\"') || (c == '\\''))\n  {\n    tok->quote_char = c;\n    printbuf_reset(tok->pb);\n    tok->stack[tok->depth].state = json_tokener_state_object_field;\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_object_key_name;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [
                "printbuf_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_13",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_13(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  while (is_ws_char(c))\n  {\n    if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n    {\n      goto out;\n    }\n  }\n\n  if ((c == '/') && (!(tok->flags & 0x01)))\n  {\n    printbuf_reset(tok->pb);\n    do\n    {\n      if (printbuf_memappend(tok->pb, &c, 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    tok->stack[tok->depth].state = json_tokener_state_comment_start;\n  }\n  else\n  {\n    tok->stack[tok->depth].state = tok->stack[tok->depth].saved_state;\n    goto redo_char;\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "is_ws_char",
                "json_tokener_validate_utf8",
                "printbuf_memappend",
                "printbuf_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_14",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_14(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  {\n    const char *case_start = str;\n    while (c != '*')\n    {\n      if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n      {\n        do\n        {\n          if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n          {\n            tok->err = json_tokener_error_memory;\n            goto out;\n          }\n        }\n        while (0);\n        goto out;\n      }\n    }\n\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, (1 + (&str[str_idx])) - case_start) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    tok->stack[tok->depth].state = json_tokener_state_comment_end;\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "json_tokener_validate_utf8",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char *",
                        "definition": [
                            "const char *case_start = str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_15",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_15(struct json_tokener * const tok, char c)\n{\n  if (c == ']')\n  {\n    json_object_array_shrink(tok->stack[tok->depth].current, 0);\n    if ((tok->stack[tok->depth].state == json_tokener_state_array_after_sep) && (tok->flags & 0x01))\n    {\n      tok->err = json_tokener_error_parse_unexpected;\n      goto out;\n    }\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  else\n  {\n    if (tok->depth >= (tok->max_depth - 1))\n    {\n      tok->err = json_tokener_error_depth;\n      goto out;\n    }\n    tok->stack[tok->depth].state = json_tokener_state_array_add;\n    tok->depth += 1;\n    json_tokener_reset_level(tok, tok->depth);\n    goto redo_char;\n  }\n  break;\n}\n\n",
            "calle": [
                "json_object_array_shrink",
                "json_tokener_reset_level"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_16",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_16(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  {\n    const char *case_start = str;\n    while (c != '\\n')\n    {\n      if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n      {\n        do\n        {\n          if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n          {\n            tok->err = json_tokener_error_memory;\n            goto out;\n          }\n        }\n        while (0);\n        goto out;\n      }\n    }\n\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    if (0)\n    {\n      mc_debug(\"json_tokener_comment: %s\\n\", tok->pb->buf);\n    }\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "json_tokener_validate_utf8",
                "mc_debug",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char *",
                        "definition": [
                            "const char *case_start = str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_17",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_17(unsigned int * const str_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  char c = *c_ref;\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_17_1(&str_idx, &c, tok, str, len, nBytesp);\n  }\n  break;\n  *str_idx_ref = str_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_17_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_18",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_18(struct json_tokener * const tok, char c)\n{\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_18_1(tok, c);\n  }\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_18_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_19",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_19(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_19_1(&c, tok, str, len, nBytesp, str_idx);\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_19_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_20",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_20(struct json_tokener * const tok, char c)\n{\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_20_1(tok, c);\n  }\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_20_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_21",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_21(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_21_1(&c, tok, str, len, nBytesp, str_idx);\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_21_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_22",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_22(struct json_tokener * const tok, char c)\n{\n  switch (c)\n  {\n    case '\"':\n\n    case '\\\\':\n\n    case '/':\n    {\n      helper_helper_helper_json_tokener_parse_ex_2_22_1(tok, c);\n    }\n\n    case 'b':\n\n    case 'n':\n\n    case 'r':\n\n    case 't':\n\n    case 'f':\n    {\n      helper_helper_helper_json_tokener_parse_ex_2_22_2(tok, c);\n    }\n\n    case 'u':\n    {\n      tok->ucs_char = 0;\n      tok->st_pos = 0;\n      tok->stack[tok->depth].state = json_tokener_state_escape_unicode;\n      break;\n    }\n\n    default:\n    {\n      tok->err = json_tokener_error_parse_string;\n      goto out;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_22_1",
                "helper_helper_helper_json_tokener_parse_ex_2_22_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_23",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_23(struct json_tokener * const tok, char c)\n{\n  switch (c)\n  {\n    case '{':\n    {\n      helper_helper_helper_json_tokener_parse_ex_2_23_1(tok);\n    }\n\n    case '[':\n    {\n      helper_helper_helper_json_tokener_parse_ex_2_23_2(tok);\n    }\n\n    case 'I':\n\n    case 'i':\n    {\n      tok->stack[tok->depth].state = json_tokener_state_inf;\n      printbuf_reset(tok->pb);\n      tok->st_pos = 0;\n      goto redo_char;\n    }\n\n    case 'N':\n\n    case 'n':\n    {\n      tok->stack[tok->depth].state = json_tokener_state_null;\n      printbuf_reset(tok->pb);\n      tok->st_pos = 0;\n      goto redo_char;\n    }\n\n    case '\\'':\n    {\n      if (tok->flags & 0x01)\n      {\n        tok->err = json_tokener_error_parse_unexpected;\n        goto out;\n      }\n    }\n\n    case '\"':\n    {\n      tok->stack[tok->depth].state = json_tokener_state_string;\n      printbuf_reset(tok->pb);\n      tok->quote_char = c;\n      break;\n    }\n\n    case 'T':\n\n    case 't':\n\n    case 'F':\n\n    case 'f':\n    {\n      tok->stack[tok->depth].state = json_tokener_state_boolean;\n      printbuf_reset(tok->pb);\n      tok->st_pos = 0;\n      goto redo_char;\n    }\n\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n\n    case '-':\n    {\n      tok->stack[tok->depth].state = json_tokener_state_number;\n      printbuf_reset(tok->pb);\n      tok->is_double = 0;\n      goto redo_char;\n    }\n\n    default:\n    {\n      tok->err = json_tokener_error_parse_unexpected;\n      goto out;\n    }\n\n  }\n\n  break;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_23_1",
                "helper_helper_helper_json_tokener_parse_ex_2_23_2",
                "printbuf_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_24",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_24(unsigned int * const str_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  char c = *c_ref;\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_24_1(&str_idx, &c, tok, str, len, nBytesp);\n  }\n  break;\n  *str_idx_ref = str_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_24_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_json_tokener_parse_ex_2_25",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_json_tokener_parse_ex_2_25(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_25_2(&c, tok, str, len, nBytesp, str_idx);\n  }\n  {\n    helper_helper_helper_json_tokener_parse_ex_2_25_1(tok);\n  }\n  break;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_json_tokener_parse_ex_2_25_1",
                "helper_helper_helper_json_tokener_parse_ex_2_25_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_17_1",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_17_1(unsigned int * const str_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  char c = *c_ref;\n  int is_negative = 0;\n  while (tok->st_pos < ((int) json_inf_str_len))\n  {\n    char inf_char = str[str_idx];\n    if ((inf_char != json_inf_str[tok->st_pos]) && ((tok->flags & 0x01) || (inf_char != json_inf_str_invert[tok->st_pos])))\n    {\n      tok->err = json_tokener_error_parse_unexpected;\n      goto out;\n    }\n    tok->st_pos += 1;\n    str_idx += 1;\n    str_idx += 1;\n    (void) ((++(&str[str_idx]), tok->char_offset++, c));\n    if (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1)))))\n    {\n      goto out;\n    }\n  }\n\n  if ((tok->pb->bpos > 0) && ((*tok->pb->buf) == '-'))\n  {\n    is_negative = 1;\n  }\n  tok->stack[tok->depth].current = json_object_new_double((is_negative) ? (-INFINITY) : (INFINITY));\n  if (tok->stack[tok->depth].current == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  goto redo_char;\n  *str_idx_ref = str_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "json_object_new_double",
                "json_tokener_validate_utf8"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_negative",
                        "type": "int",
                        "definition": [
                            "int is_negative = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inf_char",
                        "type": "char",
                        "definition": [
                            "char inf_char = str[str_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_inf_str_len",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_inf_str",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_inf_str_invert",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_18_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_18_1(struct json_tokener * const tok, char c)\n{\n  int size;\n  int size_nan;\n  do\n  {\n    if (printbuf_memappend(tok->pb, &c, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  size = ((tok->st_pos + 1) < json_null_str_len) ? (tok->st_pos + 1) : (json_null_str_len);\n  size_nan = ((tok->st_pos + 1) < json_nan_str_len) ? (tok->st_pos + 1) : (json_nan_str_len);\n  if (((!(tok->flags & 0x01)) && (strncasecmp(json_null_str, tok->pb->buf, size) == 0)) || (strncmp(json_null_str, tok->pb->buf, size) == 0))\n  {\n    if (tok->st_pos == json_null_str_len)\n    {\n      tok->stack[tok->depth].current = 0;\n      tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n      tok->stack[tok->depth].state = json_tokener_state_eatws;\n      goto redo_char;\n    }\n  }\n  else\n    if (((!(tok->flags & 0x01)) && (strncasecmp(json_nan_str, tok->pb->buf, size_nan) == 0)) || (strncmp(json_nan_str, tok->pb->buf, size_nan) == 0))\n  {\n    if (tok->st_pos == json_nan_str_len)\n    {\n      tok->stack[tok->depth].current = json_object_new_double(nan(\"\"));\n      if (tok->stack[tok->depth].current == 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n      tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n      tok->stack[tok->depth].state = json_tokener_state_eatws;\n      goto redo_char;\n    }\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_null;\n    goto out;\n  }\n  tok->st_pos += 1;\n}\n\n",
            "calle": [
                "json_object_new_double",
                "nan",
                "printbuf_memappend",
                "strncasecmp",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_nan",
                        "type": "int",
                        "definition": [
                            "int size_nan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_null_str_len",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_nan_str_len",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_null_str",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_nan_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_19_1",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_19_1(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  const char *case_start = str;\n  while (1)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1(&c, tok, str, len, nBytesp, str_idx, case_start);\n  }\n\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char *",
                        "definition": [
                            "const char *case_start = str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_20_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_20_1(struct json_tokener * const tok, char c)\n{\n  int size1;\n  int size2;\n  do\n  {\n    if (printbuf_memappend(tok->pb, &c, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  size1 = ((tok->st_pos + 1) < json_true_str_len) ? (tok->st_pos + 1) : (json_true_str_len);\n  size2 = ((tok->st_pos + 1) < json_false_str_len) ? (tok->st_pos + 1) : (json_false_str_len);\n  if (((!(tok->flags & 0x01)) && (strncasecmp(json_true_str, tok->pb->buf, size1) == 0)) || (strncmp(json_true_str, tok->pb->buf, size1) == 0))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_1(tok);\n  }\n  else\n    if (((!(tok->flags & 0x01)) && (strncasecmp(json_false_str, tok->pb->buf, size2) == 0)) || (strncmp(json_false_str, tok->pb->buf, size2) == 0))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_2(tok);\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_boolean;\n    goto out;\n  }\n  tok->st_pos += 1;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_1",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_2",
                "printbuf_memappend",
                "strncasecmp",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size1",
                        "type": "int",
                        "definition": [
                            "int size1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size2",
                        "type": "int",
                        "definition": [
                            "int size2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_true_str_len",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_false_str_len",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_true_str",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_false_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_21_1",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_21_1(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  const char *case_start = str;\n  while (1)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1(&c, tok, str, len, nBytesp, str_idx, case_start);\n  }\n\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char *",
                        "definition": [
                            "const char *case_start = str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_22_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_22_1(struct json_tokener * const tok, char c)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, &c, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  tok->stack[tok->depth].state = tok->stack[tok->depth].saved_state;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_22_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "char c"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_22_2(struct json_tokener * const tok, char c)\n{\n  if (c == 'b')\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, \"\\b\", 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  else\n    if (c == 'n')\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, \"\\n\", 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  else\n    if (c == 'r')\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, \"\\r\", 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  else\n    if (c == 't')\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, \"\\t\", 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  else\n    if (c == 'f')\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, \"\\f\", 1) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  tok->stack[tok->depth].state = tok->stack[tok->depth].saved_state;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_23_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_23_1(struct json_tokener * const tok)\n{\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  tok->stack[tok->depth].saved_state = json_tokener_state_object_field_start;\n  tok->stack[tok->depth].current = json_object_new_object();\n  if (tok->stack[tok->depth].current == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [
                "json_object_new_object"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_23_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_23_2(struct json_tokener * const tok)\n{\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  tok->stack[tok->depth].saved_state = json_tokener_state_array;\n  tok->stack[tok->depth].current = json_object_new_array();\n  if (tok->stack[tok->depth].current == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  break;\n}\n\n",
            "calle": [
                "json_object_new_array"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_24_1",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_24_1(unsigned int * const str_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  char c = *c_ref;\n  while (1)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_6(&str_idx, &c, tok, str, len, nBytesp);\n  }\n\n  tok->st_pos = 0;\n  if (tok->high_surrogate)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_2(tok);\n  }\n  if (tok->ucs_char < 0x80)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_1(tok);\n  }\n  else\n    if (tok->ucs_char < 0x800)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_3(tok);\n  }\n  else\n    if ((tok->ucs_char & 0xFC00) == 0xD800)\n  {\n    tok->high_surrogate = tok->ucs_char;\n    tok->ucs_char = 0;\n    tok->stack[tok->depth].state = json_tokener_state_escape_unicode_need_escape;\n    break;\n  }\n  else\n    if ((tok->ucs_char & 0xFC00) == 0xDC00)\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, (char *) utf8_replacement_char, 3) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  else\n    if (tok->ucs_char < 0x10000)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_4(tok);\n  }\n  else\n    if (tok->ucs_char < 0x110000)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_5(tok);\n  }\n  else\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, (char *) utf8_replacement_char, 3) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  tok->stack[tok->depth].state = tok->stack[tok->depth].saved_state;\n  *str_idx_ref = str_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_1",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_2",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_3",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_4",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_5",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_6",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_replacement_char",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_25_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_25_1(struct json_tokener * const tok)\n{\n  int64_t num64;\n  uint64_t numuint64;\n  double numd;\n  if (((!tok->is_double) && (tok->pb->buf[0] == '-')) && (json_parse_int64(tok->pb->buf, &num64) == 0))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_1(tok, num64);\n  }\n  else\n    if (((!tok->is_double) && (tok->pb->buf[0] != '-')) && (json_parse_uint64(tok->pb->buf, &numuint64) == 0))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_2(&num64, tok, numuint64);\n  }\n  else\n    if (tok->is_double && (json_tokener_parse_double(tok->pb->buf, tok->pb->bpos, &numd) == 0))\n  {\n    tok->stack[tok->depth].current = json_object_new_double_s(numd, tok->pb->buf);\n    if (tok->stack[tok->depth].current == 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  else\n  {\n    tok->err = json_tokener_error_parse_number;\n    goto out;\n  }\n  tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  goto redo_char;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_1",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_2",
                "json_object_new_double_s",
                "json_parse_int64",
                "json_parse_uint64",
                "json_tokener_parse_double"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t num64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numuint64",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t numuint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numd",
                        "type": "double",
                        "definition": [
                            "double numd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_json_tokener_parse_ex_2_25_2",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_helper_json_tokener_parse_ex_2_25_2(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx)\n{\n  char c = *c_ref;\n  const char *case_start = str;\n  int case_len = 0;\n  int is_exponent = 0;\n  int neg_sign_ok = 1;\n  int pos_sign_ok = 0;\n  if (tok->pb->bpos > 0)\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_2(&is_exponent, &neg_sign_ok, &pos_sign_ok, tok);\n  }\n  while (c && ((((((c >= '0') && (c <= '9')) || ((!is_exponent) && ((c == 'e') || (c == 'E')))) || (neg_sign_ok && (c == '-'))) || (pos_sign_ok && (c == '+'))) || ((!tok->is_double) && (c == '.'))))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_3(&c, &case_len, &is_exponent, &neg_sign_ok, &pos_sign_ok, tok, str, len, nBytesp, str_idx, case_start);\n  }\n\n  if ((((((((tok->depth > 0) && (c != ',')) && (c != ']')) && (c != '}')) && (c != '/')) && (c != 'I')) && (c != 'i')) && (!is_ws_char(c)))\n  {\n    tok->err = json_tokener_error_parse_number;\n    goto out;\n  }\n  if (case_len > 0)\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, case_len) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  if (((tok->pb->buf[0] == '-') && (case_len <= 1)) && ((c == 'i') || (c == 'I')))\n  {\n    tok->stack[tok->depth].state = json_tokener_state_inf;\n    tok->st_pos = 0;\n    goto redo_char;\n  }\n  if (tok->is_double && (!(tok->flags & 0x01)))\n  {\n    helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_1(tok);\n  }\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_1",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_2",
                "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_3",
                "is_ws_char",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char *",
                        "definition": [
                            "const char *case_start = str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_len",
                        "type": "int",
                        "definition": [
                            "int case_len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_exponent",
                        "type": "int",
                        "definition": [
                            "int is_exponent = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg_sign_ok",
                        "type": "int",
                        "definition": [
                            "int neg_sign_ok = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_sign_ok",
                        "type": "int",
                        "definition": [
                            "int pos_sign_ok = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx, const char * const case_start)\n{\n  char c = *c_ref;\n  if (c == tok->quote_char)\n  {\n    helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_2(tok, str, str_idx, case_start);\n  }\n  else\n    if (c == '\\\\')\n  {\n    helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_1(tok, str, str_idx, case_start);\n  }\n  if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    goto out;\n  }\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_1",
                "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_2",
                "json_tokener_validate_utf8",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_1(struct json_tokener * const tok)\n{\n  if (tok->st_pos == json_true_str_len)\n  {\n    tok->stack[tok->depth].current = json_object_new_boolean(1);\n    if (tok->stack[tok->depth].current == 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n    goto redo_char;\n  }\n}\n\n",
            "calle": [
                "json_object_new_boolean"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_true_str_len",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_20_1_2(struct json_tokener * const tok)\n{\n  if (tok->st_pos == json_false_str_len)\n  {\n    tok->stack[tok->depth].current = json_object_new_boolean(0);\n    if (tok->stack[tok->depth].current == 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n    tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n    tok->stack[tok->depth].state = json_tokener_state_eatws;\n    goto redo_char;\n  }\n}\n\n",
            "calle": [
                "json_object_new_boolean"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_false_str_len",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1",
            "header": "",
            "params": [
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1(char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx, const char * const case_start)\n{\n  char c = *c_ref;\n  if (c == tok->quote_char)\n  {\n    helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_2(tok, str, str_idx, case_start);\n  }\n  else\n    if (c == '\\\\')\n  {\n    helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_1(tok, str, str_idx, case_start);\n  }\n  else\n    if ((tok->flags & 0x01) && (((unsigned char) c) <= 0x1f))\n  {\n    tok->err = json_tokener_error_parse_string;\n    goto out;\n  }\n  if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    goto out;\n  }\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_1",
                "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_2",
                "json_tokener_validate_utf8",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_1(struct json_tokener * const tok)\n{\n  unsigned char unescaped_utf[1];\n  unescaped_utf[0] = tok->ucs_char;\n  do\n  {\n    if (printbuf_memappend(tok->pb, (char *) unescaped_utf, 1) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unescaped_utf",
                        "type": "unsigned char [1]",
                        "definition": [
                            "unsigned char unescaped_utf[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_2(struct json_tokener * const tok)\n{\n  if ((tok->ucs_char & 0xFC00) == 0xDC00)\n  {\n    tok->ucs_char = (((tok->high_surrogate & 0x3FF) << 10) + (tok->ucs_char & 0x3FF)) + 0x10000;\n  }\n  else\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, (char *) utf8_replacement_char, 3) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n  }\n  tok->high_surrogate = 0;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_replacement_char",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_3",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_3(struct json_tokener * const tok)\n{\n  unsigned char unescaped_utf[2];\n  unescaped_utf[0] = 0xc0 | (tok->ucs_char >> 6);\n  unescaped_utf[1] = 0x80 | (tok->ucs_char & 0x3f);\n  do\n  {\n    if (printbuf_memappend(tok->pb, (char *) unescaped_utf, 2) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unescaped_utf",
                        "type": "unsigned char [2]",
                        "definition": [
                            "unsigned char unescaped_utf[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_4",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_4(struct json_tokener * const tok)\n{\n  unsigned char unescaped_utf[3];\n  unescaped_utf[0] = 0xe0 | (tok->ucs_char >> 12);\n  unescaped_utf[1] = 0x80 | ((tok->ucs_char >> 6) & 0x3f);\n  unescaped_utf[2] = 0x80 | (tok->ucs_char & 0x3f);\n  do\n  {\n    if (printbuf_memappend(tok->pb, (char *) unescaped_utf, 3) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unescaped_utf",
                        "type": "unsigned char [3]",
                        "definition": [
                            "unsigned char unescaped_utf[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_5",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_5(struct json_tokener * const tok)\n{\n  unsigned char unescaped_utf[4];\n  unescaped_utf[0] = 0xf0 | ((tok->ucs_char >> 18) & 0x07);\n  unescaped_utf[1] = 0x80 | ((tok->ucs_char >> 12) & 0x3f);\n  unescaped_utf[2] = 0x80 | ((tok->ucs_char >> 6) & 0x3f);\n  unescaped_utf[3] = 0x80 | (tok->ucs_char & 0x3f);\n  do\n  {\n    if (printbuf_memappend(tok->pb, (char *) unescaped_utf, 4) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unescaped_utf",
                        "type": "unsigned char [4]",
                        "definition": [
                            "unsigned char unescaped_utf[4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_6",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "char * const c_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_24_1_6(unsigned int * const str_idx_ref, char * const c_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp)\n{\n  unsigned int str_idx = *str_idx_ref;\n  char c = *c_ref;\n  if ((!c) || (!is_hex_char(c)))\n  {\n    tok->err = json_tokener_error_parse_string;\n    goto out;\n  }\n  tok->ucs_char |= ((unsigned int) ((c <= '9') ? (c - '0') : ((c & 7) + 9))) << ((3 - tok->st_pos) * 4);\n  tok->st_pos += 1;\n  if (tok->st_pos >= 4)\n  {\n    break;\n  }\n  str_idx += 1;\n  str_idx += 1;\n  (void) ((++(&str[str_idx]), tok->char_offset++, c));\n  if (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1)))))\n  {\n    goto out;\n  }\n  *str_idx_ref = str_idx;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "is_hex_char",
                "json_tokener_validate_utf8"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "int64_t num64"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_1(struct json_tokener * const tok, int64_t num64)\n{\n  if ((errno == ERANGE) && (tok->flags & 0x01))\n  {\n    tok->err = json_tokener_error_parse_number;\n    goto out;\n  }\n  tok->stack[tok->depth].current = json_object_new_int64(num64);\n  if (tok->stack[tok->depth].current == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n}\n\n",
            "calle": [
                "json_object_new_int64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t num64"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_2",
            "header": "",
            "params": [
                "int64_t * const num64_ref",
                "struct json_tokener * const tok",
                "uint64_t numuint64"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_25_1_2(int64_t * const num64_ref, struct json_tokener * const tok, uint64_t numuint64)\n{\n  int64_t num64 = *num64_ref;\n  if ((errno == ERANGE) && (tok->flags & 0x01))\n  {\n    tok->err = json_tokener_error_parse_number;\n    goto out;\n  }\n  if ((numuint64 && (tok->pb->buf[0] == '0')) && (tok->flags & 0x01))\n  {\n    tok->err = json_tokener_error_parse_number;\n    goto out;\n  }\n  if (numuint64 <= INT64_MAX)\n  {\n    num64 = (uint64_t) numuint64;\n    tok->stack[tok->depth].current = json_object_new_int64(num64);\n    if (tok->stack[tok->depth].current == 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  else\n  {\n    tok->stack[tok->depth].current = json_object_new_uint64(numuint64);\n    if (tok->stack[tok->depth].current == 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  *num64_ref = num64;\n}\n\n",
            "calle": [
                "json_object_new_int64",
                "json_object_new_uint64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num64_ref",
                        "type": "int64_t * const",
                        "definition": [
                            "int64_t * const num64_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numuint64",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t numuint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t num64 = *num64_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_1(struct json_tokener * const tok)\n{\n  while (tok->pb->bpos > 1)\n  {\n    char last_char = tok->pb->buf[tok->pb->bpos - 1];\n    if ((((last_char != 'e') && (last_char != 'E')) && (last_char != '-')) && (last_char != '+'))\n    {\n      break;\n    }\n    tok->pb->buf[tok->pb->bpos - 1] = '\\0';\n    tok->pb->bpos -= 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_char",
                        "type": "char",
                        "definition": [
                            "char last_char = tok->pb->buf[tok->pb->bpos - 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_2",
            "header": "",
            "params": [
                "int * const is_exponent_ref",
                "int * const neg_sign_ok_ref",
                "int * const pos_sign_ok_ref",
                "struct json_tokener * const tok"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_2(int * const is_exponent_ref, int * const neg_sign_ok_ref, int * const pos_sign_ok_ref, struct json_tokener * const tok)\n{\n  int is_exponent = *is_exponent_ref;\n  int neg_sign_ok = *neg_sign_ok_ref;\n  int pos_sign_ok = *pos_sign_ok_ref;\n  char *e_loc = strchr(tok->pb->buf, 'e');\n  unsigned int e_loc_idx = 0;\n  if (!(&e_loc[e_loc_idx]))\n  {\n    e_loc_idx = strchr(tok->pb->buf, 'E');\n  }\n  if (e_loc)\n  {\n    char *last_saved_char = &tok->pb->buf[tok->pb->bpos - 1];\n    is_exponent = 1;\n    pos_sign_ok = (neg_sign_ok = 1);\n    if ((&e_loc[e_loc_idx]) != last_saved_char)\n    {\n      neg_sign_ok = 0;\n      pos_sign_ok = 0;\n    }\n  }\n  *is_exponent_ref = is_exponent;\n  *neg_sign_ok_ref = neg_sign_ok;\n  *pos_sign_ok_ref = pos_sign_ok;\n}\n\n",
            "calle": [
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "is_exponent_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const is_exponent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg_sign_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const neg_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_sign_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pos_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_exponent",
                        "type": "int",
                        "definition": [
                            "int is_exponent = *is_exponent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg_sign_ok",
                        "type": "int",
                        "definition": [
                            "int neg_sign_ok = *neg_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_sign_ok",
                        "type": "int",
                        "definition": [
                            "int pos_sign_ok = *pos_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_loc",
                        "type": "char *",
                        "definition": [
                            "char *e_loc = strchr(tok->pb->buf, 'e')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_loc_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int e_loc_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_saved_char",
                        "type": "char *",
                        "definition": [
                            "char *last_saved_char = &tok->pb->buf[tok->pb->bpos - 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_3",
            "header": "",
            "params": [
                "char * const c_ref",
                "int * const case_len_ref",
                "int * const is_exponent_ref",
                "int * const neg_sign_ok_ref",
                "int * const pos_sign_ok_ref",
                "struct json_tokener * const tok",
                "const char * const str",
                "int len",
                "unsigned int * const nBytesp",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_json_tokener_parse_ex_2_25_2_3(char * const c_ref, int * const case_len_ref, int * const is_exponent_ref, int * const neg_sign_ok_ref, int * const pos_sign_ok_ref, struct json_tokener * const tok, const char * const str, int len, unsigned int * const nBytesp, unsigned int str_idx, const char * const case_start)\n{\n  char c = *c_ref;\n  int case_len = *case_len_ref;\n  int is_exponent = *is_exponent_ref;\n  int neg_sign_ok = *neg_sign_ok_ref;\n  int pos_sign_ok = *pos_sign_ok_ref;\n  pos_sign_ok = (neg_sign_ok = 0);\n  case_len += 1;\n  switch (c)\n  {\n    case '.':\n    {\n      tok->is_double = 1;\n      pos_sign_ok = 1;\n      neg_sign_ok = 1;\n      break;\n    }\n\n    case 'e':\n\n    case 'E':\n    {\n      is_exponent = 1;\n      tok->is_double = 1;\n      pos_sign_ok = (neg_sign_ok = 1);\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  if ((!((++(&str[str_idx]), tok->char_offset++, c))) || (!((tok->char_offset == len) ? ((((tok->depth == 0) && (tok->stack[tok->depth].state == json_tokener_state_eatws)) && (tok->stack[tok->depth].saved_state == json_tokener_state_finish)) ? ((tok->err = json_tokener_success, 0)) : ((tok->err = json_tokener_continue, 0))) : (((tok->flags & 0x10) && (!json_tokener_validate_utf8(*(&str[str_idx]), nBytesp))) ? ((tok->err = json_tokener_error_parse_utf8_string, 0)) : ((c = *(&str[str_idx]), 1))))))\n  {\n    do\n    {\n      if (printbuf_memappend(tok->pb, case_start, case_len) < 0)\n      {\n        tok->err = json_tokener_error_memory;\n        goto out;\n      }\n    }\n    while (0);\n    goto out;\n  }\n  *c_ref = c;\n  *case_len_ref = case_len;\n  *is_exponent_ref = is_exponent;\n  *neg_sign_ok_ref = neg_sign_ok;\n  *pos_sign_ok_ref = pos_sign_ok;\n}\n\n",
            "calle": [
                "json_tokener_validate_utf8",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_len_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const case_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_exponent_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const is_exponent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg_sign_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const neg_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_sign_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pos_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nBytesp",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const nBytesp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_len",
                        "type": "int",
                        "definition": [
                            "int case_len = *case_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_exponent",
                        "type": "int",
                        "definition": [
                            "int is_exponent = *is_exponent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg_sign_ok",
                        "type": "int",
                        "definition": [
                            "int neg_sign_ok = *neg_sign_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_sign_ok",
                        "type": "int",
                        "definition": [
                            "int pos_sign_ok = *pos_sign_ok_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "const char * const str",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_1(struct json_tokener * const tok, const char * const str, unsigned int str_idx, const char * const case_start)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  tok->stack[tok->depth].saved_state = json_tokener_state_object_field;\n  tok->stack[tok->depth].state = json_tokener_state_string_escape;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "const char * const str",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_helper_json_tokener_parse_ex_2_19_1_1_2(struct json_tokener * const tok, const char * const str, unsigned int str_idx, const char * const case_start)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  tok->stack[tok->depth].obj_field_name = strdup(tok->pb->buf);\n  if (tok->stack[tok->depth].obj_field_name == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  tok->stack[tok->depth].saved_state = json_tokener_state_object_field_end;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_1",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "const char * const str",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_1(struct json_tokener * const tok, const char * const str, unsigned int str_idx, const char * const case_start)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  tok->stack[tok->depth].saved_state = json_tokener_state_string;\n  tok->stack[tok->depth].state = json_tokener_state_string_escape;\n  break;\n}\n\n",
            "calle": [
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_2",
            "header": "",
            "params": [
                "struct json_tokener * const tok",
                "const char * const str",
                "unsigned int str_idx",
                "const char * const case_start"
            ],
            "definition": "void helper_helper_helper_helper_helper_json_tokener_parse_ex_2_21_1_1_2(struct json_tokener * const tok, const char * const str, unsigned int str_idx, const char * const case_start)\n{\n  do\n  {\n    if (printbuf_memappend(tok->pb, case_start, (&str[str_idx]) - case_start) < 0)\n    {\n      tok->err = json_tokener_error_memory;\n      goto out;\n    }\n  }\n  while (0);\n  tok->stack[tok->depth].current = json_object_new_string_len(tok->pb->buf, tok->pb->bpos);\n  if (tok->stack[tok->depth].current == 0)\n  {\n    tok->err = json_tokener_error_memory;\n    goto out;\n  }\n  tok->stack[tok->depth].saved_state = json_tokener_state_finish;\n  tok->stack[tok->depth].state = json_tokener_state_eatws;\n  break;\n}\n\n",
            "calle": [
                "json_object_new_string_len",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "case_start",
                        "type": "const char * const",
                        "definition": [
                            "const char * const case_start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_from_file",
            "header": "extern struct json_object *json_object_from_file(const char *filename)",
            "params": [
                "const char *filename"
            ],
            "definition": "struct json_object *json_object_from_file(const char *filename)\n{\n  struct json_object *obj;\n  unsigned int obj_idx = 0;\n  int fd;\n  if ((fd = open(filename, O_RDONLY)) < 0)\n  {\n    _json_c_set_last_err(\"json_object_from_file: error opening file %s: %s\\n\", filename, _json_c_strerror(errno));\n    return 0;\n  }\n  obj_idx = json_object_from_fd(fd);\n  close(fd);\n  return obj;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_c_strerror",
                "close",
                "json_object_from_fd",
                "open"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_from_fd_ex",
            "header": "extern struct json_object *json_object_from_fd_ex(int fd, int depth)",
            "params": [
                "int fd",
                "int in_depth"
            ],
            "definition": "struct json_object *json_object_from_fd_ex(int fd, int in_depth)\n{\n  struct printbuf *pb;\n  unsigned int pb_idx = 0;\n  struct json_object *obj;\n  unsigned int obj_idx = 0;\n  char buf[4096];\n  ssize_t ret;\n  int depth = 32;\n  json_tokener *tok;\n  unsigned int tok_idx = 0;\n  if (!(pb_idx = printbuf_new()))\n  {\n    _json_c_set_last_err(\"json_object_from_fd_ex: printbuf_new failed\\n\");\n    return 0;\n  }\n  if (in_depth != (-1))\n  {\n    depth = in_depth;\n  }\n  tok_idx = json_tokener_new_ex(depth);\n  if (!(&tok[tok_idx]))\n  {\n    _json_c_set_last_err(\"json_object_from_fd_ex: unable to allocate json_tokener(depth=%d): %s\\n\", depth, _json_c_strerror(errno));\n    printbuf_free(pb);\n    return 0;\n  }\n  while ((ret = read(fd, buf, sizeof(buf))) > 0)\n  {\n    if (printbuf_memappend(pb, buf, ret) < 0)\n    {\n      _json_c_set_last_err(\"json_object_from_fd_ex: failed to printbuf_memappend after reading %d+%d bytes: %s\", pb->bpos, (int) ret, _json_c_strerror(errno));\n      json_tokener_free(tok);\n      printbuf_free(pb);\n      return 0;\n    }\n  }\n\n  if (ret < 0)\n  {\n    _json_c_set_last_err(\"json_object_from_fd_ex: error reading fd %d: %s\\n\", fd, _json_c_strerror(errno));\n    json_tokener_free(tok);\n    printbuf_free(pb);\n    return 0;\n  }\n  obj_idx = json_tokener_parse_ex(tok, pb->buf, pb->bpos);\n  if ((&obj[obj_idx]) == 0)\n  {\n    _json_c_set_last_err(\"json_tokener_parse_ex failed: %s\\n\", json_tokener_error_desc(json_tokener_get_error(tok)));\n  }\n  json_tokener_free(tok);\n  printbuf_free(pb);\n  return obj;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_c_strerror",
                "json_tokener_error_desc",
                "json_tokener_free",
                "json_tokener_get_error",
                "json_tokener_new_ex",
                "json_tokener_parse_ex",
                "printbuf_free",
                "printbuf_memappend",
                "printbuf_new",
                "read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_depth",
                        "type": "int",
                        "definition": [
                            "int in_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pb_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [4096]",
                        "definition": [
                            "char buf[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth = 32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok",
                        "type": "json_tokener *",
                        "definition": [
                            "json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_from_fd",
            "header": "extern struct json_object *json_object_from_fd(int fd)",
            "params": [
                "int fd"
            ],
            "definition": "struct json_object *json_object_from_fd(int fd)\n{\n  return json_object_from_fd_ex(fd, -1);\n}\n\n",
            "calle": [
                "json_object_from_fd_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_file",
            "header": "extern int json_object_to_file(const char *filename, struct json_object *obj)",
            "params": [
                "const char *filename",
                "struct json_object *obj"
            ],
            "definition": "int json_object_to_file(const char *filename, struct json_object *obj)\n{\n  return json_object_to_file_ext(filename, obj, 0);\n}\n\n",
            "calle": [
                "json_object_to_file_ext"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_file_ext",
            "header": "extern int json_object_to_file_ext(const char *filename, struct json_object *obj, int flags)",
            "params": [
                "const char *filename",
                "struct json_object *obj",
                "int flags"
            ],
            "definition": "int json_object_to_file_ext(const char *filename, struct json_object *obj, int flags)\n{\n  int fd;\n  int ret;\n  int saved_errno;\n  if (!obj)\n  {\n    _json_c_set_last_err(\"json_object_to_file_ext: object is null\\n\");\n    return -1;\n  }\n  if ((fd = open(filename, (O_WRONLY | O_TRUNC) | O_CREAT, 0644)) < 0)\n  {\n    _json_c_set_last_err(\"json_object_to_file_ext: error opening file %s: %s\\n\", filename, _json_c_strerror(errno));\n    return -1;\n  }\n  ret = _json_object_to_fd(fd, obj, flags, filename);\n  saved_errno = errno;\n  close(fd);\n  errno = saved_errno;\n  return ret;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_c_strerror",
                "_json_object_to_fd",
                "close",
                "open"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "saved_errno",
                        "type": "int",
                        "definition": [
                            "int saved_errno"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_to_fd",
            "header": "extern int json_object_to_fd(int fd, struct json_object *obj, int flags)",
            "params": [
                "int fd",
                "struct json_object *obj",
                "int flags"
            ],
            "definition": "int json_object_to_fd(int fd, struct json_object *obj, int flags)\n{\n  if (!obj)\n  {\n    _json_c_set_last_err(\"json_object_to_fd: object is null\\n\");\n    return -1;\n  }\n  return _json_object_to_fd(fd, obj, flags, 0);\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_object_to_fd"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_util_get_last_err",
            "header": "extern const char *json_util_get_last_err(void)",
            "params": [
                "void"
            ],
            "definition": "const char *json_util_get_last_err(void)\n{\n  if (_last_err[0] == '\\0')\n  {\n    return 0;\n  }\n  return _last_err;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_last_err",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_parse_int64",
            "header": "extern int json_parse_int64(const char *buf, int64_t *retval)",
            "params": [
                "const char *buf",
                "int64_t *retval"
            ],
            "definition": "int json_parse_int64(const char *buf, int64_t *retval)\n{\n  char *end = 0;\n  int64_t val;\n  errno = 0;\n  val = strtoll(buf, &end, 10);\n  if (end != buf)\n  {\n    *retval = val;\n  }\n  if (((val == 0) && (errno != 0)) || (end == buf))\n  {\n    errno = EINVAL;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "strtoll"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int64_t *",
                        "definition": [
                            "int64_t *retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int64_t",
                        "definition": [
                            "int64_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_parse_uint64",
            "header": "extern int json_parse_uint64(const char *buf, uint64_t *retval)",
            "params": [
                "const char *buf",
                "uint64_t *retval"
            ],
            "definition": "int json_parse_uint64(const char *buf, uint64_t *retval)\n{\n  unsigned int buf_idx = 0;\n  char *end = 0;\n  uint64_t val;\n  errno = 0;\n  while (buf[buf_idx] == ' ')\n    (&buf[buf_idx])++;\n\n  buf_idx += 1;\n  if (buf[buf_idx] == '-')\n  {\n    return 1;\n  }\n  val = strtoull(buf, &end, 10);\n  if (end != (&buf[buf_idx]))\n  {\n    *retval = val;\n  }\n  if (((val == 0) && (errno != 0)) || (end == (&buf[buf_idx])))\n  {\n    errno = EINVAL;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "strtoull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "uint64_t *",
                        "definition": [
                            "uint64_t *retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_parse_double",
            "header": "extern int json_parse_double(const char *buf, double *retval)",
            "params": [
                "const char *buf",
                "double *retval"
            ],
            "definition": "int json_parse_double(const char *buf, double *retval)\n{\n  char *end;\n  *retval = strtod(buf, &end);\n  return (end == buf) ? (1) : (0);\n}\n\n",
            "calle": [
                "strtod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "double *",
                        "definition": [
                            "double *retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_type_to_name",
            "header": "extern const char *json_type_to_name(enum json_type o_type)",
            "params": [
                "enum json_type o_type"
            ],
            "definition": "const char *json_type_to_name(enum json_type o_type)\n{\n  int o_type_int = (int) o_type;\n  if ((o_type_int < 0) || (o_type_int >= ((int) ((sizeof(json_type_name)) / (sizeof(json_type_name[0]))))))\n  {\n    _json_c_set_last_err(\"json_type_to_name: type %d is out of range [0,%u]\\n\", o_type, (unsigned) ((sizeof(json_type_name)) / (sizeof(json_type_name[0]))));\n    return 0;\n  }\n  return json_type_name[o_type];\n}\n\n",
            "calle": [
                "_json_c_set_last_err"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "o_type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type o_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_type_int",
                        "type": "int",
                        "definition": [
                            "int o_type_int = (int) o_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_type_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_object_to_fd",
            "header": "static int _json_object_to_fd(int fd, struct json_object *obj, int flags, const char *filename)",
            "params": [
                "int fd",
                "struct json_object *obj",
                "int flags",
                "const char *filename"
            ],
            "definition": "static int _json_object_to_fd(int fd, struct json_object *obj, int flags, const char *filename)\n{\n  unsigned int filename_idx = 0;\n  ssize_t ret;\n  const char *json_str;\n  unsigned int json_str_idx = 0;\n  size_t wpos;\n  size_t wsize;\n  filename_idx = (filename_idx) ? (filename_idx) : (\"(fd)\");\n  if (!(json_str_idx = json_object_to_json_string_ext(obj, flags)))\n  {\n    return -1;\n  }\n  wsize = strlen(json_str);\n  wpos = 0;\n  while (wpos < wsize)\n  {\n    if ((ret = write(fd, (&json_str[json_str_idx]) + wpos, wsize - wpos)) < 0)\n    {\n      _json_c_set_last_err(\"json_object_to_fd: error writing file %s: %s\\n\", filename, _json_c_strerror(errno));\n      return -1;\n    }\n    wpos += (size_t) ret;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "_json_c_set_last_err",
                "_json_c_strerror",
                "json_object_to_json_string_ext",
                "strlen",
                "write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int filename_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_str",
                        "type": "const char *",
                        "definition": [
                            "const char *json_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int json_str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wpos",
                        "type": "size_t",
                        "definition": [
                            "size_t wpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "size_t",
                        "definition": [
                            "size_t wsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_c_set_last_err",
            "header": "",
            "params": [
                "const char *err_fmt",
                "..."
            ],
            "definition": "void _json_c_set_last_err(const char *err_fmt, ...)\n{\n  va_list ap;\n  __builtin_va_start(ap);\n  (void) vsnprintf(_last_err, sizeof(_last_err), err_fmt, ap);\n  ;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "vsnprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *err_fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_last_err",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_visit",
            "header": "extern int json_c_visit(json_object *jso, int future_flags, json_c_visit_userfunc *userfunc, void *userarg)",
            "params": [
                "json_object *jso",
                "int future_flags",
                "json_c_visit_userfunc *userfunc",
                "void *userarg"
            ],
            "definition": "int json_c_visit(json_object *jso, int future_flags, json_c_visit_userfunc *userfunc, void *userarg)\n{\n  int ret = _json_c_visit(jso, 0, 0, 0, userfunc, userarg);\n  switch (ret)\n  {\n    case 0:\n\n    case 7547:\n\n    case 767:\n\n    case 7867:\n    {\n      return 0;\n    }\n\n    default:\n    {\n      return -1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "_json_c_visit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "future_flags",
                        "type": "int",
                        "definition": [
                            "int future_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userfunc",
                        "type": "json_c_visit_userfunc *",
                        "definition": [
                            "json_c_visit_userfunc *userfunc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = _json_c_visit(jso, 0, 0, 0, userfunc, userarg)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_c_visit",
            "header": "static int _json_c_visit(json_object *jso, json_object *parent_jso, const char *jso_key, size_t *jso_index, json_c_visit_userfunc *userfunc, void *userarg)",
            "params": [
                "json_object *jso",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "json_c_visit_userfunc *userfunc",
                "void *userarg"
            ],
            "definition": "static int _json_c_visit(json_object *jso, json_object *parent_jso, const char *jso_key, size_t *jso_index, json_c_visit_userfunc *userfunc, void *userarg)\n{\n  int userret = userfunc(jso, 0, parent_jso, jso_key, jso_index, userarg);\n  switch (userret)\n  {\n    case 0:\n    {\n      break;\n    }\n\n    case 7547:\n\n    case 767:\n\n    case 7867:\n\n    case -1:\n    {\n      return userret;\n    }\n\n    default:\n    {\n      fprintf(stderr, \"ERROR: invalid return value from json_c_visit userfunc: %d\\n\", userret);\n      return -1;\n    }\n\n  }\n\n  switch (json_object_get_type(jso))\n  {\n    case json_type_null:\n\n    case json_type_boolean:\n\n    case json_type_double:\n\n    case json_type_int:\n\n    case json_type_string:\n    {\n      return 0;\n    }\n\n    case json_type_object:\n    {\n      helper__json_c_visit_2(&userret, &entry_nextkey_idx, jso, userfunc, userarg);\n    }\n\n    case json_type_array:\n    {\n      helper__json_c_visit_1(&userret, jso, userfunc, userarg);\n    }\n\n    default:\n    {\n      fprintf(stderr, \"INTERNAL ERROR: _json_c_visit found object of unknown type: %d\\n\", json_object_get_type(jso));\n      return -1;\n    }\n\n  }\n\n  userret = userfunc(jso, 0x02, parent_jso, jso_key, jso_index, userarg);\n  switch (userret)\n  {\n    case 7547:\n\n    case 767:\n\n    case 0:\n    {\n      return 0;\n    }\n\n    case 7867:\n\n    case -1:\n    {\n      return userret;\n    }\n\n    default:\n    {\n      fprintf(stderr, \"ERROR: invalid return value from json_c_visit userfunc: %d\\n\", userret);\n      return -1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "fprintf",
                "helper__json_c_visit_1",
                "helper__json_c_visit_2",
                "json_object_get_type",
                "userfunc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userfunc",
                        "type": "json_c_visit_userfunc *",
                        "definition": [
                            "json_c_visit_userfunc *userfunc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userret",
                        "type": "int",
                        "definition": [
                            "int userret = userfunc(jso, 0, parent_jso, jso_key, jso_index, userarg)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__json_c_visit_1",
            "header": "",
            "params": [
                "int * const userret_ref",
                "json_object * const jso",
                "json_c_visit_userfunc * const userfunc",
                "void * const userarg"
            ],
            "definition": "int helper__json_c_visit_1(int * const userret_ref, json_object * const jso, json_c_visit_userfunc * const userfunc, void * const userarg)\n{\n  int userret = *userret_ref;\n  size_t array_len = json_object_array_length(jso);\n  size_t ii;\n  for (ii = 0; ii < array_len; ii += 1)\n  {\n    json_object *child = json_object_array_get_idx(jso, ii);\n    unsigned int child_idx = 0;\n    userret = _json_c_visit(child, jso, 0, &ii, userfunc, userarg);\n    if (userret == 767)\n    {\n      break;\n    }\n    if ((userret == 7867) || (userret == (-1)))\n    {\n      return userret;\n    }\n    if ((userret != 0) && (userret != 7547))\n    {\n      fprintf(stderr, \"INTERNAL ERROR: _json_c_visit returned %d\\n\", userret);\n      return -1;\n    }\n  }\n\n  break;\n  *userret_ref = userret;\n}\n\n",
            "calle": [
                "_json_c_visit",
                "fprintf",
                "json_object_array_get_idx",
                "json_object_array_length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "userret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const userret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userfunc",
                        "type": "json_c_visit_userfunc * const",
                        "definition": [
                            "json_c_visit_userfunc * const userfunc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void * const",
                        "definition": [
                            "void * const userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userret",
                        "type": "int",
                        "definition": [
                            "int userret = *userret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array_len",
                        "type": "size_t",
                        "definition": [
                            "size_t array_len = json_object_array_length(jso)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "child",
                        "type": "json_object *",
                        "definition": [
                            "json_object *child = json_object_array_get_idx(jso, ii)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "child_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int child_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__json_c_visit_2",
            "header": "",
            "params": [
                "int * const userret_ref",
                "unsigned int * const entry_nextkey_idx_ref",
                "json_object * const jso",
                "json_c_visit_userfunc * const userfunc",
                "void * const userarg"
            ],
            "definition": "int helper__json_c_visit_2(int * const userret_ref, unsigned int * const entry_nextkey_idx_ref, json_object * const jso, json_c_visit_userfunc * const userfunc, void * const userarg)\n{\n  int userret = *userret_ref;\n  unsigned int entry_nextkey_idx = *entry_nextkey_idx_ref;\n  char *key = 0;\n  unsigned int key_idx = 0;\n  struct json_object *child = 0;\n  unsigned int child_idx = 0;\n  for (struct lh_entry *entrykey = lh_table_head(json_object_get_object(jso)), entry_nextkey = 0;   {\n    if (entrykey)\n    {\n      key_idx = (char *) lh_entry_k(entrykey);\n      child_idx = (struct json_object *) lh_entry_v(entrykey);\n      entry_nextkey_idx = lh_entry_next(entrykey);\n    }\n    ;\n    entrykey;\n  }\n; entrykey_idx = &entry_nextkey[entry_nextkey_idx])\n  {\n    userret = _json_c_visit(child, jso, key, 0, userfunc, userarg);\n    if (userret == 767)\n    {\n      break;\n    }\n    if ((userret == 7867) || (userret == (-1)))\n    {\n      return userret;\n    }\n    if ((userret != 0) && (userret != 7547))\n    {\n      fprintf(stderr, \"INTERNAL ERROR: _json_c_visit returned %d\\n\", userret);\n      return -1;\n    }\n  }\n\n  unsigned int entry_nextkey_idx = 0;\n  break;\n  *userret_ref = userret;\n  *entry_nextkey_idx_ref = entry_nextkey_idx;\n}\n\n",
            "calle": [
                "_json_c_visit",
                "fprintf",
                "json_object_get_object",
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v",
                "lh_table_head"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "userret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const userret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const entry_nextkey_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userfunc",
                        "type": "json_c_visit_userfunc * const",
                        "definition": [
                            "json_c_visit_userfunc * const userfunc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void * const",
                        "definition": [
                            "void * const userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userret",
                        "type": "int",
                        "definition": [
                            "int userret = *userret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey_idx = *entry_nextkey_idx_ref",
                            "unsigned int entry_nextkey_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char *",
                        "definition": [
                            "char *key = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *child = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "child_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int child_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entrykey = lh_table_head(json_object_get_object(jso))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry_nextkey = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_global_set_string_hash",
            "header": "int json_global_set_string_hash(const int h)",
            "params": [
                "const int h"
            ],
            "definition": "int json_global_set_string_hash(const int h)\n{\n  switch (h)\n  {\n    case 0:\n    {\n      char_hash_fn = lh_char_hash;\n      break;\n    }\n\n    case 1:\n    {\n      char_hash_fn = lh_perllike_str_hash;\n      break;\n    }\n\n    default:\n    {\n      return -1;\n    }\n\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lh_char_hash",
                "lh_perllike_str_hash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "h",
                        "type": "const int",
                        "definition": [
                            "const int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "char_hash_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_new",
            "header": "extern struct lh_table *lh_table_new(int size, lh_entry_free_fn *free_fn, lh_hash_fn *hash_fn, lh_equal_fn *equal_fn)",
            "params": [
                "int size",
                "lh_entry_free_fn *free_fn",
                "lh_hash_fn *hash_fn",
                "lh_equal_fn *equal_fn"
            ],
            "definition": "struct lh_table *lh_table_new(int size, lh_entry_free_fn *free_fn, lh_hash_fn *hash_fn, lh_equal_fn *equal_fn)\n{\n  int i;\n  struct lh_table *t;\n  unsigned int t_idx = 0;\n  assert(size > 0);\n  t_idx = (struct lh_table *) calloc(1, sizeof(struct lh_table));\n  if (!(&t[t_idx]))\n  {\n    return 0;\n  }\n  t->count = 0;\n  t->size = size;\n  t->table = (struct lh_entry *) calloc(size, sizeof(struct lh_entry));\n  if (!t->table)\n  {\n    free(t);\n    return 0;\n  }\n  t->free_fn = free_fn;\n  t->hash_fn = hash_fn;\n  t->equal_fn = equal_fn;\n  for (i = 0; i < size; i += 1)\n    t->table[i].k = (void *) (-1);\n\n  return t;\n}\n\n",
            "calle": [
                "assert",
                "calloc",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "lh_entry_free_fn *",
                        "definition": [
                            "lh_entry_free_fn *free_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_fn",
                        "type": "lh_hash_fn *",
                        "definition": [
                            "lh_hash_fn *hash_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "equal_fn",
                        "type": "lh_equal_fn *",
                        "definition": [
                            "lh_equal_fn *equal_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int t_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_kchar_table_new",
            "header": "extern struct lh_table *lh_kchar_table_new(int size, lh_entry_free_fn *free_fn)",
            "params": [
                "int size",
                "lh_entry_free_fn *free_fn"
            ],
            "definition": "struct lh_table *lh_kchar_table_new(int size, lh_entry_free_fn *free_fn)\n{\n  return lh_table_new(size, free_fn, char_hash_fn, lh_char_equal);\n}\n\n",
            "calle": [
                "lh_char_equal",
                "lh_table_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "lh_entry_free_fn *",
                        "definition": [
                            "lh_entry_free_fn *free_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "char_hash_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_kptr_table_new",
            "header": "extern struct lh_table *lh_kptr_table_new(int size, lh_entry_free_fn *free_fn)",
            "params": [
                "int size",
                "lh_entry_free_fn *free_fn"
            ],
            "definition": "struct lh_table *lh_kptr_table_new(int size, lh_entry_free_fn *free_fn)\n{\n  return lh_table_new(size, free_fn, lh_ptr_hash, lh_ptr_equal);\n}\n\n",
            "calle": [
                "lh_ptr_equal",
                "lh_ptr_hash",
                "lh_table_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "lh_entry_free_fn *",
                        "definition": [
                            "lh_entry_free_fn *free_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_free",
            "header": "extern void lh_table_free(struct lh_table *t)",
            "params": [
                "struct lh_table *t"
            ],
            "definition": "void lh_table_free(struct lh_table *t)\n{\n  struct lh_entry *c;\n  unsigned int c_idx = 0;\n  if (t->free_fn)\n  {\n    for (c_idx = t->head; (&c[c_idx]) != 0; c_idx = c_idx->next)\n      t->free_fn(c);\n\n  }\n  free(t->table);\n  free(t);\n}\n\n",
            "calle": [
                "free",
                "t->free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int c_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_insert",
            "header": "extern int lh_table_insert(struct lh_table *t, const void *k, const void *v)",
            "params": [
                "struct lh_table *t",
                "const void *k",
                "const void *v"
            ],
            "definition": "int lh_table_insert(struct lh_table *t, const void *k, const void *v)\n{\n  return lh_table_insert_w_hash(t, k, v, lh_get_hash(t, k), 0);\n}\n\n",
            "calle": [
                "lh_get_hash",
                "lh_table_insert_w_hash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "const void *",
                        "definition": [
                            "const void *v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_insert_w_hash",
            "header": "extern int lh_table_insert_w_hash(struct lh_table *t, const void *k, const void *v, const unsigned long h, const unsigned opts)",
            "params": [
                "struct lh_table *t",
                "const void *k",
                "const void *v",
                "const unsigned long h",
                "const unsigned opts"
            ],
            "definition": "int lh_table_insert_w_hash(struct lh_table *t, const void *k, const void *v, const unsigned long h, const unsigned opts)\n{\n  unsigned long n;\n  if (t->count >= (t->size * 0.66))\n  {\n    int new_size = (t->size > (2147483647 / 2)) ? (2147483647) : (t->size * 2);\n    if ((t->size == 2147483647) || (lh_table_resize(t, new_size) != 0))\n    {\n      return -1;\n    }\n  }\n  n = h % t->size;\n  while (1)\n  {\n    if ((t->table[n].k == ((void *) (-1))) || (t->table[n].k == ((void *) (-2))))\n    {\n      break;\n    }\n    if (((int) (++n)) == t->size)\n    {\n      n = 0;\n    }\n  }\n\n  t->table[n].k = k;\n  t->table[n].k_is_constant = opts & (1 << 2);\n  t->table[n].v = v;\n  t->count += 1;\n  if (t->head == 0)\n  {\n    t->head = (t->tail = &t->table[n]);\n    t->table[n].next = (t->table[n].prev = 0);\n  }\n  else\n  {\n    t->tail->next = &t->table[n];\n    t->table[n].prev = t->tail;\n    t->table[n].next = 0;\n    t->tail = &t->table[n];\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lh_table_resize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "const void *",
                        "definition": [
                            "const void *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const unsigned long",
                        "definition": [
                            "const unsigned long h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opts",
                        "type": "const unsigned",
                        "definition": [
                            "const unsigned opts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "int",
                        "definition": [
                            "int new_size = (t->size > (2147483647 / 2)) ? (2147483647) : (t->size * 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_lookup_entry",
            "header": "extern struct lh_entry *lh_table_lookup_entry(struct lh_table *t, const void *k)",
            "params": [
                "struct lh_table *t",
                "const void *k"
            ],
            "definition": "struct lh_entry *lh_table_lookup_entry(struct lh_table *t, const void *k)\n{\n  return lh_table_lookup_entry_w_hash(t, k, lh_get_hash(t, k));\n}\n\n",
            "calle": [
                "lh_get_hash",
                "lh_table_lookup_entry_w_hash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_lookup_entry_w_hash",
            "header": "extern struct lh_entry *lh_table_lookup_entry_w_hash(struct lh_table *t, const void *k, const unsigned long h)",
            "params": [
                "struct lh_table *t",
                "const void *k",
                "const unsigned long h"
            ],
            "definition": "struct lh_entry *lh_table_lookup_entry_w_hash(struct lh_table *t, const void *k, const unsigned long h)\n{\n  unsigned long n = h % t->size;\n  int count = 0;\n  while (count < t->size)\n  {\n    if (t->table[n].k == ((void *) (-1)))\n    {\n      return 0;\n    }\n    if ((t->table[n].k != ((void *) (-2))) && t->equal_fn(t->table[n].k, k))\n    {\n      return &t->table[n];\n    }\n    if (((int) (++n)) == t->size)\n    {\n      n = 0;\n    }\n    count += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "t->equal_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const unsigned long",
                        "definition": [
                            "const unsigned long h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long n = h % t->size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_lookup_ex",
            "header": "extern json_bool lh_table_lookup_ex(struct lh_table *t, const void *k, void **v)",
            "params": [
                "struct lh_table *t",
                "const void *k",
                "void **v"
            ],
            "definition": "json_bool lh_table_lookup_ex(struct lh_table *t, const void *k, void **v)\n{\n  struct lh_entry *e = lh_table_lookup_entry(t, k);\n  if (e != 0)\n  {\n    if (v != 0)\n    {\n      *v = lh_entry_v(e);\n    }\n    return 1;\n  }\n  if (v != 0)\n  {\n    *v = 0;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lh_entry_v",
                "lh_table_lookup_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "void **",
                        "definition": [
                            "void **v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *e = lh_table_lookup_entry(t, k)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_delete_entry",
            "header": "extern int lh_table_delete_entry(struct lh_table *t, struct lh_entry *e)",
            "params": [
                "struct lh_table *t",
                "struct lh_entry *e"
            ],
            "definition": "int lh_table_delete_entry(struct lh_table *t, struct lh_entry *e)\n{\n  ptrdiff_t n = (ptrdiff_t) (e - t->table);\n  if (n < 0)\n  {\n    return -2;\n  }\n  if ((t->table[n].k == ((void *) (-1))) || (t->table[n].k == ((void *) (-2))))\n  {\n    return -1;\n  }\n  t->count -= 1;\n  if (t->free_fn)\n  {\n    t->free_fn(e);\n  }\n  t->table[n].v = 0;\n  t->table[n].k = (void *) (-2);\n  if ((t->tail == (&t->table[n])) && (t->head == (&t->table[n])))\n  {\n    t->head = (t->tail = 0);\n  }\n  else\n    if (t->head == (&t->table[n]))\n  {\n    t->head->next->prev = 0;\n    t->head = t->head->next;\n  }\n  else\n    if (t->tail == (&t->table[n]))\n  {\n    t->tail->prev->next = 0;\n    t->tail = t->tail->prev;\n  }\n  else\n  {\n    t->table[n].prev->next = t->table[n].next;\n    t->table[n].next->prev = t->table[n].prev;\n  }\n  t->table[n].next = (t->table[n].prev = 0);\n  return 0;\n}\n\n",
            "calle": [
                "t->free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "ptrdiff_t",
                        "definition": [
                            "ptrdiff_t n = (ptrdiff_t) (e - t->table)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_delete",
            "header": "extern int lh_table_delete(struct lh_table *t, const void *k)",
            "params": [
                "struct lh_table *t",
                "const void *k"
            ],
            "definition": "int lh_table_delete(struct lh_table *t, const void *k)\n{\n  struct lh_entry *e = lh_table_lookup_entry(t, k);\n  if (!e)\n  {\n    return -1;\n  }\n  return lh_table_delete_entry(t, e);\n}\n\n",
            "calle": [
                "lh_table_delete_entry",
                "lh_table_lookup_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *e = lh_table_lookup_entry(t, k)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_length",
            "header": "extern int lh_table_length(struct lh_table *t)",
            "params": [
                "struct lh_table *t"
            ],
            "definition": "int lh_table_length(struct lh_table *t)\n{\n  return t->count;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_table_resize",
            "header": "int lh_table_resize(struct lh_table *t, int new_size)",
            "params": [
                "struct lh_table *t",
                "int new_size"
            ],
            "definition": "int lh_table_resize(struct lh_table *t, int new_size)\n{\n  struct lh_table *new_t;\n  unsigned int new_t_idx = 0;\n  struct lh_entry *ent;\n  unsigned int ent_idx = 0;\n  new_t_idx = lh_table_new(new_size, 0, t->hash_fn, t->equal_fn);\n  if ((&new_t[new_t_idx]) == 0)\n  {\n    return -1;\n  }\n  for (ent_idx = t->head; (&ent[ent_idx]) != 0; ent_idx = ent_idx->next)\n  {\n    unsigned long h = lh_get_hash(new_t, ent->k);\n    unsigned int opts = 0;\n    if (ent->k_is_constant)\n    {\n      opts = 1 << 2;\n    }\n    if (lh_table_insert_w_hash(new_t, ent->k, ent->v, h, opts) != 0)\n    {\n      lh_table_free(new_t);\n      return -1;\n    }\n  }\n\n  free(t->table);\n  t->table = new_t->table;\n  t->size = new_size;\n  t->head = new_t->head;\n  t->tail = new_t->tail;\n  free(new_t);\n  return 0;\n}\n\n",
            "calle": [
                "free",
                "lh_get_hash",
                "lh_table_free",
                "lh_table_insert_w_hash",
                "lh_table_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "int",
                        "definition": [
                            "int new_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_table",
                        "type": "struct lh_table *",
                        "definition": [
                            "struct lh_table *new_t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_t_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_t_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *ent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ent_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ent_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long h = lh_get_hash(new_t, ent->k)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opts",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int opts = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_char_hash",
            "header": "static unsigned long lh_char_hash(const void *k)",
            "params": [
                "const void *k"
            ],
            "definition": "static unsigned long lh_char_hash(const void *k)\n{\n  static volatile int random_seed = -1;\n  if (random_seed == (-1))\n  {\n    int seed;\n    while ((seed = json_c_get_random_seed()) == (-1))\n    {\n    }\n\n    (void) __sync_val_compare_and_swap(&random_seed, -1, seed);\n  }\n  return hashlittle((const char *) k, strlen((const char *) k), (uint32_t) random_seed);\n}\n\n",
            "calle": [
                "__sync_val_compare_and_swap",
                "hashlittle",
                "json_c_get_random_seed",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "random_seed",
                        "type": "volatile int",
                        "definition": [
                            "static volatile int random_seed = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_perllike_str_hash",
            "header": "static unsigned long lh_perllike_str_hash(const void *k)",
            "params": [
                "const void *k"
            ],
            "definition": "static unsigned long lh_perllike_str_hash(const void *k)\n{\n  const char *rkey = (const char *) k;\n  unsigned int rkey_idx = 0;\n  unsigned hashval = 1;\n  while (rkey[rkey_idx])\n    hashval = (hashval * 33) + rkey[rkey_idx];\n\n  rkey_idx += 1;\n  return hashval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rkey",
                        "type": "const char *",
                        "definition": [
                            "const char *rkey = (const char *) k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rkey_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int rkey_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hashval",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hashval = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_char_equal",
            "header": "int lh_char_equal(const void *k1, const void *k2)",
            "params": [
                "const void *k1",
                "const void *k2"
            ],
            "definition": "int lh_char_equal(const void *k1, const void *k2)\n{\n  return strcmp((const char *) k1, (const char *) k2) == 0;\n}\n\n",
            "calle": [
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1",
                        "type": "const void *",
                        "definition": [
                            "const void *k1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k2",
                        "type": "const void *",
                        "definition": [
                            "const void *k2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_ptr_equal",
            "header": "int lh_ptr_equal(const void *k1, const void *k2)",
            "params": [
                "const void *k1",
                "const void *k2"
            ],
            "definition": "int lh_ptr_equal(const void *k1, const void *k2)\n{\n  return k1 == k2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k1",
                        "type": "const void *",
                        "definition": [
                            "const void *k1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k2",
                        "type": "const void *",
                        "definition": [
                            "const void *k2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lh_ptr_hash",
            "header": "",
            "params": [
                "const void *k"
            ],
            "definition": "static unsigned long lh_ptr_hash(const void *k)\n{\n  return (unsigned long) (((((ptrdiff_t) k) * 0x9e370001UL) >> 4) & 18446744073709551615UL);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k",
                        "type": "const void *",
                        "definition": [
                            "const void *k"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hashlittle",
            "header": "",
            "params": [
                "const void *key",
                "size_t length",
                "uint32_t initval"
            ],
            "definition": "static uint32_t hashlittle(const void *key, size_t length, uint32_t initval)\n{\n  uint32_t a;\n  uint32_t b;\n  uint32_t c;\n  union \n  {\n    const void *ptr;\n    size_t i;\n  } u;\n  a = (b = (c = (0xdeadbeef + ((uint32_t) length)) + initval));\n  u.ptr = key;\n  if (1 && ((u.i & 0x3) == 0))\n  {\n    helper_hashlittle_4(&length, &a, &b, &c, key);\n  }\n  else\n    if (1 && ((u.i & 0x1) == 0))\n  {\n    helper_hashlittle_3(&length, &a, &b, &c, key);\n  }\n  else\n  {\n    helper_hashlittle_2(&length, &a, &b, &c, key);\n  }\n  {\n    helper_hashlittle_1(&a, &b, &c);\n  }\n  ;\n  return c;\n}\n\n",
            "calle": [
                "helper_hashlittle_1",
                "helper_hashlittle_2",
                "helper_hashlittle_3",
                "helper_hashlittle_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "key",
                        "type": "const void *",
                        "definition": [
                            "const void *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initval",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t initval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "union \n{\n  const void *ptr;\n  size_t i;\n}",
                        "definition": [
                            "union \n{\n  const void *ptr;\n  size_t i;\n} u"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_hashlittle_1",
            "header": "",
            "params": [
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref"
            ],
            "definition": "void helper_hashlittle_1(uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref)\n{\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  c ^= b;\n  c -= (b << 14) | (b >> (32 - 14));\n  a ^= c;\n  a -= (c << 11) | (c >> (32 - 11));\n  b ^= a;\n  b -= (a << 25) | (a >> (32 - 25));\n  c ^= b;\n  c -= (b << 16) | (b >> (32 - 16));\n  a ^= c;\n  a -= (c << 4) | (c >> (32 - 4));\n  b ^= a;\n  b -= (a << 14) | (a >> (32 - 14));\n  c ^= b;\n  c -= (b << 24) | (b >> (32 - 24));\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_hashlittle_2",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "const void * const key"
            ],
            "definition": "uint32_t helper_hashlittle_2(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, const void * const key)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  const uint8_t *k = (const uint8_t *) key;\n  unsigned int k_idx = 0;\n  while (length > 12)\n  {\n    helper_helper_hashlittle_2_1(&length, &a, &b, &c, &k_idx, k);\n  }\n\n  switch (length)\n  {\n    case 12:\n    {\n      c += ((uint32_t) k[11 + k_idx]) << 24;\n    }\n\n    case 11:\n    {\n      c += ((uint32_t) k[10 + k_idx]) << 16;\n    }\n\n    case 10:\n    {\n      c += ((uint32_t) k[9 + k_idx]) << 8;\n    }\n\n    case 9:\n    {\n      c += k[8 + k_idx];\n    }\n\n    case 8:\n    {\n      b += ((uint32_t) k[7 + k_idx]) << 24;\n    }\n\n    case 7:\n    {\n      b += ((uint32_t) k[6 + k_idx]) << 16;\n    }\n\n    case 6:\n    {\n      b += ((uint32_t) k[5 + k_idx]) << 8;\n    }\n\n    case 5:\n    {\n      b += k[4 + k_idx];\n    }\n\n    case 4:\n    {\n      a += ((uint32_t) k[3 + k_idx]) << 24;\n    }\n\n    case 3:\n    {\n      a += ((uint32_t) k[2 + k_idx]) << 16;\n    }\n\n    case 2:\n    {\n      a += ((uint32_t) k[1 + k_idx]) << 8;\n    }\n\n    case 1:\n    {\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 0:\n    {\n      return c;\n    }\n\n  }\n\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_hashlittle_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const void * const",
                        "definition": [
                            "const void * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *k = (const uint8_t *) key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_hashlittle_3",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "const void * const key"
            ],
            "definition": "uint32_t helper_hashlittle_3(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, const void * const key)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  const uint16_t *k = (const uint16_t *) key;\n  unsigned int k_idx = 0;\n  const uint8_t *k8;\n  unsigned int k8_idx = 0;\n  while (length > 12)\n  {\n    helper_helper_hashlittle_3_1(&length, &a, &b, &c, &k_idx, k);\n  }\n\n  k8_idx = (const uint8_t *) k;\n  switch (length)\n  {\n    case 12:\n    {\n      c += k[4 + k_idx] + (((uint32_t) k[5 + k_idx]) << 16);\n      b += k[2 + k_idx] + (((uint32_t) k[3 + k_idx]) << 16);\n      a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n      break;\n    }\n\n    case 11:\n    {\n      c += ((uint32_t) k8[10 + k8_idx]) << 16;\n    }\n\n    case 10:\n    {\n      c += k[4 + k_idx];\n      b += k[2 + k_idx] + (((uint32_t) k[3 + k_idx]) << 16);\n      a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n      break;\n    }\n\n    case 9:\n    {\n      c += k8[8 + k8_idx];\n    }\n\n    case 8:\n    {\n      b += k[2 + k_idx] + (((uint32_t) k[3 + k_idx]) << 16);\n      a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n      break;\n    }\n\n    case 7:\n    {\n      b += ((uint32_t) k8[6 + k8_idx]) << 16;\n    }\n\n    case 6:\n    {\n      b += k[2 + k_idx];\n      a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n      break;\n    }\n\n    case 5:\n    {\n      b += k8[4 + k8_idx];\n    }\n\n    case 4:\n    {\n      a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n      break;\n    }\n\n    case 3:\n    {\n      a += ((uint32_t) k8[2 + k8_idx]) << 16;\n    }\n\n    case 2:\n    {\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 1:\n    {\n      a += k8[0 + k8_idx];\n      break;\n    }\n\n    case 0:\n    {\n      return c;\n    }\n\n  }\n\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_hashlittle_3_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const void * const",
                        "definition": [
                            "const void * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint16_t *",
                        "definition": [
                            "const uint16_t *k = (const uint16_t *) key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k8",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *k8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k8_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k8_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_hashlittle_4",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "const void * const key"
            ],
            "definition": "uint32_t helper_hashlittle_4(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, const void * const key)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  const uint32_t *k = (const uint32_t *) key;\n  unsigned int k_idx = 0;\n  while (length > 12)\n  {\n    helper_helper_hashlittle_4_1(&length, &a, &b, &c, &k_idx, k);\n  }\n\n  switch (length)\n  {\n    case 12:\n    {\n      c += k[2 + k_idx];\n      b += k[1 + k_idx];\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 11:\n    {\n      c += k[2 + k_idx] & 0xffffff;\n      b += k[1 + k_idx];\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 10:\n    {\n      c += k[2 + k_idx] & 0xffff;\n      b += k[1 + k_idx];\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 9:\n    {\n      c += k[2 + k_idx] & 0xff;\n      b += k[1 + k_idx];\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 8:\n    {\n      b += k[1 + k_idx];\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 7:\n    {\n      b += k[1 + k_idx] & 0xffffff;\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 6:\n    {\n      b += k[1 + k_idx] & 0xffff;\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 5:\n    {\n      b += k[1 + k_idx] & 0xff;\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 4:\n    {\n      a += k[0 + k_idx];\n      break;\n    }\n\n    case 3:\n    {\n      a += k[0 + k_idx] & 0xffffff;\n      break;\n    }\n\n    case 2:\n    {\n      a += k[0 + k_idx] & 0xffff;\n      break;\n    }\n\n    case 1:\n    {\n      a += k[0 + k_idx] & 0xff;\n      break;\n    }\n\n    case 0:\n    {\n      return c;\n    }\n\n  }\n\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "helper_helper_hashlittle_4_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const void * const",
                        "definition": [
                            "const void * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint32_t *",
                        "definition": [
                            "const uint32_t *k = (const uint32_t *) key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_hashlittle_2_1",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "unsigned int * const k_idx_ref",
                "const uint8_t * const k"
            ],
            "definition": "void helper_helper_hashlittle_2_1(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, unsigned int * const k_idx_ref, const uint8_t * const k)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  unsigned int k_idx = *k_idx_ref;\n  a += k[0 + k_idx];\n  a += ((uint32_t) k[1 + k_idx]) << 8;\n  a += ((uint32_t) k[2 + k_idx]) << 16;\n  a += ((uint32_t) k[3 + k_idx]) << 24;\n  b += k[4 + k_idx];\n  b += ((uint32_t) k[5 + k_idx]) << 8;\n  b += ((uint32_t) k[6 + k_idx]) << 16;\n  b += ((uint32_t) k[7 + k_idx]) << 24;\n  c += k[8 + k_idx];\n  c += ((uint32_t) k[9 + k_idx]) << 8;\n  c += ((uint32_t) k[10 + k_idx]) << 16;\n  c += ((uint32_t) k[11 + k_idx]) << 24;\n  {\n    helper_helper_helper_hashlittle_2_1_1(&a, &b, &c);\n  }\n  ;\n  length -= 12;\n  k_idx += 12;\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n  *k_idx_ref = k_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_hashlittle_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const k_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = *k_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_hashlittle_3_1",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "unsigned int * const k_idx_ref",
                "const uint16_t * const k"
            ],
            "definition": "void helper_helper_hashlittle_3_1(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, unsigned int * const k_idx_ref, const uint16_t * const k)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  unsigned int k_idx = *k_idx_ref;\n  a += k[0 + k_idx] + (((uint32_t) k[1 + k_idx]) << 16);\n  b += k[2 + k_idx] + (((uint32_t) k[3 + k_idx]) << 16);\n  c += k[4 + k_idx] + (((uint32_t) k[5 + k_idx]) << 16);\n  {\n    helper_helper_helper_hashlittle_3_1_1(&a, &b, &c);\n  }\n  ;\n  length -= 12;\n  k_idx += 6;\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n  *k_idx_ref = k_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_hashlittle_3_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const k_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint16_t * const",
                        "definition": [
                            "const uint16_t * const k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = *k_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_hashlittle_4_1",
            "header": "",
            "params": [
                "size_t * const length_ref",
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref",
                "unsigned int * const k_idx_ref",
                "const uint32_t * const k"
            ],
            "definition": "void helper_helper_hashlittle_4_1(size_t * const length_ref, uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref, unsigned int * const k_idx_ref, const uint32_t * const k)\n{\n  size_t length = *length_ref;\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  unsigned int k_idx = *k_idx_ref;\n  a += k[0 + k_idx];\n  b += k[1 + k_idx];\n  c += k[2 + k_idx];\n  {\n    helper_helper_helper_hashlittle_4_1_1(&a, &b, &c);\n  }\n  ;\n  length -= 12;\n  k_idx += 3;\n  *length_ref = length;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n  *k_idx_ref = k_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_hashlittle_4_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const k_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint32_t * const",
                        "definition": [
                            "const uint32_t * const k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k_idx = *k_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_hashlittle_2_1_1",
            "header": "",
            "params": [
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref"
            ],
            "definition": "void helper_helper_helper_hashlittle_2_1_1(uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref)\n{\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  a -= c;\n  a ^= (c << 4) | (c >> (32 - 4));\n  c += b;\n  b -= a;\n  b ^= (a << 6) | (a >> (32 - 6));\n  a += c;\n  c -= b;\n  c ^= (b << 8) | (b >> (32 - 8));\n  b += a;\n  a -= c;\n  a ^= (c << 16) | (c >> (32 - 16));\n  c += b;\n  b -= a;\n  b ^= (a << 19) | (a >> (32 - 19));\n  a += c;\n  c -= b;\n  c ^= (b << 4) | (b >> (32 - 4));\n  b += a;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_hashlittle_3_1_1",
            "header": "",
            "params": [
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref"
            ],
            "definition": "void helper_helper_helper_hashlittle_3_1_1(uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref)\n{\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  a -= c;\n  a ^= (c << 4) | (c >> (32 - 4));\n  c += b;\n  b -= a;\n  b ^= (a << 6) | (a >> (32 - 6));\n  a += c;\n  c -= b;\n  c ^= (b << 8) | (b >> (32 - 8));\n  b += a;\n  a -= c;\n  a ^= (c << 16) | (c >> (32 - 16));\n  c += b;\n  b -= a;\n  b ^= (a << 19) | (a >> (32 - 19));\n  a += c;\n  c -= b;\n  c ^= (b << 4) | (b >> (32 - 4));\n  b += a;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_hashlittle_4_1_1",
            "header": "",
            "params": [
                "uint32_t * const a_ref",
                "uint32_t * const b_ref",
                "uint32_t * const c_ref"
            ],
            "definition": "void helper_helper_helper_hashlittle_4_1_1(uint32_t * const a_ref, uint32_t * const b_ref, uint32_t * const c_ref)\n{\n  uint32_t a = *a_ref;\n  uint32_t b = *b_ref;\n  uint32_t c = *c_ref;\n  a -= c;\n  a ^= (c << 4) | (c >> (32 - 4));\n  c += b;\n  b -= a;\n  b ^= (a << 6) | (a >> (32 - 6));\n  a += c;\n  c -= b;\n  c ^= (b << 8) | (b >> (32 - 8));\n  b += a;\n  a -= c;\n  a ^= (c << 16) | (c >> (32 - 16));\n  c += b;\n  b -= a;\n  b ^= (a << 19) | (a >> (32 - 19));\n  a += c;\n  c -= b;\n  c ^= (b << 4) | (b >> (32 - 4));\n  b += a;\n  *a_ref = a;\n  *b_ref = b;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_new",
            "header": "extern struct printbuf *printbuf_new(void)",
            "params": [
                "void"
            ],
            "definition": "struct printbuf *printbuf_new(void)\n{\n  struct printbuf *p;\n  unsigned int p_idx = 0;\n  p_idx = (struct printbuf *) calloc(1, sizeof(struct printbuf));\n  if (!(&p[p_idx]))\n  {\n    return 0;\n  }\n  p->size = 32;\n  p->bpos = 0;\n  if (!(p->buf = (char *) malloc(p->size)))\n  {\n    free(p);\n    return 0;\n  }\n  p->buf[0] = '\\0';\n  return p;\n}\n\n",
            "calle": [
                "calloc",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_memappend",
            "header": "extern int printbuf_memappend(struct printbuf *p, const char *buf, int size)",
            "params": [
                "struct printbuf *p",
                "const char *buf",
                "int size"
            ],
            "definition": "int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n{\n  if ((size < 0) || (size > ((2147483647 - p->bpos) - 1)))\n  {\n    errno = EFBIG;\n    return -1;\n  }\n  if (p->size <= ((p->bpos + size) + 1))\n  {\n    if (printbuf_extend(p, (p->bpos + size) + 1) < 0)\n    {\n      return -1;\n    }\n  }\n  memcpy(p->buf + p->bpos, buf, size);\n  p->bpos += size;\n  p->buf[p->bpos] = '\\0';\n  return size;\n}\n\n",
            "calle": [
                "memcpy",
                "printbuf_extend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_memset",
            "header": "extern int printbuf_memset(struct printbuf *pb, int offset, int charvalue, int len)",
            "params": [
                "struct printbuf *pb",
                "int offset",
                "int charvalue",
                "int len"
            ],
            "definition": "int printbuf_memset(struct printbuf *pb, int offset, int charvalue, int len)\n{\n  int size_needed;\n  if (offset == (-1))\n  {\n    offset = pb->bpos;\n  }\n  if (((len < 0) || (offset < (-1))) || (len > (2147483647 - offset)))\n  {\n    errno = EFBIG;\n    return -1;\n  }\n  size_needed = offset + len;\n  if (pb->size < size_needed)\n  {\n    if (printbuf_extend(pb, size_needed) < 0)\n    {\n      return -1;\n    }\n  }\n  if (pb->bpos < offset)\n  {\n    memset(pb->buf + pb->bpos, '\\0', offset - pb->bpos);\n  }\n  memset(pb->buf + offset, charvalue, len);\n  if (pb->bpos < size_needed)\n  {\n    pb->bpos = size_needed;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memset",
                "printbuf_extend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "int",
                        "definition": [
                            "int offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "charvalue",
                        "type": "int",
                        "definition": [
                            "int charvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_needed",
                        "type": "int",
                        "definition": [
                            "int size_needed"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sprintbuf",
            "header": "extern int sprintbuf(struct printbuf *p, const char *msg, ...)",
            "params": [
                "struct printbuf *p",
                "const char *msg",
                "..."
            ],
            "definition": "int sprintbuf(struct printbuf *p, const char *msg, ...)\n{\n  va_list ap;\n  char *t;\n  int size;\n  char buf[128];\n  __builtin_va_start(ap);\n  size = vsnprintf(buf, 128, msg, ap);\n  ;\n  if ((size < 0) || (size > 127))\n  {\n    __builtin_va_start(ap);\n    if ((size = vasprintf(&t, msg, ap)) < 0)\n    {\n      ;\n      return -1;\n    }\n    ;\n    size = printbuf_memappend(p, t, size);\n    free(t);\n  }\n  else\n  {\n    size = printbuf_memappend(p, buf, size);\n  }\n  return size;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "free",
                "printbuf_memappend",
                "vasprintf",
                "vsnprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "char *",
                        "definition": [
                            "char *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_reset",
            "header": "extern void printbuf_reset(struct printbuf *p)",
            "params": [
                "struct printbuf *p"
            ],
            "definition": "void printbuf_reset(struct printbuf *p)\n{\n  p->buf[0] = '\\0';\n  p->bpos = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_free",
            "header": "extern void printbuf_free(struct printbuf *p)",
            "params": [
                "struct printbuf *p"
            ],
            "definition": "void printbuf_free(struct printbuf *p)\n{\n  if (p)\n  {\n    free(p->buf);\n    free(p);\n  }\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "printbuf_extend",
            "header": "static int printbuf_extend(struct printbuf *p, int min_size)",
            "params": [
                "struct printbuf *p",
                "int min_size"
            ],
            "definition": "static int printbuf_extend(struct printbuf *p, int min_size)\n{\n  char *t;\n  unsigned int t_idx = 0;\n  int new_size;\n  if (p->size >= min_size)\n  {\n    return 0;\n  }\n  if (min_size > (2147483647 - 8))\n  {\n    errno = EFBIG;\n    return -1;\n  }\n  if (p->size > (2147483647 / 2))\n  {\n    new_size = min_size + 8;\n  }\n  else\n  {\n    new_size = p->size * 2;\n    if (new_size < (min_size + 8))\n    {\n      new_size = min_size + 8;\n    }\n  }\n  if (!(t_idx = (char *) realloc(p->buf, new_size)))\n  {\n    return -1;\n  }\n  p->size = new_size;\n  p->buf = &t[t_idx];\n  return 0;\n}\n\n",
            "calle": [
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_size",
                        "type": "int",
                        "definition": [
                            "int min_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "char *",
                        "definition": [
                            "char *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int t_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "int",
                        "definition": [
                            "int new_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_c_get_random_seed",
            "header": "extern int json_c_get_random_seed(void)",
            "params": [
                "void"
            ],
            "definition": "int json_c_get_random_seed(void)\n{\n  return arc4random();\n}\n\n",
            "calle": [
                "arc4random"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_json_c_strerror",
            "header": "extern char *_json_c_strerror(int errno_in)",
            "params": [
                "int errno_in"
            ],
            "definition": "char *_json_c_strerror(int errno_in)\n{\n  int start_idx;\n  char digbuf[20];\n  int ii;\n  int jj;\n  if (!_json_c_strerror_enable)\n  {\n    _json_c_strerror_enable = (getenv(\"_JSON_C_STRERROR_ENABLE\") == 0) ? (-1) : (1);\n  }\n  if (_json_c_strerror_enable == (-1))\n  {\n    return strerror(errno_in);\n  }\n  for (ii = 0; errno_list[ii].errno_str != ((char *) 0); ii += 1)\n  {\n    const char *errno_str = errno_list[ii].errno_str;\n    if (errno_list[ii].errno_value != errno_in)\n    {\n      continue;\n    }\n    for (start_idx = (sizeof(\"ERRNO=\")) - 1, jj = 0; errno_str[jj] != '\\0'; jj += 1, start_idx += 1)\n    {\n      errno_buf[start_idx] = errno_str[jj];\n    }\n\n    errno_buf[start_idx] = '\\0';\n    return errno_buf;\n  }\n\n  for (ii = 0; errno_in >= 10; errno_in /= 10, ii += 1)\n  {\n    digbuf[ii] = \"0123456789\"[errno_in % 10];\n  }\n\n  digbuf[ii] = \"0123456789\"[errno_in % 10];\n  for (start_idx = (sizeof(\"ERRNO=\")) - 1; ii >= 0; ii -= 1, start_idx += 1)\n  {\n    errno_buf[start_idx] = digbuf[ii];\n  }\n\n  errno_buf[start_idx] = '\\0';\n  return errno_buf;\n}\n\n",
            "calle": [
                "getenv",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "errno_in",
                        "type": "int",
                        "definition": [
                            "int errno_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_idx",
                        "type": "int",
                        "definition": [
                            "int start_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "digbuf",
                        "type": "char [20]",
                        "definition": [
                            "char digbuf[20]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "int",
                        "definition": [
                            "int jj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errno_str",
                        "type": "const char *",
                        "definition": [
                            "const char *errno_str = errno_list[ii].errno_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_json_c_strerror_enable",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "errno_list",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "errno_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_get",
            "header": "extern int json_pointer_get(struct json_object *obj, const char *path, struct json_object **res)",
            "params": [
                "struct json_object *obj",
                "const char *path",
                "struct json_object **res"
            ],
            "definition": "int json_pointer_get(struct json_object *obj, const char *path, struct json_object **res)\n{\n  struct json_pointer_get_result jpres;\n  int rc;\n  rc = json_pointer_get_internal(obj, path, &jpres);\n  if (rc)\n  {\n    return rc;\n  }\n  if (res)\n  {\n    *res = jpres.obj;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "json_pointer_get_internal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jpres",
                        "type": "struct json_pointer_get_result",
                        "definition": [
                            "struct json_pointer_get_result jpres"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_getf",
            "header": "extern int json_pointer_getf(struct json_object *obj, struct json_object **res, const char *path_fmt, ...)",
            "params": [
                "struct json_object *obj",
                "struct json_object **res",
                "const char *path_fmt",
                "..."
            ],
            "definition": "int json_pointer_getf(struct json_object *obj, struct json_object **res, const char *path_fmt, ...)\n{\n  char *path_copy = 0;\n  int rc = 0;\n  va_list args;\n  if ((!obj) || (!path_fmt))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  __builtin_va_start(args);\n  rc = vasprintf(&path_copy, path_fmt, args);\n  ;\n  if (rc < 0)\n  {\n    return rc;\n  }\n  if (path_copy[0] == '\\0')\n  {\n    if (res)\n    {\n      *res = obj;\n    }\n    goto out;\n  }\n  rc = json_pointer_object_get_recursive(obj, path_copy, res);\n  out:\n  free(path_copy);\n\n  return rc;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "free",
                "json_pointer_object_get_recursive",
                "vasprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *path_fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy",
                        "type": "char *",
                        "definition": [
                            "char *path_copy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "va_list",
                        "definition": [
                            "va_list args"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_set",
            "header": "extern int json_pointer_set(struct json_object **obj, const char *path, struct json_object *value)",
            "params": [
                "struct json_object **obj",
                "const char *path",
                "struct json_object *value"
            ],
            "definition": "int json_pointer_set(struct json_object **obj, const char *path, struct json_object *value)\n{\n  return json_pointer_set_with_array_cb(obj, path, value, json_object_array_put_idx_cb, 0);\n}\n\n",
            "calle": [
                "json_object_array_put_idx_cb",
                "json_pointer_set_with_array_cb"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_setf",
            "header": "extern int json_pointer_setf(struct json_object **obj, struct json_object *value, const char *path_fmt, ...)",
            "params": [
                "struct json_object **obj",
                "struct json_object *value",
                "const char *path_fmt",
                "..."
            ],
            "definition": "int json_pointer_setf(struct json_object **obj, struct json_object *value, const char *path_fmt, ...)\n{\n  char *endp;\n  unsigned int endp_idx = 0;\n  char *path_copy = 0;\n  struct json_object *set = 0;\n  unsigned int set_idx = 0;\n  va_list args;\n  int rc = 0;\n  if ((!obj) || (!path_fmt))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  __builtin_va_start(args);\n  rc = vasprintf(&path_copy, path_fmt, args);\n  ;\n  if (rc < 0)\n  {\n    return rc;\n  }\n  if (path_copy[0] == '\\0')\n  {\n    json_object_put(*obj);\n    *obj = value;\n    goto out;\n  }\n  if (path_copy[0] != '/')\n  {\n    errno = EINVAL;\n    rc = -1;\n    goto out;\n  }\n  if ((endp_idx = strrchr(path_copy, '/')) == path_copy)\n  {\n    set_idx = *obj;\n    goto set_single_path;\n  }\n  endp[endp_idx] = '\\0';\n  rc = json_pointer_object_get_recursive(*obj, path_copy, &(&set[set_idx]));\n  if (rc)\n  {\n    goto out;\n  }\n  set_single_path:\n  (&endp[endp_idx])++;\n\n  endp_idx += 1;\n  rc = json_pointer_set_single_path(set, endp, value, json_object_array_put_idx_cb, 0);\n  out:\n  free(path_copy);\n\n  return rc;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "free",
                "json_object_array_put_idx_cb",
                "json_object_put",
                "json_pointer_object_get_recursive",
                "json_pointer_set_single_path",
                "strrchr",
                "vasprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *path_fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp",
                        "type": "char *",
                        "definition": [
                            "char *endp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int endp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy",
                        "type": "char *",
                        "definition": [
                            "char *path_copy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *set = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int set_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "va_list",
                        "definition": [
                            "va_list args"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_get_internal",
            "header": "int json_pointer_get_internal(struct json_object *obj, const char *path, struct json_pointer_get_result *res)",
            "params": [
                "struct json_object *obj",
                "const char *path",
                "struct json_pointer_get_result *res"
            ],
            "definition": "int json_pointer_get_internal(struct json_object *obj, const char *path, struct json_pointer_get_result *res)\n{\n  char *path_copy = 0;\n  unsigned int path_copy_idx = 0;\n  int rc;\n  if ((!obj) || (!path))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  if (path[0] == '\\0')\n  {\n    res->parent = 0;\n    res->obj = obj;\n    res->key_in_parent = 0;\n    res->index_in_parent = UINT32_MAX;\n    return 0;\n  }\n  if (!(path_copy_idx = strdup(path)))\n  {\n    errno = ENOMEM;\n    return -1;\n  }\n  rc = json_pointer_result_get_recursive(obj, path_copy, res);\n  if (((rc == 0) && json_object_is_type(res->parent, json_type_object)) && res->key_in_parent)\n  {\n    res->key_in_parent = path + (res->key_in_parent - (&path_copy[path_copy_idx]));\n  }\n  free(path_copy);\n  return rc;\n}\n\n",
            "calle": [
                "free",
                "json_object_is_type",
                "json_pointer_result_get_recursive",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_pointer_get_result",
                        "type": "struct json_pointer_get_result *",
                        "definition": [
                            "struct json_pointer_get_result *res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy",
                        "type": "char *",
                        "definition": [
                            "char *path_copy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_copy_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_set_with_array_cb",
            "header": "int json_pointer_set_with_array_cb(struct json_object **obj, const char *path, struct json_object *value, json_pointer_array_set_cb array_set_cb, void *priv)",
            "params": [
                "struct json_object **obj",
                "const char *path",
                "struct json_object *value",
                "json_pointer_array_set_cb array_set_cb",
                "void *priv"
            ],
            "definition": "int json_pointer_set_with_array_cb(struct json_object **obj, const char *path, struct json_object *value, json_pointer_array_set_cb array_set_cb, void *priv)\n{\n  unsigned int path_idx = 0;\n  const char *endp;\n  unsigned int endp_idx = 0;\n  char *path_copy = 0;\n  unsigned int path_copy_idx = 0;\n  struct json_object *set = 0;\n  int rc;\n  if ((!obj) || (!(&path[path_idx])))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  if (path[0 + path_idx] == '\\0')\n  {\n    json_object_put(*obj);\n    *obj = value;\n    return 0;\n  }\n  if (path[0 + path_idx] != '/')\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  if ((endp_idx = strrchr(path, '/')) == (&path[path_idx]))\n  {\n    path_idx += 1;\n    return json_pointer_set_single_path(*obj, path, value, array_set_cb, priv);\n  }\n  if (!(path_copy_idx = strdup(path)))\n  {\n    errno = ENOMEM;\n    return -1;\n  }\n  path_copy[((&endp[endp_idx]) - (&path[path_idx])) + path_copy_idx] = '\\0';\n  rc = json_pointer_object_get_recursive(*obj, path_copy, &set);\n  free(path_copy);\n  if (rc)\n  {\n    return rc;\n  }\n  endp_idx += 1;\n  return json_pointer_set_single_path(set, endp, value, array_set_cb, priv);\n}\n\n",
            "calle": [
                "free",
                "json_object_put",
                "json_pointer_object_get_recursive",
                "json_pointer_set_single_path",
                "strdup",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array_set_cb",
                        "type": "json_pointer_array_set_cb",
                        "definition": [
                            "json_pointer_array_set_cb array_set_cb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp",
                        "type": "const char *",
                        "definition": [
                            "const char *endp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int endp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy",
                        "type": "char *",
                        "definition": [
                            "char *path_copy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_copy_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_copy_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *set = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "string_replace_all_occurrences_with_char",
            "header": "",
            "params": [
                "char *s",
                "const char *occur",
                "char repl_char"
            ],
            "definition": "static void string_replace_all_occurrences_with_char(char *s, const char *occur, char repl_char)\n{\n  size_t slen = strlen(s);\n  size_t skip = strlen(occur) - 1;\n  char *p = s;\n  unsigned int p_idx = 0;\n  while (p_idx = strstr(p_idx, occur))\n  {\n    p[p_idx] = repl_char;\n    p_idx += 1;\n    slen -= skip;\n    memmove(p, (&p[p_idx]) + skip, (slen - ((&p[p_idx]) - s)) + 1);\n  }\n\n}\n\n",
            "calle": [
                "memmove",
                "strlen",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "char *",
                        "definition": [
                            "char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occur",
                        "type": "const char *",
                        "definition": [
                            "const char *occur"
                        ]
                    },
                    {
                        "path": null,
                        "name": "repl_char",
                        "type": "char",
                        "definition": [
                            "char repl_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slen",
                        "type": "size_t",
                        "definition": [
                            "size_t slen = strlen(s)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "size_t",
                        "definition": [
                            "size_t skip = strlen(occur) - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_valid_index",
            "header": "",
            "params": [
                "const char *path",
                "size_t *idx"
            ],
            "definition": "static int is_valid_index(const char *path, size_t *idx)\n{\n  size_t i;\n  size_t len = strlen(path);\n  if (len == 1)\n  {\n    if ((path[0] >= '0') && (path[0] <= '9'))\n    {\n      *idx = path[0] - '0';\n      return 1;\n    }\n    errno = EINVAL;\n    return 0;\n  }\n  if (path[0] == '0')\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  for (i = 0; i < len; i += 1)\n  {\n    if (!((path[i] >= '0') && (path[i] <= '9')))\n    {\n      errno = EINVAL;\n      return 0;\n    }\n  }\n\n  *idx = strtoull(path, 0, 10);\n  return 1;\n}\n\n",
            "calle": [
                "strlen",
                "strtoull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t *",
                        "definition": [
                            "size_t *idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(path)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_get_single_path",
            "header": "",
            "params": [
                "struct json_object *obj",
                "char *path",
                "struct json_object **value",
                "size_t *idx"
            ],
            "definition": "static int json_pointer_get_single_path(struct json_object *obj, char *path, struct json_object **value, size_t *idx)\n{\n  unsigned int obj_idx = 0;\n  if (json_object_is_type(obj, json_type_array))\n  {\n    if (!is_valid_index(path, idx))\n    {\n      return -1;\n    }\n    if ((*idx) >= json_object_array_length(obj))\n    {\n      errno = ENOENT;\n      return -1;\n    }\n    obj_idx = json_object_array_get_idx(obj_idx, *idx);\n    if (obj)\n    {\n      if (value)\n      {\n        *value = &obj[obj_idx];\n      }\n      return 0;\n    }\n    errno = ENOENT;\n    return -1;\n  }\n  string_replace_all_occurrences_with_char(path, \"~1\", '/');\n  string_replace_all_occurrences_with_char(path, \"~0\", '~');\n  if (!json_object_object_get_ex(obj, path, value))\n  {\n    errno = ENOENT;\n    return -1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "is_valid_index",
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_is_type",
                "json_object_object_get_ex",
                "string_replace_all_occurrences_with_char"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t *",
                        "definition": [
                            "size_t *idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_put_idx_cb",
            "header": "",
            "params": [
                "struct json_object *parent",
                "size_t idx",
                "struct json_object *value",
                "void *priv"
            ],
            "definition": "static int json_object_array_put_idx_cb(struct json_object *parent, size_t idx, struct json_object *value, void *priv)\n{\n  return json_object_array_put_idx(parent, idx, value);\n}\n\n",
            "calle": [
                "json_object_array_put_idx"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_set_single_path",
            "header": "",
            "params": [
                "struct json_object *parent",
                "const char *path",
                "struct json_object *value",
                "json_pointer_array_set_cb array_set_cb",
                "void *priv"
            ],
            "definition": "static int json_pointer_set_single_path(struct json_object *parent, const char *path, struct json_object *value, json_pointer_array_set_cb array_set_cb, void *priv)\n{\n  if (json_object_is_type(parent, json_type_array))\n  {\n    size_t idx;\n    if ((path[0] == '-') && (path[1] == '\\0'))\n    {\n      return json_object_array_add(parent, value);\n    }\n    if (!is_valid_index(path, &idx))\n    {\n      return -1;\n    }\n    return array_set_cb(parent, idx, value, priv);\n  }\n  if (json_object_is_type(parent, json_type_object))\n  {\n    return json_object_object_add(parent, path, value);\n  }\n  errno = ENOENT;\n  return -1;\n}\n\n",
            "calle": [
                "array_set_cb",
                "is_valid_index",
                "json_object_array_add",
                "json_object_is_type",
                "json_object_object_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array_set_cb",
                        "type": "json_pointer_array_set_cb",
                        "definition": [
                            "json_pointer_array_set_cb array_set_cb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_result_get_recursive",
            "header": "",
            "params": [
                "struct json_object *obj",
                "char *path",
                "struct json_pointer_get_result *res"
            ],
            "definition": "static int json_pointer_result_get_recursive(struct json_object *obj, char *path, struct json_pointer_get_result *res)\n{\n  unsigned int path_idx = 0;\n  struct json_object *parent_obj = obj;\n  size_t idx = 0;\n  char *endp;\n  unsigned int endp_idx = 0;\n  int rc;\n  if (path[0 + path_idx] != '/')\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  path_idx += 1;\n  endp_idx = strchr(path, '/');\n  if (endp)\n  {\n    endp[endp_idx] = '\\0';\n  }\n  if (rc = json_pointer_get_single_path(obj, path, &obj, &idx))\n  {\n    return rc;\n  }\n  if (endp)\n  {\n    endp[endp_idx] = '/';\n    return json_pointer_result_get_recursive(obj, endp, res);\n  }\n  if (res)\n  {\n    res->parent = parent_obj;\n    res->obj = obj;\n    if (json_object_is_type(res->parent, json_type_array))\n    {\n      res->index_in_parent = idx;\n    }\n    else\n      res->key_in_parent = &path[path_idx];\n  }\n  return 0;\n}\n\n",
            "calle": [
                "json_object_is_type",
                "json_pointer_get_single_path",
                "json_pointer_result_get_recursive",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_pointer_get_result",
                        "type": "struct json_pointer_get_result *",
                        "definition": [
                            "struct json_pointer_get_result *res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent_obj = obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp",
                        "type": "char *",
                        "definition": [
                            "char *endp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int endp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_pointer_object_get_recursive",
            "header": "",
            "params": [
                "struct json_object *obj",
                "char *path",
                "struct json_object **value"
            ],
            "definition": "static int json_pointer_object_get_recursive(struct json_object *obj, char *path, struct json_object **value)\n{\n  struct json_pointer_get_result res;\n  int rc;\n  rc = json_pointer_result_get_recursive(obj, path, &res);\n  if (rc)\n  {\n    return rc;\n  }\n  if (value)\n  {\n    *value = res.obj;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "json_pointer_result_get_recursive"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_pointer_get_result",
                        "definition": [
                            "struct json_pointer_get_result res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_patch_apply",
            "header": "extern int json_patch_apply(struct json_object *copy_from, struct json_object *patch, struct json_object **base, struct json_patch_error *patch_error)",
            "params": [
                "struct json_object *copy_from",
                "struct json_object *patch",
                "struct json_object **base",
                "struct json_patch_error *patch_error"
            ],
            "definition": "int json_patch_apply(struct json_object *copy_from, struct json_object *patch, struct json_object **base, struct json_patch_error *patch_error)\n{\n  unsigned int patch_error_idx = 0;\n  size_t ii;\n  int rc = 0;\n  struct json_patch_error placeholder;\n  if (!(&patch_error[patch_error_idx]))\n  {\n    patch_error_idx = &placeholder;\n  }\n  patch_error->patch_failure_idx = 18446744073709551615UL;\n  patch_error->errno_code = 0;\n  if (((base == 0) || (((*base) == 0) && (copy_from == 0))) || (((*base) != 0) && (copy_from != 0)))\n  {\n    do\n    {\n      patch_error->errno_code = EFAULT;\n      patch_error->errmsg = \"Exactly one of *base or copy_from must be non-NULL\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if (!json_object_is_type(patch, json_type_array))\n  {\n    do\n    {\n      patch_error->errno_code = EFAULT;\n      patch_error->errmsg = \"Patch object is not of type json_type_array\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if (copy_from != 0)\n  {\n    helper_json_patch_apply_1(copy_from, base, patch_error);\n  }\n  for (ii = 0; ii < json_object_array_length(patch); ii += 1)\n  {\n    helper_json_patch_apply_2(&rc, patch, base, patch_error, ii);\n  }\n\n  return rc;\n}\n\n",
            "calle": [
                "helper_json_patch_apply_1",
                "helper_json_patch_apply_2",
                "json_object_array_length",
                "json_object_is_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *copy_from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error *",
                        "definition": [
                            "struct json_patch_error *patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "patch_error_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int patch_error_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "placeholder",
                        "type": "struct json_patch_error",
                        "definition": [
                            "struct json_patch_error placeholder"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_patch_apply_test",
            "header": "",
            "params": [
                "struct json_object **res",
                "struct json_object *patch_elem",
                "const char *path",
                "struct json_patch_error *patch_error"
            ],
            "definition": "static int json_patch_apply_test(struct json_object **res, struct json_object *patch_elem, const char *path, struct json_patch_error *patch_error)\n{\n  struct json_object *value1;\n  struct json_object *value2;\n  if (!json_object_object_get_ex(patch_elem, \"value\", &value1))\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch object does not contain a 'value' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if (json_pointer_get(*res, path, &value2))\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = (errno == ENOENT) ? (\"Did not find element referenced by path field\") : (\"Invalid path field\");\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if (!json_object_equal(value1, value2))\n  {\n    do\n    {\n      patch_error->errno_code = ENOENT;\n      patch_error->errmsg = \"Value of element referenced by 'path' field did not match 'value' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "json_object_equal",
                "json_object_object_get_ex",
                "json_pointer_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch_elem"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error *",
                        "definition": [
                            "struct json_patch_error *patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "__json_patch_apply_remove",
            "header": "",
            "params": [
                "struct json_pointer_get_result *jpres"
            ],
            "definition": "static int __json_patch_apply_remove(struct json_pointer_get_result *jpres)\n{\n  if (json_object_is_type(jpres->parent, json_type_array))\n  {\n    return json_object_array_del_idx(jpres->parent, jpres->index_in_parent, 1);\n  }\n  else\n    if (jpres->parent && jpres->key_in_parent)\n  {\n    json_object_object_del(jpres->parent, jpres->key_in_parent);\n    return 0;\n  }\n  else\n  {\n    (void) json_object_put(jpres->obj);\n    jpres->obj = 0;\n    return 0;\n  }\n}\n\n",
            "calle": [
                "json_object_array_del_idx",
                "json_object_is_type",
                "json_object_object_del",
                "json_object_put"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_pointer_get_result",
                        "type": "struct json_pointer_get_result *",
                        "definition": [
                            "struct json_pointer_get_result *jpres"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_patch_apply_remove",
            "header": "",
            "params": [
                "struct json_object **res",
                "const char *path",
                "struct json_patch_error *patch_error"
            ],
            "definition": "static int json_patch_apply_remove(struct json_object **res, const char *path, struct json_patch_error *patch_error)\n{\n  struct json_pointer_get_result jpres;\n  int rc;\n  if (json_pointer_get_internal(*res, path, &jpres))\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = (errno == ENOENT) ? (\"Did not find element referenced by path field\") : (\"Invalid path field\");\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  rc = __json_patch_apply_remove(&jpres);\n  if (rc < 0)\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Unable to remove path referenced by 'path' field\";\n      errno = 0;\n    }\n    while (0);\n  }\n  if (jpres.parent == 0)\n  {\n    *res = 0;\n  }\n  return rc;\n}\n\n",
            "calle": [
                "__json_patch_apply_remove",
                "json_pointer_get_internal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error *",
                        "definition": [
                            "struct json_patch_error *patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jpres",
                        "type": "struct json_pointer_get_result",
                        "definition": [
                            "struct json_pointer_get_result jpres"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_insert_idx_cb",
            "header": "",
            "params": [
                "struct json_object *parent",
                "size_t idx",
                "struct json_object *value",
                "void *priv"
            ],
            "definition": "static int json_object_array_insert_idx_cb(struct json_object *parent, size_t idx, struct json_object *value, void *priv)\n{\n  int rc;\n  int *add = priv;\n  if (idx > json_object_array_length(parent))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  if (*add)\n  {\n    rc = json_object_array_insert_idx(parent, idx, value);\n  }\n  else\n    rc = json_object_array_put_idx(parent, idx, value);\n  if (rc < 0)\n  {\n    errno = EINVAL;\n  }\n  return rc;\n}\n\n",
            "calle": [
                "json_object_array_insert_idx",
                "json_object_array_length",
                "json_object_array_put_idx"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add",
                        "type": "int *",
                        "definition": [
                            "int *add = priv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_patch_apply_add_replace",
            "header": "",
            "params": [
                "struct json_object **res",
                "struct json_object *patch_elem",
                "const char *path",
                "int add",
                "struct json_patch_error *patch_error"
            ],
            "definition": "static int json_patch_apply_add_replace(struct json_object **res, struct json_object *patch_elem, const char *path, int add, struct json_patch_error *patch_error)\n{\n  struct json_object *value;\n  int rc;\n  if (!json_object_object_get_ex(patch_elem, \"value\", &value))\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch object does not contain a 'value' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if ((!add) && json_pointer_get(*res, path, 0))\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = (errno == ENOENT) ? (\"Did not find element referenced by path field\") : (\"Invalid path field\");\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  rc = json_pointer_set_with_array_cb(res, path, json_object_get(value), json_object_array_insert_idx_cb, &add);\n  if (rc)\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = \"Failed to set value at path referenced by 'path' field\";\n      errno = 0;\n    }\n    while (0);\n    json_object_put(value);\n  }\n  return rc;\n}\n\n",
            "calle": [
                "json_object_array_insert_idx_cb",
                "json_object_get",
                "json_object_object_get_ex",
                "json_object_put",
                "json_pointer_get",
                "json_pointer_set_with_array_cb"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch_elem"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add",
                        "type": "int",
                        "definition": [
                            "int add"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error *",
                        "definition": [
                            "struct json_patch_error *patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_object_array_move_cb",
            "header": "",
            "params": [
                "struct json_object *parent",
                "size_t idx",
                "struct json_object *value",
                "void *priv"
            ],
            "definition": "static int json_object_array_move_cb(struct json_object *parent, size_t idx, struct json_object *value, void *priv)\n{\n  int rc;\n  struct json_pointer_get_result *from = priv;\n  size_t len = json_object_array_length(parent);\n  if (parent == from->parent)\n  {\n    len += 1;\n  }\n  if (idx > len)\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  rc = json_object_array_insert_idx(parent, idx, value);\n  if (rc < 0)\n  {\n    errno = EINVAL;\n  }\n  return rc;\n}\n\n",
            "calle": [
                "json_object_array_insert_idx",
                "json_object_array_length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "priv",
                        "type": "void *",
                        "definition": [
                            "void *priv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_pointer_get_result",
                        "type": "struct json_pointer_get_result *",
                        "definition": [
                            "struct json_pointer_get_result *from = priv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = json_object_array_length(parent)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "json_patch_apply_move_copy",
            "header": "",
            "params": [
                "struct json_object **res",
                "struct json_object *patch_elem",
                "const char *path",
                "int move",
                "struct json_patch_error *patch_error"
            ],
            "definition": "static int json_patch_apply_move_copy(struct json_object **res, struct json_object *patch_elem, const char *path, int move, struct json_patch_error *patch_error)\n{\n  json_pointer_array_set_cb array_set_cb;\n  struct json_pointer_get_result from;\n  struct json_object *jfrom;\n  const char *from_s;\n  unsigned int from_s_idx = 0;\n  size_t from_s_len;\n  int rc;\n  if (!json_object_object_get_ex(patch_elem, \"from\", &jfrom))\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch does not contain a 'from' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  from_s_idx = json_object_get_string(jfrom);\n  from_s_len = strlen(from_s);\n  if (strncmp(from_s, path, from_s_len) == 0)\n  {\n    helper_json_patch_apply_move_copy_1(path, patch_error, from_s_len);\n  }\n  rc = json_pointer_get_internal(*res, from_s, &from);\n  if (rc)\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = (errno == ENOENT) ? (\"Did not find element referenced by from field\") : (\"Invalid from field\");\n      errno = 0;\n    }\n    while (0);\n    return rc;\n  }\n  json_object_get(from.obj);\n  if (!move)\n  {\n    array_set_cb = json_object_array_insert_idx_cb;\n  }\n  else\n  {\n    rc = __json_patch_apply_remove(&from);\n    if (rc < 0)\n    {\n      json_object_put(from.obj);\n      return rc;\n    }\n    array_set_cb = json_object_array_move_cb;\n  }\n  rc = json_pointer_set_with_array_cb(res, path, from.obj, array_set_cb, &from);\n  if (rc)\n  {\n    do\n    {\n      patch_error->errno_code = errno;\n      patch_error->errmsg = \"Failed to set value at path referenced by 'path' field\";\n      errno = 0;\n    }\n    while (0);\n    json_object_put(from.obj);\n  }\n  return rc;\n}\n\n",
            "calle": [
                "__json_patch_apply_remove",
                "helper_json_patch_apply_move_copy_1",
                "json_object_array_insert_idx_cb",
                "json_object_array_move_cb",
                "json_object_get",
                "json_object_get_string",
                "json_object_object_get_ex",
                "json_object_put",
                "json_pointer_get_internal",
                "json_pointer_set_with_array_cb",
                "strlen",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "res",
                        "type": "struct json_object **",
                        "definition": [
                            "struct json_object **res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch_elem"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "move",
                        "type": "int",
                        "definition": [
                            "int move"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error *",
                        "definition": [
                            "struct json_patch_error *patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array_set_cb",
                        "type": "json_pointer_array_set_cb",
                        "definition": [
                            "json_pointer_array_set_cb array_set_cb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "struct json_pointer_get_result",
                        "definition": [
                            "struct json_pointer_get_result from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jfrom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_s",
                        "type": "const char *",
                        "definition": [
                            "const char *from_s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_s_len",
                        "type": "size_t",
                        "definition": [
                            "size_t from_s_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_patch_apply_move_copy_1",
            "header": "",
            "params": [
                "const char * const path",
                "struct json_patch_error * const patch_error",
                "size_t from_s_len"
            ],
            "definition": "int helper_json_patch_apply_move_copy_1(const char * const path, struct json_patch_error * const patch_error, size_t from_s_len)\n{\n  if (from_s_len == strlen(path))\n  {\n    return 0;\n  }\n  do\n  {\n    patch_error->errno_code = EINVAL;\n    patch_error->errmsg = \"Invalid attempt to move parent under a child\";\n    errno = 0;\n  }\n  while (0);\n  return -1;\n}\n\n",
            "calle": [
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char * const",
                        "definition": [
                            "const char * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error * const",
                        "definition": [
                            "struct json_patch_error * const patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_s_len",
                        "type": "size_t",
                        "definition": [
                            "size_t from_s_len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_patch_apply_1",
            "header": "",
            "params": [
                "struct json_object * const copy_from",
                "struct json_object ** const base",
                "struct json_patch_error * const patch_error"
            ],
            "definition": "int helper_json_patch_apply_1(struct json_object * const copy_from, struct json_object ** const base, struct json_patch_error * const patch_error)\n{\n  if (json_object_deep_copy(copy_from, base, 0) < 0)\n  {\n    do\n    {\n      patch_error->errno_code = ENOMEM;\n      patch_error->errmsg = \"Unable to copy copy_from using json_object_deep_copy()\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n}\n\n",
            "calle": [
                "json_object_deep_copy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const copy_from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object ** const",
                        "definition": [
                            "struct json_object ** const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error * const",
                        "definition": [
                            "struct json_patch_error * const patch_error"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_json_patch_apply_2",
            "header": "",
            "params": [
                "int * const rc_ref",
                "struct json_object * const patch",
                "struct json_object ** const base",
                "struct json_patch_error * const patch_error",
                "size_t ii"
            ],
            "definition": "int helper_json_patch_apply_2(int * const rc_ref, struct json_object * const patch, struct json_object ** const base, struct json_patch_error * const patch_error, size_t ii)\n{\n  int rc = *rc_ref;\n  struct json_object *jop;\n  struct json_object *jpath;\n  struct json_object *patch_elem = json_object_array_get_idx(patch, ii);\n  const char *op;\n  unsigned int op_idx = 0;\n  const char *path;\n  unsigned int path_idx = 0;\n  patch_error->patch_failure_idx = ii;\n  if (!json_object_object_get_ex(patch_elem, \"op\", &jop))\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch object does not contain 'op' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  op_idx = json_object_get_string(jop);\n  if (!json_object_object_get_ex(patch_elem, \"path\", &jpath))\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch object does not contain 'path' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  path_idx = json_object_get_string(jpath);\n  if (!strcmp(op, \"test\"))\n  {\n    rc = json_patch_apply_test(base, patch_elem, path, patch_error);\n  }\n  else\n    if (!strcmp(op, \"remove\"))\n  {\n    rc = json_patch_apply_remove(base, path, patch_error);\n  }\n  else\n    if (!strcmp(op, \"add\"))\n  {\n    rc = json_patch_apply_add_replace(base, patch_elem, path, 1, patch_error);\n  }\n  else\n    if (!strcmp(op, \"replace\"))\n  {\n    rc = json_patch_apply_add_replace(base, patch_elem, path, 0, patch_error);\n  }\n  else\n    if (!strcmp(op, \"move\"))\n  {\n    rc = json_patch_apply_move_copy(base, patch_elem, path, 1, patch_error);\n  }\n  else\n    if (!strcmp(op, \"copy\"))\n  {\n    rc = json_patch_apply_move_copy(base, patch_elem, path, 0, patch_error);\n  }\n  else\n  {\n    do\n    {\n      patch_error->errno_code = EINVAL;\n      patch_error->errmsg = \"Patch object has invalid 'op' field\";\n      errno = 0;\n    }\n    while (0);\n    return -1;\n  }\n  if (rc < 0)\n  {\n    break;\n  }\n  *rc_ref = rc;\n}\n\n",
            "calle": [
                "json_object_array_get_idx",
                "json_object_get_string",
                "json_object_object_get_ex",
                "json_patch_apply_add_replace",
                "json_patch_apply_move_copy",
                "json_patch_apply_remove",
                "json_patch_apply_test",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const patch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "struct json_object ** const",
                        "definition": [
                            "struct json_object ** const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_patch_error",
                        "type": "struct json_patch_error * const",
                        "definition": [
                            "struct json_patch_error * const patch_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = *rc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch_elem = json_object_array_get_idx(patch, ii)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "const char *",
                        "definition": [
                            "const char *op"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int op_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sort_fn",
            "header": "",
            "params": [
                "const void *j1",
                "const void *j2"
            ],
            "definition": "static int sort_fn(const void *j1, const void *j2)\n{\n  json_object * const *jso1;\n  unsigned int jso1_idx = 0;\n  json_object * const *jso2;\n  unsigned int jso2_idx = 0;\n  int i1;\n  int i2;\n  jso1_idx = (json_object * const *) j1;\n  jso2_idx = (json_object * const *) j2;\n  if ((!(*(&jso1[jso1_idx]))) && (!(*(&jso2[jso2_idx]))))\n  {\n    return 0;\n  }\n  if (!(*(&jso1[jso1_idx])))\n  {\n    return -1;\n  }\n  if (!(*(&jso2[jso2_idx])))\n  {\n    return 1;\n  }\n  i1 = json_object_get_int(*(&jso1[jso1_idx]));\n  i2 = json_object_get_int(*(&jso2[jso2_idx]));\n  return i1 - i2;\n}\n\n",
            "calle": [
                "json_object_get_int"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j1",
                        "type": "const void *",
                        "definition": [
                            "const void *j1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j2",
                        "type": "const void *",
                        "definition": [
                            "const void *j2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso1",
                        "type": "json_object * const *",
                        "definition": [
                            "json_object * const *jso1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso2",
                        "type": "json_object * const *",
                        "definition": [
                            "json_object * const *jso2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i1",
                        "type": "int",
                        "definition": [
                            "int i1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i2",
                        "type": "int",
                        "definition": [
                            "int i2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "make_array",
            "header": "json_object *make_array(void)",
            "params": [
                "void"
            ],
            "definition": "json_object *make_array(void)\n{\n  json_object *my_array;\n  unsigned int my_array_idx = 0;\n  my_array_idx = json_object_new_array();\n  json_object_array_add(my_array, json_object_new_int(1));\n  json_object_array_add(my_array, json_object_new_int(2));\n  json_object_array_add(my_array, json_object_new_int(3));\n  json_object_array_put_idx(my_array, 4, json_object_new_int(5));\n  json_object_array_put_idx(my_array, 3, json_object_new_int(4));\n  json_object_array_put_idx(my_array, 6, json_object_new_int(7));\n  return my_array;\n}\n\n",
            "calle": [
                "json_object_array_add",
                "json_object_array_put_idx",
                "json_object_new_array",
                "json_object_new_int"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_array_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_array_del_idx",
            "header": "void test_array_del_idx(void)",
            "params": [
                "void"
            ],
            "definition": "void test_array_del_idx(void)\n{\n  int rc;\n  size_t ii;\n  size_t orig_array_len;\n  json_object *my_array;\n  unsigned int my_array_idx = 0;\n  my_array_idx = make_array();\n  orig_array_len = json_object_array_length(my_array);\n  printf(\"my_array=\\n\");\n  for (ii = 0; ii < json_object_array_length(my_array); ii += 1)\n  {\n    json_object *obj = json_object_array_get_idx(my_array, ii);\n    printf(\"\\t[%d]=%s\\n\", (int) ii, json_object_to_json_string(obj));\n  }\n\n  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  for (ii = 0; ii < orig_array_len; ii += 1)\n  {\n    rc = json_object_array_del_idx(my_array, 0, 1);\n    printf(\"after del_idx(0,1)=%d, my_array.to_string()=%s\\n\", rc, json_object_to_json_string(my_array));\n  }\n\n  rc = json_object_array_del_idx(my_array, 0, 1);\n  printf(\"after del_idx(0,1)=%d, my_array.to_string()=%s\\n\", rc, json_object_to_json_string(my_array));\n  json_object_put(my_array);\n  my_array_idx = make_array();\n  rc = json_object_array_del_idx(my_array, 0, orig_array_len);\n  printf(\"after del_idx(0,%d)=%d, my_array.to_string()=%s\\n\", (int) orig_array_len, rc, json_object_to_json_string(my_array));\n  json_object_put(my_array);\n  my_array_idx = make_array();\n  rc = json_object_array_del_idx(my_array, 0, orig_array_len + 1);\n  printf(\"after del_idx(0,%d)=%d, my_array.to_string()=%s\\n\", (int) (orig_array_len + 1), rc, json_object_to_json_string(my_array));\n  json_object_put(my_array);\n  my_array_idx = make_array();\n  rc = json_object_array_del_idx(my_array, 0, orig_array_len - 1);\n  printf(\"after del_idx(0,%d)=%d, my_array.to_string()=%s\\n\", (int) (orig_array_len - 1), rc, json_object_to_json_string(my_array));\n  json_object_array_add(my_array, json_object_new_string(\"s1\"));\n  json_object_array_add(my_array, json_object_new_string(\"s2\"));\n  json_object_array_add(my_array, json_object_new_string(\"s3\"));\n  printf(\"after adding more entries, my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  json_object_put(my_array);\n}\n\n",
            "calle": [
                "json_object_array_add",
                "json_object_array_del_idx",
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_new_string",
                "json_object_put",
                "json_object_to_json_string",
                "make_array",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_array_len",
                        "type": "size_t",
                        "definition": [
                            "size_t orig_array_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_array_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *obj = json_object_array_get_idx(my_array, ii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_array_list_expand_internal",
            "header": "void test_array_list_expand_internal(void)",
            "params": [
                "void"
            ],
            "definition": "void test_array_list_expand_internal(void)\n{\n  int rc;\n  size_t ii;\n  size_t idx;\n  json_object *my_array;\n  unsigned int my_array_idx = 0;\n  my_array_idx = make_array();\n  printf(\"my_array=\\n\");\n  for (ii = 0; ii < json_object_array_length(my_array); ii += 1)\n  {\n    json_object *obj = json_object_array_get_idx(my_array, ii);\n    printf(\"\\t[%d]=%s\\n\", (int) ii, json_object_to_json_string(obj));\n  }\n\n  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  rc = json_object_array_put_idx(my_array, 5, json_object_new_int(6));\n  printf(\"put_idx(5,6)=%d\\n\", rc);\n  idx = (32 * 2) - 1;\n  rc = json_object_array_put_idx(my_array, idx, json_object_new_int(0));\n  printf(\"put_idx(%d,0)=%d\\n\", (int) idx, rc);\n  idx = ((32 * 2) * 2) + 1;\n  rc = json_object_array_put_idx(my_array, idx, json_object_new_int(0));\n  printf(\"put_idx(%d,0)=%d\\n\", (int) idx, rc);\n  idx = SIZE_MAX;\n  json_object *tmp = json_object_new_int(10);\n  rc = json_object_array_put_idx(my_array, idx, tmp);\n  printf(\"put_idx(SIZE_T_MAX,0)=%d\\n\", rc);\n  if (rc == (-1))\n  {\n    json_object_put(tmp);\n  }\n  json_object_put(my_array);\n}\n\n",
            "calle": [
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_array_put_idx",
                "json_object_new_int",
                "json_object_put",
                "json_object_to_json_string",
                "make_array",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "size_t",
                        "definition": [
                            "size_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_array_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *obj = json_object_array_get_idx(my_array, ii)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "json_object *",
                        "definition": [
                            "json_object *tmp = json_object_new_int(10)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_array_insert_idx",
            "header": "void test_array_insert_idx(void)",
            "params": [
                "void"
            ],
            "definition": "void test_array_insert_idx(void)\n{\n  json_object *my_array;\n  unsigned int my_array_idx = 0;\n  struct json_object *jo1;\n  unsigned int jo1_idx = 0;\n  my_array_idx = json_object_new_array();\n  json_object_array_add(my_array, json_object_new_int(1));\n  json_object_array_add(my_array, json_object_new_int(2));\n  json_object_array_add(my_array, json_object_new_int(5));\n  json_object_array_insert_idx(my_array, 2, json_object_new_int(4));\n  jo1_idx = json_tokener_parse(\"[1, 2, 4, 5]\");\n  assert(1 == json_object_equal(my_array, jo1));\n  json_object_put(jo1);\n  json_object_array_insert_idx(my_array, 2, json_object_new_int(3));\n  jo1_idx = json_tokener_parse(\"[1, 2, 3, 4, 5]\");\n  assert(1 == json_object_equal(my_array, jo1));\n  json_object_put(jo1);\n  json_object_array_insert_idx(my_array, 5, json_object_new_int(6));\n  jo1_idx = json_tokener_parse(\"[1, 2, 3, 4, 5, 6]\");\n  assert(1 == json_object_equal(my_array, jo1));\n  json_object_put(jo1);\n  json_object_array_insert_idx(my_array, 7, json_object_new_int(8));\n  jo1_idx = json_tokener_parse(\"[1, 2, 3, 4, 5, 6, null, 8]\");\n  assert(1 == json_object_equal(my_array, jo1));\n  json_object_put(jo1);\n  json_object_put(my_array);\n}\n\n",
            "calle": [
                "assert",
                "json_object_array_add",
                "json_object_array_insert_idx",
                "json_object_equal",
                "json_object_new_array",
                "json_object_new_int",
                "json_object_put",
                "json_tokener_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_array_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo1_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test1",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *my_string;\n  unsigned int my_string_idx = 0;\n  json_object *my_int;\n  unsigned int my_int_idx = 0;\n  json_object *my_null;\n  unsigned int my_null_idx = 0;\n  json_object *my_object;\n  unsigned int my_object_idx = 0;\n  json_object *my_array;\n  unsigned int my_array_idx = 0;\n  size_t i;\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  my_string_idx = json_object_new_string(\"\\t\");\n  printf(\"my_string=%s\\n\", json_object_get_string(my_string));\n  printf(\"my_string.to_string()=%s\\n\", json_object_to_json_string(my_string));\n  json_object_put(my_string);\n  my_string_idx = json_object_new_string(\"\\\\\");\n  printf(\"my_string=%s\\n\", json_object_get_string(my_string));\n  printf(\"my_string.to_string()=%s\\n\", json_object_to_json_string(my_string));\n  json_object_put(my_string);\n  my_string_idx = json_object_new_string(\"/\");\n  printf(\"my_string=%s\\n\", json_object_get_string(my_string));\n  printf(\"my_string.to_string()=%s\\n\", json_object_to_json_string(my_string));\n  printf(\"my_string.to_string(NOSLASHESCAPE)=%s\\n\", json_object_to_json_string_ext(my_string, 1 << 4));\n  json_object_put(my_string);\n  my_string_idx = json_object_new_string(\"/foo/bar/baz\");\n  printf(\"my_string=%s\\n\", json_object_get_string(my_string));\n  printf(\"my_string.to_string()=%s\\n\", json_object_to_json_string(my_string));\n  printf(\"my_string.to_string(NOSLASHESCAPE)=%s\\n\", json_object_to_json_string_ext(my_string, 1 << 4));\n  json_object_put(my_string);\n  my_string_idx = json_object_new_string(\"foo\");\n  printf(\"my_string=%s\\n\", json_object_get_string(my_string));\n  printf(\"my_string.to_string()=%s\\n\", json_object_to_json_string(my_string));\n  my_int_idx = json_object_new_int(9);\n  printf(\"my_int=%d\\n\", json_object_get_int(my_int));\n  printf(\"my_int.to_string()=%s\\n\", json_object_to_json_string(my_int));\n  my_null_idx = json_object_new_null();\n  printf(\"my_null.to_string()=%s\\n\", json_object_to_json_string(my_null));\n  my_array_idx = json_object_new_array();\n  json_object_array_add(my_array, json_object_new_int(1));\n  json_object_array_add(my_array, json_object_new_int(2));\n  json_object_array_add(my_array, json_object_new_int(3));\n  json_object_array_put_idx(my_array, 4, json_object_new_int(5));\n  printf(\"my_array=\\n\");\n  for (i = 0; i < json_object_array_length(my_array); i += 1)\n  {\n    json_object *obj = json_object_array_get_idx(my_array, i);\n    printf(\"\\t[%d]=%s\\n\", (int) i, json_object_to_json_string(obj));\n  }\n\n  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  json_object_put(my_array);\n  test_array_insert_idx();\n  test_array_del_idx();\n  test_array_list_expand_internal();\n  my_array_idx = json_object_new_array_ext(5);\n  json_object_array_add(my_array, json_object_new_int(3));\n  json_object_array_add(my_array, json_object_new_int(1));\n  json_object_array_add(my_array, json_object_new_int(2));\n  json_object_array_put_idx(my_array, 4, json_object_new_int(0));\n  printf(\"my_array=\\n\");\n  for (i = 0; i < json_object_array_length(my_array); i += 1)\n  {\n    json_object *obj = json_object_array_get_idx(my_array, i);\n    printf(\"\\t[%d]=%s\\n\", (int) i, json_object_to_json_string(obj));\n  }\n\n  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  json_object_array_sort(my_array, sort_fn);\n  printf(\"my_array=\\n\");\n  for (i = 0; i < json_object_array_length(my_array); i += 1)\n  {\n    json_object *obj = json_object_array_get_idx(my_array, i);\n    printf(\"\\t[%d]=%s\\n\", (int) i, json_object_to_json_string(obj));\n  }\n\n  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));\n  json_object *one = json_object_new_int(1);\n  json_object *result = json_object_array_bsearch(one, my_array, sort_fn);\n  printf(\"find json_object(1) in my_array successfully: %s\\n\", json_object_to_json_string(result));\n  json_object_put(one);\n  my_object_idx = json_object_new_object();\n  int rc = json_object_object_add(my_object, \"abc\", my_object);\n  if (rc != (-1))\n  {\n    printf(\"ERROR: able to successfully add object to itself!\\n\");\n    fflush(stdout);\n  }\n  json_object_object_add(my_object, \"abc\", json_object_new_int(12));\n  json_object_object_add(my_object, \"foo\", json_object_new_string(\"bar\"));\n  json_object_object_add(my_object, \"bool0\", json_object_new_boolean(0));\n  json_object_object_add(my_object, \"bool1\", json_object_new_boolean(1));\n  json_object_object_add(my_object, \"baz\", json_object_new_string(\"bang\"));\n  json_object *baz_obj = json_object_new_string(\"fark\");\n  json_object_get(baz_obj);\n  json_object_object_add(my_object, \"baz\", baz_obj);\n  json_object_object_del(my_object, \"baz\");\n  printf(\"baz_obj.to_string()=%s\\n\", json_object_to_json_string(baz_obj));\n  json_object_put(baz_obj);\n  printf(\"my_object=\\n\");\n  char *key = 0;\n  unsigned int key_idx = 0;\n  struct json_object *val = 0;\n  unsigned int val_idx = 0;\n  for (struct lh_entry *entrykey = lh_table_head(json_object_get_object(my_object)), entry_nextkey = 0;   {\n    helper_main_1(&key_idx, &val_idx, &entry_nextkey_idx, entrykey);\n  }\n; entrykey_idx = &entry_nextkey[entry_nextkey_idx])\n  {\n    printf(\"\\t%s: %s\\n\", key, json_object_to_json_string(val));\n  }\n\n  unsigned int entry_nextkey_idx = 0;\n  json_object *empty_array = json_object_new_array();\n  json_object *empty_obj = json_object_new_object();\n  json_object_object_add(my_object, \"empty_array\", empty_array);\n  json_object_object_add(my_object, \"empty_obj\", empty_obj);\n  printf(\"my_object.to_string()=%s\\n\", json_object_to_json_string(my_object));\n  json_object_put(my_array);\n  my_array_idx = json_object_new_array_ext((-2147483648) + 1);\n  if ((&my_array[my_array_idx]) != 0)\n  {\n    printf(\"ERROR: able to allocate an array of negative size!\\n\");\n    fflush(stdout);\n    json_object_put(my_array);\n    my_array_idx = 0;\n  }\n  json_object_put(my_string);\n  json_object_put(my_int);\n  json_object_put(my_null);\n  json_object_put(my_object);\n  json_object_put(my_array);\n  return 0;\n}\n\n",
            "calle": [
                "fflush",
                "helper_main_1",
                "json_object_array_add",
                "json_object_array_bsearch",
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_array_put_idx",
                "json_object_array_sort",
                "json_object_get",
                "json_object_get_int",
                "json_object_get_object",
                "json_object_get_string",
                "json_object_new_array",
                "json_object_new_array_ext",
                "json_object_new_boolean",
                "json_object_new_int",
                "json_object_new_null",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_object_add",
                "json_object_object_del",
                "json_object_put",
                "json_object_to_json_string",
                "json_object_to_json_string_ext",
                "lh_table_head",
                "mc_set_debug",
                "printf",
                "sort_fn",
                "test_array_del_idx",
                "test_array_insert_idx",
                "test_array_list_expand_internal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_string",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_string_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_string_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_int",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_int"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_int_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_int_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_null",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_null"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_null_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_null_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_object",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_object"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_object_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_object_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_array_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_array_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *obj = json_object_array_get_idx(my_array, i)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "one",
                        "type": "json_object *",
                        "definition": [
                            "json_object *one = json_object_new_int(1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "json_object *",
                        "definition": [
                            "json_object *result = json_object_array_bsearch(one, my_array, sort_fn)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc = json_object_object_add(my_object, \"abc\", my_object)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "baz_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *baz_obj = json_object_new_string(\"fark\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char *",
                        "definition": [
                            "char *key = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entrykey = lh_table_head(json_object_get_object(my_object))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry_nextkey = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty_array",
                        "type": "json_object *",
                        "definition": [
                            "json_object *empty_array = json_object_new_array()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *empty_obj = json_object_new_object()"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "unsigned int * const key_idx_ref",
                "unsigned int * const val_idx_ref",
                "unsigned int * const entry_nextkey_idx_ref",
                "struct lh_entry * const entrykey"
            ],
            "definition": "void helper_main_1(unsigned int * const key_idx_ref, unsigned int * const val_idx_ref, unsigned int * const entry_nextkey_idx_ref, struct lh_entry * const entrykey)\n{\n  unsigned int key_idx = *key_idx_ref;\n  unsigned int val_idx = *val_idx_ref;\n  unsigned int entry_nextkey_idx = *entry_nextkey_idx_ref;\n  if (entrykey)\n  {\n    key_idx = (char *) lh_entry_k(entrykey);\n    val_idx = (struct json_object *) lh_entry_v(entrykey);\n    entry_nextkey_idx = lh_entry_next(entrykey);\n  }\n  ;\n  entrykey;\n  *key_idx_ref = key_idx;\n  *val_idx_ref = val_idx;\n  *entry_nextkey_idx_ref = entry_nextkey_idx;\n}\n\n",
            "calle": [
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "key_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const val_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const entry_nextkey_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry * const",
                        "definition": [
                            "struct lh_entry * const entrykey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = *key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val_idx = *val_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey_idx = *entry_nextkey_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_flags",
            "header": "int parse_flags(int argc, char **argv)",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int parse_flags(int argc, char **argv)\n{\n  int arg_idx;\n  int sflags = 0;\n  for (arg_idx = 1; arg_idx < argc; arg_idx += 1)\n  {\n    int jj;\n    for (jj = 0; jj < ((int) ((sizeof(format_args)) / (sizeof(format_args[0])))); jj += 1)\n    {\n      if (strcasecmp(argv[arg_idx], format_args[jj].arg) == 0)\n      {\n        sflags |= format_args[jj].flag;\n        break;\n      }\n    }\n\n    if (jj == ((sizeof(format_args)) / (sizeof(format_args[0]))))\n    {\n      printf(\"Unknown arg: %s\\n\", argv[arg_idx]);\n      exit(1);\n    }\n  }\n\n  return sflags;\n}\n\n",
            "calle": [
                "exit",
                "printf",
                "strcasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "int",
                        "definition": [
                            "int arg_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sflags",
                        "type": "int",
                        "definition": [
                            "int sflags = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "int",
                        "definition": [
                            "int jj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format_args",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test2",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  new_obj_idx = json_tokener_parse(\"/* more difficult test case */{ \\\"glossary\\\": { \\\"title\\\": \\\"example glossary\\\", \\\"GlossDiv\\\": { \\\"title\\\": \\\"S\\\", \\\"GlossList\\\": [ { \\\"ID\\\": \\\"SGML\\\", \\\"SortAs\\\": \\\"SGML\\\", \\\"GlossTerm\\\": \\\"Standard Generalized Markup Language\\\", \\\"Acronym\\\": \\\"SGML\\\", \\\"Abbrev\\\": \\\"ISO 8879:1986\\\", \\\"GlossDef\\\": \\\"A meta-markup language, used to create markup languages such as DocBook.\\\", \\\"GlossSeeAlso\\\": [\\\"GML\\\", \\\"XML\\\", \\\"markup\\\"] } ] } } }\");\n  printf(\"new_obj.to_string()=%s\\n\", json_object_to_json_string(new_obj));\n  json_object_put(new_obj);\n  return 0;\n}\n\n",
            "calle": [
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_parse",
                "mc_set_debug",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_hex",
            "header": "",
            "params": [
                "const char *s"
            ],
            "definition": "void print_hex(const char *s)\n{\n  const char *iter = s;\n  unsigned char ch;\n  while ((ch = *(iter++)) != 0)\n  {\n    if (',' != ch)\n    {\n      printf(\"%x \", ch);\n    }\n    else\n      printf(\",\");\n  }\n\n  putchar('\\n');\n}\n\n",
            "calle": [
                "printf",
                "putchar"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "const char *",
                        "definition": [
                            "const char *iter = s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_lot_of_adds",
            "header": "static void test_lot_of_adds(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_lot_of_adds(void)\n{\n  int ii;\n  char key[50];\n  json_object *jobj = json_object_new_object();\n  assert(jobj != 0);\n  for (ii = 0; ii < 500; ii += 1)\n  {\n    snprintf(key, sizeof(key), \"k%d\", ii);\n    json_object *iobj = json_object_new_int(ii);\n    assert(iobj != 0);\n    if (json_object_object_add(jobj, key, iobj))\n    {\n      fprintf(stderr, \"FAILED to add object #%d\\n\", ii);\n      abort();\n    }\n  }\n\n  printf(\"%s\\n\", json_object_to_json_string(jobj));\n  assert(json_object_object_length(jobj) == 500);\n  json_object_put(jobj);\n}\n\n",
            "calle": [
                "abort",
                "assert",
                "fprintf",
                "json_object_new_int",
                "json_object_new_object",
                "json_object_object_add",
                "json_object_object_length",
                "json_object_put",
                "json_object_to_json_string",
                "printf",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char [50]",
                        "definition": [
                            "char key[50]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jobj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jobj = json_object_new_object()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iobj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *iobj = json_object_new_int(ii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test4",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  const char *input = \"\\\"\\\\ud840\\\\udd26,\\\\ud840\\\\udd27,\\\\ud800\\\\udd26,\\\\ud800\\\\udd27\\\"\";\n  const char *expected = \"\\xF0\\xA0\\x84\\xA6,\\xF0\\xA0\\x84\\xA7,\\xF0\\x90\\x84\\xA6,\\xF0\\x90\\x84\\xA7\";\n  struct json_object *parse_result = json_tokener_parse(input);\n  const char *unjson = json_object_get_string(parse_result);\n  printf(\"input: %s\\n\", input);\n  int strings_match = !strcmp(expected, unjson);\n  int retval = 0;\n  if (strings_match)\n  {\n    printf(\"JSON parse result is correct: %s\\n\", unjson);\n    puts(\"PASS\");\n  }\n  else\n  {\n    printf(\"JSON parse result doesn't match expected string\\n\");\n    printf(\"expected string bytes: \");\n    print_hex(expected);\n    printf(\"parsed string bytes:   \");\n    print_hex(unjson);\n    puts(\"FAIL\");\n    retval = 1;\n  }\n  json_object_put(parse_result);\n  test_lot_of_adds();\n  return retval;\n}\n\n",
            "calle": [
                "json_object_get_string",
                "json_object_put",
                "json_tokener_parse",
                "print_hex",
                "printf",
                "puts",
                "strcmp",
                "test_lot_of_adds"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const char *",
                        "definition": [
                            "const char *input = \"\\\"\\\\ud840\\\\udd26,\\\\ud840\\\\udd27,\\\\ud800\\\\udd26,\\\\ud800\\\\udd27\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "const char *",
                        "definition": [
                            "const char *expected = \"\\xF0\\xA0\\x84\\xA6,\\xF0\\xA0\\x84\\xA7,\\xF0\\x90\\x84\\xA6,\\xF0\\x90\\x84\\xA7\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parse_result = json_tokener_parse(input)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unjson",
                        "type": "const char *",
                        "definition": [
                            "const char *unjson = json_object_get_string(parse_result)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strings_match",
                        "type": "int",
                        "definition": [
                            "int strings_match = !strcmp(expected, unjson)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#testReplaceExisting",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  json_object *my_object = json_object_new_object();\n  json_object_object_add(my_object, \"foo1\", json_object_new_string(\"bar1\"));\n  json_object_object_add(my_object, \"foo2\", json_object_new_string(\"bar2\"));\n  json_object_object_add(my_object, \"deleteme\", json_object_new_string(\"bar2\"));\n  json_object_object_add(my_object, \"foo3\", json_object_new_string(\"bar3\"));\n  printf(\"==== delete-in-loop test starting ====\\n\");\n  int orig_count = 0;\n  char *key0 = 0;\n  unsigned int key0_idx = 0;\n  struct json_object *val0 = 0;\n  unsigned int val0_idx = 0;\n  for (struct lh_entry *entrykey0 = lh_table_head(json_object_get_object(my_object)), entry_nextkey0 = 0;   {\n    if (entrykey0)\n    {\n      key0_idx = (char *) lh_entry_k(entrykey0);\n      val0_idx = (struct json_object *) lh_entry_v(entrykey0);\n      entry_nextkey0_idx = lh_entry_next(entrykey0);\n    }\n    ;\n    entrykey0;\n  }\n; entrykey0_idx = &entry_nextkey0[entry_nextkey0_idx])\n  {\n    printf(\"Key at index %d is [%s] %d\", orig_count, key0, (&val0[val0_idx]) == 0);\n    if (strcmp(key0, \"deleteme\") == 0)\n    {\n      json_object_object_del(my_object, key0);\n      printf(\" (deleted)\\n\");\n    }\n    else\n      printf(\" (kept)\\n\");\n    orig_count += 1;\n  }\n\n  unsigned int entry_nextkey0_idx = 0;\n  printf(\"==== replace-value first loop starting ====\\n\");\n  const char *original_key = 0;\n  unsigned int original_key_idx = 0;\n  orig_count = 0;\n  char *key = 0;\n  unsigned int key_idx = 0;\n  struct json_object *val = 0;\n  unsigned int val_idx = 0;\n  for (struct lh_entry *entrykey = lh_table_head(json_object_get_object(my_object)), entry_nextkey = 0;   {\n    if (entrykey)\n    {\n      key_idx = (char *) lh_entry_k(entrykey);\n      val_idx = (struct json_object *) lh_entry_v(entrykey);\n      entry_nextkey_idx = lh_entry_next(entrykey);\n    }\n    ;\n    entrykey;\n  }\n; entrykey_idx = &entry_nextkey[entry_nextkey_idx])\n  {\n    printf(\"Key at index %d is [%s] %d\\n\", orig_count, key, (&val[val_idx]) == 0);\n    orig_count += 1;\n    if (strcmp(key, \"foo2\") != 0)\n    {\n      continue;\n    }\n    printf(\"replacing value for key [%s]\\n\", key);\n    original_key_idx = &key[key_idx];\n    json_object_object_add(my_object, key, json_object_new_string(\"zzz\"));\n  }\n\n  unsigned int entry_nextkey_idx = 0;\n  printf(\"==== second loop starting ====\\n\");\n  int new_count = 0;\n  int retval = 0;\n  char *key2 = 0;\n  unsigned int key2_idx = 0;\n  struct json_object *val2 = 0;\n  unsigned int val2_idx = 0;\n  for (struct lh_entry *entrykey2 = lh_table_head(json_object_get_object(my_object)), entry_nextkey2 = 0;   {\n    if (entrykey2)\n    {\n      key2_idx = (char *) lh_entry_k(entrykey2);\n      val2_idx = (struct json_object *) lh_entry_v(entrykey2);\n      entry_nextkey2_idx = lh_entry_next(entrykey2);\n    }\n    ;\n    entrykey2;\n  }\n; entrykey2_idx = &entry_nextkey2[entry_nextkey2_idx])\n  {\n    printf(\"Key at index %d is [%s] %d\\n\", new_count, key2, (&val2[val2_idx]) == 0);\n    new_count += 1;\n    if (strcmp(key2, \"foo2\") != 0)\n    {\n      continue;\n    }\n    printf(\"pointer for key [%s] does %smatch\\n\", key2, ((&key2[key2_idx]) == (&original_key[original_key_idx])) ? (\"\") : (\"NOT \"));\n    if ((&key2[key2_idx]) != (&original_key[original_key_idx]))\n    {\n      retval = 1;\n    }\n  }\n\n  unsigned int entry_nextkey2_idx = 0;\n  if (new_count != orig_count)\n  {\n    printf(\"mismatch between original count (%d) and new count (%d)\\n\", orig_count, new_count);\n    retval = 1;\n  }\n  json_object_put(my_object);\n  return retval;\n}\n\n",
            "calle": [
                "json_object_get_object",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_object_add",
                "json_object_object_del",
                "json_object_put",
                "lh_entry_k",
                "lh_entry_next",
                "lh_entry_v",
                "lh_table_head",
                "mc_set_debug",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_object",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_object = json_object_new_object()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig_count",
                        "type": "int",
                        "definition": [
                            "int orig_count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key0",
                        "type": "char *",
                        "definition": [
                            "char *key0 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key0_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key0_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val0 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val0_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val0_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entrykey0 = lh_table_head(json_object_get_object(my_object))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry_nextkey0 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey0_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey0_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "original_key",
                        "type": "const char *",
                        "definition": [
                            "const char *original_key = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "original_key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int original_key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char *",
                        "definition": [
                            "char *key = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entrykey = lh_table_head(json_object_get_object(my_object))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry_nextkey = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_count",
                        "type": "int",
                        "definition": [
                            "int new_count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key2",
                        "type": "char *",
                        "definition": [
                            "char *key2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *val2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entrykey2 = lh_table_head(json_object_get_object(my_object))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lh_entry",
                        "type": "struct lh_entry *",
                        "definition": [
                            "struct lh_entry *entry_nextkey2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_nextkey2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int entry_nextkey2_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "getit",
            "header": "static void getit(struct json_object *new_obj, const char *field)",
            "params": [
                "struct json_object *new_obj",
                "const char *field"
            ],
            "definition": "static void getit(struct json_object *new_obj, const char *field)\n{\n  struct json_object *o = 0;\n  if (!json_object_object_get_ex(new_obj, field, &o))\n  {\n    printf(\"Field %s does not exist\\n\", field);\n  }\n  enum json_type o_type = json_object_get_type(o);\n  printf(\"new_obj.%s json_object_get_type()=%s\\n\", field, json_type_to_name(o_type));\n  printf(\"new_obj.%s json_object_get_int()=%d\\n\", field, json_object_get_int(o));\n  printf(\"new_obj.%s json_object_get_int64()=%d\\n\", field, json_object_get_int64(o));\n  printf(\"new_obj.%s json_object_get_uint64()=%u\\n\", field, json_object_get_uint64(o));\n  printf(\"new_obj.%s json_object_get_boolean()=%d\\n\", field, json_object_get_boolean(o));\n  printf(\"new_obj.%s json_object_get_double()=%f\\n\", field, json_object_get_double(o));\n}\n\n",
            "calle": [
                "json_object_get_boolean",
                "json_object_get_double",
                "json_object_get_int",
                "json_object_get_int64",
                "json_object_get_type",
                "json_object_get_uint64",
                "json_object_object_get_ex",
                "json_type_to_name",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "field",
                        "type": "const char *",
                        "definition": [
                            "const char *field"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *o = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o_type",
                        "type": "enum json_type",
                        "definition": [
                            "enum json_type o_type = json_object_get_type(o)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "checktype_header",
            "header": "static void checktype_header(void)",
            "params": [
                "void"
            ],
            "definition": "static void checktype_header(void)\n{\n  printf(\"json_object_is_type: %s,%s,%s,%s,%s,%s,%s\\n\", json_type_to_name(json_type_null), json_type_to_name(json_type_boolean), json_type_to_name(json_type_double), json_type_to_name(json_type_int), json_type_to_name(json_type_object), json_type_to_name(json_type_array), json_type_to_name(json_type_string));\n}\n\n",
            "calle": [
                "json_type_to_name",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "checktype",
            "header": "static void checktype(struct json_object *new_obj, const char *field)",
            "params": [
                "struct json_object *new_obj",
                "const char *field"
            ],
            "definition": "static void checktype(struct json_object *new_obj, const char *field)\n{\n  struct json_object *o = new_obj;\n  if (field && (!json_object_object_get_ex(new_obj, field, &o)))\n  {\n    printf(\"Field %s does not exist\\n\", field);\n  }\n  printf(\"new_obj%s%-18s: %d,%d,%d,%d,%d,%d,%d\\n\", (field) ? (\".\") : (\" \"), (field) ? (field) : (\"\"), json_object_is_type(o, json_type_null), json_object_is_type(o, json_type_boolean), json_object_is_type(o, json_type_double), json_object_is_type(o, json_type_int), json_object_is_type(o, json_type_object), json_object_is_type(o, json_type_array), json_object_is_type(o, json_type_string));\n}\n\n",
            "calle": [
                "json_object_is_type",
                "json_object_object_get_ex",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "field",
                        "type": "const char *",
                        "definition": [
                            "const char *field"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *o = new_obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_cast",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  const char *input = \"{\\n\t\t\\\"string_of_digits\\\": \\\"123\\\",\\n\t\t\\\"regular_number\\\": 222,\\n\t\t\\\"decimal_number\\\": 99.55,\\n\t\t\\\"boolean_true\\\": true,\\n\t\t\\\"boolean_false\\\": false,\\n\t\t\\\"int64_number\\\": 2147483649,\\n\t\t\\\"negative_number\\\": -321321321,\\n\t\t\\\"a_null\\\": null,\\n\t\t\\\"empty_array\\\": [],\\n\t\t\\\"nonempty_array\\\": [ 123 ],\\n\t\t\\\"array_with_zero\\\": [ 0 ],\\n\t\t\\\"empty_object\\\": {},\\n\t\t\\\"nonempty_object\\\": { \\\"a\\\": 123 },\\n\t\t\\\"nan\\\": NaN,\\n\t}\";\n  struct json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  new_obj_idx = json_tokener_parse(input);\n  printf(\"Parsed input: %s\\n\", input);\n  printf(\"Result is %s\\n\", ((&new_obj[new_obj_idx]) == 0) ? (\"NULL (error!)\") : (\"not NULL\"));\n  if (!(&new_obj[new_obj_idx]))\n  {\n    return 1;\n  }\n  getit(new_obj, \"string_of_digits\");\n  getit(new_obj, \"regular_number\");\n  getit(new_obj, \"decimal_number\");\n  getit(new_obj, \"boolean_true\");\n  getit(new_obj, \"boolean_false\");\n  getit(new_obj, \"int64_number\");\n  getit(new_obj, \"negative_number\");\n  getit(new_obj, \"a_null\");\n  getit(new_obj, \"empty_array\");\n  getit(new_obj, \"nonempty_array\");\n  getit(new_obj, \"array_with_zero\");\n  getit(new_obj, \"empty_object\");\n  getit(new_obj, \"nonempty_object\");\n  getit(new_obj, \"nan\");\n  printf(\"\\n================================\\n\");\n  checktype_header();\n  checktype(new_obj, 0);\n  checktype(new_obj, \"string_of_digits\");\n  checktype(new_obj, \"regular_number\");\n  checktype(new_obj, \"decimal_number\");\n  checktype(new_obj, \"boolean_true\");\n  checktype(new_obj, \"boolean_false\");\n  checktype(new_obj, \"int64_number\");\n  checktype(new_obj, \"negative_number\");\n  checktype(new_obj, \"a_null\");\n  checktype(new_obj, \"nan\");\n  json_object_put(new_obj);\n  return 0;\n}\n\n",
            "calle": [
                "checktype",
                "checktype_header",
                "getit",
                "json_object_put",
                "json_tokener_parse",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const char *",
                        "definition": [
                            "const char *input = \"{\\n\t\t\\\"string_of_digits\\\": \\\"123\\\",\\n\t\t\\\"regular_number\\\": 222,\\n\t\t\\\"decimal_number\\\": 99.55,\\n\t\t\\\"boolean_true\\\": true,\\n\t\t\\\"boolean_false\\\": false,\\n\t\t\\\"int64_number\\\": 2147483649,\\n\t\t\\\"negative_number\\\": -321321321,\\n\t\t\\\"a_null\\\": null,\\n\t\t\\\"empty_array\\\": [],\\n\t\t\\\"nonempty_array\\\": [ 123 ],\\n\t\t\\\"array_with_zero\\\": [ 0 ],\\n\t\t\\\"empty_object\\\": {},\\n\t\t\\\"nonempty_object\\\": { \\\"a\\\": 123 },\\n\t\t\\\"nan\\\": NaN,\\n\t}\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_case_parse",
            "header": "static void test_case_parse(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_case_parse(void)\n{\n  struct json_tokener *tok;\n  unsigned int tok_idx = 0;\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  tok_idx = json_tokener_new();\n  json_tokener_set_flags(tok, 0x01);\n  new_obj_idx = json_tokener_parse_ex(tok, \"True\", 4);\n  assert((&new_obj[new_obj_idx]) == 0);\n  new_obj_idx = json_tokener_parse_ex(tok, \"False\", 5);\n  assert((&new_obj[new_obj_idx]) == 0);\n  new_obj_idx = json_tokener_parse_ex(tok, \"Null\", 4);\n  assert((&new_obj[new_obj_idx]) == 0);\n  printf(\"OK\\n\");\n  json_tokener_free(tok);\n}\n\n",
            "calle": [
                "assert",
                "json_tokener_free",
                "json_tokener_new",
                "json_tokener_parse_ex",
                "json_tokener_set_flags",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_charcase",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  test_case_parse();\n  return 0;\n}\n\n",
            "calle": [
                "mc_set_debug",
                "test_case_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_compare",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  struct json_object *int1 = json_object_new_int(0);\n  struct json_object *int2 = json_object_new_int(1);\n  struct json_object *int3 = json_object_new_int(1);\n  struct json_object *int4 = json_object_new_int(-1);\n  struct json_object *uint1 = json_object_new_uint64(0);\n  struct json_object *uint2 = json_object_new_uint64(1);\n  struct json_object *uint3 = json_object_new_uint64(1);\n  struct json_object *uint4 = json_object_new_uint64(((uint64_t) INT64_MAX) + 100);\n  if (!json_object_equal(int1, int2))\n  {\n    printf(\"JSON integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer comparison failed\\n\");\n  if (json_object_equal(int1, int1))\n  {\n    printf(\"JSON same object comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON same object comparison failed\\n\");\n  if (json_object_equal(int2, int3))\n  {\n    printf(\"JSON same integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON same integer comparison failed\\n\");\n  if (!json_object_equal(uint1, uint2))\n  {\n    printf(\"JSON usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON usigned integer comparison failed\\n\");\n  if (json_object_equal(uint1, uint1))\n  {\n    printf(\"JSON same usigned object comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON same usigned object comparison failed\\n\");\n  if (json_object_equal(uint2, uint3))\n  {\n    printf(\"JSON same usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON same usigned integer comparison failed\\n\");\n  if (json_object_equal(int2, uint2))\n  {\n    printf(\"JSON integer & usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer & usigned integer comparison failed\\n\");\n  if (!json_object_equal(int2, uint4))\n  {\n    printf(\"JSON integer & usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer & usigned integer comparison failed\\n\");\n  if (!json_object_equal(int4, uint2))\n  {\n    printf(\"JSON integer & usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer & usigned integer comparison failed\\n\");\n  if (!json_object_equal(int4, uint4))\n  {\n    printf(\"JSON integer & usigned integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer & usigned integer comparison failed\\n\");\n  if (json_object_equal(uint2, int2))\n  {\n    printf(\"JSON usigned integer & integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON usigned integer & integer comparison failed\\n\");\n  if (!json_object_equal(uint2, int4))\n  {\n    printf(\"JSON usigned integer & integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON usigned integer & integer comparison failed\\n\");\n  if (!json_object_equal(uint4, int2))\n  {\n    printf(\"JSON usigned integer & integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON usigned integer & integer comparison failed\\n\");\n  if (!json_object_equal(uint4, int4))\n  {\n    printf(\"JSON usigned integer & integer comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON usigned integer & integer comparison failed\\n\");\n  json_object_put(int1);\n  json_object_put(int2);\n  json_object_put(int3);\n  json_object_put(int4);\n  json_object_put(uint1);\n  json_object_put(uint2);\n  json_object_put(uint3);\n  json_object_put(uint4);\n  struct json_object *str1 = json_object_new_string(\"TESTSTRING\");\n  struct json_object *str2 = json_object_new_string(\"TESTSTRING\");\n  struct json_object *str3 = json_object_new_string(\"DIFFERENT\");\n  if (json_object_equal(str1, str2))\n  {\n    printf(\"Comparing equal strings is correct\\n\");\n  }\n  else\n    printf(\"Comparing equal strings failed\\n\");\n  if (!json_object_equal(str1, str3))\n  {\n    printf(\"Comparing different strings is correct\\n\");\n  }\n  else\n    printf(\"Comparing different strings failed\\n\");\n  json_object_put(str1);\n  json_object_put(str2);\n  json_object_put(str3);\n  struct json_object *dbl1 = json_object_new_double(3.14159);\n  struct json_object *dbl2 = json_object_new_double(3.14159);\n  struct json_object *dbl3 = json_object_new_double(3.0);\n  if (json_object_equal(dbl1, dbl2))\n  {\n    printf(\"Comparing equal doubles is correct\\n\");\n  }\n  else\n    printf(\"Comparing equal doubles failed\\n\");\n  if (!json_object_equal(dbl1, dbl3))\n  {\n    printf(\"Comparing different doubles is correct\\n\");\n  }\n  else\n    printf(\"Comparing different doubles failed\\n\");\n  json_object_put(dbl1);\n  json_object_put(dbl2);\n  json_object_put(dbl3);\n  struct json_object *ar1 = json_object_new_array();\n  struct json_object *ar2 = json_object_new_array();\n  struct json_object *ar3 = json_object_new_array();\n  struct json_object *ar4 = json_object_new_array();\n  json_object_array_add(ar1, json_object_new_int(1));\n  json_object_array_add(ar1, json_object_new_int(2));\n  json_object_array_add(ar2, json_object_new_int(1));\n  json_object_array_add(ar2, json_object_new_int(2));\n  json_object_array_add(ar3, json_object_new_int(1));\n  json_object_array_add(ar3, json_object_new_int(1));\n  if (json_object_equal(ar1, ar2))\n  {\n    printf(\"Comparing equal arrays is correct\\n\");\n  }\n  else\n    printf(\"Comparing equal arrays failed\\n\");\n  json_object_array_add(ar2, json_object_new_int(1));\n  if (!json_object_equal(ar1, ar2))\n  {\n    printf(\"Comparing arrays of different len is correct\\n\");\n  }\n  else\n    printf(\"Comparing arrays of different len failed\\n\");\n  if (!json_object_equal(ar1, ar3))\n  {\n    printf(\"Comparing different arrays is correct\\n\");\n  }\n  else\n    printf(\"Comparing different arrays failed\\n\");\n  if (!json_object_equal(ar1, ar4))\n  {\n    printf(\"Comparing different arrays (one empty) is correct\\n\");\n  }\n  else\n    printf(\"Comparing different arrays (one empty) failed\\n\");\n  json_object_put(ar1);\n  json_object_put(ar2);\n  json_object_put(ar3);\n  json_object_put(ar4);\n  struct json_object *obj1 = json_object_new_object();\n  struct json_object *obj2 = json_object_new_object();\n  json_object_object_add(obj1, \"test1\", json_object_new_int(123));\n  json_object_object_add(obj1, \"test2\", json_object_new_int(321));\n  json_object_object_add(obj1, \"test3\", json_object_new_int(320));\n  json_object_object_add(obj1, \"test4\", json_object_new_int(319));\n  json_object_object_add(obj1, \"test5\", json_object_new_int(318));\n  json_object_object_add(obj2, \"test5\", json_object_new_int(318));\n  json_object_object_add(obj2, \"test4\", json_object_new_int(319));\n  json_object_object_add(obj2, \"test3\", json_object_new_int(320));\n  json_object_object_add(obj2, \"test2\", json_object_new_int(321));\n  json_object_object_add(obj2, \"test1\", json_object_new_int(123));\n  if (json_object_equal(obj1, obj2))\n  {\n    printf(\"Comparing JSON object with different key order is correct\\n\");\n  }\n  else\n    printf(\"Comparing JSON object with different key order is incorrect\\n\");\n  json_object_object_add(obj2, \"test3\", json_object_new_int(234));\n  if (!json_object_equal(obj1, obj2))\n  {\n    printf(\"Comparing different objects is correct\\n\");\n  }\n  else\n    printf(\"Comparing different objects is incorrect\\n\");\n  json_object_object_add(obj2, \"test3\", json_object_new_int(320));\n  json_object_object_add(obj2, \"test6\", json_object_new_int(321));\n  if (!json_object_equal(obj1, obj2))\n  {\n    printf(\"Comparing different objects is correct\\n\");\n  }\n  else\n    printf(\"Comparing different objects is incorrect\\n\");\n  json_object_object_add(obj1, \"test6\", json_object_new_int(321));\n  if (json_object_equal(obj1, obj2))\n  {\n    printf(\"Comparing different objects is correct\\n\");\n  }\n  else\n    printf(\"Comparing different objects is incorrect\\n\");\n  json_object_object_add(obj1, \"test7\", json_object_new_int(322));\n  if (!json_object_equal(obj1, obj2))\n  {\n    printf(\"Comparing different objects is correct\\n\");\n  }\n  else\n    printf(\"Comparing different objects is incorrect\\n\");\n  json_object_put(obj1);\n  json_object_put(obj2);\n  struct json_object *int5 = json_object_new_int(0);\n  struct json_object *dbl5 = json_object_new_double(3.14159);\n  if (!json_object_equal(int5, 0))\n  {\n    printf(\"JSON integer and NULL comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer and NULL comparison failed\\n\");\n  if (!json_object_equal(0, dbl5))\n  {\n    printf(\"JSON NULL and double comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON NULL and double comparison failed\\n\");\n  if (!json_object_equal(int5, dbl5))\n  {\n    printf(\"JSON integer and double comparison is correct\\n\");\n  }\n  else\n    printf(\"JSON integer and double comparison failed\\n\");\n  json_object_put(int5);\n  json_object_put(dbl5);\n  return 0;\n}\n\n",
            "calle": [
                "json_object_array_add",
                "json_object_equal",
                "json_object_new_array",
                "json_object_new_double",
                "json_object_new_int",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_new_uint64",
                "json_object_object_add",
                "json_object_put",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *int1 = json_object_new_int(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *int2 = json_object_new_int(1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *int3 = json_object_new_int(1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *int4 = json_object_new_int(-1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *uint1 = json_object_new_uint64(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *uint2 = json_object_new_uint64(1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *uint3 = json_object_new_uint64(1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *uint4 = json_object_new_uint64(((uint64_t) INT64_MAX) + 100)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *str1 = json_object_new_string(\"TESTSTRING\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *str2 = json_object_new_string(\"TESTSTRING\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *str3 = json_object_new_string(\"DIFFERENT\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dbl1 = json_object_new_double(3.14159)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dbl2 = json_object_new_double(3.14159)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dbl3 = json_object_new_double(3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *ar1 = json_object_new_array()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *ar2 = json_object_new_array()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *ar3 = json_object_new_array()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *ar4 = json_object_new_array()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj1 = json_object_new_object()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj2 = json_object_new_object()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *int5 = json_object_new_int(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dbl5 = json_object_new_double(3.14159)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "do_benchmark",
            "header": "static void do_benchmark(json_object *src1)",
            "params": [
                "json_object *src2"
            ],
            "definition": "static void do_benchmark(json_object *src2)\n{\n  json_object *dst2 = 0;\n  unsigned int dst2_idx = 0;\n  int ii;\n  int iterations = 1000000;\n  time_t start = time(0);\n  start = time(0);\n  for (ii = 0; ii < iterations; ii += 1)\n  {\n    dst2_idx = json_tokener_parse(json_object_get_string(src2));\n    json_object_put(dst2);\n  }\n\n  printf(\"BENCHMARK - %d iterations of 'dst2 = json_tokener_parse(json_object_get_string(src2))' took %d seconds\\n\", iterations, (int) (time(0) - start));\n  start = time(0);\n  dst2_idx = 0;\n  for (ii = 0; ii < iterations; ii += 1)\n  {\n    json_object_deep_copy(src2, &(&dst2[dst2_idx]), 0);\n    json_object_put(dst2);\n    dst2_idx = 0;\n  }\n\n  printf(\"BENCHMARK - %d iterations of 'json_object_deep_copy(src2, &dst2, NULL)' took %d seconds\\n\", iterations, (int) (time(0) - start));\n}\n\n",
            "calle": [
                "json_object_deep_copy",
                "json_object_get_string",
                "json_object_put",
                "json_tokener_parse",
                "printf",
                "time"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src2",
                        "type": "json_object *",
                        "definition": [
                            "json_object *src2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst2",
                        "type": "json_object *",
                        "definition": [
                            "json_object *dst2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iterations",
                        "type": "int",
                        "definition": [
                            "int iterations = 1000000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "time_t",
                        "definition": [
                            "time_t start = time(0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "my_custom_serializer",
            "header": "",
            "params": [
                "struct json_object *jso",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "int my_custom_serializer(struct json_object *jso, struct printbuf *pb, int level, int flags)\n{\n  sprintbuf(pb, \"OTHER\");\n  return 0;\n}\n\n",
            "calle": [
                "sprintbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "my_shallow_copy",
            "header": "",
            "params": [
                "json_object *src",
                "json_object *parent",
                "const char *key",
                "size_t index",
                "json_object **dst"
            ],
            "definition": "int my_shallow_copy(json_object *src, json_object *parent, const char *key, size_t index, json_object **dst)\n{\n  int rc;\n  rc = json_c_shallow_copy_default(src, parent, key, index, dst);\n  if (rc < 0)\n  {\n    return rc;\n  }\n  if ((key != 0) && (strcmp(key, \"with_serializer\") == 0))\n  {\n    printf(\"CALLED: my_shallow_copy on with_serializer object\\n\");\n    void *userdata = json_object_get_userdata(src);\n    json_object_set_serializer(*dst, my_custom_serializer, userdata, 0);\n    return 2;\n  }\n  return rc;\n}\n\n",
            "calle": [
                "json_c_shallow_copy_default",
                "json_object_get_userdata",
                "json_object_set_serializer",
                "my_custom_serializer",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "json_object *",
                        "definition": [
                            "json_object *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "json_object **",
                        "definition": [
                            "json_object **dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "void *",
                        "definition": [
                            "void *userdata = json_object_get_userdata(src)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_c_shallow_copy_default",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "my_custom_serializer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_deep_copy",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  struct json_object *src1;\n  unsigned int src1_idx = 0;\n  struct json_object *src2;\n  unsigned int src2_idx = 0;\n  struct json_object *src3;\n  unsigned int src3_idx = 0;\n  struct json_object *dst1 = 0;\n  unsigned int dst1_idx = 0;\n  struct json_object *dst2 = 0;\n  struct json_object *dst3 = 0;\n  int benchmark = 0;\n  if ((argc > 1) && (strcmp(argv[1], \"--benchmark\") == 0))\n  {\n    benchmark = 1;\n  }\n  src1_idx = json_tokener_parse(json_str1);\n  src2_idx = json_tokener_parse(json_str2);\n  src3_idx = json_tokener_parse(json_str3);\n  assert((&src1[src1_idx]) != 0);\n  assert((&src2[src2_idx]) != 0);\n  assert((&src3[src3_idx]) != 0);\n  printf(\"PASSED - loaded input data\\n\");\n  assert(0 == json_object_deep_copy(src1, &(&dst1[dst1_idx]), 0));\n  assert(0 == json_object_deep_copy(src2, &dst2, 0));\n  assert(0 == json_object_deep_copy(src3, &dst3, 0));\n  printf(\"PASSED - all json_object_deep_copy() returned successful\\n\");\n  assert((-1) == json_object_deep_copy(src1, &(&dst1[dst1_idx]), 0));\n  assert(errno == EINVAL);\n  assert((-1) == json_object_deep_copy(src2, &dst2, 0));\n  assert(errno == EINVAL);\n  assert((-1) == json_object_deep_copy(src3, &dst3, 0));\n  assert(errno == EINVAL);\n  printf(\"PASSED - all json_object_deep_copy() returned EINVAL for non-null pointer\\n\");\n  assert(1 == json_object_equal(src1, dst1));\n  assert(1 == json_object_equal(src2, dst2));\n  assert(1 == json_object_equal(src3, dst3));\n  printf(\"PASSED - all json_object_equal() tests returned successful\\n\");\n  assert(0 == strcmp(json_object_to_json_string_ext(src1, 1 << 1), json_object_to_json_string_ext(dst1, 1 << 1)));\n  assert(0 == strcmp(json_object_to_json_string_ext(src2, 1 << 1), json_object_to_json_string_ext(dst2, 1 << 1)));\n  assert(0 == strcmp(json_object_to_json_string_ext(src3, 1 << 1), json_object_to_json_string_ext(dst3, 1 << 1)));\n  printf(\"PASSED - comparison of string output\\n\");\n  json_object_get(dst1);\n  assert((-1) == json_object_deep_copy(src1, &(&dst1[dst1_idx]), 0));\n  assert(errno == EINVAL);\n  json_object_put(dst1);\n  printf(\"PASSED - trying to overrwrite an object that has refcount > 1\");\n  printf(\"\\nPrinting JSON objects for visual inspection\\n\");\n  printf(\"------------------------------------------------\\n\");\n  printf(\" JSON1\\n\");\n  printf(\"%s\\n\", json_object_to_json_string_ext(dst1, 1 << 1));\n  printf(\"------------------------------------------------\\n\");\n  printf(\"------------------------------------------------\\n\");\n  printf(\" JSON2\\n\");\n  printf(\"%s\\n\", json_object_to_json_string_ext(dst2, 1 << 1));\n  printf(\"------------------------------------------------\\n\");\n  printf(\"------------------------------------------------\\n\");\n  printf(\" JSON3\\n\");\n  printf(\"------------------------------------------------\\n\");\n  printf(\"%s\\n\", json_object_to_json_string_ext(dst3, 1 << 1));\n  printf(\"------------------------------------------------\\n\");\n  json_object_put(dst1);\n  json_object_put(dst2);\n  json_object_put(dst3);\n  printf(\"\\nTesting deep_copy with a custom serializer set\\n\");\n  json_object *with_serializer = json_object_new_string(\"notemitted\");\n  char udata[] = \"dummy userdata\";\n  json_object_set_serializer(with_serializer, my_custom_serializer, udata, 0);\n  json_object_object_add(src1, \"with_serializer\", with_serializer);\n  dst1_idx = 0;\n  assert((-1) == json_object_deep_copy(src1, &(&dst1[dst1_idx]), 0));\n  assert(0 == json_object_deep_copy(src1, &(&dst1[dst1_idx]), my_shallow_copy));\n  json_object *dest_with_serializer = json_object_object_get(dst1, \"with_serializer\");\n  assert(dest_with_serializer != 0);\n  char *dst_userdata = json_object_get_userdata(dest_with_serializer);\n  assert(strcmp(dst_userdata, \"dummy userdata\") == 0);\n  const char *special_output = json_object_to_json_string(dest_with_serializer);\n  assert(strcmp(special_output, \"OTHER\") == 0);\n  printf(\"\\ndeep_copy with custom serializer worked OK.\\n\");\n  json_object_put(dst1);\n  if (benchmark)\n  {\n    do_benchmark(src2);\n  }\n  json_object_put(src1);\n  json_object_put(src2);\n  json_object_put(src3);\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "do_benchmark",
                "json_object_deep_copy",
                "json_object_equal",
                "json_object_get",
                "json_object_get_userdata",
                "json_object_new_string",
                "json_object_object_add",
                "json_object_object_get",
                "json_object_put",
                "json_object_set_serializer",
                "json_object_to_json_string",
                "json_object_to_json_string_ext",
                "json_tokener_parse",
                "my_custom_serializer",
                "my_shallow_copy",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *src3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src3_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src3_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dst1 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dst2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *dst3 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "benchmark",
                        "type": "int",
                        "definition": [
                            "int benchmark = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "with_serializer",
                        "type": "json_object *",
                        "definition": [
                            "json_object *with_serializer = json_object_new_string(\"notemitted\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "udata",
                        "type": "char []",
                        "definition": [
                            "char udata[] = \"dummy userdata\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_with_serializer",
                        "type": "json_object *",
                        "definition": [
                            "json_object *dest_with_serializer = json_object_object_get(dst1, \"with_serializer\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_userdata",
                        "type": "char *",
                        "definition": [
                            "char *dst_userdata = json_object_get_userdata(dest_with_serializer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "special_output",
                        "type": "const char *",
                        "definition": [
                            "const char *special_output = json_object_to_json_string(dest_with_serializer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_str1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_str2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "json_str3",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "my_custom_serializer",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "my_shallow_copy",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_double_serializer",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  struct json_object *obj = json_object_new_double(0.5);\n  unsigned int obj_idx = 0;\n  char udata[] = \"test\";\n  printf(\"Test default serializer:\\n\");\n  printf(\"obj.to_string(standard)=%s\\n\", json_object_to_json_string(obj));\n  printf(\"Test default serializer with custom userdata:\\n\");\n  obj->_userdata = udata;\n  printf(\"obj.to_string(userdata)=%s\\n\", json_object_to_json_string(obj));\n  printf(\"Test explicit serializer with custom userdata:\\n\");\n  json_object_set_serializer(obj, json_object_double_to_json_string, udata, 0);\n  printf(\"obj.to_string(custom)=%s\\n\", json_object_to_json_string(obj));\n  printf(\"Test reset serializer:\\n\");\n  json_object_set_serializer(obj, 0, 0, 0);\n  printf(\"obj.to_string(reset)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  printf(\"Test no zero reset serializer:\\n\");\n  obj_idx = json_object_new_double(3.1415000);\n  char data[] = \"%.17g\";\n  json_object_set_serializer(obj, json_object_double_to_json_string, data, 0);\n  printf(\"obj.to_string(reset)=%s\\n\", json_object_to_json_string_ext(obj, 4));\n  json_object_put(obj);\n  obj_idx = json_object_new_double(0.52381);\n  printf(\"obj.to_string(default format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"x%0.3fy\", 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj.to_string(with global format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"T%0.2fX\", 1) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj.to_string(with thread format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"Ttttttttttttt%0.2fxxxxxxxxxxxxxxxxxxX\", 1) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj.to_string(long thread format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(0, 1) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj.to_string(back to global format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(0, 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj.to_string(back to default format)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  obj_idx = json_object_new_double(12.0);\n  printf(\"obj(12.0).to_string(default format)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"%.0f\", 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj(12.0).to_string(%%.0f)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"%.0g\", 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj(12.0).to_string(%%.0g)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(\"%.2g\", 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  printf(\"obj(12.0).to_string(%%.1g)=%s\\n\", json_object_to_json_string(obj));\n  if (json_c_set_serialization_double_format(0, 0) < 0)\n  {\n    printf(\"ERROR: json_c_set_serialization_double_format() failed\");\n  }\n  json_object_put(obj);\n  obj_idx = json_object_new_double(-12.0);\n  printf(\"obj(-12.0).to_string(default format)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  obj_idx = json_object_new_double(zero_dot_zero / zero_dot_zero);\n  printf(\"obj(0.0/0.0)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  obj_idx = json_object_new_double(1.0 / zero_dot_zero);\n  printf(\"obj(1.0/0.0)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  obj_idx = json_object_new_double((-1.0) / zero_dot_zero);\n  printf(\"obj(-1.0/0.0)=%s\\n\", json_object_to_json_string(obj));\n  json_object_put(obj);\n  return 0;\n}\n\n",
            "calle": [
                "json_c_set_serialization_double_format",
                "json_object_double_to_json_string",
                "json_object_new_double",
                "json_object_put",
                "json_object_set_serializer",
                "json_object_to_json_string",
                "json_object_to_json_string_ext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj = json_object_new_double(0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "udata",
                        "type": "char []",
                        "definition": [
                            "char udata[] = \"test\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "char []",
                        "definition": [
                            "char data[] = \"%.17g\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "zero_dot_zero",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_float",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  json_object *json;\n  unsigned int json_idx = 0;\n  json_idx = json_object_new_double(1.0);\n  printf(\"json = %s\\n\", json_object_to_json_string_ext(json, 1 << 1));\n  json_object_put(json);\n  json_idx = json_object_new_double(-1.0);\n  printf(\"json = %s\\n\", json_object_to_json_string_ext(json, 1 << 1));\n  json_object_put(json);\n  json_idx = json_object_new_double(1.23);\n  printf(\"json = %s\\n\", json_object_to_json_string_ext(json, 1 << 1));\n  json_object_put(json);\n  json_idx = json_object_new_double(123456789.0);\n  printf(\"json = %s\\n\", json_object_to_json_string_ext(json, 1 << 1));\n  json_object_put(json);\n  json_idx = json_object_new_double(123456789.123);\n  printf(\"json = %s\\n\", json_object_to_json_string_ext(json, 1 << 1));\n  json_object_put(json);\n  return 0;\n}\n\n",
            "calle": [
                "json_object_new_double",
                "json_object_put",
                "json_object_to_json_string_ext",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json",
                        "type": "json_object *",
                        "definition": [
                            "json_object *json"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int json_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_int_add",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *tmp = json_object_new_int(123);\n  unsigned int tmp_idx = 0;\n  json_object_int_inc(tmp, 123);\n  assert(json_object_get_int(tmp) == 246);\n  json_object_put(tmp);\n  printf(\"INT ADD PASSED\\n\");\n  tmp_idx = json_object_new_int(INT32_MAX);\n  json_object_int_inc(tmp, 100);\n  assert(json_object_get_int(tmp) == INT32_MAX);\n  assert(json_object_get_int64(tmp) == (((int64_t) INT32_MAX) + 100L));\n  json_object_put(tmp);\n  printf(\"INT ADD OVERFLOW PASSED\\n\");\n  tmp_idx = json_object_new_int(INT32_MIN);\n  json_object_int_inc(tmp, -100);\n  assert(json_object_get_int(tmp) == INT32_MIN);\n  assert(json_object_get_int64(tmp) == (((int64_t) INT32_MIN) - 100L));\n  json_object_put(tmp);\n  printf(\"INT ADD UNDERFLOW PASSED\\n\");\n  tmp_idx = json_object_new_int64(321321321);\n  json_object_int_inc(tmp, 321321321);\n  assert(json_object_get_int(tmp) == 642642642);\n  json_object_put(tmp);\n  printf(\"INT64 ADD PASSED\\n\");\n  tmp_idx = json_object_new_int64(INT64_MAX);\n  json_object_int_inc(tmp, 100);\n  assert(json_object_get_int64(tmp) == INT64_MAX);\n  assert(json_object_get_uint64(tmp) == (((uint64_t) INT64_MAX) + 100U));\n  json_object_int_inc(tmp, -100);\n  assert(json_object_get_int64(tmp) == INT64_MAX);\n  assert(json_object_get_uint64(tmp) == ((uint64_t) INT64_MAX));\n  json_object_put(tmp);\n  printf(\"INT64 ADD OVERFLOW PASSED\\n\");\n  tmp_idx = json_object_new_int64(INT64_MIN);\n  json_object_int_inc(tmp, -100);\n  assert(json_object_get_int64(tmp) == INT64_MIN);\n  json_object_int_inc(tmp, 100);\n  assert(json_object_get_int64(tmp) != INT64_MIN);\n  json_object_put(tmp);\n  printf(\"INT64 ADD UNDERFLOW PASSED\\n\");\n  tmp_idx = json_object_new_uint64(400);\n  json_object_int_inc(tmp, -200);\n  assert(json_object_get_int64(tmp) == 200);\n  assert(json_object_get_uint64(tmp) == 200);\n  json_object_int_inc(tmp, 200);\n  assert(json_object_get_int64(tmp) == 400);\n  assert(json_object_get_uint64(tmp) == 400);\n  json_object_put(tmp);\n  printf(\"UINT64 ADD PASSED\\n\");\n  tmp_idx = json_object_new_uint64(UINT64_MAX - 50);\n  json_object_int_inc(tmp, 100);\n  assert(json_object_get_int64(tmp) == INT64_MAX);\n  assert(json_object_get_uint64(tmp) == UINT64_MAX);\n  json_object_put(tmp);\n  printf(\"UINT64 ADD OVERFLOW PASSED\\n\");\n  tmp_idx = json_object_new_uint64(100);\n  json_object_int_inc(tmp, -200);\n  assert(json_object_get_int64(tmp) == (-100));\n  assert(json_object_get_uint64(tmp) == 0);\n  json_object_put(tmp);\n  printf(\"UINT64 ADD UNDERFLOW PASSED\\n\");\n  printf(\"PASSED\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_int",
                "json_object_get_int64",
                "json_object_get_uint64",
                "json_object_int_inc",
                "json_object_new_int",
                "json_object_new_int64",
                "json_object_new_uint64",
                "json_object_put",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "json_object *",
                        "definition": [
                            "json_object *tmp = json_object_new_int(123)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_int_get",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  {\n    struct json_object *jtmp = json_object_new_int(5);\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 5);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int(5);\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 5);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int(5);\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 5);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int(0);\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int(0);\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int(0);\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0\");\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0\");\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0\");\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"00000\");\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"00000\");\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"00000\");\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 0);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"000004568789\");\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 4568789);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"000004568789\");\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 4568789);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"000004568789\");\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 4568789);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0xFF\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == 0) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0xFF\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == 0) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"0xFF\");\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == 0) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\");\n    errno = 0;\n    assert(json_object_get_int(jtmp) == 333);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\");\n    errno = 0;\n    assert(json_object_get_int64(jtmp) == 333);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\");\n    errno = 0;\n    assert(json_object_get_uint64(jtmp) == 333);\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\");\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"B0\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"B0\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"B0\");\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  printf(\"BASE CHECK PASSED\\n\");\n  {\n    struct json_object *jtmp = json_object_new_int64(INT32_MAX);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int64(INT32_MIN);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int64(INT64_MAX);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int64(INT64_MIN);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"2147483647\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"-2147483648\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"9223372036854775807\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"-9223372036854775808\");\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(INFINITY);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(-INFINITY);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(NAN);\n    errno = 0;\n    assert((json_object_get_int(jtmp) == INT32_MIN) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  printf(\"INT GET PASSED\\n\");\n  {\n    struct json_object *jtmp = json_object_new_int64(INT64_MAX);\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_int64(INT64_MIN);\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MIN) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"9223372036854775807\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"-9223372036854775808\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MIN) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"9223372036854775808\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"-9223372036854775809\");\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MIN) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(INFINITY);\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(-INFINITY);\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MIN) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(NAN);\n    errno = 0;\n    assert((json_object_get_int64(jtmp) == INT64_MIN) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  printf(\"INT64 GET PASSED\\n\");\n  {\n    struct json_object *jtmp = json_object_new_uint64(UINT64_MAX);\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == UINT64_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_uint64(-1);\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == UINT64_MAX) && (errno == 0));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_string(\"18446744073709551616\");\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == UINT64_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(INFINITY);\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == UINT64_MAX) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(-INFINITY);\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == 0) && (errno == ERANGE));\n    json_object_put(jtmp);\n  }\n  ;\n  {\n    struct json_object *jtmp = json_object_new_double(NAN);\n    errno = 0;\n    assert((json_object_get_uint64(jtmp) == 0) && (errno == EINVAL));\n    json_object_put(jtmp);\n  }\n  ;\n  printf(\"UINT64 GET PASSED\\n\");\n  printf(\"PASSED\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_int",
                "json_object_get_int64",
                "json_object_get_uint64",
                "json_object_new_double",
                "json_object_new_int",
                "json_object_new_int64",
                "json_object_new_string",
                "json_object_new_uint64",
                "json_object_put",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int(0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"00000\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"00000\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"00000\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"000004568789\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"000004568789\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"000004568789\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0xFF\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0xFF\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"0xFF\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"333this_seems_a_valid_string\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"this_is_not_a_number\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"B0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"B0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"B0\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT32_MAX)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT32_MIN)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT64_MAX)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT64_MIN)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"2147483647\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"-2147483648\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"9223372036854775807\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"-9223372036854775808\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(-INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(NAN)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT64_MAX)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_int64(INT64_MIN)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"9223372036854775807\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"-9223372036854775808\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"9223372036854775808\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"-9223372036854775809\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(-INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(NAN)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_uint64(UINT64_MAX)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_uint64(-1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_string(\"18446744073709551616\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(-INFINITY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jtmp = json_object_new_double(NAN)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_locale",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  setlocale(LC_NUMERIC, \"de_DE\");\n  char buf1[10];\n  char buf2[10];\n  (void) snprintf(buf1, sizeof(buf1), \"%f\", 0.1);\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  new_obj_idx = json_tokener_parse(\"[1.2,3.4,123456.78,5.0,2.3e10]\");\n  (void) snprintf(buf2, sizeof(buf2), \"%f\", 0.1);\n  if (strcmp(buf1, buf2) != 0)\n  {\n    printf(\"ERROR: Original locale not restored \\\"%s\\\" != \\\"%s\\\"\", buf1, buf2);\n  }\n  setlocale(LC_NUMERIC, \"C\");\n  printf(\"new_obj.to_string()=[\");\n  unsigned int ii;\n  for (ii = 0; ii < json_object_array_length(new_obj); ii += 1)\n  {\n    json_object *val = json_object_array_get_idx(new_obj, ii);\n    printf(\"%s%.2lf\", (ii > 0) ? (\",\") : (\"\"), json_object_get_double(val));\n  }\n\n  printf(\"]\\n\");\n  printf(\"new_obj.to_string()=%s\\n\", json_object_to_json_string_ext(new_obj, 1 << 2));\n  json_object_put(new_obj);\n  return 0;\n}\n\n",
            "calle": [
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_get_double",
                "json_object_put",
                "json_object_to_json_string_ext",
                "json_tokener_parse",
                "mc_set_debug",
                "printf",
                "setlocale",
                "snprintf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf1",
                        "type": "char [10]",
                        "definition": [
                            "char buf1[10]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf2",
                        "type": "char [10]",
                        "definition": [
                            "char buf2[10]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "json_object *",
                        "definition": [
                            "json_object *val = json_object_array_get_idx(new_obj, ii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_null",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  const char *input = \" \\0 \";\n  const char *expected = \"\\\" \\\\u0000 \\\"\";\n  struct json_object *string = json_object_new_string_len(input, 3);\n  const char *json = json_object_to_json_string(string);\n  int strings_match = !strcmp(expected, json);\n  int retval = 0;\n  if (strings_match)\n  {\n    printf(\"JSON write result is correct: %s\\n\", json);\n    puts(\"PASS\");\n  }\n  else\n  {\n    puts(\"JSON write result doesn't match expected string\");\n    printf(\"expected string: \");\n    puts(expected);\n    printf(\"parsed string:   \");\n    puts(json);\n    puts(\"FAIL\");\n    retval = 1;\n  }\n  json_object_put(string);\n  struct json_object *parsed_str = json_tokener_parse(expected);\n  if (parsed_str)\n  {\n    int parsed_len = json_object_get_string_len(parsed_str);\n    const char *parsed_cstr = json_object_get_string(parsed_str);\n    int ii;\n    printf(\"Re-parsed object string len=%d, chars=[\", parsed_len);\n    for (ii = 0; ii < parsed_len; ii += 1)\n    {\n      printf(\"%s%d\", (ii) ? (\", \") : (\"\"), (int) parsed_cstr[ii]);\n    }\n\n    puts(\"]\");\n    json_object_put(parsed_str);\n  }\n  else\n  {\n    puts(\"ERROR: failed to parse\");\n  }\n  return retval;\n}\n\n",
            "calle": [
                "json_object_get_string",
                "json_object_get_string_len",
                "json_object_new_string_len",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_parse",
                "printf",
                "puts",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const char *",
                        "definition": [
                            "const char *input = \" \\0 \""
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "const char *",
                        "definition": [
                            "const char *expected = \"\\\" \\\\u0000 \\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *string = json_object_new_string_len(input, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json",
                        "type": "const char *",
                        "definition": [
                            "const char *json = json_object_to_json_string(string)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strings_match",
                        "type": "int",
                        "definition": [
                            "int strings_match = !strcmp(expected, json)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *parsed_str = json_tokener_parse(expected)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parsed_len",
                        "type": "int",
                        "definition": [
                            "int parsed_len = json_object_get_string_len(parsed_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parsed_cstr",
                        "type": "const char *",
                        "definition": [
                            "const char *parsed_cstr = json_object_get_string(parsed_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_basic_parse",
            "header": "static void test_basic_parse(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_basic_parse(void)\n{\n  single_basic_parse(\"\\\"\\003\\\"\", 0);\n  single_basic_parse(\"/* hello */\\\"foo\\\"\", 0);\n  single_basic_parse(\"// hello\\n\\\"foo\\\"\", 0);\n  single_basic_parse(\"\\\"foo\\\"blue\", 0);\n  single_basic_parse(\"\\'foo\\'\", 0);\n  single_basic_parse(\"\\\"\\\\u0041\\\\u0042\\\\u0043\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\u4e16\\\\u754c\\\\u00df\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\u4E16\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\u4e1\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\u4e1@\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\ud840\\\\u4e16\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\ud840\\\"\", 0);\n  single_basic_parse(\"\\\"\\\\udd27\\\"\", 0);\n  single_basic_parse(\"[9,'\\\\uDAD\", 0);\n  single_basic_parse(\"null\", 0);\n  single_basic_parse(\"NaN\", 0);\n  single_basic_parse(\"-NaN\", 0);\n  single_basic_parse(\"Inf\", 0);\n  single_basic_parse(\"inf\", 0);\n  single_basic_parse(\"Infinity\", 0);\n  single_basic_parse(\"infinity\", 0);\n  single_basic_parse(\"-Infinity\", 0);\n  single_basic_parse(\"-infinity\", 0);\n  single_basic_parse(\"{ \\\"min\\\": Infinity, \\\"max\\\": -Infinity}\", 0);\n  single_basic_parse(\"Infinity!\", 0);\n  single_basic_parse(\"Infinitynull\", 0);\n  single_basic_parse(\"InfinityXXXX\", 0);\n  single_basic_parse(\"-Infinitynull\", 0);\n  single_basic_parse(\"-InfinityXXXX\", 0);\n  single_basic_parse(\"Infinoodle\", 0);\n  single_basic_parse(\"InfinAAA\", 0);\n  single_basic_parse(\"-Infinoodle\", 0);\n  single_basic_parse(\"-InfinAAA\", 0);\n  single_basic_parse(\"True\", 0);\n  single_basic_parse(\"False\", 0);\n  single_basic_parse(\"tRue\", 0);\n  single_basic_parse(\"fAlse\", 0);\n  single_basic_parse(\"nAn\", 0);\n  single_basic_parse(\"iNfinity\", 0);\n  single_basic_parse(\"12\", 0);\n  single_basic_parse(\"12.3\", 0);\n  single_basic_parse(\"12.3.4\", 0);\n  single_basic_parse(\"2015-01-15\", 0);\n  single_basic_parse(\"12.3xxx\", 0);\n  single_basic_parse(\"12.3{\\\"a\\\":123}\", 0);\n  single_basic_parse(\"12.3\\n\", 0);\n  single_basic_parse(\"12.3 \", 0);\n  single_basic_parse(\"{\\\"FoO\\\"  :   -12.3E512}\", 0);\n  single_basic_parse(\"{\\\"FoO\\\"  :   -12.3e512}\", 0);\n  single_basic_parse(\"{\\\"FoO\\\"  :   -12.3E51.2}\", 0);\n  single_basic_parse(\"{\\\"FoO\\\"  :   -12.3E512E12}\", 0);\n  single_basic_parse(\"[\\\"\\\\n\\\"]\", 0);\n  single_basic_parse(\"[\\\"\\\\nabc\\\\n\\\"]\", 0);\n  single_basic_parse(\"[null]\", 0);\n  single_basic_parse(\"[]\", 0);\n  single_basic_parse(\"[false]\", 0);\n  single_basic_parse(\"[\\\"abc\\\",null,\\\"def\\\",12]\", 0);\n  single_basic_parse(\"{}\", 0);\n  single_basic_parse(\"{ \\\"foo\\\": \\\"bar\\\" }\", 0);\n  single_basic_parse(\"{ \\'foo\\': \\'bar\\' }\", 0);\n  single_basic_parse(\"{ \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": null, \\\"bool0\\\": true }\", 0);\n  single_basic_parse(\"{ \\\"foo\\\": [null, \\\"foo\\\"] }\", 0);\n  single_basic_parse(\"{ \\\"abc\\\": 12, \\\"foo\\\": \\\"bar\\\", \\\"bool0\\\": false, \\\"bool1\\\": true, \\\"arr\\\": [ 1, 2, 3, null, 5 ] }\", 0);\n  single_basic_parse(\"{ \\\"abc\\\": \\\"blue\\nred\\\\ngreen\\\" }\", 0);\n  single_basic_parse(\"null\", 1);\n  single_basic_parse(\"false\", 1);\n  single_basic_parse(\"[0e]\", 1);\n  single_basic_parse(\"[0e+]\", 1);\n  single_basic_parse(\"[0e+-1]\", 1);\n  single_basic_parse(\"\\\"hello world!\\\"\", 1);\n  single_basic_parse(\"[9223372036854775806]\", 1);\n  single_basic_parse(\"[9223372036854775807]\", 1);\n  single_basic_parse(\"[9223372036854775808]\", 1);\n  single_basic_parse(\"[-9223372036854775807]\", 1);\n  single_basic_parse(\"[-9223372036854775808]\", 1);\n  single_basic_parse(\"[-9223372036854775809]\", 1);\n  single_basic_parse(\"[18446744073709551614]\", 1);\n  single_basic_parse(\"[18446744073709551615]\", 1);\n  single_basic_parse(\"[18446744073709551616]\", 1);\n}\n\n",
            "calle": [
                "single_basic_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_utf8_parse",
            "header": "static void test_utf8_parse(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_utf8_parse(void)\n{\n  const char *utf8_bom = \"\\xEF\\xBB\\xBF\";\n  const char *utf8_bom_and_chars = \"\\xEF\\xBB\\xBF{}\";\n  single_basic_parse(utf8_bom, 0);\n  single_basic_parse(utf8_bom_and_chars, 0);\n}\n\n",
            "calle": [
                "single_basic_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_bom",
                        "type": "const char *",
                        "definition": [
                            "const char *utf8_bom = \"\\xEF\\xBB\\xBF\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "utf8_bom_and_chars",
                        "type": "const char *",
                        "definition": [
                            "const char *utf8_bom_and_chars = \"\\xEF\\xBB\\xBF{}\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_verbose_parse",
            "header": "static void test_verbose_parse(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_verbose_parse(void)\n{\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  enum json_tokener_error error = json_tokener_success;\n  new_obj_idx = json_tokener_parse_verbose(\"{ foo }\", &error);\n  assert(error == json_tokener_error_parse_object_key_name);\n  assert((&new_obj[new_obj_idx]) == 0);\n  new_obj_idx = json_tokener_parse(\"{ foo }\");\n  assert((&new_obj[new_obj_idx]) == 0);\n  new_obj_idx = json_tokener_parse(\"foo\");\n  assert((&new_obj[new_obj_idx]) == 0);\n  new_obj_idx = json_tokener_parse_verbose(\"foo\", &error);\n  assert((&new_obj[new_obj_idx]) == 0);\n  assert(error == json_tokener_error_parse_boolean);\n  puts(\"json_tokener_parse_verbose() OK\");\n}\n\n",
            "calle": [
                "assert",
                "json_tokener_parse",
                "json_tokener_parse_verbose",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error error = json_tokener_success"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_incremental_parse",
            "header": "static void test_incremental_parse(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_incremental_parse(void)\n{\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  enum json_tokener_error jerr;\n  struct json_tokener *tok;\n  unsigned int tok_idx = 0;\n  const char *string_to_parse;\n  unsigned int string_to_parse_idx = 0;\n  int ii;\n  int num_ok;\n  int num_error;\n  num_ok = 0;\n  num_error = 0;\n  printf(\"Starting incremental tests.\\n\");\n  printf(\"Note: quotes and backslashes seen in the output here are literal values passed\\n\");\n  printf(\"     to the parse functions.  e.g. this is 4 characters: \\\"\\\\f\\\"\\n\");\n  string_to_parse_idx = \"{ \\\"foo\";\n  printf(\"json_tokener_parse(%s) ... \", string_to_parse);\n  new_obj_idx = json_tokener_parse(string_to_parse);\n  if ((&new_obj[new_obj_idx]) == 0)\n  {\n    printf(\"%s\", \"got error as expected\\n\");\n  }\n  tok_idx = json_tokener_new();\n  for (ii = 0; incremental_steps[ii].string_to_parse != 0; ii += 1)\n  {\n    helper_test_incremental_parse_1(&new_obj_idx, &jerr, &num_ok, &num_error, new_obj, tok, ii);\n  }\n\n  json_tokener_free(tok);\n  printf(\"End Incremental Tests OK=%d ERROR=%d\\n\", num_ok, num_error);\n}\n\n",
            "calle": [
                "helper_test_incremental_parse_1",
                "json_tokener_free",
                "json_tokener_new",
                "json_tokener_parse",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "string_to_parse",
                        "type": "const char *",
                        "definition": [
                            "const char *string_to_parse"
                        ]
                    },
                    {
                        "path": null,
                        "name": "string_to_parse_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int string_to_parse_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_ok",
                        "type": "int",
                        "definition": [
                            "int num_ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_error",
                        "type": "int",
                        "definition": [
                            "int num_error"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incremental_steps",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_parse",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  static const char separator[] = \"==================================\";\n  test_basic_parse();\n  puts(separator);\n  test_utf8_parse();\n  puts(separator);\n  test_verbose_parse();\n  puts(separator);\n  test_incremental_parse();\n  puts(separator);\n  return 0;\n}\n\n",
            "calle": [
                "mc_set_debug",
                "puts",
                "test_basic_parse",
                "test_incremental_parse",
                "test_utf8_parse",
                "test_verbose_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "separator",
                        "type": "const char []",
                        "definition": [
                            "static const char separator[] = \"==================================\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "do_clear_serializer",
            "header": "static void do_clear_serializer(json_object *jso)",
            "params": [
                "json_object *jso"
            ],
            "definition": "static void do_clear_serializer(json_object *jso)\n{\n  json_c_visit(jso, 0, clear_serializer, 0);\n}\n\n",
            "calle": [
                "clear_serializer",
                "json_c_visit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_serializer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "single_incremental_parse",
            "header": "",
            "params": [
                "const char *test_string",
                "int clear_serializer"
            ],
            "definition": "static void single_incremental_parse(const char *test_string, int clear_serializer)\n{\n  size_t ii;\n  int chunksize = atoi(getenv(\"TEST_PARSE_CHUNKSIZE\"));\n  struct json_tokener *tok;\n  unsigned int tok_idx = 0;\n  enum json_tokener_error jerr;\n  json_object *all_at_once_obj;\n  unsigned int all_at_once_obj_idx = 0;\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  const char *all_at_once_str;\n  unsigned int all_at_once_str_idx = 0;\n  const char *new_str;\n  unsigned int new_str_idx = 0;\n  new_obj_idx = 0;\n  assert(chunksize > 0);\n  all_at_once_obj_idx = json_tokener_parse(test_string);\n  if (clear_serializer)\n  {\n    do_clear_serializer(all_at_once_obj);\n  }\n  all_at_once_str_idx = json_object_to_json_string(all_at_once_obj);\n  tok_idx = json_tokener_new();\n  size_t test_string_len = strlen(test_string) + 1;\n  for (ii = 0; ii < test_string_len; ii += chunksize)\n  {\n    helper_single_incremental_parse_1(&jerr, &new_obj_idx, test_string, ii, chunksize, tok, new_obj, test_string_len);\n  }\n\n  if (clear_serializer && (&new_obj[new_obj_idx]))\n  {\n    do_clear_serializer(new_obj);\n  }\n  new_str_idx = json_object_to_json_string(new_obj);\n  if (strcmp(all_at_once_str, new_str) != 0)\n  {\n    printf(\"ERROR: failed to parse (%s) in %d byte chunks: %s != %s\\n\", test_string, chunksize, all_at_once_str, new_str);\n  }\n  json_tokener_free(tok);\n  if (all_at_once_obj)\n  {\n    json_object_put(all_at_once_obj);\n  }\n  if (new_obj)\n  {\n    json_object_put(new_obj);\n  }\n}\n\n",
            "calle": [
                "assert",
                "atoi",
                "clear_serializer",
                "do_clear_serializer",
                "getenv",
                "helper_single_incremental_parse_1",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_free",
                "json_tokener_new",
                "json_tokener_parse",
                "printf",
                "strcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_string",
                        "type": "const char *",
                        "definition": [
                            "const char *test_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_serializer",
                        "type": "int",
                        "definition": [
                            "int clear_serializer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunksize",
                        "type": "int",
                        "definition": [
                            "int chunksize = atoi(getenv(\"TEST_PARSE_CHUNKSIZE\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener *",
                        "definition": [
                            "struct json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_at_once_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *all_at_once_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_at_once_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int all_at_once_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_at_once_str",
                        "type": "const char *",
                        "definition": [
                            "const char *all_at_once_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_at_once_str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int all_at_once_str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_str",
                        "type": "const char *",
                        "definition": [
                            "const char *new_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t test_string_len = strlen(test_string) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_serializer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "single_basic_parse",
            "header": "",
            "params": [
                "const char *test_string",
                "int clear_serializer"
            ],
            "definition": "static void single_basic_parse(const char *test_string, int clear_serializer)\n{\n  json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  new_obj_idx = json_tokener_parse(test_string);\n  if (clear_serializer)\n  {\n    do_clear_serializer(new_obj);\n  }\n  printf(\"new_obj.to_string(%s)=%s\\n\", test_string, json_object_to_json_string(new_obj));\n  json_object_put(new_obj);\n  if (getenv(\"TEST_PARSE_CHUNKSIZE\") != 0)\n  {\n    single_incremental_parse(test_string, clear_serializer);\n  }\n}\n\n",
            "calle": [
                "clear_serializer",
                "do_clear_serializer",
                "getenv",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_parse",
                "printf",
                "single_incremental_parse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_string",
                        "type": "const char *",
                        "definition": [
                            "const char *test_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_serializer",
                        "type": "int",
                        "definition": [
                            "int clear_serializer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_serializer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "clear_serializer",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int clear_serializer(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  if (jso)\n  {\n    json_object_set_serializer(jso, 0, 0, 0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "json_object_set_serializer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_single_incremental_parse_1",
            "header": "",
            "params": [
                "enum json_tokener_error * const jerr_ref",
                "unsigned int * const new_obj_idx_ref",
                "const char * const test_string",
                "size_t ii",
                "int chunksize",
                "struct json_tokener * const tok",
                "json_object * const new_obj",
                "size_t test_string_len"
            ],
            "definition": "void helper_single_incremental_parse_1(enum json_tokener_error * const jerr_ref, unsigned int * const new_obj_idx_ref, const char * const test_string, size_t ii, int chunksize, struct json_tokener * const tok, json_object * const new_obj, size_t test_string_len)\n{\n  enum json_tokener_error jerr = *jerr_ref;\n  unsigned int new_obj_idx = *new_obj_idx_ref;\n  int len_to_parse = chunksize;\n  if ((ii + chunksize) > test_string_len)\n  {\n    len_to_parse = test_string_len - ii;\n  }\n  if (getenv(\"TEST_PARSE_DEBUG\") != 0)\n  {\n    printf(\" chunk: %.*s\\n\", len_to_parse, &test_string[ii]);\n  }\n  new_obj_idx = json_tokener_parse_ex(tok, &test_string[ii], len_to_parse);\n  jerr = json_tokener_get_error(tok);\n  if ((jerr != json_tokener_continue) || (&new_obj[new_obj_idx]))\n  {\n    break;\n  }\n  *jerr_ref = jerr;\n  *new_obj_idx_ref = new_obj_idx;\n}\n\n",
            "calle": [
                "getenv",
                "json_tokener_get_error",
                "json_tokener_parse_ex",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jerr_ref",
                        "type": "enum json_tokener_error * const",
                        "definition": [
                            "enum json_tokener_error * const jerr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const new_obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_string",
                        "type": "const char * const",
                        "definition": [
                            "const char * const test_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunksize",
                        "type": "int",
                        "definition": [
                            "int chunksize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_string_len",
                        "type": "size_t",
                        "definition": [
                            "size_t test_string_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr = *jerr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = *new_obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_to_parse",
                        "type": "int",
                        "definition": [
                            "int len_to_parse = chunksize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_incremental_parse_1",
            "header": "",
            "params": [
                "unsigned int * const new_obj_idx_ref",
                "enum json_tokener_error * const jerr_ref",
                "int * const num_ok_ref",
                "int * const num_error_ref",
                "json_object * const new_obj",
                "struct json_tokener * const tok",
                "int ii"
            ],
            "definition": "void helper_test_incremental_parse_1(unsigned int * const new_obj_idx_ref, enum json_tokener_error * const jerr_ref, int * const num_ok_ref, int * const num_error_ref, json_object * const new_obj, struct json_tokener * const tok, int ii)\n{\n  unsigned int new_obj_idx = *new_obj_idx_ref;\n  enum json_tokener_error jerr = *jerr_ref;\n  int num_ok = *num_ok_ref;\n  int num_error = *num_error_ref;\n  int this_step_ok = 0;\n  struct incremental_step *step = &incremental_steps[ii];\n  int length = step->length;\n  size_t expected_char_offset;\n  json_tokener_set_flags(tok, step->tok_flags);\n  if (length == (-1))\n  {\n    length = (int) strlen(step->string_to_parse);\n  }\n  if (step->char_offset == (-1))\n  {\n    expected_char_offset = length;\n  }\n  else\n    expected_char_offset = step->char_offset;\n  printf(\"json_tokener_parse_ex(tok, %-12s, %3d) ... \", step->string_to_parse, length);\n  new_obj_idx = json_tokener_parse_ex(tok, step->string_to_parse, length);\n  jerr = json_tokener_get_error(tok);\n  if (step->expected_error != json_tokener_success)\n  {\n    helper_helper_test_incremental_parse_1_1(&this_step_ok, new_obj, tok, new_obj_idx, jerr, step, expected_char_offset);\n  }\n  else\n  {\n    if (((&new_obj[new_obj_idx]) == 0) && (!((step->length >= 4) && (strncmp(step->string_to_parse, \"null\", 4) == 0))))\n    {\n      printf(\"ERROR: expected valid object, instead: %s\\n\", json_tokener_error_desc(jerr));\n    }\n    else\n      if (json_tokener_get_parse_end(tok) != expected_char_offset)\n    {\n      printf(\"ERROR: wrong char_offset %zu != expected %zu\\n\", json_tokener_get_parse_end(tok), expected_char_offset);\n    }\n    else\n    {\n      printf(\"OK: got object of type [%s]: %s\\n\", json_type_to_name(json_object_get_type(new_obj)), json_object_to_json_string(new_obj));\n      this_step_ok = 1;\n    }\n  }\n  if (new_obj)\n  {\n    json_object_put(new_obj);\n  }\n  if (step->reset_tokener & 1)\n  {\n    json_tokener_reset(tok);\n  }\n  if (this_step_ok)\n  {\n    num_ok += 1;\n  }\n  else\n    num_error++;\n  num_error += 1;\n  *new_obj_idx_ref = new_obj_idx;\n  *jerr_ref = jerr;\n  *num_ok_ref = num_ok;\n  *num_error_ref = num_error;\n}\n\n",
            "calle": [
                "helper_helper_test_incremental_parse_1_1",
                "json_object_get_type",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_error_desc",
                "json_tokener_get_error",
                "json_tokener_get_parse_end",
                "json_tokener_parse_ex",
                "json_tokener_reset",
                "json_tokener_set_flags",
                "json_type_to_name",
                "printf",
                "strlen",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "new_obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const new_obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr_ref",
                        "type": "enum json_tokener_error * const",
                        "definition": [
                            "enum json_tokener_error * const jerr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_error_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_error_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = *new_obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr = *jerr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_ok",
                        "type": "int",
                        "definition": [
                            "int num_ok = *num_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_error",
                        "type": "int",
                        "definition": [
                            "int num_error = *num_error_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_step_ok",
                        "type": "int",
                        "definition": [
                            "int this_step_ok = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct incremental_step",
                        "type": "struct incremental_step *",
                        "definition": [
                            "struct incremental_step *step = &incremental_steps[ii]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length = step->length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_char_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_char_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incremental_steps",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_test_incremental_parse_1_1",
            "header": "",
            "params": [
                "int * const this_step_ok_ref",
                "json_object * const new_obj",
                "struct json_tokener * const tok",
                "unsigned int new_obj_idx",
                "enum json_tokener_error jerr",
                "struct incremental_step * const step",
                "size_t expected_char_offset"
            ],
            "definition": "void helper_helper_test_incremental_parse_1_1(int * const this_step_ok_ref, json_object * const new_obj, struct json_tokener * const tok, unsigned int new_obj_idx, enum json_tokener_error jerr, struct incremental_step * const step, size_t expected_char_offset)\n{\n  int this_step_ok = *this_step_ok_ref;\n  if ((&new_obj[new_obj_idx]) != 0)\n  {\n    printf(\"ERROR: invalid object returned: %s\\n\", json_object_to_json_string(new_obj));\n  }\n  else\n    if (jerr != step->expected_error)\n  {\n    printf(\"ERROR: got wrong error: %s\\n\", json_tokener_error_desc(jerr));\n  }\n  else\n    if (json_tokener_get_parse_end(tok) != expected_char_offset)\n  {\n    printf(\"ERROR: wrong char_offset %zu != expected %zu\\n\", json_tokener_get_parse_end(tok), expected_char_offset);\n  }\n  else\n  {\n    printf(\"OK: got correct error: %s\\n\", json_tokener_error_desc(jerr));\n    this_step_ok = 1;\n  }\n  *this_step_ok_ref = this_step_ok;\n}\n\n",
            "calle": [
                "json_object_to_json_string",
                "json_tokener_error_desc",
                "json_tokener_get_parse_end",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "this_step_ok_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const this_step_ok_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj",
                        "type": "json_object * const",
                        "definition": [
                            "json_object * const new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_tokener",
                        "type": "struct json_tokener * const",
                        "definition": [
                            "struct json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct incremental_step",
                        "type": "struct incremental_step * const",
                        "definition": [
                            "struct incremental_step * const step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_char_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_char_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_step_ok",
                        "type": "int",
                        "definition": [
                            "int this_step_ok = *this_step_ok_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "checkit",
            "header": "",
            "params": [
                "const char *buf"
            ],
            "definition": "void checkit(const char *buf)\n{\n  int64_t cint64 = -666;\n  int retval = json_parse_int64(buf, &cint64);\n  printf(\"buf=%s parseit=%d, value=%d \\n\", buf, retval, cint64);\n}\n\n",
            "calle": [
                "json_parse_int64",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cint64",
                        "type": "int64_t",
                        "definition": [
                            "int64_t cint64 = -666"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = json_parse_int64(buf, &cint64)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "checkit_uint",
            "header": "",
            "params": [
                "const char *buf"
            ],
            "definition": "void checkit_uint(const char *buf)\n{\n  uint64_t cuint64 = 666;\n  int retval = json_parse_uint64(buf, &cuint64);\n  printf(\"buf=%s parseit=%d, value=%u \\n\", buf, retval, cuint64);\n}\n\n",
            "calle": [
                "json_parse_uint64",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cuint64",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t cuint64 = 666"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = json_parse_uint64(buf, &cuint64)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_parse_int64",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  char buf[100];\n  printf(\"==========json_parse_int64() test===========\\n\");\n  checkit(\"x\");\n  checkit(\"0\");\n  checkit(\"-0\");\n  checkit(\"00000000\");\n  checkit(\"-00000000\");\n  checkit(\"1\");\n  strcpy(buf, \"2147483647\");\n  checkit(buf);\n  strcpy(buf, \"-1\");\n  checkit(buf);\n  strcpy(buf, \"   -1\");\n  checkit(buf);\n  strcpy(buf, \"00001234\");\n  checkit(buf);\n  strcpy(buf, \"0001234x\");\n  checkit(buf);\n  strcpy(buf, \"-00001234\");\n  checkit(buf);\n  strcpy(buf, \"-00001234x\");\n  checkit(buf);\n  strcpy(buf, \"4294967295\");\n  checkit(buf);\n  strcpy(buf, \"4294967296\");\n  checkit(buf);\n  strcpy(buf, \"21474836470\");\n  checkit(buf);\n  strcpy(buf, \"31474836470\");\n  checkit(buf);\n  strcpy(buf, \"-2147483647\");\n  checkit(buf);\n  strcpy(buf, \"-2147483648\");\n  checkit(buf);\n  strcpy(buf, \"-2147483649\");\n  checkit(buf);\n  strcpy(buf, \"-21474836480\");\n  checkit(buf);\n  strcpy(buf, \"9223372036854775806\");\n  checkit(buf);\n  strcpy(buf, \"9223372036854775807\");\n  checkit(buf);\n  strcpy(buf, \"9223372036854775808\");\n  checkit(buf);\n  strcpy(buf, \"-9223372036854775808\");\n  checkit(buf);\n  strcpy(buf, \"-9223372036854775809\");\n  checkit(buf);\n  strcpy(buf, \"18446744073709551614\");\n  checkit(buf);\n  strcpy(buf, \"18446744073709551615\");\n  checkit(buf);\n  strcpy(buf, \"18446744073709551616\");\n  checkit(buf);\n  strcpy(buf, \"-18446744073709551616\");\n  checkit(buf);\n  strcpy(buf, \"123\");\n  checkit(buf);\n  printf(\"\\n==========json_parse_uint64() test===========\\n\");\n  checkit_uint(\"x\");\n  checkit_uint(\"0\");\n  checkit_uint(\"-0\");\n  checkit_uint(\"00000000\");\n  checkit_uint(\"-00000000\");\n  checkit_uint(\"1\");\n  strcpy(buf, \"2147483647\");\n  checkit_uint(buf);\n  strcpy(buf, \"-1\");\n  checkit_uint(buf);\n  strcpy(buf, \"-9223372036854775808\");\n  checkit_uint(buf);\n  strcpy(buf, \"   1\");\n  checkit_uint(buf);\n  strcpy(buf, \"00001234\");\n  checkit_uint(buf);\n  strcpy(buf, \"0001234x\");\n  checkit_uint(buf);\n  strcpy(buf, \"4294967295\");\n  checkit_uint(buf);\n  strcpy(buf, \"4294967296\");\n  checkit_uint(buf);\n  strcpy(buf, \"21474836470\");\n  checkit_uint(buf);\n  strcpy(buf, \"31474836470\");\n  checkit_uint(buf);\n  strcpy(buf, \"9223372036854775806\");\n  checkit_uint(buf);\n  strcpy(buf, \"9223372036854775807\");\n  checkit_uint(buf);\n  strcpy(buf, \"9223372036854775808\");\n  checkit_uint(buf);\n  strcpy(buf, \"18446744073709551614\");\n  checkit_uint(buf);\n  strcpy(buf, \"18446744073709551615\");\n  checkit_uint(buf);\n  strcpy(buf, \"18446744073709551616\");\n  checkit_uint(buf);\n  strcpy(buf, \"123\");\n  checkit_uint(buf);\n  return 0;\n}\n\n",
            "calle": [
                "checkit",
                "checkit_uint",
                "printf",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [100]",
                        "definition": [
                            "char buf[100]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_basic_printbuf_memset",
            "header": "static void test_basic_printbuf_memset(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_basic_printbuf_memset(void)\n{\n  struct printbuf *pb;\n  unsigned int pb_idx = 0;\n  printf(\"%s: starting test\\n\", __FUNCTION__);\n  pb_idx = printbuf_new();\n  sprintbuf(pb, \"blue:%d\", 1);\n  printbuf_memset(pb, -1, 'x', 52);\n  printf(\"Buffer contents:%.*s\\n\", pb->bpos, pb->buf);\n  printbuf_free(pb);\n  printf(\"%s: end test\\n\", __FUNCTION__);\n}\n\n",
            "calle": [
                "printbuf_free",
                "printbuf_memset",
                "printbuf_new",
                "printf",
                "sprintbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pb_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_printbuf_memset_length",
            "header": "static void test_printbuf_memset_length(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_printbuf_memset_length(void)\n{\n  struct printbuf *pb;\n  unsigned int pb_idx = 0;\n  printf(\"%s: starting test\\n\", __FUNCTION__);\n  pb_idx = printbuf_new();\n  printbuf_memset(pb, -1, ' ', 0);\n  printbuf_memset(pb, -1, ' ', 0);\n  printbuf_memset(pb, -1, ' ', 0);\n  printbuf_memset(pb, -1, ' ', 0);\n  printbuf_memset(pb, -1, ' ', 0);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_memset(pb, -1, ' ', 2);\n  printbuf_memset(pb, -1, ' ', 4);\n  printbuf_memset(pb, -1, ' ', 6);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_memset(pb, -1, ' ', 6);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_memset(pb, -1, ' ', 8);\n  printbuf_memset(pb, -1, ' ', 10);\n  printbuf_memset(pb, -1, ' ', 10);\n  printbuf_memset(pb, -1, ' ', 10);\n  printbuf_memset(pb, -1, ' ', 20);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_memset(pb, 0, 'x', 30);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_memset(pb, 0, 'x', pb->bpos + 1);\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  printbuf_free(pb);\n  printf(\"%s: end test\\n\", __FUNCTION__);\n}\n\n",
            "calle": [
                "printbuf_free",
                "printbuf_memset",
                "printbuf_new",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pb_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_printbuf_memappend",
            "header": "static void test_printbuf_memappend(int *before_resize)",
            "params": [
                "int *before_resize"
            ],
            "definition": "static void test_printbuf_memappend(int *before_resize)\n{\n  struct printbuf *pb;\n  unsigned int pb_idx = 0;\n  int initial_size;\n  printf(\"%s: starting test\\n\", __FUNCTION__);\n  pb_idx = printbuf_new();\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  initial_size = pb->size;\n  while (pb->size == initial_size)\n  {\n    helper_test_printbuf_memappend_1(pb);\n  }\n\n  *before_resize = pb->bpos - 1;\n  printf(\"Appended %d bytes for resize: [%s]\\n\", (*before_resize) + 1, pb->buf);\n  printbuf_reset(pb);\n  do\n  {\n    if ((pb->size - pb->bpos) > 3)\n    {\n      memcpy(pb->buf + pb->bpos, \"bluexyz123\", 3);\n      pb->bpos += 3;\n      pb->buf[pb->bpos] = '\\0';\n    }\n    else\n    {\n      printbuf_memappend(pb, \"bluexyz123\", 3);\n    }\n  }\n  while (0);\n  printf(\"Partial append: %d, [%s]\\n\", pb->bpos, pb->buf);\n  char with_nulls[] = {'a', 'b', '\\0', 'c'};\n  printbuf_reset(pb);\n  do\n  {\n    if ((pb->size - pb->bpos) > ((int) (sizeof(with_nulls))))\n    {\n      memcpy(pb->buf + pb->bpos, with_nulls, (int) (sizeof(with_nulls)));\n      pb->bpos += (int) (sizeof(with_nulls));\n      pb->buf[pb->bpos] = '\\0';\n    }\n    else\n    {\n      printbuf_memappend(pb, with_nulls, (int) (sizeof(with_nulls)));\n    }\n  }\n  while (0);\n  printf(\"With embedded \\\\0 character: %d, [%s]\\n\", pb->bpos, pb->buf);\n  printbuf_free(pb);\n  pb_idx = printbuf_new();\n  char *data = malloc(*before_resize);\n  unsigned int data_idx = 0;\n  memset(data, 'X', *before_resize);\n  do\n  {\n    if ((pb->size - pb->bpos) > (*before_resize))\n    {\n      memcpy(pb->buf + pb->bpos, data, *before_resize);\n      pb->bpos += *before_resize;\n      pb->buf[pb->bpos] = '\\0';\n    }\n    else\n    {\n      printbuf_memappend(pb, data, *before_resize);\n    }\n  }\n  while (0);\n  printf(\"Append to just before resize: %d, [%s]\\n\", pb->bpos, pb->buf);\n  free(data);\n  printbuf_free(pb);\n  pb_idx = printbuf_new();\n  data_idx = malloc((*before_resize) + 1);\n  memset(data, 'X', (*before_resize) + 1);\n  do\n  {\n    if ((pb->size - pb->bpos) > ((*before_resize) + 1))\n    {\n      memcpy(pb->buf + pb->bpos, data, (*before_resize) + 1);\n      pb->bpos += (*before_resize) + 1;\n      pb->buf[pb->bpos] = '\\0';\n    }\n    else\n    {\n      printbuf_memappend(pb, data, (*before_resize) + 1);\n    }\n  }\n  while (0);\n  printf(\"Append to just after resize: %d, [%s]\\n\", pb->bpos, pb->buf);\n  free(data);\n  printbuf_free(pb);\n  pb_idx = printbuf_new();\n  printbuf_memappend(pb, \"XXXXXXXXXXXXXXXX\", (sizeof(\"XXXXXXXXXXXXXXXX\")) - 1);\n  printf(\"Buffer size after printbuf_strappend(): %d, [%s]\\n\", pb->bpos, pb->buf);\n  printbuf_free(pb);\n  printf(\"%s: end test\\n\", __FUNCTION__);\n}\n\n",
            "calle": [
                "free",
                "helper_test_printbuf_memappend_1",
                "malloc",
                "memcpy",
                "memset",
                "printbuf_free",
                "printbuf_memappend",
                "printbuf_new",
                "printbuf_reset",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "before_resize",
                        "type": "int *",
                        "definition": [
                            "int *before_resize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pb_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_size",
                        "type": "int",
                        "definition": [
                            "int initial_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "with_nulls",
                        "type": "char []",
                        "definition": [
                            "char with_nulls[] = {'a', 'b', '\\0', 'c'}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "char *",
                        "definition": [
                            "char *data = malloc(*before_resize)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_sprintbuf",
            "header": "static void test_sprintbuf(int before_resize)",
            "params": [
                "int before_resize"
            ],
            "definition": "static void test_sprintbuf(int before_resize)\n{\n  struct printbuf *pb;\n  unsigned int pb_idx = 0;\n  const char *max_char = \"if string is greater than stack buffer, then use dynamic string with vasprintf.  Note: some implementation of vsnprintf return -1  if output is truncated whereas some return the number of bytes that  would have been written - this code handles both cases.\";\n  printf(\"%s: starting test\\n\", __FUNCTION__);\n  pb_idx = printbuf_new();\n  printf(\"Buffer length: %d\\n\", pb->bpos);\n  char *data = malloc((before_resize + 1) + 1);\n  memset(data, 'X', (before_resize + 1) + 1);\n  data[before_resize + 1] = '\\0';\n  sprintbuf(pb, \"%s\", data);\n  free(data);\n  printf(\"sprintbuf to just after resize(%d+1): %d, [%s], strlen(buf)=%d\\n\", before_resize, pb->bpos, pb->buf, (int) strlen(pb->buf));\n  printbuf_reset(pb);\n  sprintbuf(pb, \"plain\");\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  sprintbuf(pb, \"%d\", 1);\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  sprintbuf(pb, \"%d\", 2147483647);\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  sprintbuf(pb, \"%d\", -2147483648);\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  sprintbuf(pb, \"%s\", \"%s\");\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  sprintbuf(pb, max_char);\n  printf(\"%d, [%s]\\n\", pb->bpos, pb->buf);\n  printbuf_free(pb);\n  printf(\"%s: end test\\n\", __FUNCTION__);\n}\n\n",
            "calle": [
                "free",
                "malloc",
                "memset",
                "printbuf_free",
                "printbuf_new",
                "printbuf_reset",
                "printf",
                "sprintbuf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "before_resize",
                        "type": "int",
                        "definition": [
                            "int before_resize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pb_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_char",
                        "type": "const char *",
                        "definition": [
                            "const char *max_char = \"if string is greater than stack buffer, then use dynamic string with vasprintf.  Note: some implementation of vsnprintf return -1  if output is truncated whereas some return the number of bytes that  would have been written - this code handles both cases.\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "char *",
                        "definition": [
                            "char *data = malloc((before_resize + 1) + 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_printbuf",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  int before_resize = 0;\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  test_basic_printbuf_memset();\n  printf(\"========================================\\n\");\n  test_printbuf_memset_length();\n  printf(\"========================================\\n\");\n  test_printbuf_memappend(&before_resize);\n  printf(\"========================================\\n\");\n  test_sprintbuf(before_resize);\n  printf(\"========================================\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "mc_set_debug",
                "printf",
                "test_basic_printbuf_memset",
                "test_printbuf_memappend",
                "test_printbuf_memset_length",
                "test_sprintbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "before_resize",
                        "type": "int",
                        "definition": [
                            "int before_resize = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_printbuf_memappend_1",
            "header": "",
            "params": [
                "struct printbuf * const pb"
            ],
            "definition": "void helper_test_printbuf_memappend_1(struct printbuf * const pb)\n{\n  do\n  {\n    if ((pb->size - pb->bpos) > 1)\n    {\n      memcpy(pb->buf + pb->bpos, \"x\", 1);\n      pb->bpos += 1;\n      pb->buf[pb->bpos] = '\\0';\n    }\n    else\n    {\n      printbuf_memappend(pb, \"x\", 1);\n    }\n  }\n  while (0);\n}\n\n",
            "calle": [
                "memcpy",
                "printbuf_memappend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf * const",
                        "definition": [
                            "struct printbuf * const pb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "freeit",
            "header": "",
            "params": [
                "json_object *jso",
                "void *userdata"
            ],
            "definition": "static void freeit(json_object *jso, void *userdata)\n{\n  struct myinfo *info = userdata;\n  printf(\"freeit, value=%d\\n\", info->value);\n  freeit_was_called = 1;\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "void *",
                        "definition": [
                            "void *userdata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct myinfo",
                        "type": "struct myinfo *",
                        "definition": [
                            "struct myinfo *info = userdata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeit_was_called",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "custom_serializer",
            "header": "",
            "params": [
                "struct json_object *o",
                "struct printbuf *pb",
                "int level",
                "int flags"
            ],
            "definition": "static int custom_serializer(struct json_object *o, struct printbuf *pb, int level, int flags)\n{\n  sprintbuf(pb, \"Custom Output\");\n  return 0;\n}\n\n",
            "calle": [
                "sprintbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *o"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct printbuf",
                        "type": "struct printbuf *",
                        "definition": [
                            "struct printbuf *pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_set_serializer",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *my_object;\n  unsigned int my_object_idx = 0;\n  json_object *my_sub_object;\n  unsigned int my_sub_object_idx = 0;\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  printf(\"Test setting, then resetting a custom serializer:\\n\");\n  my_object_idx = json_object_new_object();\n  json_object_object_add(my_object, \"abc\", json_object_new_int(12));\n  json_object_object_add(my_object, \"foo\", json_object_new_string(\"bar\"));\n  printf(\"my_object.to_string(standard)=%s\\n\", json_object_to_json_string(my_object));\n  struct myinfo userdata = {.value = 123};\n  json_object_set_serializer(my_object, custom_serializer, &userdata, freeit);\n  printf(\"my_object.to_string(custom serializer)=%s\\n\", json_object_to_json_string(my_object));\n  printf(\"Next line of output should be from the custom freeit function:\\n\");\n  freeit_was_called = 0;\n  json_object_set_serializer(my_object, 0, 0, 0);\n  assert(freeit_was_called);\n  printf(\"my_object.to_string(standard)=%s\\n\", json_object_to_json_string(my_object));\n  json_object_put(my_object);\n  my_object_idx = json_object_new_object();\n  printf(\"Check that the custom serializer isn't free'd until the last json_object_put:\\n\");\n  json_object_set_serializer(my_object, custom_serializer, &userdata, freeit);\n  json_object_get(my_object);\n  json_object_put(my_object);\n  printf(\"my_object.to_string(custom serializer)=%s\\n\", json_object_to_json_string(my_object));\n  printf(\"Next line of output should be from the custom freeit function:\\n\");\n  freeit_was_called = 0;\n  json_object_put(my_object);\n  assert(freeit_was_called);\n  my_object_idx = json_object_new_object();\n  my_sub_object_idx = json_object_new_double(1.0);\n  json_object_object_add(my_object, \"double\", my_sub_object);\n  printf(\"Check that the custom serializer does not include nul byte:\\n\");\n  json_object_set_serializer(my_sub_object, json_object_double_to_json_string, (void *) ((uintptr_t) ((const void *) \"%125.0f\")), 0);\n  printf(\"my_object.to_string(custom serializer)=%s\\n\", json_object_to_json_string_ext(my_object, 1 << 2));\n  json_object_put(my_object);\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "custom_serializer",
                "freeit",
                "json_object_double_to_json_string",
                "json_object_get",
                "json_object_new_double",
                "json_object_new_int",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_object_add",
                "json_object_put",
                "json_object_set_serializer",
                "json_object_to_json_string",
                "json_object_to_json_string_ext",
                "mc_set_debug",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_object",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_object"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_object_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_object_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_sub_object",
                        "type": "json_object *",
                        "definition": [
                            "json_object *my_sub_object"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_sub_object_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int my_sub_object_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userdata",
                        "type": "struct myinfo",
                        "definition": [
                            "struct myinfo userdata = {.value = 123}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freeit_was_called",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_set_value",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  json_object *tmp = json_object_new_int(123);\n  unsigned int tmp_idx = 0;\n  assert(json_object_get_int(tmp) == 123);\n  json_object_set_int(tmp, 321);\n  assert(json_object_get_int(tmp) == 321);\n  printf(\"INT PASSED\\n\");\n  json_object_set_int64(tmp, (int64_t) 321321321);\n  assert(json_object_get_int64(tmp) == 321321321);\n  json_object_put(tmp);\n  printf(\"INT64 PASSED\\n\");\n  tmp_idx = json_object_new_uint64(123);\n  assert(json_object_get_boolean(tmp) == 1);\n  assert(json_object_get_int(tmp) == 123);\n  assert(json_object_get_int64(tmp) == 123);\n  assert(json_object_get_uint64(tmp) == 123);\n  assert(json_object_get_double(tmp) == 123.000000);\n  json_object_set_uint64(tmp, (uint64_t) 321321321);\n  assert(json_object_get_uint64(tmp) == 321321321);\n  json_object_set_uint64(tmp, 9223372036854775808U);\n  assert(json_object_get_int(tmp) == INT32_MAX);\n  assert(json_object_get_uint64(tmp) == 9223372036854775808U);\n  json_object_put(tmp);\n  printf(\"UINT64 PASSED\\n\");\n  tmp_idx = json_object_new_boolean(1);\n  assert(json_object_get_boolean(tmp) == 1);\n  json_object_set_boolean(tmp, 0);\n  assert(json_object_get_boolean(tmp) == 0);\n  json_object_set_boolean(tmp, 1);\n  assert(json_object_get_boolean(tmp) == 1);\n  json_object_put(tmp);\n  printf(\"BOOL PASSED\\n\");\n  tmp_idx = json_object_new_double(12.34);\n  assert(json_object_get_double(tmp) == 12.34);\n  json_object_set_double(tmp, 34.56);\n  assert(json_object_get_double(tmp) == 34.56);\n  json_object_set_double(tmp, 6435.34);\n  assert(json_object_get_double(tmp) == 6435.34);\n  json_object_set_double(tmp, 2e21);\n  assert(json_object_get_int(tmp) == INT32_MAX);\n  assert(json_object_get_int64(tmp) == INT64_MAX);\n  assert(json_object_get_uint64(tmp) == UINT64_MAX);\n  json_object_set_double(tmp, -2e21);\n  assert(json_object_get_int(tmp) == INT32_MIN);\n  assert(json_object_get_int64(tmp) == INT64_MIN);\n  assert(json_object_get_uint64(tmp) == 0);\n  json_object_put(tmp);\n  printf(\"DOUBLE PASSED\\n\");\n  tmp_idx = json_object_new_string(\"A MID STRING\");\n  assert(strcmp(json_object_get_string(tmp), \"A MID STRING\") == 0);\n  assert(strcmp(json_object_to_json_string(tmp), \"\\\"A MID STRING\\\"\") == 0);\n  json_object_set_string(tmp, \"SHORT\");\n  assert(strcmp(json_object_get_string(tmp), \"SHORT\") == 0);\n  assert(strcmp(json_object_to_json_string(tmp), \"\\\"SHORT\\\"\") == 0);\n  json_object_set_string(tmp, \"A string longer than 32 chars as to check non local buf codepath\");\n  assert(strcmp(json_object_get_string(tmp), \"A string longer than 32 chars as to check non local buf codepath\") == 0);\n  assert(strcmp(json_object_to_json_string(tmp), \"\\\"A string longer than 32 chars as to check non local buf codepath\\\"\") == 0);\n  json_object_set_string(tmp, \"SHORT\");\n  assert(strcmp(json_object_get_string(tmp), \"SHORT\") == 0);\n  assert(strcmp(json_object_to_json_string(tmp), \"\\\"SHORT\\\"\") == 0);\n  json_object_set_string(tmp, \"\");\n  json_object_set_string(tmp, \"A string longer than 32 chars as to check non local buf codepath\");\n  json_object_set_string(tmp, \"\");\n  json_object_set_string(tmp, \"A string longer than 32 chars as to check non local buf codepath\");\n  json_object_put(tmp);\n  printf(\"STRING PASSED\\n\");\n  tmp_idx = json_object_new_string(\"STR\");\n  assert(json_object_get_double(tmp) == 0.0);\n  json_object_set_string(tmp, \"123.123\");\n  assert(json_object_get_double(tmp) == 123.123000);\n  json_object_set_string(tmp, \"12E+3\");\n  assert(json_object_get_double(tmp) == 12000.000000);\n  json_object_set_string(tmp, \"123.123STR\");\n  assert(json_object_get_double(tmp) == 0.0);\n  json_object_set_string(tmp, \"1.8E+308\");\n  assert(json_object_get_double(tmp) == 0.0);\n  json_object_set_string(tmp, \"-1.8E+308\");\n  assert(json_object_get_double(tmp) == 0.0);\n  json_object_put(tmp);\n  printf(\"STRINGTODOUBLE PASSED\\n\");\n  tmp_idx = json_tokener_parse(\"1.234\");\n  json_object_set_double(tmp, 12.3);\n  const char *serialized = json_object_to_json_string(tmp);\n  fprintf(stderr, \"%s\\n\", serialized);\n  assert(strncmp(serialized, \"12.3\", 4) == 0);\n  json_object_put(tmp);\n  printf(\"PARSE AND SET PASSED\\n\");\n  printf(\"PASSED\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "fprintf",
                "json_object_get_boolean",
                "json_object_get_double",
                "json_object_get_int",
                "json_object_get_int64",
                "json_object_get_string",
                "json_object_get_uint64",
                "json_object_new_boolean",
                "json_object_new_double",
                "json_object_new_int",
                "json_object_new_string",
                "json_object_new_uint64",
                "json_object_put",
                "json_object_set_boolean",
                "json_object_set_double",
                "json_object_set_int",
                "json_object_set_int64",
                "json_object_set_string",
                "json_object_set_uint64",
                "json_object_to_json_string",
                "json_tokener_parse",
                "printf",
                "strcmp",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "json_object *",
                        "definition": [
                            "json_object *tmp = json_object_new_int(123)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "serialized",
                        "type": "const char *",
                        "definition": [
                            "const char *serialized = json_object_to_json_string(tmp)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_strerror",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  puts(_json_c_strerror(10000));\n  puts(_json_c_strerror(999));\n  return 0;\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_read_valid_with_fd",
            "header": "static void test_read_valid_with_fd(const char *testdir)",
            "params": [
                "const char *testdir"
            ],
            "definition": "static void test_read_valid_with_fd(const char *testdir)\n{\n  char filename[256];\n  (void) snprintf(filename, sizeof(filename), \"%s/valid.json\", testdir);\n  int d = open(filename, O_RDONLY);\n  if (d < 0)\n  {\n    fprintf(stderr, \"FAIL: unable to open %s: %s\\n\", filename, _json_c_strerror(errno));\n    exit(1);\n  }\n  json_object *jso = json_object_from_fd(d);\n  if (jso != 0)\n  {\n    printf(\"OK: json_object_from_fd(valid.json)=%s\\n\", json_object_to_json_string(jso));\n    json_object_put(jso);\n  }\n  else\n  {\n    fprintf(stderr, \"FAIL: unable to parse contents of %s: %s\\n\", filename, json_util_get_last_err());\n  }\n  close(d);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "close",
                "exit",
                "fprintf",
                "json_object_from_fd",
                "json_object_put",
                "json_object_to_json_string",
                "json_util_get_last_err",
                "open",
                "printf",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "char [256]",
                        "definition": [
                            "char filename[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(filename, O_RDONLY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_object_from_fd(d)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_read_valid_nested_with_fd",
            "header": "static void test_read_valid_nested_with_fd(const char *testdir)",
            "params": [
                "const char *testdir"
            ],
            "definition": "static void test_read_valid_nested_with_fd(const char *testdir)\n{\n  char filename[256];\n  (void) snprintf(filename, sizeof(filename), \"%s/valid_nested.json\", testdir);\n  int d = open(filename, O_RDONLY);\n  if (d < 0)\n  {\n    fprintf(stderr, \"FAIL: unable to open %s: %s\\n\", filename, _json_c_strerror(errno));\n    exit(1);\n  }\n  assert(0 == json_object_from_fd_ex(d, -2));\n  json_object *jso = json_object_from_fd_ex(d, 20);\n  unsigned int jso_idx = 0;\n  if ((&jso[jso_idx]) != 0)\n  {\n    printf(\"OK: json_object_from_fd_ex(valid_nested.json, 20)=%s\\n\", json_object_to_json_string(jso));\n    json_object_put(jso);\n  }\n  else\n  {\n    fprintf(stderr, \"FAIL: unable to parse contents of %s: %s\\n\", filename, json_util_get_last_err());\n  }\n  (void) lseek(d, 0, 0);\n  jso_idx = json_object_from_fd_ex(d, 3);\n  if ((&jso[jso_idx]) != 0)\n  {\n    printf(\"FAIL: json_object_from_fd_ex(%s, 3)=%s\\n\", filename, json_object_to_json_string(jso));\n    json_object_put(jso);\n  }\n  else\n  {\n    printf(\"OK: correctly unable to parse contents of valid_nested.json with low max depth: %s\\n\", json_util_get_last_err());\n  }\n  close(d);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "assert",
                "close",
                "exit",
                "fprintf",
                "json_object_from_fd_ex",
                "json_object_put",
                "json_object_to_json_string",
                "json_util_get_last_err",
                "lseek",
                "open",
                "printf",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "char [256]",
                        "definition": [
                            "char filename[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(filename, O_RDONLY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_object_from_fd_ex(d, 20)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_read_nonexistant",
            "header": "static void test_read_nonexistant(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_read_nonexistant(void)\n{\n  const char *filename = \"./not_present.json\";\n  json_object *jso = json_object_from_file(filename);\n  if (jso != 0)\n  {\n    printf(\"FAIL: json_object_from_file(%s) returned %p when NULL expected\\n\", filename, (void *) jso);\n    json_object_put(jso);\n  }\n  else\n  {\n    printf(\"OK: json_object_from_file(%s) correctly returned NULL: %s\\n\", filename, json_util_get_last_err());\n  }\n}\n\n",
            "calle": [
                "json_object_from_file",
                "json_object_put",
                "json_util_get_last_err",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename = \"./not_present.json\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_object_from_file(filename)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_read_closed",
            "header": "static void test_read_closed(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_read_closed(void)\n{\n  int d = open(\"/dev/null\", O_RDONLY);\n  if (d < 0)\n  {\n    puts(\"FAIL: unable to open\");\n  }\n  int fixed_d = 10;\n  if (dup2(d, fixed_d) < 0)\n  {\n    printf(\"FAIL: unable to dup to fd %d\", fixed_d);\n  }\n  close(d);\n  close(fixed_d);\n  json_object *jso = json_object_from_fd(fixed_d);\n  if (jso != 0)\n  {\n    printf(\"FAIL: read from closed fd returning non-NULL: %p\\n\", (void *) jso);\n    fflush(stdout);\n    printf(\"  jso=%s\\n\", json_object_to_json_string(jso));\n    json_object_put(jso);\n    return;\n  }\n  printf(\"OK: json_object_from_fd(closed_fd), expecting NULL, EBADF, got:NULL, %s\\n\", json_util_get_last_err());\n}\n\n",
            "calle": [
                "close",
                "dup2",
                "fflush",
                "json_object_from_fd",
                "json_object_put",
                "json_object_to_json_string",
                "json_util_get_last_err",
                "open",
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(\"/dev/null\", O_RDONLY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixed_d",
                        "type": "int",
                        "definition": [
                            "int fixed_d = 10"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_object_from_fd(fixed_d)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_write_to_file",
            "header": "static void test_write_to_file(void)",
            "params": [
                "void"
            ],
            "definition": "static void test_write_to_file(void)\n{\n  json_object *jso;\n  unsigned int jso_idx = 0;\n  jso_idx = json_tokener_parse(\"{\\\"foo\\\":1234,\\\"foo1\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo2\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo3\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo4\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo5\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo6\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo7\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo8\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\",\\\"foo9\\\":\\\"abcdefghijklmnopqrstuvwxyz\\\"}\");\n  const char *outfile = \"json.out\";\n  int rv = json_object_to_file(outfile, jso);\n  printf(\"%s: json_object_to_file(%s, jso)=%d\\n\", (rv == 0) ? (\"OK\") : (\"FAIL\"), outfile, rv);\n  if (rv == 0)\n  {\n    stat_and_cat(outfile);\n  }\n  putchar('\\n');\n  const char *outfile2 = \"json2.out\";\n  rv = json_object_to_file_ext(outfile2, jso, 1 << 1);\n  printf(\"%s: json_object_to_file_ext(%s, jso, JSON_C_TO_STRING_PRETTY)=%d\\n\", (rv == 0) ? (\"OK\") : (\"FAIL\"), outfile2, rv);\n  if (rv == 0)\n  {\n    stat_and_cat(outfile2);\n  }\n  const char *outfile3 = \"json3.out\";\n  int d = open(outfile3, O_WRONLY | O_CREAT, 0600);\n  if (d < 0)\n  {\n    printf(\"FAIL: unable to open %s %s\\n\", outfile3, _json_c_strerror(errno));\n    return;\n  }\n  rv = json_object_to_fd(d, jso, 1 << 1);\n  printf(\"%s: json_object_to_fd(%s, jso, JSON_C_TO_STRING_PRETTY)=%d\\n\", (rv == 0) ? (\"OK\") : (\"FAIL\"), outfile3, rv);\n  rv = json_object_to_fd(d, jso, 0);\n  printf(\"%s: json_object_to_fd(%s, jso, JSON_C_TO_STRING_PLAIN)=%d\\n\", (rv == 0) ? (\"OK\") : (\"FAIL\"), outfile3, rv);\n  close(d);\n  if (rv == 0)\n  {\n    stat_and_cat(outfile3);\n  }\n  json_object_put(jso);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "close",
                "json_object_put",
                "json_object_to_fd",
                "json_object_to_file",
                "json_object_to_file_ext",
                "json_tokener_parse",
                "open",
                "printf",
                "putchar",
                "stat_and_cat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jso_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "const char *",
                        "definition": [
                            "const char *outfile = \"json.out\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "rv",
                        "type": "int",
                        "definition": [
                            "int rv = json_object_to_file(outfile, jso)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile2",
                        "type": "const char *",
                        "definition": [
                            "const char *outfile2 = \"json2.out\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile3",
                        "type": "const char *",
                        "definition": [
                            "const char *outfile3 = \"json3.out\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(outfile3, O_WRONLY | O_CREAT, 0600)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stat_and_cat",
            "header": "static void stat_and_cat(const char *file)",
            "params": [
                "const char *file"
            ],
            "definition": "static void stat_and_cat(const char *file)\n{\n  struct stat sb;\n  int d = open(file, O_RDONLY);\n  if (d < 0)\n  {\n    printf(\"FAIL: unable to open %s: %s\\n\", file, _json_c_strerror(errno));\n    return;\n  }\n  if (fstat(d, &sb) < 0)\n  {\n    printf(\"FAIL: unable to stat %s: %s\\n\", file, _json_c_strerror(errno));\n    close(d);\n    return;\n  }\n  char *buf = malloc(sb.st_size + 1);\n  if (!buf)\n  {\n    printf(\"FAIL: unable to allocate memory\\n\");\n    close(d);\n    return;\n  }\n  if (read(d, buf, sb.st_size) < sb.st_size)\n  {\n    printf(\"FAIL: unable to read all of %s: %s\\n\", file, _json_c_strerror(errno));\n    free(buf);\n    close(d);\n    return;\n  }\n  buf[sb.st_size] = '\\0';\n  printf(\"file[%s], size=%d, contents=%s\\n\", file, (int) sb.st_size, buf);\n  free(buf);\n  close(d);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "close",
                "free",
                "fstat",
                "malloc",
                "open",
                "printf",
                "read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sb",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(file, O_RDONLY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf = malloc(sb.st_size + 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_read_fd_equal",
            "header": "static void test_read_fd_equal(const char *testdir)",
            "params": [
                "const char *testdir"
            ],
            "definition": "static void test_read_fd_equal(const char *testdir)\n{\n  char filename[256];\n  (void) snprintf(filename, sizeof(filename), \"%s/valid_nested.json\", testdir);\n  json_object *jso = json_object_from_file(filename);\n  int d = open(filename, O_RDONLY);\n  if (d < 0)\n  {\n    fprintf(stderr, \"FAIL: unable to open %s: %s\\n\", filename, _json_c_strerror(errno));\n    exit(1);\n  }\n  json_object *new_jso = json_object_from_fd(d);\n  close(d);\n  printf(\"OK: json_object_from_file(valid.json)=%s\\n\", json_object_to_json_string(jso));\n  printf(\"OK: json_object_from_fd(valid.json)=%s\\n\", json_object_to_json_string(new_jso));\n  json_object_put(jso);\n  json_object_put(new_jso);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "close",
                "exit",
                "fprintf",
                "json_object_from_fd",
                "json_object_from_file",
                "json_object_put",
                "json_object_to_json_string",
                "open",
                "printf",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "char [256]",
                        "definition": [
                            "char filename[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_object_from_file(filename)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d = open(filename, O_RDONLY)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *new_jso = json_object_from_fd(d)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_util_file",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  const char *testdir;\n  unsigned int testdir_idx = 0;\n  if (argc < 2)\n  {\n    fprintf(stderr, \"Usage: %s <testdir>\\n  <testdir> is the location of input files\\n\", argv[0]);\n    return 1;\n  }\n  testdir_idx = argv[1];\n  if (strncmp(json_c_version(), \"0.18.99\", sizeof(\"0.18.99\")))\n  {\n    printf(\"FAIL: Output from json_c_version(): %s does not match %s\", json_c_version(), \"0.18.99\");\n    return 1;\n  }\n  if (json_c_version_num() != (((0 << 16) | (18 << 8)) | 99))\n  {\n    printf(\"FAIL: Output from json_c_version_num(): %d does not match %d\", json_c_version_num(), ((0 << 16) | (18 << 8)) | 99);\n    return 1;\n  }\n  test_read_valid_with_fd(testdir);\n  test_read_valid_nested_with_fd(testdir);\n  test_read_nonexistant();\n  test_read_closed();\n  test_write_to_file();\n  test_read_fd_equal(testdir);\n  return 0;\n}\n\n",
            "calle": [
                "fprintf",
                "json_c_version",
                "json_c_version_num",
                "printf",
                "strncmp",
                "test_read_closed",
                "test_read_fd_equal",
                "test_read_nonexistant",
                "test_read_valid_nested_with_fd",
                "test_read_valid_with_fd",
                "test_write_to_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testdir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int testdir_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_visit",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  if (0)\n  {\n    mc_set_debug(1);\n  }\n  const char *input = \"{\t\t\\\"obj1\\\": 123,\t\t\\\"obj2\\\": {\t\t\t\\\"subobj1\\\": \\\"aaa\\\",\t\t\t\\\"subobj2\\\": \\\"bbb\\\",\t\t\t\\\"subobj3\\\": [ \\\"elem1\\\", \\\"elem2\\\", true ],\t\t},\t\t\\\"obj3\\\": 1.234,\t\t\\\"obj4\\\": [ true, false, null ]\t}\";\n  json_object *jso = json_tokener_parse(input);\n  printf(\"jso.to_string()=%s\\n\", json_object_to_json_string(jso));\n  int rv;\n  rv = json_c_visit(jso, 0, emit_object, 0);\n  printf(\"json_c_visit(emit_object)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, skip_arrays, 0);\n  printf(\"json_c_visit(skip_arrays)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, pop_and_stop, 0);\n  printf(\"json_c_visit(pop_and_stop)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, err_on_subobj2, 0);\n  printf(\"json_c_visit(err_on_subobj2)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, pop_array, 0);\n  printf(\"json_c_visit(pop_array)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, stop_array, 0);\n  printf(\"json_c_visit(stop_array)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  rv = json_c_visit(jso, 0, err_return, 0);\n  printf(\"json_c_visit(err_return)=%d\\n\", rv);\n  printf(\"================================\\n\\n\");\n  json_object_put(jso);\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "err_on_subobj2",
                "err_return",
                "json_c_visit",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_parse",
                "mc_set_debug",
                "pop_and_stop",
                "pop_array",
                "printf",
                "skip_arrays",
                "stop_array"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const char *",
                        "definition": [
                            "const char *input = \"{\t\t\\\"obj1\\\": 123,\t\t\\\"obj2\\\": {\t\t\t\\\"subobj1\\\": \\\"aaa\\\",\t\t\t\\\"subobj2\\\": \\\"bbb\\\",\t\t\t\\\"subobj3\\\": [ \\\"elem1\\\", \\\"elem2\\\", true ],\t\t},\t\t\\\"obj3\\\": 1.234,\t\t\\\"obj4\\\": [ true, false, null ]\t}\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso = json_tokener_parse(input)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rv",
                        "type": "int",
                        "definition": [
                            "int rv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "skip_arrays",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pop_and_stop",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "err_on_subobj2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pop_array",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "stop_array",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "err_return",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "emit_object",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int emit_object(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  printf(\"flags: 0x%x, key: %s, index: %ld, value: %s\\n\", flags, (jso_key) ? (jso_key) : (\"(null)\"), (jso_index) ? ((long) (*jso_index)) : (-1L), json_object_to_json_string(jso));\n  return 0;\n}\n\n",
            "calle": [
                "json_object_to_json_string",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "skip_arrays",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int skip_arrays(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  (void) emit_object(jso, flags, parent_jso, jso_key, jso_index, userarg);\n  if (json_object_get_type(jso) == json_type_array)\n  {\n    return 7547;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "json_object_get_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pop_and_stop",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int pop_and_stop(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  (void) emit_object(jso, flags, parent_jso, jso_key, jso_index, userarg);\n  if ((jso_key != 0) && (strcmp(jso_key, \"subobj1\") == 0))\n  {\n    printf(\"POP after handling subobj1\\n\");\n    return 767;\n  }\n  if ((jso_key != 0) && (strcmp(jso_key, \"obj3\") == 0))\n  {\n    printf(\"STOP after handling obj3\\n\");\n    return 7867;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "err_on_subobj2",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int err_on_subobj2(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  (void) emit_object(jso, flags, parent_jso, jso_key, jso_index, userarg);\n  if ((jso_key != 0) && (strcmp(jso_key, \"subobj2\") == 0))\n  {\n    printf(\"ERROR after handling subobj1\\n\");\n    return -1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pop_array",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int pop_array(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  (void) emit_object(jso, flags, parent_jso, jso_key, jso_index, userarg);\n  if ((jso_index != 0) && ((*jso_index) == 0))\n  {\n    printf(\"POP after handling array[0]\\n\");\n    return 767;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stop_array",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int stop_array(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  (void) emit_object(jso, flags, parent_jso, jso_key, jso_index, userarg);\n  if ((jso_index != 0) && ((*jso_index) == 0))\n  {\n    printf(\"STOP after handling array[1]\\n\");\n    return 7867;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "emit_object",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emit_object",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "err_return",
            "header": "",
            "params": [
                "json_object *jso",
                "int flags",
                "json_object *parent_jso",
                "const char *jso_key",
                "size_t *jso_index",
                "void *userarg"
            ],
            "definition": "static int err_return(json_object *jso, int flags, json_object *parent_jso, const char *jso_key, size_t *jso_index, void *userarg)\n{\n  printf(\"flags: 0x%x, key: %s, index: %ld, value: %s\\n\", flags, (jso_key) ? (jso_key) : (\"(null)\"), (jso_index) ? ((long) (*jso_index)) : (-1L), json_object_to_json_string(jso));\n  return 100;\n}\n\n",
            "calle": [
                "json_object_to_json_string",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent_jso",
                        "type": "json_object *",
                        "definition": [
                            "json_object *parent_jso"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_key",
                        "type": "const char *",
                        "definition": [
                            "const char *jso_key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jso_index",
                        "type": "size_t *",
                        "definition": [
                            "size_t *jso_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "userarg",
                        "type": "void *",
                        "definition": [
                            "void *userarg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_object_iterator",
            "header": "",
            "params": [
                "int atgc",
                "char **argv"
            ],
            "definition": "int main(int atgc, char **argv)\n{\n  const char *input = \"{\\n\t\t\\\"string_of_digits\\\": \\\"123\\\",\\n\t\t\\\"regular_number\\\": 222,\\n\t\t\\\"decimal_number\\\": 99.55,\\n\t\t\\\"boolean_true\\\": true,\\n\t\t\\\"boolean_false\\\": false,\\n\t\t\\\"big_number\\\": 2147483649,\\n\t\t\\\"a_null\\\": null,\\n\t\t}\";\n  struct json_object *new_obj;\n  unsigned int new_obj_idx = 0;\n  struct json_object_iterator it;\n  struct json_object_iterator itEnd;\n  it = json_object_iter_init_default();\n  new_obj_idx = json_tokener_parse(input);\n  it = json_object_iter_begin(new_obj);\n  itEnd = json_object_iter_end(new_obj);\n  while (!json_object_iter_equal(&it, &itEnd))\n  {\n    printf(\"%s\\n\", json_object_iter_peek_name(&it));\n    printf(\"%s\\n\", json_object_to_json_string(json_object_iter_peek_value(&it)));\n    json_object_iter_next(&it);\n  }\n\n  json_object_put(new_obj);\n  return 0;\n}\n\n",
            "calle": [
                "json_object_iter_begin",
                "json_object_iter_end",
                "json_object_iter_equal",
                "json_object_iter_init_default",
                "json_object_iter_next",
                "json_object_iter_peek_name",
                "json_object_iter_peek_value",
                "json_object_put",
                "json_object_to_json_string",
                "json_tokener_parse",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "atgc",
                        "type": "int",
                        "definition": [
                            "int atgc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const char *",
                        "definition": [
                            "const char *input = \"{\\n\t\t\\\"string_of_digits\\\": \\\"123\\\",\\n\t\t\\\"regular_number\\\": 222,\\n\t\t\\\"decimal_number\\\": 99.55,\\n\t\t\\\"boolean_true\\\": true,\\n\t\t\\\"boolean_false\\\": false,\\n\t\t\\\"big_number\\\": 2147483649,\\n\t\t\\\"a_null\\\": null,\\n\t\t}\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "it",
                        "type": "struct json_object_iterator",
                        "definition": [
                            "struct json_object_iterator it"
                        ]
                    },
                    {
                        "path": null,
                        "name": "itEnd",
                        "type": "struct json_object_iterator",
                        "definition": [
                            "struct json_object_iterator itEnd"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_example_int",
            "header": "",
            "params": [
                "struct json_object *jo1",
                "const char *json_pointer",
                "int expected_int"
            ],
            "definition": "static void test_example_int(struct json_object *jo1, const char *json_pointer, int expected_int)\n{\n  struct json_object *jo2 = 0;\n  assert(0 == json_pointer_get(jo1, json_pointer, 0));\n  assert(0 == json_pointer_get(jo1, json_pointer, &jo2));\n  assert(json_object_is_type(jo2, json_type_int));\n  assert(expected_int == json_object_get_int(jo2));\n  printf(\"PASSED - GET -  %s == %d\\n\", json_pointer, expected_int);\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_int",
                "json_object_is_type",
                "json_pointer_get",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_pointer",
                        "type": "const char *",
                        "definition": [
                            "const char *json_pointer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_int",
                        "type": "int",
                        "definition": [
                            "int expected_int"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2 = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_example_get",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void test_example_get(void)\n{\n  int i;\n  struct json_object *jo1;\n  unsigned int jo1_idx = 0;\n  struct json_object *jo2;\n  unsigned int jo2_idx = 0;\n  struct json_object *jo3;\n  unsigned int jo3_idx = 0;\n  struct json_pointer_map_s_i\n  {\n    const char *s;\n    int i;\n  };\n  struct json_pointer_map_s_i json_pointers[] = {{\"/\", 0}, {\"/a~1b\", 1}, {\"/c%d\", 2}, {\"/e^f\", 3}, {\"/g|h\", 4}, {\"/i\\\\j\", 5}, {\"/k\\\"l\", 6}, {\"/ \", 7}, {\"/m~0n\", 8}, {0, 0}};\n  jo1_idx = json_tokener_parse(input_json_str);\n  assert(0 != (&jo1[jo1_idx]));\n  printf(\"PASSED - GET - LOADED TEST JSON\\n\");\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  jo2_idx = 0;\n  assert(0 == json_pointer_get(jo1, \"\", 0));\n  assert(0 == json_pointer_get(jo1, \"\", &(&jo2[jo2_idx])));\n  assert(json_object_equal(jo2, jo1));\n  printf(\"PASSED - GET - ENTIRE OBJECT WORKED\\n\");\n  jo3_idx = json_object_new_array();\n  json_object_array_add(jo3, json_object_new_string(\"bar\"));\n  json_object_array_add(jo3, json_object_new_string(\"baz\"));\n  jo2_idx = 0;\n  assert(0 == json_pointer_get(jo1, \"/foo\", 0));\n  assert(0 == json_pointer_get(jo1, \"/foo\", &(&jo2[jo2_idx])));\n  assert(0 != (&jo2[jo2_idx]));\n  assert(json_object_equal(jo2, jo3));\n  json_object_put(jo3);\n  printf(\"PASSED - GET - /foo == ['bar', 'baz']\\n\");\n  jo2_idx = 0;\n  assert(0 == json_pointer_get(jo1, \"/foo/0\", 0));\n  assert(0 == json_pointer_get(jo1, \"/foo/0\", &(&jo2[jo2_idx])));\n  assert(0 != (&jo2[jo2_idx]));\n  assert(0 == strcmp(\"bar\", json_object_get_string(jo2)));\n  printf(\"PASSED - GET - /foo/0 == 'bar'\\n\");\n  for (i = 0; json_pointers[i].s; i += 1)\n    test_example_int(jo1, json_pointers[i].s, json_pointers[i].i);\n\n  json_object_put(jo1);\n}\n\n",
            "calle": [
                "assert",
                "json_object_array_add",
                "json_object_equal",
                "json_object_get_string",
                "json_object_new_array",
                "json_object_new_string",
                "json_object_put",
                "json_pointer_get",
                "json_tokener_parse",
                "printf",
                "strcmp",
                "test_example_int"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct json_pointer_map_s_i\n{\n  const char *s;\n  int i;\n}",
                        "name": "json_pointer_map_s_i",
                        "names": [],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "s",
                                    "type": "const char *",
                                    "definition": [
                                        "const char *s"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "i",
                                    "type": "int",
                                    "definition": [
                                        "int i"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo3_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo3_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "json_pointers",
                        "type": "struct json_pointer_map_s_i []",
                        "definition": [
                            "struct json_pointer_map_s_i json_pointers[] = {{\"/\", 0}, {\"/a~1b\", 1}, {\"/c%d\", 2}, {\"/e^f\", 3}, {\"/g|h\", 4}, {\"/i\\\\j\", 5}, {\"/k\\\"l\", 6}, {\"/ \", 7}, {\"/m~0n\", 8}, {0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_json_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_recursion_get",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void test_recursion_get(void)\n{\n  struct json_object *jo2;\n  unsigned int jo2_idx = 0;\n  struct json_object *jo1 = json_tokener_parse(rec_input_json_str);\n  jo2_idx = 0;\n  assert(jo1 != 0);\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  assert(0 == json_pointer_get(jo1, \"/arr/0/obj/2/obj1\", &(&jo2[jo2_idx])));\n  assert(json_object_is_type(jo2, json_type_int));\n  assert(0 == json_object_get_int(jo2));\n  assert(0 == json_pointer_get(jo1, \"/arr/0/obj/2/obj2\", &(&jo2[jo2_idx])));\n  assert(json_object_is_type(jo2, json_type_string));\n  assert(0 == strcmp(\"1\", json_object_get_string(jo2)));\n  assert(0 == json_pointer_getf(jo1, &(&jo2[jo2_idx]), \"/%s/%d/%s/%d/%s\", \"arr\", 0, \"obj\", 2, \"obj2\"));\n  assert(json_object_is_type(jo2, json_type_string));\n  assert(0 == strcmp(\"1\", json_object_get_string(jo2)));\n  assert(jo1 != 0);\n  assert(0 == json_pointer_get(jo1, \"/obj/obj/obj/0/obj1\", &(&jo2[jo2_idx])));\n  assert(json_object_is_type(jo2, json_type_int));\n  assert(0 == json_object_get_int(jo2));\n  assert(0 == json_pointer_get(jo1, \"/obj/obj/obj/0/obj2\", &(&jo2[jo2_idx])));\n  assert(json_object_is_type(jo2, json_type_string));\n  assert(0 == strcmp(\"1\", json_object_get_string(jo2)));\n  assert(0 == json_pointer_getf(jo1, &(&jo2[jo2_idx]), \"%s\", \"\\0\"));\n  printf(\"PASSED - GET - RECURSION TEST\\n\");\n  json_object_put(jo1);\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_int",
                "json_object_get_string",
                "json_object_is_type",
                "json_object_put",
                "json_pointer_get",
                "json_pointer_getf",
                "json_tokener_parse",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1 = json_tokener_parse(rec_input_json_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rec_input_json_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_wrong_inputs_get",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void test_wrong_inputs_get(void)\n{\n  struct json_object *jo2;\n  unsigned int jo2_idx = 0;\n  struct json_object *jo1 = json_tokener_parse(input_json_str);\n  assert(0 != jo1);\n  printf(\"PASSED - GET - LOADED TEST JSON\\n\");\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  jo2_idx = 0;\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"foo/bar\", 0));\n  assert(0 != json_pointer_get(jo1, \"foo/bar\", &(&jo2[jo2_idx])));\n  assert(errno == EINVAL);\n  assert((&jo2[jo2_idx]) == 0);\n  printf(\"PASSED - GET - MISSING /\\n\");\n  errno = 0;\n  assert(0 != json_pointer_get(0, \"foo/bar\", 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(0, 0, 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_getf(0, 0, 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, 0, 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_getf(jo1, 0, 0));\n  assert(errno == EINVAL);\n  printf(\"PASSED - GET - NULL INPUTS\\n\");\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/a\", 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/01\", 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_getf(jo1, 0, \"/%s/a\", \"foo\"));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/-\", 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/4\", 0));\n  assert(errno == ENOENT);\n  errno = 0;\n  assert(0 != json_pointer_getf(jo1, 0, \"%s\", \"/foo/22\"));\n  assert(errno == ENOENT);\n  errno = 0;\n  assert(0 != json_pointer_getf(jo1, 0, \"/%s/%d\", \"foo\", 22));\n  assert(errno == ENOENT);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/-1\", 0));\n  assert(errno == EINVAL);\n  errno = 0;\n  assert(0 != json_pointer_get(jo1, \"/foo/10\", 0));\n  assert(errno == ENOENT);\n  printf(\"PASSED - GET - INVALID INDEXES\\n\");\n  json_object_put(jo1);\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_string",
                "json_object_put",
                "json_pointer_get",
                "json_pointer_getf",
                "json_tokener_parse",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1 = json_tokener_parse(input_json_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_json_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_example_set",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void test_example_set(void)\n{\n  struct json_object *jo2;\n  unsigned int jo2_idx = 0;\n  struct json_object *jo1 = json_tokener_parse(input_json_str);\n  unsigned int jo1_idx = 0;\n  assert((&jo1[jo1_idx]) != 0);\n  printf(\"PASSED - SET - LOADED TEST JSON\\n\");\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/foo/1\", json_object_new_string(\"cod\")));\n  assert(0 == strcmp(\"cod\", json_object_get_string(json_object_array_get_idx(json_object_object_get(jo1, \"foo\"), 1))));\n  printf(\"PASSED - SET - 'cod' in /foo/1\\n\");\n  assert(0 != json_pointer_set(&(&jo1[jo1_idx]), \"/fud/gaw\", jo2_idx = json_tokener_parse(\"[1,2,3]\")));\n  assert(errno == ENOENT);\n  printf(\"PASSED - SET - non-existing /fud/gaw\\n\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/fud\", json_object_new_object()));\n  printf(\"PASSED - SET - /fud == {}\\n\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/fud/gaw\", jo2));\n  printf(\"PASSED - SET - /fug/gaw == [1,2,3]\\n\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/fud/gaw/0\", json_object_new_int(0)));\n  assert(0 == json_pointer_setf(&(&jo1[jo1_idx]), json_object_new_int(0), \"%s%s/%d\", \"/fud\", \"/gaw\", 0));\n  printf(\"PASSED - SET - /fug/gaw == [0,2,3]\\n\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/fud/gaw/-\", json_object_new_int(4)));\n  printf(\"PASSED - SET - /fug/gaw == [0,2,3,4]\\n\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/\", json_object_new_int(9)));\n  printf(\"PASSED - SET - / == 9\\n\");\n  jo2_idx = json_tokener_parse(\"{ 'foo': [ 'bar', 'cod' ], '': 9, 'a/b': 1, 'c%d': 2, 'e^f': 3, 'g|h': 4, 'i\\\\\\\\j': 5, 'k\\\\\\\"l': 6, ' ': 7, 'm~n': 8, 'fud': { 'gaw': [ 0, 2, 3, 4 ] } }\");\n  assert(json_object_equal(jo2, jo1));\n  printf(\"PASSED - SET - Final JSON is: %s\\n\", json_object_get_string(jo1));\n  json_object_put(jo2);\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"\", json_object_new_int(10)));\n  assert(10 == json_object_get_int(jo1));\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  json_object_put(jo1);\n  jo1_idx = json_tokener_parse(\"[0, 1, 2, 3]\");\n  jo2_idx = json_tokener_parse(\"[0, 1, 2, 3, null, null, null, 7]\");\n  assert(0 == json_pointer_set(&(&jo1[jo1_idx]), \"/7\", json_object_new_int(7)));\n  assert(1 == json_object_equal(jo1, jo2));\n  json_object_put(jo1);\n  jo1_idx = json_tokener_parse(\"[0, 1, 2, 3]\");\n  assert(0 == json_pointer_setf(&(&jo1[jo1_idx]), json_object_new_int(7), \"/%u\", 7));\n  assert(1 == json_object_equal(jo1, jo2));\n  json_object_put(jo1);\n  json_object_put(jo2);\n}\n\n",
            "calle": [
                "assert",
                "json_object_array_get_idx",
                "json_object_equal",
                "json_object_get_int",
                "json_object_get_string",
                "json_object_new_int",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_object_get",
                "json_object_put",
                "json_pointer_set",
                "json_pointer_setf",
                "json_tokener_parse",
                "printf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1 = json_tokener_parse(input_json_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_json_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_wrong_inputs_set",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void test_wrong_inputs_set(void)\n{\n  struct json_object *jo2;\n  unsigned int jo2_idx = 0;\n  struct json_object *jo1 = json_tokener_parse(input_json_str);\n  assert(jo1 != 0);\n  printf(\"PASSED - SET - LOADED TEST JSON\\n\");\n  printf(\"%s\\n\", json_object_get_string(jo1));\n  assert(0 != json_pointer_set(0, 0, 0));\n  assert(0 != json_pointer_setf(0, 0, 0));\n  assert(0 != json_pointer_set(&jo1, 0, 0));\n  assert(0 != json_pointer_setf(&jo1, 0, 0));\n  printf(\"PASSED - SET - failed with NULL params for input json & path\\n\");\n  assert(0 != json_pointer_set(&jo1, \"foo/bar\", jo2_idx = json_object_new_string(\"cod\")));\n  printf(\"PASSED - SET - failed 'cod' with path 'foo/bar'\\n\");\n  json_object_put(jo2);\n  assert(0 != json_pointer_setf(&jo1, jo2_idx = json_object_new_string(\"cod\"), \"%s\", \"foo/bar\"));\n  printf(\"PASSED - SET - failed 'cod' with path 'foo/bar'\\n\");\n  json_object_put(jo2);\n  assert(0 != json_pointer_set(&jo1, \"0\", jo2_idx = json_object_new_string(\"cod\")));\n  printf(\"PASSED - SET - failed with invalid array index'\\n\");\n  json_object_put(jo2);\n  jo2_idx = json_object_new_string(\"whatever\");\n  assert(0 != json_pointer_set(&jo1, \"/fud/gaw\", jo2));\n  assert(0 == json_pointer_set(&jo1, \"/fud\", json_object_new_object()));\n  assert(0 == json_pointer_set(&jo1, \"/fud/gaw\", jo2));\n  jo2_idx = json_object_new_int(0);\n  assert(0 != json_pointer_set(&jo1, \"/fud/gaw/0\", jo2));\n  json_object_put(jo2);\n  jo2_idx = json_object_new_int(0);\n  assert(0 != json_pointer_set(&jo1, \"/fud/gaw/\", jo2));\n  json_object_put(jo2);\n  printf(\"PASSED - SET - failed to set index to non-array\\n\");\n  assert(0 == json_pointer_setf(&jo1, json_object_new_string(\"cod\"), \"%s\", \"\\0\"));\n  json_object_put(jo1);\n}\n\n",
            "calle": [
                "assert",
                "json_object_get_string",
                "json_object_new_int",
                "json_object_new_object",
                "json_object_new_string",
                "json_object_put",
                "json_pointer_set",
                "json_pointer_setf",
                "json_tokener_parse",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int jo2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1 = json_tokener_parse(input_json_str)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_json_str",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_json_pointer",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  test_example_get();\n  test_recursion_get();\n  test_wrong_inputs_get();\n  test_example_set();\n  test_wrong_inputs_set();\n  return 0;\n}\n\n",
            "calle": [
                "test_example_get",
                "test_example_set",
                "test_recursion_get",
                "test_wrong_inputs_get",
                "test_wrong_inputs_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_json_patch_op",
            "header": "",
            "params": [
                "struct json_object *jo"
            ],
            "definition": "void test_json_patch_op(struct json_object *jo)\n{\n  const char *comment = json_object_get_string(json_object_object_get(jo, \"comment\"));\n  struct json_object *doc = json_object_object_get(jo, \"doc\");\n  struct json_object *patch = json_object_object_get(jo, \"patch\");\n  struct json_object *expected = 0;\n  json_bool have_expected = json_object_object_get_ex(jo, \"expected\", &expected);\n  struct json_object *error = json_object_object_get(jo, \"error\");\n  const char *error_s = json_object_get_string(error);\n  struct json_object *res = 0;\n  unsigned int res_idx = 0;\n  int ret;\n  printf(\"Testing '%s', doc '%s' patch '%s' : \", (comment) ? (comment) : (error_s), json_object_get_string(doc), json_object_get_string(patch));\n  if ((!error) && (!have_expected))\n  {\n    printf(\"BAD TEST - no expected or error conditions in test: %s\\n\", json_object_to_json_string(jo));\n    assert(0);\n  }\n  fflush(stdout);\n  struct json_patch_error jperr;\n  if (error)\n  {\n    assert((-1) == json_patch_apply(doc, patch, &(&res[res_idx]), &jperr));\n    assert(jperr.errno_code != 0);\n    printf(\"OK\\n\");\n    printf(\" => json_patch_apply failed as expected: %s at patch idx %zu: %s\\n\", _json_c_strerror(jperr.errno_code), jperr.patch_failure_idx, jperr.errmsg);\n    json_object_put(res);\n  }\n  else\n  {\n    helper_test_json_patch_op_1(&res_idx, &ret, doc, patch, expected, res, jperr);\n  }\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "assert",
                "fflush",
                "helper_test_json_patch_op_1",
                "json_object_get_string",
                "json_object_object_get",
                "json_object_object_get_ex",
                "json_object_put",
                "json_object_to_json_string",
                "json_patch_apply",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comment",
                        "type": "const char *",
                        "definition": [
                            "const char *comment = json_object_get_string(json_object_object_get(jo, \"comment\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *doc = json_object_object_get(jo, \"doc\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *patch = json_object_object_get(jo, \"patch\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *expected = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_expected",
                        "type": "json_bool",
                        "definition": [
                            "json_bool have_expected = json_object_object_get_ex(jo, \"expected\", &expected)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *error = json_object_object_get(jo, \"error\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_s",
                        "type": "const char *",
                        "definition": [
                            "const char *error_s = json_object_get_string(error)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *res = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int res_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jperr",
                        "type": "struct json_patch_error",
                        "definition": [
                            "struct json_patch_error jperr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_json_patch_using_file",
            "header": "",
            "params": [
                "const char *testdir",
                "const char *filename"
            ],
            "definition": "void test_json_patch_using_file(const char *testdir, const char *filename)\n{\n  char full_filename[256];\n  (void) snprintf(full_filename, sizeof(full_filename), \"%s/%s\", testdir, filename);\n  size_t ii;\n  printf(\"Testing using file %s\\n\", filename);\n  json_object *jo = json_object_from_file(full_filename);\n  if (!jo)\n  {\n    fprintf(stderr, \"FAIL: unable to open %s: %s\\n\", full_filename, _json_c_strerror(errno));\n    exit(1);\n  }\n  for (ii = 0; ii < json_object_array_length(jo); ii += 1)\n  {\n    struct json_object *jo1 = json_object_array_get_idx(jo, ii);\n    test_json_patch_op(jo1);\n  }\n\n  json_object_put(jo);\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "exit",
                "fprintf",
                "json_object_array_get_idx",
                "json_object_array_length",
                "json_object_from_file",
                "json_object_put",
                "printf",
                "snprintf",
                "test_json_patch_op"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "full_filename",
                        "type": "char [256]",
                        "definition": [
                            "char full_filename[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "size_t",
                        "definition": [
                            "size_t ii"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jo",
                        "type": "json_object *",
                        "definition": [
                            "json_object *jo = json_object_from_file(full_filename)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *jo1 = json_object_array_get_idx(jo, ii)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_json_patch",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  const char *testdir;\n  unsigned int testdir_idx = 0;\n  if (argc < 2)\n  {\n    fprintf(stderr, \"Usage: %s <testdir>\\n  <testdir> is the location of input files\\n\", argv[0]);\n    return 1;\n  }\n  testdir_idx = argv[1];\n  if (strncmp(json_c_version(), \"0.18.99\", sizeof(\"0.18.99\")))\n  {\n    printf(\"FAIL: Output from json_c_version(): %s does not match %s\", json_c_version(), \"0.18.99\");\n    return 1;\n  }\n  if (json_c_version_num() != (((0 << 16) | (18 << 8)) | 99))\n  {\n    printf(\"FAIL: Output from json_c_version_num(): %d does not match %d\", json_c_version_num(), ((0 << 16) | (18 << 8)) | 99);\n    return 1;\n  }\n  test_json_patch_using_file(testdir, \"json_patch_spec_tests.json\");\n  test_json_patch_using_file(testdir, \"json_patch_tests.json\");\n  return 0;\n}\n\n",
            "calle": [
                "fprintf",
                "json_c_version",
                "json_c_version_num",
                "printf",
                "strncmp",
                "test_json_patch_using_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testdir",
                        "type": "const char *",
                        "definition": [
                            "const char *testdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testdir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int testdir_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_json_patch_op_1",
            "header": "",
            "params": [
                "unsigned int * const res_idx_ref",
                "int * const ret_ref",
                "struct json_object * const doc",
                "struct json_object * const patch",
                "struct json_object * const expected",
                "struct json_object * const res",
                "struct json_patch_error jperr"
            ],
            "definition": "void helper_test_json_patch_op_1(unsigned int * const res_idx_ref, int * const ret_ref, struct json_object * const doc, struct json_object * const patch, struct json_object * const expected, struct json_object * const res, struct json_patch_error jperr)\n{\n  unsigned int res_idx = *res_idx_ref;\n  int ret = *ret_ref;\n  ret = json_patch_apply(doc, patch, &(&res[res_idx]), &jperr);\n  if (ret)\n  {\n    fprintf(stderr, \"json_patch_apply() returned '%d'\\n\", ret);\n    fprintf(stderr, \"Expected: %s\\n\", json_object_get_string(expected));\n    fprintf(stderr, \"Got: %s\\n\", (res) ? (json_object_get_string(res)) : (\"(null)\"));\n    fprintf(stderr, \"json_patch_apply failed: %s at patch idx %zu: %s\\n\", _json_c_strerror(jperr.errno_code), jperr.patch_failure_idx, jperr.errmsg);\n    fflush(stderr);\n    assert(0);\n  }\n  assert(jperr.errno_code == 0);\n  ret = json_object_equal(expected, res);\n  if (ret == 0)\n  {\n    fprintf(stderr, \"json_object_equal() returned '%d'\\n\", ret);\n    fprintf(stderr, \"Expected: %s\\n\", json_object_get_string(expected));\n    fprintf(stderr, \"Got: %s\\n\", json_object_get_string(res));\n    fflush(stderr);\n    assert(0);\n  }\n  json_object_put(res);\n  res_idx = 0;\n  printf(\"OK\\n\");\n  *res_idx_ref = res_idx;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "_json_c_strerror",
                "assert",
                "fflush",
                "fprintf",
                "json_object_equal",
                "json_object_get_string",
                "json_object_put",
                "json_patch_apply",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "res_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const res_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const doc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const patch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const expected"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jperr",
                        "type": "struct json_patch_error",
                        "definition": [
                            "struct json_patch_error jperr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int res_idx = *res_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "usage",
            "header": "static void usage(const char *argv0, int exitval, const char *errmsg)",
            "params": [
                "const char *argv0",
                "int exitval",
                "const char *errmsg"
            ],
            "definition": "static void usage(const char *argv0, int exitval, const char *errmsg)\n{\n  FILE *fp = stdout;\n  unsigned int fp_idx = 0;\n  if (exitval != 0)\n  {\n    fp_idx = stderr;\n  }\n  if (errmsg != 0)\n  {\n    fprintf(fp, \"ERROR: %s\\n\\n\", errmsg);\n  }\n  fprintf(fp, \"Usage: %s [-f|-F <arg>] [-n] [-s]\\n\", argv0);\n  fprintf(fp, \"  -f - Format the output to stdout with JSON_C_TO_STRING_PRETTY (default is JSON_C_TO_STRING_SPACED)\\n\");\n  fprintf(fp, \"  -F - Format the output to stdout with <arg>, e.g. 0 for JSON_C_TO_STRING_PLAIN\\n\");\n  fprintf(fp, \"  -n - No output\\n\");\n  fprintf(fp, \"  -c - color\\n\");\n  fprintf(fp, \"  -s - Parse in strict mode, flags:\\n\");\n  fprintf(fp, \"       JSON_TOKENER_STRICT|JSON_TOKENER_ALLOW_TRAILING_CHARS\\n\");\n  fprintf(fp, \" Diagnostic information will be emitted to stderr\\n\");\n  fprintf(fp, \"\\nWARNING WARNING WARNING\\n\");\n  fprintf(fp, \"This is a prototype, it may change or be removed at any time!\\n\");\n  exit(exitval);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argv0",
                        "type": "const char *",
                        "definition": [
                            "const char *argv0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exitval",
                        "type": "int",
                        "definition": [
                            "int exitval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errmsg",
                        "type": "const char *",
                        "definition": [
                            "const char *errmsg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp = stdout"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fp_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "showmem",
            "header": "static void showmem(void)",
            "params": [
                "void"
            ],
            "definition": "static void showmem(void)\n{\n  struct rusage rusage;\n  memset(&rusage, 0, sizeof(rusage));\n  getrusage(RUSAGE_SELF, &rusage);\n  fprintf(stderr, \"maxrss: %ld KB\\n\", rusage.ru_maxrss);\n}\n\n",
            "calle": [
                "fprintf",
                "getrusage",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rusage",
                        "type": "struct rusage",
                        "definition": [
                            "struct rusage rusage"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parseit",
            "header": "static int parseit(int fd, int (*callback)(struct json_object *))",
            "params": [
                "int fd",
                "int (*callback)(struct json_object *)"
            ],
            "definition": "static int parseit(int fd, int (*callback)(struct json_object *))\n{\n  struct json_object *obj;\n  unsigned int obj_idx = 0;\n  char buf[32768];\n  ssize_t ret;\n  int depth = 32;\n  json_tokener *tok;\n  unsigned int tok_idx = 0;\n  tok_idx = json_tokener_new_ex(depth);\n  if (!(&tok[tok_idx]))\n  {\n    fprintf(stderr, \"unable to allocate json_tokener: %s\\n\", strerror(errno));\n    return 1;\n  }\n  if (strict_mode)\n  {\n    json_tokener_set_flags(tok, 0x01 | 0x02);\n  }\n  size_t total_read = 0;\n  while ((ret = read(fd, buf, sizeof(buf))) > 0)\n  {\n    helper_parseit_1(&obj_idx, &total_read, obj, buf, ret, tok);\n  }\n\n  if (ret < 0)\n  {\n    fprintf(stderr, \"error reading fd %d: %s\\n\", fd, strerror(errno));\n  }\n  json_tokener_free(tok);\n  return 0;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_parseit_1",
                "json_tokener_free",
                "json_tokener_new_ex",
                "json_tokener_set_flags",
                "read",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "callback",
                        "type": "int (*)(struct json_object *)",
                        "definition": [
                            "int (*callback)(struct json_object *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [32768]",
                        "definition": [
                            "char buf[32768]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth = 32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok",
                        "type": "json_tokener *",
                        "definition": [
                            "json_tokener *tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tok_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_read",
                        "type": "size_t",
                        "definition": [
                            "size_t total_read = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strict_mode",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "showobj",
            "header": "static int showobj(struct json_object *new_obj)",
            "params": [
                "struct json_object *new_obj"
            ],
            "definition": "static int showobj(struct json_object *new_obj)\n{\n  if (new_obj == 0)\n  {\n    fprintf(stderr, \"%s: Failed to parse\\n\", fname);\n    return 1;\n  }\n  fprintf(stderr, \"Successfully parsed object from %s\\n\", fname);\n  if (show_output)\n  {\n    const char *output;\n    unsigned int output_idx = 0;\n    output_idx = json_object_to_json_string_ext(new_obj, formatted_output | color);\n    printf(\"%s\\n\", output);\n  }\n  showmem();\n  return 0;\n}\n\n",
            "calle": [
                "fprintf",
                "json_object_to_json_string_ext",
                "printf",
                "showmem"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object *",
                        "definition": [
                            "struct json_object *new_obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "const char *",
                        "definition": [
                            "const char *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fname",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "show_output",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "formatted_output",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#json_parse",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  int opt;\n  while ((opt = getopt(argc, argv, \"fF:hnsc\")) != (-1))\n  {\n    switch (opt)\n    {\n      case 'f':\n        formatted_output = 1 << 1;\n        break;\n\n      case 'F':\n        formatted_output = atoi(optarg);\n        break;\n\n      case 'n':\n        show_output = 0;\n        break;\n\n      case 's':\n        strict_mode = 1;\n        break;\n\n      case 'c':\n        color = 1 << 5;\n        break;\n\n      case 'h':\n        usage(argv[0], 0, 0);\n\n      default:\n        usage(argv[0], 1, \"Unknown arguments\");\n\n    }\n\n  }\n\n  if (optind >= argc)\n  {\n    usage(argv[0], 1, \"Expected argument after options\");\n  }\n  fname = argv[optind];\n  int fd = open(argv[optind], O_RDONLY, 0);\n  showmem();\n  if (parseit(fd, showobj) != 0)\n  {\n    exit(1);\n  }\n  showmem();\n  exit(0);\n}\n\n",
            "calle": [
                "atoi",
                "exit",
                "getopt",
                "open",
                "parseit",
                "showmem",
                "showobj",
                "usage"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt",
                        "type": "int",
                        "definition": [
                            "int opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd = open(argv[optind], O_RDONLY, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "formatted_output",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "show_output",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "strict_mode",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "fname",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parseit_1",
            "header": "",
            "params": [
                "unsigned int * const obj_idx_ref",
                "size_t * const total_read_ref",
                "struct json_object * const obj",
                "char buf[32768]",
                "ssize_t ret",
                "json_tokener * const tok"
            ],
            "definition": "int helper_parseit_1(unsigned int * const obj_idx_ref, size_t * const total_read_ref, struct json_object * const obj, char buf[32768], ssize_t ret, json_tokener * const tok)\n{\n  unsigned int obj_idx = *obj_idx_ref;\n  size_t total_read = *total_read_ref;\n  size_t retu = (size_t) ret;\n  total_read += retu;\n  size_t start_pos = 0;\n  while (start_pos != retu)\n  {\n    helper_helper_parseit_1_1(&obj_idx, &start_pos, obj, buf, tok, total_read, retu);\n  }\n\n  *obj_idx_ref = obj_idx;\n  *total_read_ref = total_read;\n}\n\n",
            "calle": [
                "helper_helper_parseit_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_read_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const total_read_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [32768]",
                        "definition": [
                            "char buf[32768]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok",
                        "type": "json_tokener * const",
                        "definition": [
                            "json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = *obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_read",
                        "type": "size_t",
                        "definition": [
                            "size_t total_read = *total_read_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retu",
                        "type": "size_t",
                        "definition": [
                            "size_t retu = (size_t) ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t start_pos = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_parseit_1_1",
            "header": "",
            "params": [
                "unsigned int * const obj_idx_ref",
                "size_t * const start_pos_ref",
                "struct json_object * const obj",
                "char buf[32768]",
                "json_tokener * const tok",
                "size_t total_read",
                "size_t retu"
            ],
            "definition": "int helper_helper_parseit_1_1(unsigned int * const obj_idx_ref, size_t * const start_pos_ref, struct json_object * const obj, char buf[32768], json_tokener * const tok, size_t total_read, size_t retu)\n{\n  unsigned int obj_idx = *obj_idx_ref;\n  size_t start_pos = *start_pos_ref;\n  obj_idx = json_tokener_parse_ex(tok, &buf[start_pos], retu - start_pos);\n  enum json_tokener_error jerr = json_tokener_get_error(tok);\n  size_t parse_end = tok->char_offset;\n  if (((&obj[obj_idx]) == 0) && (jerr != json_tokener_continue))\n  {\n    const char *aterr = ((start_pos + parse_end) < ((int) (sizeof(buf)))) ? (&buf[start_pos + parse_end]) : (\"\");\n    fflush(stdout);\n    size_t fail_offset = ((total_read - retu) + start_pos) + parse_end;\n    fprintf(stderr, \"Failed at offset %lu: %s %c\\n\", (unsigned long) fail_offset, json_tokener_error_desc(jerr), aterr[0]);\n    json_tokener_free(tok);\n    return 1;\n  }\n  if ((&obj[obj_idx]) != 0)\n  {\n    int cb_ret = callback(obj);\n    json_object_put(obj);\n    if (cb_ret != 0)\n    {\n      json_tokener_free(tok);\n      return 1;\n    }\n  }\n  start_pos += tok->char_offset;\n  assert(start_pos <= retu);\n  *obj_idx_ref = obj_idx;\n  *start_pos_ref = start_pos;\n}\n\n",
            "calle": [
                "assert",
                "callback",
                "fflush",
                "fprintf",
                "json_object_put",
                "json_tokener_error_desc",
                "json_tokener_free",
                "json_tokener_get_error",
                "json_tokener_parse_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct json_object",
                        "type": "struct json_object * const",
                        "definition": [
                            "struct json_object * const obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [32768]",
                        "definition": [
                            "char buf[32768]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tok",
                        "type": "json_tokener * const",
                        "definition": [
                            "json_tokener * const tok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_read",
                        "type": "size_t",
                        "definition": [
                            "size_t total_read"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retu",
                        "type": "size_t",
                        "definition": [
                            "size_t retu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = *obj_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t start_pos = *start_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jerr",
                        "type": "enum json_tokener_error",
                        "definition": [
                            "enum json_tokener_error jerr = json_tokener_get_error(tok)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parse_end",
                        "type": "size_t",
                        "definition": [
                            "size_t parse_end = tok->char_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aterr",
                        "type": "const char *",
                        "definition": [
                            "const char *aterr = ((start_pos + parse_end) < ((int) (sizeof(buf)))) ? (&buf[start_pos + parse_end]) : (\"\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fail_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t fail_offset = ((total_read - retu) + start_pos) + parse_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_ret",
                        "type": "int",
                        "definition": [
                            "int cb_ret = callback(obj)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef int json_bool"
    ]
}