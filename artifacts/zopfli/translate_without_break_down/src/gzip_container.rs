use crate::*;
use lazy_static::lazy_static;
use std::io::Write;
use std::io;


pub fn CRC(data: Option<&[u8]>) -> Option<u32> {
    // Check if input is None (equivalent to NULL check in C)
    let data = data?;

    let mut result = 0xffffffffu32;
    
    for &byte in data {
        result = CRC32_TABLE[((result ^ u32::from(byte)) & 0xff) as usize] ^ (result >> 8);
    }

    Some(result ^ 0xffffffffu32)
}

lazy_static! {
    pub static ref CRC32_TABLE: [u32; 256] = [
        0u32, 1996959894u32, 3993919788u32, 2567524794u32, 124634137u32, 1886057615u32, 3915621685u32, 2657392035u32,
        249268274u32, 2044508324u32, 3772115230u32, 2547177864u32, 162941995u32, 2125561021u32, 3887607047u32, 2428444049u32,
        498536548u32, 1789927666u32, 4089016648u32, 2227061214u32, 450548861u32, 1843258603u32, 4107580753u32, 2211677639u32,
        325883990u32, 1684777152u32, 4251122042u32, 2321926636u32, 335633487u32, 1661365465u32, 4195302755u32, 2366115317u32,
        997073096u32, 1281953886u32, 3579855332u32, 2724688242u32, 1006888145u32, 1258607687u32, 3524101629u32, 2768942443u32,
        901097722u32, 1119000684u32, 3686517206u32, 2898065728u32, 853044451u32, 1172266101u32, 3705015759u32, 2882616665u32,
        651767980u32, 1373503546u32, 3369554304u32, 3218104598u32, 565507253u32, 1454621731u32, 3485111705u32, 3099436303u32,
        671266974u32, 1594198024u32, 3322730930u32, 2970347812u32, 795835527u32, 1483230225u32, 3244367275u32, 3060149565u32,
        1994146192u32, 31158534u32, 2563907772u32, 4023717930u32, 1907459465u32, 112637215u32, 2680153253u32, 3904427059u32,
        2013776290u32, 251722036u32, 2517215374u32, 3775830040u32, 2137656763u32, 141376813u32, 2439277719u32, 3865271297u32,
        1802195444u32, 476864866u32, 2238001368u32, 4066508878u32, 1812370925u32, 453092731u32, 2181625025u32, 4111451223u32,
        1706088902u32, 314042704u32, 2344532202u32, 4240017532u32, 1658658271u32, 366619977u32, 2362670323u32, 4224994405u32,
        1303535960u32, 984961486u32, 2747007092u32, 3569037538u32, 1256170817u32, 1037604311u32, 2765210733u32, 3554079995u32,
        1131014506u32, 879679996u32, 2909243462u32, 3663771856u32, 1141124467u32, 855842277u32, 2852801631u32, 3708648649u32,
        1342533948u32, 654459306u32, 3188396048u32, 3373015174u32, 1466479909u32, 544179635u32, 3110523913u32, 3462522015u32,
        1591671054u32, 702138776u32, 2966460450u32, 3352799412u32, 1504918807u32, 783551873u32, 3082640443u32, 3233442989u32,
        3988292384u32, 2596254646u32, 62317068u32, 1957810842u32, 3939845945u32, 2647816111u32, 81470997u32, 1943803523u32,
        3814918930u32, 2489596804u32, 225274430u32, 2053790376u32, 3826175755u32, 2466906013u32, 167816743u32, 2097651377u32,
        4027552580u32, 2265490386u32, 503444072u32, 1762050814u32, 4150417245u32, 2154129355u32, 426522225u32, 1852507879u32,
        4275313526u32, 2312317920u32, 282753626u32, 1742555852u32, 4189708143u32, 2394877945u32, 397917763u32, 1622183637u32,
        3604390888u32, 2714866558u32, 953729732u32, 1340076626u32, 3518719985u32, 2797360999u32, 1068828381u32, 1219638859u32,
        3624741850u32, 2936675148u32, 906185462u32, 1090812512u32, 3747672003u32, 2825379669u32, 829329135u32, 1181335161u32,
        3412177804u32, 3160834842u32, 628085408u32, 1382605366u32, 3423369109u32, 3138078467u32, 570562233u32, 1426400815u32,
        3317316542u32, 2998733608u32, 733239954u32, 1555261956u32, 3268935591u32, 3050360625u32, 752459403u32, 1541320221u32,
        2607071920u32, 3965973030u32, 1969922972u32, 40735498u32, 2617837225u32, 3943577151u32, 1913087877u32, 83908371u32,
        2512341634u32, 3803740692u32, 2075208622u32, 213261112u32, 2463272603u32, 3855990285u32, 2094854071u32, 198958881u32,
        2262029012u32, 4057260610u32, 1759359992u32, 534414190u32, 2176718541u32, 4139329115u32, 1873836001u32, 414664567u32,
        2282248934u32, 4279200368u32, 1711684554u32, 285281116u32, 2405801727u32, 4167216745u32, 1634467795u32, 376229701u32,
        2685067896u32, 3608007406u32, 1308918612u32, 956543938u32, 2808555105u32, 3495958263u32, 1231636301u32, 1047427035u32,
        2932959818u32, 3654703836u32, 1088359270u32, 936918000u32, 2847714899u32, 3736837829u32, 1202900863u32, 817233897u32,
        3183342108u32, 3401237130u32, 1404277552u32, 615818150u32, 3134207493u32, 3453421203u32, 1423857449u32, 601450431u32,
        3009837614u32, 3294710456u32, 1567103746u32, 711928724u32, 3020668471u32, 3272380065u32, 1510334235u32, 755167117u32
    ];
}
pub fn ZopfliGzipCompress(
    options: &ZopfliOptions,
    in_data: Option<&[u8]>,
    out: &mut Vec<u8>,
) -> io::Result<()> {
    let insize = in_data.map(|d| d.len()).unwrap_or(0);
    let crcvalue = CRC(in_data).unwrap_or(0);
    let mut bp = 0u8;
    let mut outsize = out.len();

    // Helper macro to push bytes to the output vector
    macro_rules! push_byte {
        ($byte:expr) => {
            out.push($byte);
            outsize += 1;
        };
    }

    // Gzip header bytes
    push_byte!(31);
    push_byte!(139);
    push_byte!(8);
    push_byte!(0);
    push_byte!(0);
    push_byte!(0);
    push_byte!(0);
    push_byte!(0);
    push_byte!(2);
    push_byte!(3);

    // Compress the data
    let mut output_vec = Some(out.clone());
    ZopfliDeflate(
        options,
        2,
        true,
        in_data.unwrap_or(&[]),
        &mut bp,
        &mut output_vec,
        &mut outsize,
    );
    if let Some(new_vec) = output_vec {
        *out = new_vec;
    }

    // CRC and size footer
    push_byte!((crcvalue % 256) as u8);
    push_byte!(((crcvalue >> 8) % 256) as u8);
    push_byte!(((crcvalue >> 16) % 256) as u8);
    push_byte!(((crcvalue >> 24) % 256) as u8);
    push_byte!((insize % 256) as u8);
    push_byte!(((insize >> 8) % 256) as u8);
    push_byte!(((insize >> 16) % 256) as u8);
    push_byte!(((insize >> 24) % 256) as u8);

    if options.verbose != 0 {
        let compression = if insize > 0 {
            100.0 * (insize as f64 - outsize as f64) / insize as f64
        } else {
            0.0
        };
        eprintln!(
            "Original Size: {}, Gzip: {}, Compression: {:.2}% Removed",
            insize, outsize, compression
        );
    }

    Ok(())
}
