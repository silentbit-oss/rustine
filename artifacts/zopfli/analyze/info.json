{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ZopfliLongestMatchCache\n{\n  unsigned short *length;\n  unsigned short *dist;\n  unsigned char *sublen;\n} ZopfliLongestMatchCache",
            "name": "ZopfliLongestMatchCache",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *sublen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ZopfliHash\n{\n  int *head;\n  unsigned short *prev;\n  int *hashval;\n  int val;\n  int *head2;\n  unsigned short *prev2;\n  int *hashval2;\n  int val2;\n  unsigned short *same;\n} ZopfliHash",
            "name": "ZopfliHash",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "head",
                        "type": "int *",
                        "definition": [
                            "int *head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *prev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hashval",
                        "type": "int *",
                        "definition": [
                            "int *hashval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head2",
                        "type": "int *",
                        "definition": [
                            "int *head2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev2",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *prev2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hashval2",
                        "type": "int *",
                        "definition": [
                            "int *hashval2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val2",
                        "type": "int",
                        "definition": [
                            "int val2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "same",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *same"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ZopfliOptions\n{\n  int verbose;\n  int verbose_more;\n  int numiterations;\n  int blocksplitting;\n  int blocksplittinglast;\n  int blocksplittingmax;\n} ZopfliOptions",
            "name": "ZopfliOptions",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "verbose",
                        "type": "int",
                        "definition": [
                            "int verbose"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbose_more",
                        "type": "int",
                        "definition": [
                            "int verbose_more"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numiterations",
                        "type": "int",
                        "definition": [
                            "int numiterations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksplitting",
                        "type": "int",
                        "definition": [
                            "int blocksplitting"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksplittinglast",
                        "type": "int",
                        "definition": [
                            "int blocksplittinglast"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksplittingmax",
                        "type": "int",
                        "definition": [
                            "int blocksplittingmax"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  ZOPFLI_FORMAT_GZIP,\n  ZOPFLI_FORMAT_ZLIB,\n  ZOPFLI_FORMAT_DEFLATE\n} ZopfliFormat",
            "name": "ZopfliFormat",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ZopfliLZ77Store\n{\n  unsigned short *litlens;\n  unsigned short *dists;\n  size_t size;\n  const unsigned char *data;\n  size_t *pos;\n  unsigned short *ll_symbol;\n  unsigned short *d_symbol;\n  size_t *ll_counts;\n  size_t *d_counts;\n} ZopfliLZ77Store",
            "name": "ZopfliLZ77Store",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "litlens",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *litlens"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dists",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *dists"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t *",
                        "definition": [
                            "size_t *pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_symbol",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *ll_symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_symbol",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *d_symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *ll_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *d_counts"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ZopfliBlockState\n{\n  const ZopfliOptions *options;\n  ZopfliLongestMatchCache *lmc;\n  size_t blockstart;\n  size_t blockend;\n} ZopfliBlockState",
            "name": "ZopfliBlockState",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "ZopfliLongestMatchCache *",
                        "definition": [
                            "ZopfliLongestMatchCache *lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockstart",
                        "type": "size_t",
                        "definition": [
                            "size_t blockstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockend",
                        "type": "size_t",
                        "definition": [
                            "size_t blockend"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef double FindMinimumFun(size_t i, void *context)",
            "name": "FindMinimumFun",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct SplitCostContext\n{\n  const ZopfliLZ77Store *lz77;\n  size_t start;\n  size_t end;\n} SplitCostContext",
            "name": "SplitCostContext",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct Node\n{\n  size_t weight;\n  Node *tail;\n  int count;\n}",
            "name": "Node",
            "names": [
                "typedef struct Node Node"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "weight",
                        "type": "size_t",
                        "definition": [
                            "size_t weight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tail",
                        "type": "Node *",
                        "definition": [
                            "Node *tail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct NodePool\n{\n  Node *next;\n} NodePool",
            "name": "NodePool",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next",
                        "type": "Node *",
                        "definition": [
                            "Node *next"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct SymbolStats\n{\n  size_t litlens[288];\n  size_t dists[32];\n  double ll_symbols[288];\n  double d_symbols[32];\n} SymbolStats",
            "name": "SymbolStats",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "litlens",
                        "type": "size_t [288]",
                        "definition": [
                            "size_t litlens[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dists",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t dists[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_symbols",
                        "type": "double [288]",
                        "definition": [
                            "double ll_symbols[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_symbols",
                        "type": "double [32]",
                        "definition": [
                            "double d_symbols[32]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct RanState\n{\n  unsigned int m_w;\n  unsigned int m_z;\n} RanState",
            "name": "RanState",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_w",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int m_w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_z",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int m_z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef double CostModelFun(unsigned litlen, unsigned dist, void *context)",
            "name": "CostModelFun",
            "names": []
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "crc32_table",
            "type": "const unsigned long [256]",
            "definition": [
                "static const unsigned long crc32_table[256] = {0u, 1996959894u, 3993919788u, 2567524794u, 124634137u, 1886057615u, 3915621685u, 2657392035u, 249268274u, 2044508324u, 3772115230u, 2547177864u, 162941995u, 2125561021u, 3887607047u, 2428444049u, 498536548u, 1789927666u, 4089016648u, 2227061214u, 450548861u, 1843258603u, 4107580753u, 2211677639u, 325883990u, 1684777152u, 4251122042u, 2321926636u, 335633487u, 1661365465u, 4195302755u, 2366115317u, 997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u, 901097722u, 1119000684u, 3686517206u, 2898065728u, 853044451u, 1172266101u, 3705015759u, 2882616665u, 651767980u, 1373503546u, 3369554304u, 3218104598u, 565507253u, 1454621731u, 3485111705u, 3099436303u, 671266974u, 1594198024u, 3322730930u, 2970347812u, 795835527u, 1483230225u, 3244367275u, 3060149565u, 1994146192u, 31158534u, 2563907772u, 4023717930u, 1907459465u, 112637215u, 2680153253u, 3904427059u, 2013776290u, 251722036u, 2517215374u, 3775830040u, 2137656763u, 141376813u, 2439277719u, 3865271297u, 1802195444u, 476864866u, 2238001368u, 4066508878u, 1812370925u, 453092731u, 2181625025u, 4111451223u, 1706088902u, 314042704u, 2344532202u, 4240017532u, 1658658271u, 366619977u, 2362670323u, 4224994405u, 1303535960u, 984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u, 1131014506u, 879679996u, 2909243462u, 3663771856u, 1141124467u, 855842277u, 2852801631u, 3708648649u, 1342533948u, 654459306u, 3188396048u, 3373015174u, 1466479909u, 544179635u, 3110523913u, 3462522015u, 1591671054u, 702138776u, 2966460450u, 3352799412u, 1504918807u, 783551873u, 3082640443u, 3233442989u, 3988292384u, 2596254646u, 62317068u, 1957810842u, 3939845945u, 2647816111u, 81470997u, 1943803523u, 3814918930u, 2489596804u, 225274430u, 2053790376u, 3826175755u, 2466906013u, 167816743u, 2097651377u, 4027552580u, 2265490386u, 503444072u, 1762050814u, 4150417245u, 2154129355u, 426522225u, 1852507879u, 4275313526u, 2312317920u, 282753626u, 1742555852u, 4189708143u, 2394877945u, 397917763u, 1622183637u, 3604390888u, 2714866558u, 953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u, 3624741850u, 2936675148u, 906185462u, 1090812512u, 3747672003u, 2825379669u, 829329135u, 1181335161u, 3412177804u, 3160834842u, 628085408u, 1382605366u, 3423369109u, 3138078467u, 570562233u, 1426400815u, 3317316542u, 2998733608u, 733239954u, 1555261956u, 3268935591u, 3050360625u, 752459403u, 1541320221u, 2607071920u, 3965973030u, 1969922972u, 40735498u, 2617837225u, 3943577151u, 1913087877u, 83908371u, 2512341634u, 3803740692u, 2075208622u, 213261112u, 2463272603u, 3855990285u, 2094854071u, 198958881u, 2262029012u, 4057260610u, 1759359992u, 534414190u, 2176718541u, 4139329115u, 1873836001u, 414664567u, 2282248934u, 4279200368u, 1711684554u, 285281116u, 2405801727u, 4167216745u, 1634467795u, 376229701u, 2685067896u, 3608007406u, 1308918612u, 956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u, 2932959818u, 3654703836u, 1088359270u, 936918000u, 2847714899u, 3736837829u, 1202900863u, 817233897u, 3183342108u, 3401237130u, 1404277552u, 615818150u, 3134207493u, 3453421203u, 1423857449u, 601450431u, 3009837614u, 3294710456u, 1567103746u, 711928724u, 3020668471u, 3272380065u, 1510334235u, 755167117u}"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "ZopfliBlockSplitLZ77",
            "header": "void ZopfliBlockSplitLZ77(const ZopfliOptions *options, const ZopfliLZ77Store *lz77, size_t maxblocks, size_t **splitpoints, size_t *npoints)",
            "params": [
                "const ZopfliOptions *options",
                "const ZopfliLZ77Store *lz77",
                "size_t maxblocks",
                "size_t **splitpoints",
                "size_t *npoints"
            ],
            "definition": "void ZopfliBlockSplitLZ77(const ZopfliOptions *options, const ZopfliLZ77Store *lz77, size_t maxblocks, size_t **splitpoints, size_t *npoints)\n{\n  size_t lstart;\n  size_t lend;\n  size_t i;\n  size_t llpos = 0;\n  size_t numblocks = 1;\n  unsigned char *done;\n  unsigned int done_idx = 0;\n  double splitcost;\n  double origcost;\n  if (lz77->size < 10)\n  {\n    return;\n  }\n  done_idx = (unsigned char *) malloc(lz77->size);\n  if (!(&done[done_idx]))\n  {\n    exit(-1);\n  }\n  for (i = 0; i < lz77->size; i += 1)\n    done[i + done_idx] = 0;\n\n  lstart = 0;\n  lend = lz77->size;\n  for (;;)\n  {\n    helper_ZopfliBlockSplitLZ77_1(&lstart, &llpos, &numblocks, &done_idx, &origcost, lz77, maxblocks, splitpoints, npoints, lend, done, splitcost);\n  }\n\n  if (options->verbose)\n  {\n    PrintBlockSplitPoints(lz77, *splitpoints, *npoints);\n  }\n  free(done);\n}\n\n",
            "calle": [
                "PrintBlockSplitPoints",
                "exit",
                "free",
                "helper_ZopfliBlockSplitLZ77_1",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxblocks",
                        "type": "size_t",
                        "definition": [
                            "size_t maxblocks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t **",
                        "definition": [
                            "size_t **splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llpos",
                        "type": "size_t",
                        "definition": [
                            "size_t llpos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numblocks",
                        "type": "size_t",
                        "definition": [
                            "size_t numblocks = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *done"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int done_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitcost",
                        "type": "double",
                        "definition": [
                            "double splitcost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origcost",
                        "type": "double",
                        "definition": [
                            "double origcost"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliBlockSplit",
            "header": "void ZopfliBlockSplit(const ZopfliOptions *options, const unsigned char *in, size_t instart, size_t inend, size_t maxblocks, size_t **splitpoints, size_t *npoints)",
            "params": [
                "const ZopfliOptions *options",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "size_t maxblocks",
                "size_t **splitpoints",
                "size_t *npoints"
            ],
            "definition": "void ZopfliBlockSplit(const ZopfliOptions *options, const unsigned char *in, size_t instart, size_t inend, size_t maxblocks, size_t **splitpoints, size_t *npoints)\n{\n  size_t pos = 0;\n  size_t i;\n  ZopfliBlockState s;\n  size_t *lz77splitpoints = 0;\n  size_t nlz77points = 0;\n  ZopfliLZ77Store store;\n  ZopfliHash hash;\n  ZopfliHash *h = &hash;\n  ZopfliInitLZ77Store(in, &store);\n  ZopfliInitBlockState(options, instart, inend, 0, &s);\n  ZopfliAllocHash(32768, h);\n  *npoints = 0;\n  *splitpoints = 0;\n  ZopfliLZ77Greedy(&s, in, instart, inend, &store, h);\n  ZopfliBlockSplitLZ77(options, &store, maxblocks, &lz77splitpoints, &nlz77points);\n  pos = instart;\n  if (nlz77points > 0)\n  {\n    helper_ZopfliBlockSplit_1(&pos, &i, splitpoints, npoints, lz77splitpoints, nlz77points, store);\n  }\n  assert((*npoints) == nlz77points);\n  free(lz77splitpoints);\n  ZopfliCleanBlockState(&s);\n  ZopfliCleanLZ77Store(&store);\n  ZopfliCleanHash(h);\n}\n\n",
            "calle": [
                "ZopfliAllocHash",
                "ZopfliBlockSplitLZ77",
                "ZopfliCleanBlockState",
                "ZopfliCleanHash",
                "ZopfliCleanLZ77Store",
                "ZopfliInitBlockState",
                "ZopfliInitLZ77Store",
                "ZopfliLZ77Greedy",
                "assert",
                "free",
                "helper_ZopfliBlockSplit_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxblocks",
                        "type": "size_t",
                        "definition": [
                            "size_t maxblocks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t **",
                        "definition": [
                            "size_t **splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState",
                        "definition": [
                            "ZopfliBlockState s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77splitpoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *lz77splitpoints = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlz77points",
                        "type": "size_t",
                        "definition": [
                            "size_t nlz77points = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "ZopfliHash",
                        "definition": [
                            "ZopfliHash hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h = &hash"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliBlockSplitSimple",
            "header": "void ZopfliBlockSplitSimple(const unsigned char *in, size_t instart, size_t inend, size_t blocksize, size_t **splitpoints, size_t *npoints)",
            "params": [
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "size_t blocksize",
                "size_t **splitpoints",
                "size_t *npoints"
            ],
            "definition": "void ZopfliBlockSplitSimple(const unsigned char *in, size_t instart, size_t inend, size_t blocksize, size_t **splitpoints, size_t *npoints)\n{\n  size_t i = instart;\n  while (i < inend)\n  {\n    {\n      if (!((*npoints) & ((*npoints) - 1)))\n      {\n        *splitpoints = ((*npoints) == 0) ? (malloc(sizeof(*(*splitpoints)))) : (realloc(*splitpoints, ((*npoints) * 2) * (sizeof(*(*splitpoints)))));\n      }\n      (*splitpoints)[*npoints] = i;\n      *npoints += 1;\n    }\n    ;\n    i += blocksize;\n  }\n\n  (void) in;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t **",
                        "definition": [
                            "size_t **splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = instart"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "FindMinimum",
            "header": "",
            "params": [
                "FindMinimumFun f",
                "void *context",
                "size_t start",
                "size_t end",
                "double *smallest"
            ],
            "definition": "static size_t FindMinimum(FindMinimumFun f, void *context, size_t start, size_t end, double *smallest)\n{\n  if ((end - start) < 1024)\n  {\n    helper_FindMinimum_1(context, start, end, smallest);\n  }\n  else\n  {\n    helper_FindMinimum_2(&start, &end, context, smallest);\n  }\n}\n\n",
            "calle": [
                "helper_FindMinimum_1",
                "helper_FindMinimum_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "f",
                        "type": "FindMinimumFun",
                        "definition": [
                            "FindMinimumFun f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "context",
                        "type": "void *",
                        "definition": [
                            "void *context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallest",
                        "type": "double *",
                        "definition": [
                            "double *smallest"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "EstimateCost",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "static double EstimateCost(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  return ZopfliCalculateBlockSizeAutoType(lz77, lstart, lend);\n}\n\n",
            "calle": [
                "ZopfliCalculateBlockSizeAutoType"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "SplitCost",
            "header": "",
            "params": [
                "size_t i",
                "void *context"
            ],
            "definition": "static double SplitCost(size_t i, void *context)\n{\n  SplitCostContext *c = (SplitCostContext *) context;\n  return EstimateCost(c->lz77, c->start, i) + EstimateCost(c->lz77, i, c->end);\n}\n\n",
            "calle": [
                "EstimateCost"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "context",
                        "type": "void *",
                        "definition": [
                            "void *context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "SplitCostContext *",
                        "definition": [
                            "SplitCostContext *c = (SplitCostContext *) context"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddSorted",
            "header": "",
            "params": [
                "size_t value",
                "size_t **out",
                "size_t *outsize"
            ],
            "definition": "static void AddSorted(size_t value, size_t **out, size_t *outsize)\n{\n  size_t i;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = value;\n    *outsize += 1;\n  }\n  ;\n  for (i = 0; (i + 1) < (*outsize); i += 1)\n  {\n    if ((*out)[i] > value)\n    {\n      size_t j;\n      for (j = (*outsize) - 1; j > i; j -= 1)\n      {\n        (*out)[j] = (*out)[j - 1];\n      }\n\n      (*out)[i] = value;\n      break;\n    }\n  }\n\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "size_t",
                        "definition": [
                            "size_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "size_t **",
                        "definition": [
                            "size_t **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "PrintBlockSplitPoints",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "const size_t *lz77splitpoints",
                "size_t nlz77points"
            ],
            "definition": "static void PrintBlockSplitPoints(const ZopfliLZ77Store *lz77, const size_t *lz77splitpoints, size_t nlz77points)\n{\n  size_t *splitpoints = 0;\n  size_t npoints = 0;\n  size_t i;\n  size_t pos = 0;\n  if (nlz77points > 0)\n  {\n    helper_PrintBlockSplitPoints_1(&npoints, &i, &pos, lz77, lz77splitpoints, nlz77points, splitpoints);\n  }\n  assert(npoints == nlz77points);\n  fprintf(stderr, \"block split points: \");\n  for (i = 0; i < npoints; i += 1)\n  {\n    fprintf(stderr, \"%d \", (int) splitpoints[i]);\n  }\n\n  fprintf(stderr, \"(hex:\");\n  for (i = 0; i < npoints; i += 1)\n  {\n    fprintf(stderr, \" %x\", (int) splitpoints[i]);\n  }\n\n  fprintf(stderr, \")\\n\");\n  free(splitpoints);\n}\n\n",
            "calle": [
                "assert",
                "fprintf",
                "free",
                "helper_PrintBlockSplitPoints_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77splitpoints",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *lz77splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlz77points",
                        "type": "size_t",
                        "definition": [
                            "size_t nlz77points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *splitpoints = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "FindLargestSplittableBlock",
            "header": "",
            "params": [
                "size_t lz77size",
                "const unsigned char *done",
                "const size_t *splitpoints",
                "size_t npoints",
                "size_t *lstart",
                "size_t *lend"
            ],
            "definition": "static int FindLargestSplittableBlock(size_t lz77size, const unsigned char *done, const size_t *splitpoints, size_t npoints, size_t *lstart, size_t *lend)\n{\n  size_t longest = 0;\n  int found = 0;\n  size_t i;\n  for (i = 0; i <= npoints; i += 1)\n  {\n    size_t start = (i == 0) ? (0) : (splitpoints[i - 1]);\n    size_t end = (i == npoints) ? (lz77size - 1) : (splitpoints[i]);\n    if ((!done[start]) && ((end - start) > longest))\n    {\n      *lstart = start;\n      *lend = end;\n      found = 1;\n      longest = end - start;\n    }\n  }\n\n  return found;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77size",
                        "type": "size_t",
                        "definition": [
                            "size_t lz77size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *done"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t *",
                        "definition": [
                            "size_t *lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t *",
                        "definition": [
                            "size_t *lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "longest",
                        "type": "size_t",
                        "definition": [
                            "size_t longest = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "int",
                        "definition": [
                            "int found = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = (i == 0) ? (0) : (splitpoints[i - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = (i == npoints) ? (lz77size - 1) : (splitpoints[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_FindMinimum_1",
            "header": "",
            "params": [
                "void * const context",
                "size_t start",
                "size_t end",
                "double * const smallest"
            ],
            "definition": "size_t helper_FindMinimum_1(void * const context, size_t start, size_t end, double * const smallest)\n{\n  double best = 1e30;\n  size_t result = start;\n  size_t i;\n  for (i = start; i < end; i += 1)\n  {\n    double v = f(i, context);\n    if (v < best)\n    {\n      best = v;\n      result = i;\n    }\n  }\n\n  *smallest = best;\n  return result;\n}\n\n",
            "calle": [
                "f"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "context",
                        "type": "void * const",
                        "definition": [
                            "void * const context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallest",
                        "type": "double * const",
                        "definition": [
                            "double * const smallest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "double",
                        "definition": [
                            "double best = 1e30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "double",
                        "definition": [
                            "double v = f(i, context)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_FindMinimum_2",
            "header": "",
            "params": [
                "size_t * const start_ref",
                "size_t * const end_ref",
                "void * const context",
                "double * const smallest"
            ],
            "definition": "size_t helper_FindMinimum_2(size_t * const start_ref, size_t * const end_ref, void * const context, double * const smallest)\n{\n  size_t start = *start_ref;\n  size_t end = *end_ref;\n  size_t i;\n  size_t p[9];\n  double vp[9];\n  size_t besti;\n  double best;\n  double lastbest = 1e30;\n  size_t pos = start;\n  for (;;)\n  {\n    helper_helper_FindMinimum_2_1(&start, &end, &i, &besti, &best, &lastbest, &pos, context, p, vp);\n  }\n\n  *smallest = lastbest;\n  return pos;\n  *start_ref = start;\n  *end_ref = end;\n}\n\n",
            "calle": [
                "helper_helper_FindMinimum_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "context",
                        "type": "void * const",
                        "definition": [
                            "void * const context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smallest",
                        "type": "double * const",
                        "definition": [
                            "double * const smallest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = *start_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "size_t [9]",
                        "definition": [
                            "size_t p[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vp",
                        "type": "double [9]",
                        "definition": [
                            "double vp[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besti",
                        "type": "size_t",
                        "definition": [
                            "size_t besti"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "double",
                        "definition": [
                            "double best"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbest",
                        "type": "double",
                        "definition": [
                            "double lastbest = 1e30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = start"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_PrintBlockSplitPoints_1",
            "header": "",
            "params": [
                "size_t * const npoints_ref",
                "size_t * const i_ref",
                "size_t * const pos_ref",
                "const ZopfliLZ77Store * const lz77",
                "const size_t * const lz77splitpoints",
                "size_t nlz77points",
                "size_t * const splitpoints"
            ],
            "definition": "void helper_PrintBlockSplitPoints_1(size_t * const npoints_ref, size_t * const i_ref, size_t * const pos_ref, const ZopfliLZ77Store * const lz77, const size_t * const lz77splitpoints, size_t nlz77points, size_t * const splitpoints)\n{\n  size_t npoints = *npoints_ref;\n  size_t i = *i_ref;\n  size_t pos = *pos_ref;\n  for (i = 0; i < lz77->size; i += 1)\n  {\n    size_t length = (lz77->dists[i] == 0) ? (1) : (lz77->litlens[i]);\n    if (lz77splitpoints[npoints] == i)\n    {\n      {\n        if (!((*(&npoints)) & ((*(&npoints)) - 1)))\n        {\n          splitpoints = (npoints == 0) ? (malloc(sizeof(*(*(&splitpoints))))) : (realloc(*(&splitpoints), (npoints * 2) * (sizeof(*(*(&splitpoints))))));\n        }\n        splitpoints[npoints] = pos;\n        npoints += 1;\n      }\n      ;\n      if (npoints == nlz77points)\n      {\n        break;\n      }\n    }\n    pos += length;\n  }\n\n  *npoints_ref = npoints;\n  *i_ref = i;\n  *pos_ref = pos;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "npoints_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const npoints_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store * const",
                        "definition": [
                            "const ZopfliLZ77Store * const lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77splitpoints",
                        "type": "const size_t * const",
                        "definition": [
                            "const size_t * const lz77splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlz77points",
                        "type": "size_t",
                        "definition": [
                            "size_t nlz77points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints = *npoints_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = (lz77->dists[i] == 0) ? (1) : (lz77->litlens[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliBlockSplitLZ77_1",
            "header": "",
            "params": [
                "size_t * const lstart_ref",
                "size_t * const llpos_ref",
                "size_t * const numblocks_ref",
                "unsigned int * const done_idx_ref",
                "double * const origcost_ref",
                "const ZopfliLZ77Store * const lz77",
                "size_t maxblocks",
                "size_t ** const splitpoints",
                "size_t * const npoints",
                "size_t lend",
                "unsigned char * const done",
                "double splitcost"
            ],
            "definition": "void helper_ZopfliBlockSplitLZ77_1(size_t * const lstart_ref, size_t * const llpos_ref, size_t * const numblocks_ref, unsigned int * const done_idx_ref, double * const origcost_ref, const ZopfliLZ77Store * const lz77, size_t maxblocks, size_t ** const splitpoints, size_t * const npoints, size_t lend, unsigned char * const done, double splitcost)\n{\n  size_t lstart = *lstart_ref;\n  size_t llpos = *llpos_ref;\n  size_t numblocks = *numblocks_ref;\n  unsigned int done_idx = *done_idx_ref;\n  double origcost = *origcost_ref;\n  SplitCostContext c;\n  if ((maxblocks > 0) && (numblocks >= maxblocks))\n  {\n    break;\n  }\n  c.lz77 = lz77;\n  c.start = lstart;\n  c.end = lend;\n  assert(lstart < lend);\n  llpos = FindMinimum(SplitCost, &c, lstart + 1, lend, &splitcost);\n  assert(llpos > lstart);\n  assert(llpos < lend);\n  origcost = EstimateCost(lz77, lstart, lend);\n  if (((splitcost > origcost) || (llpos == (lstart + 1))) || (llpos == lend))\n  {\n    done[lstart + done_idx] = 1;\n  }\n  else\n  {\n    AddSorted(llpos, splitpoints, npoints);\n    numblocks += 1;\n  }\n  if (!FindLargestSplittableBlock(lz77->size, done, *splitpoints, *npoints, &lstart, &lend))\n  {\n    break;\n  }\n  if ((lend - lstart) < 10)\n  {\n    break;\n  }\n  *lstart_ref = lstart;\n  *llpos_ref = llpos;\n  *numblocks_ref = numblocks;\n  *done_idx_ref = done_idx;\n  *origcost_ref = origcost;\n}\n\n",
            "calle": [
                "AddSorted",
                "EstimateCost",
                "FindLargestSplittableBlock",
                "FindMinimum",
                "SplitCost",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lstart_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llpos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const llpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numblocks_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const numblocks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const done_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origcost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const origcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store * const",
                        "definition": [
                            "const ZopfliLZ77Store * const lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxblocks",
                        "type": "size_t",
                        "definition": [
                            "size_t maxblocks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t ** const",
                        "definition": [
                            "size_t ** const splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const done"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitcost",
                        "type": "double",
                        "definition": [
                            "double splitcost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart = *lstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llpos",
                        "type": "size_t",
                        "definition": [
                            "size_t llpos = *llpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numblocks",
                        "type": "size_t",
                        "definition": [
                            "size_t numblocks = *numblocks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int done_idx = *done_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origcost",
                        "type": "double",
                        "definition": [
                            "double origcost = *origcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "SplitCostContext",
                        "definition": [
                            "SplitCostContext c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliBlockSplit_1",
            "header": "",
            "params": [
                "size_t * const pos_ref",
                "size_t * const i_ref",
                "size_t ** const splitpoints",
                "size_t * const npoints",
                "size_t * const lz77splitpoints",
                "size_t nlz77points",
                "ZopfliLZ77Store store"
            ],
            "definition": "void helper_ZopfliBlockSplit_1(size_t * const pos_ref, size_t * const i_ref, size_t ** const splitpoints, size_t * const npoints, size_t * const lz77splitpoints, size_t nlz77points, ZopfliLZ77Store store)\n{\n  size_t pos = *pos_ref;\n  size_t i = *i_ref;\n  for (i = 0; i < store.size; i += 1)\n  {\n    size_t length = (store.dists[i] == 0) ? (1) : (store.litlens[i]);\n    if (lz77splitpoints[*npoints] == i)\n    {\n      {\n        if (!((*npoints) & ((*npoints) - 1)))\n        {\n          *splitpoints = ((*npoints) == 0) ? (malloc(sizeof(*(*splitpoints)))) : (realloc(*splitpoints, ((*npoints) * 2) * (sizeof(*(*splitpoints)))));\n        }\n        (*splitpoints)[*npoints] = pos;\n        *npoints += 1;\n      }\n      ;\n      if ((*npoints) == nlz77points)\n      {\n        break;\n      }\n    }\n    pos += length;\n  }\n\n  *pos_ref = pos;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t ** const",
                        "definition": [
                            "size_t ** const splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77splitpoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const lz77splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlz77points",
                        "type": "size_t",
                        "definition": [
                            "size_t nlz77points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = (store.dists[i] == 0) ? (1) : (store.litlens[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_FindMinimum_2_1",
            "header": "",
            "params": [
                "size_t * const start_ref",
                "size_t * const end_ref",
                "size_t * const i_ref",
                "size_t * const besti_ref",
                "double * const best_ref",
                "double * const lastbest_ref",
                "size_t * const pos_ref",
                "void * const context",
                "size_t p[9]",
                "double vp[9]"
            ],
            "definition": "void helper_helper_FindMinimum_2_1(size_t * const start_ref, size_t * const end_ref, size_t * const i_ref, size_t * const besti_ref, double * const best_ref, double * const lastbest_ref, size_t * const pos_ref, void * const context, size_t p[9], double vp[9])\n{\n  size_t start = *start_ref;\n  size_t end = *end_ref;\n  size_t i = *i_ref;\n  size_t besti = *besti_ref;\n  double best = *best_ref;\n  double lastbest = *lastbest_ref;\n  size_t pos = *pos_ref;\n  if ((end - start) <= 9)\n  {\n    break;\n  }\n  for (i = 0; i < 9; i += 1)\n  {\n    p[i] = start + ((i + 1) * ((end - start) / (9 + 1)));\n    vp[i] = f(p[i], context);\n  }\n\n  besti = 0;\n  best = vp[0];\n  for (i = 1; i < 9; i += 1)\n  {\n    if (vp[i] < best)\n    {\n      best = vp[i];\n      besti = i;\n    }\n  }\n\n  if (best > lastbest)\n  {\n    break;\n  }\n  start = (besti == 0) ? (start) : (p[besti - 1]);\n  end = (besti == (9 - 1)) ? (end) : (p[besti + 1]);\n  pos = p[besti];\n  lastbest = best;\n  *start_ref = start;\n  *end_ref = end;\n  *i_ref = i;\n  *besti_ref = besti;\n  *best_ref = best;\n  *lastbest_ref = lastbest;\n  *pos_ref = pos;\n}\n\n",
            "calle": [
                "f"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const start_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besti_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const besti_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const best_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbest_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const lastbest_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "context",
                        "type": "void * const",
                        "definition": [
                            "void * const context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "size_t [9]",
                        "definition": [
                            "size_t p[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vp",
                        "type": "double [9]",
                        "definition": [
                            "double vp[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = *start_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besti",
                        "type": "size_t",
                        "definition": [
                            "size_t besti = *besti_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "double",
                        "definition": [
                            "double best = *best_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbest",
                        "type": "double",
                        "definition": [
                            "double lastbest = *lastbest_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliInitCache",
            "header": "void ZopfliInitCache(size_t blocksize, ZopfliLongestMatchCache *lmc)",
            "params": [
                "size_t blocksize",
                "ZopfliLongestMatchCache *lmc"
            ],
            "definition": "void ZopfliInitCache(size_t blocksize, ZopfliLongestMatchCache *lmc)\n{\n  size_t i;\n  lmc->length = (unsigned short *) malloc((sizeof(unsigned short)) * blocksize);\n  lmc->dist = (unsigned short *) malloc((sizeof(unsigned short)) * blocksize);\n  lmc->sublen = (unsigned char *) malloc((8 * 3) * blocksize);\n  if (lmc->sublen == 0)\n  {\n    fprintf(stderr, \"Error: Out of memory. Tried allocating %lu bytes of memory.\\n\", (((unsigned long) 8) * 3) * blocksize);\n    exit(1);\n  }\n  for (i = 0; i < blocksize; i += 1)\n    lmc->length[i] = 1;\n\n  for (i = 0; i < blocksize; i += 1)\n    lmc->dist[i] = 0;\n\n  for (i = 0; i < ((8 * blocksize) * 3); i += 1)\n    lmc->sublen[i] = 0;\n\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "ZopfliLongestMatchCache *",
                        "definition": [
                            "ZopfliLongestMatchCache *lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCleanCache",
            "header": "void ZopfliCleanCache(ZopfliLongestMatchCache *lmc)",
            "params": [
                "ZopfliLongestMatchCache *lmc"
            ],
            "definition": "void ZopfliCleanCache(ZopfliLongestMatchCache *lmc)\n{\n  free(lmc->length);\n  free(lmc->dist);\n  free(lmc->sublen);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "ZopfliLongestMatchCache *",
                        "definition": [
                            "ZopfliLongestMatchCache *lmc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliSublenToCache",
            "header": "void ZopfliSublenToCache(const unsigned short *sublen, size_t pos, size_t length, ZopfliLongestMatchCache *lmc)",
            "params": [
                "const unsigned short *sublen",
                "size_t pos",
                "size_t length",
                "ZopfliLongestMatchCache *lmc"
            ],
            "definition": "void ZopfliSublenToCache(const unsigned short *sublen, size_t pos, size_t length, ZopfliLongestMatchCache *lmc)\n{\n  size_t i;\n  size_t j = 0;\n  unsigned bestlength = 0;\n  unsigned char *cache;\n  unsigned int cache_idx = 0;\n  cache_idx = &lmc->sublen[(8 * pos) * 3];\n  if (length < 3)\n  {\n    return;\n  }\n  for (i = 3; i <= length; i += 1)\n  {\n    if ((i == length) || (sublen[i] != sublen[i + 1]))\n    {\n      cache[(j * 3) + cache_idx] = i - 3;\n      cache[((j * 3) + 1) + cache_idx] = sublen[i] % 256;\n      cache[((j * 3) + 2) + cache_idx] = (sublen[i] >> 8) % 256;\n      bestlength = i;\n      j += 1;\n      if (j >= 8)\n      {\n        break;\n      }\n    }\n  }\n\n  if (j < 8)\n  {\n    assert(bestlength == length);\n    cache[((8 - 1) * 3) + cache_idx] = bestlength - 3;\n  }\n  else\n  {\n    assert(bestlength <= length);\n  }\n  assert(bestlength == ZopfliMaxCachedSublen(lmc, pos, length));\n}\n\n",
            "calle": [
                "ZopfliMaxCachedSublen",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "const unsigned short *",
                        "definition": [
                            "const unsigned short *sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "ZopfliLongestMatchCache *",
                        "definition": [
                            "ZopfliLongestMatchCache *lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bestlength = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cache_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCacheToSublen",
            "header": "void ZopfliCacheToSublen(const ZopfliLongestMatchCache *lmc, size_t pos, size_t length, unsigned short *sublen)",
            "params": [
                "const ZopfliLongestMatchCache *lmc",
                "size_t pos",
                "size_t length",
                "unsigned short *sublen"
            ],
            "definition": "void ZopfliCacheToSublen(const ZopfliLongestMatchCache *lmc, size_t pos, size_t length, unsigned short *sublen)\n{\n  size_t i;\n  size_t j;\n  unsigned maxlength = ZopfliMaxCachedSublen(lmc, pos, length);\n  unsigned prevlength = 0;\n  unsigned char *cache;\n  unsigned int cache_idx = 0;\n  if (length < 3)\n  {\n    return;\n  }\n  cache_idx = &lmc->sublen[(8 * pos) * 3];\n  for (j = 0; j < 8; j += 1)\n  {\n    unsigned length = cache[(j * 3) + cache_idx] + 3;\n    unsigned dist = cache[((j * 3) + 1) + cache_idx] + (256 * cache[((j * 3) + 2) + cache_idx]);\n    for (i = prevlength; i <= length; i += 1)\n    {\n      sublen[i] = dist;\n    }\n\n    if (length == maxlength)\n    {\n      break;\n    }\n    prevlength = length + 1;\n  }\n\n}\n\n",
            "calle": [
                "ZopfliMaxCachedSublen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "const ZopfliLongestMatchCache *",
                        "definition": [
                            "const ZopfliLongestMatchCache *lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length",
                            "unsigned length = cache[(j * 3) + cache_idx] + 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxlength",
                        "type": "unsigned",
                        "definition": [
                            "unsigned maxlength = ZopfliMaxCachedSublen(lmc, pos, length)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlength",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prevlength = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cache_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = cache[((j * 3) + 1) + cache_idx] + (256 * cache[((j * 3) + 2) + cache_idx])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliMaxCachedSublen",
            "header": "unsigned ZopfliMaxCachedSublen(const ZopfliLongestMatchCache *lmc, size_t pos, size_t length)",
            "params": [
                "const ZopfliLongestMatchCache *lmc",
                "size_t pos",
                "size_t length"
            ],
            "definition": "unsigned ZopfliMaxCachedSublen(const ZopfliLongestMatchCache *lmc, size_t pos, size_t length)\n{\n  unsigned char *cache;\n  unsigned int cache_idx = 0;\n  cache_idx = &lmc->sublen[(8 * pos) * 3];\n  (void) length;\n  if ((cache[1 + cache_idx] == 0) && (cache[2 + cache_idx] == 0))\n  {\n    return 0;\n  }\n  return cache[((8 - 1) * 3) + cache_idx] + 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lmc",
                        "type": "const ZopfliLongestMatchCache *",
                        "definition": [
                            "const ZopfliLongestMatchCache *lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cache_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliDeflate",
            "header": "void ZopfliDeflate(const ZopfliOptions *options, int btype, int final, const unsigned char *in, size_t insize, unsigned char *bp, unsigned char **out, size_t *outsize)",
            "params": [
                "const ZopfliOptions *options",
                "int btype",
                "int final",
                "const unsigned char *in",
                "size_t insize",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "void ZopfliDeflate(const ZopfliOptions *options, int btype, int final, const unsigned char *in, size_t insize, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  size_t offset = *outsize;\n  size_t i = 0;\n  do\n  {\n    int masterfinal = (i + 1000000) >= insize;\n    int final2 = final && masterfinal;\n    size_t size = (masterfinal) ? (insize - i) : (1000000);\n    ZopfliDeflatePart(options, btype, final2, in, i, i + size, bp, out, outsize);\n    i += size;\n  }\n  while (i < insize);\n  if (options->verbose)\n  {\n    fprintf(stderr, \"Original Size: %lu, Deflate: %lu, Compression: %f%% Removed\\n\", (unsigned long) insize, (unsigned long) ((*outsize) - offset), (100.0 * ((double) (insize - ((*outsize) - offset)))) / ((double) insize));\n  }\n}\n\n",
            "calle": [
                "ZopfliDeflatePart",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "insize",
                        "type": "size_t",
                        "definition": [
                            "size_t insize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset = *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "masterfinal",
                        "type": "int",
                        "definition": [
                            "int masterfinal = (i + 1000000) >= insize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final2",
                        "type": "int",
                        "definition": [
                            "int final2 = final && masterfinal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = (masterfinal) ? (insize - i) : (1000000)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliDeflatePart",
            "header": "void ZopfliDeflatePart(const ZopfliOptions *options, int btype, int final, const unsigned char *in, size_t instart, size_t inend, unsigned char *bp, unsigned char **out, size_t *outsize)",
            "params": [
                "const ZopfliOptions *options",
                "int btype",
                "int final",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "void ZopfliDeflatePart(const ZopfliOptions *options, int btype, int final, const unsigned char *in, size_t instart, size_t inend, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  size_t i;\n  size_t *splitpoints_uncompressed = 0;\n  size_t npoints = 0;\n  size_t *splitpoints = 0;\n  unsigned int splitpoints_idx = 0;\n  double totalcost = 0;\n  ZopfliLZ77Store lz77;\n  if (btype == 0)\n  {\n    AddNonCompressedBlock(options, final, in, instart, inend, bp, out, outsize);\n    return;\n  }\n  else\n    if (btype == 1)\n  {\n    helper_ZopfliDeflatePart_1(options, btype, final, in, instart, inend, bp, out, outsize);\n  }\n  if (options->blocksplitting)\n  {\n    ZopfliBlockSplit(options, in, instart, inend, options->blocksplittingmax, &splitpoints_uncompressed, &npoints);\n    splitpoints_idx = (size_t *) malloc((sizeof(*splitpoints_idx)) * npoints);\n  }\n  ZopfliInitLZ77Store(in, &lz77);\n  for (i = 0; i <= npoints; i += 1)\n  {\n    helper_ZopfliDeflatePart_2(&i, &splitpoints_idx, &totalcost, options, in, instart, inend, splitpoints_uncompressed, npoints, splitpoints, lz77);\n  }\n\n  if (options->blocksplitting && (npoints > 1))\n  {\n    helper_ZopfliDeflatePart_3(&i, &npoints, &splitpoints_idx, options, splitpoints, totalcost, lz77);\n  }\n  for (i = 0; i <= npoints; i += 1)\n  {\n    size_t start = (i == 0) ? (0) : (splitpoints[(i - 1) + splitpoints_idx]);\n    size_t end = (i == npoints) ? (lz77.size) : (splitpoints[i + splitpoints_idx]);\n    AddLZ77BlockAutoType(options, (i == npoints) && final, &lz77, start, end, 0, bp, out, outsize);\n  }\n\n  ZopfliCleanLZ77Store(&lz77);\n  free(splitpoints);\n  free(splitpoints_uncompressed);\n}\n\n",
            "calle": [
                "AddLZ77BlockAutoType",
                "AddNonCompressedBlock",
                "ZopfliBlockSplit",
                "ZopfliCleanLZ77Store",
                "ZopfliInitLZ77Store",
                "free",
                "helper_ZopfliDeflatePart_1",
                "helper_ZopfliDeflatePart_2",
                "helper_ZopfliDeflatePart_3",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_uncompressed",
                        "type": "size_t *",
                        "definition": [
                            "size_t *splitpoints_uncompressed = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t *",
                        "definition": [
                            "size_t *splitpoints = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int splitpoints_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totalcost",
                        "type": "double",
                        "definition": [
                            "double totalcost = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = (i == 0) ? (0) : (splitpoints[(i - 1) + splitpoints_idx])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = (i == npoints) ? (lz77.size) : (splitpoints[i + splitpoints_idx])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCalculateBlockSize",
            "header": "double ZopfliCalculateBlockSize(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, int btype)",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "int btype"
            ],
            "definition": "double ZopfliCalculateBlockSize(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, int btype)\n{\n  unsigned ll_lengths[288];\n  unsigned d_lengths[32];\n  double result = 3;\n  if (btype == 0)\n  {\n    size_t length = ZopfliLZ77GetByteRange(lz77, lstart, lend);\n    size_t rem = length % 65535;\n    size_t blocks = (length / 65535) + ((rem) ? (1) : (0));\n    return ((blocks * 5) * 8) + (length * 8);\n  }\n  if (btype == 1)\n  {\n    GetFixedTree(ll_lengths, d_lengths);\n    result += CalculateBlockSymbolSize(ll_lengths, d_lengths, lz77, lstart, lend);\n  }\n  else\n  {\n    result += GetDynamicLengths(lz77, lstart, lend, ll_lengths, d_lengths);\n  }\n  return result;\n}\n\n",
            "calle": [
                "CalculateBlockSymbolSize",
                "GetDynamicLengths",
                "GetFixedTree",
                "ZopfliLZ77GetByteRange"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned [288]",
                        "definition": [
                            "unsigned ll_lengths[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned [32]",
                        "definition": [
                            "unsigned d_lengths[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "double",
                        "definition": [
                            "double result = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = ZopfliLZ77GetByteRange(lz77, lstart, lend)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rem",
                        "type": "size_t",
                        "definition": [
                            "size_t rem = length % 65535"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocks",
                        "type": "size_t",
                        "definition": [
                            "size_t blocks = (length / 65535) + ((rem) ? (1) : (0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCalculateBlockSizeAutoType",
            "header": "double ZopfliCalculateBlockSizeAutoType(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "double ZopfliCalculateBlockSizeAutoType(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  double uncompressedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 0);\n  double fixedcost = (lz77->size > 1000) ? (uncompressedcost) : (ZopfliCalculateBlockSize(lz77, lstart, lend, 1));\n  double dyncost = ZopfliCalculateBlockSize(lz77, lstart, lend, 2);\n  return ((uncompressedcost < fixedcost) && (uncompressedcost < dyncost)) ? (uncompressedcost) : ((fixedcost < dyncost) ? (fixedcost) : (dyncost));\n}\n\n",
            "calle": [
                "ZopfliCalculateBlockSize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompressedcost",
                        "type": "double",
                        "definition": [
                            "double uncompressedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedcost",
                        "type": "double",
                        "definition": [
                            "double fixedcost = (lz77->size > 1000) ? (uncompressedcost) : (ZopfliCalculateBlockSize(lz77, lstart, lend, 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyncost",
                        "type": "double",
                        "definition": [
                            "double dyncost = ZopfliCalculateBlockSize(lz77, lstart, lend, 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetDistExtraBits",
            "header": "",
            "params": [
                "int dist"
            ],
            "definition": "static int ZopfliGetDistExtraBits(int dist)\n{\n  if (dist < 5)\n  {\n    return 0;\n  }\n  return (31 ^ __builtin_clz(dist - 1)) - 1;\n}\n\n",
            "calle": [
                "__builtin_clz"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist",
                        "type": "int",
                        "definition": [
                            "int dist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetDistExtraBitsValue",
            "header": "",
            "params": [
                "int dist"
            ],
            "definition": "static int ZopfliGetDistExtraBitsValue(int dist)\n{\n  if (dist < 5)\n  {\n    return 0;\n  }\n  else\n  {\n    int l = 31 ^ __builtin_clz(dist - 1);\n    return (dist - (1 + (1 << l))) & ((1 << (l - 1)) - 1);\n  }\n}\n\n",
            "calle": [
                "__builtin_clz"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist",
                        "type": "int",
                        "definition": [
                            "int dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l = 31 ^ __builtin_clz(dist - 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetDistSymbol",
            "header": "",
            "params": [
                "int dist"
            ],
            "definition": "static int ZopfliGetDistSymbol(int dist)\n{\n  if (dist < 5)\n  {\n    return dist - 1;\n  }\n  else\n  {\n    int l = 31 ^ __builtin_clz(dist - 1);\n    int r = ((dist - 1) >> (l - 1)) & 1;\n    return (l * 2) + r;\n  }\n}\n\n",
            "calle": [
                "__builtin_clz"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist",
                        "type": "int",
                        "definition": [
                            "int dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l = 31 ^ __builtin_clz(dist - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = ((dist - 1) >> (l - 1)) & 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetLengthExtraBits",
            "header": "",
            "params": [
                "int l"
            ],
            "definition": "static int ZopfliGetLengthExtraBits(int l)\n{\n  static const int table[259] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0};\n  return table[l];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "const int [259]",
                        "definition": [
                            "static const int table[259] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetLengthExtraBitsValue",
            "header": "",
            "params": [
                "int l"
            ],
            "definition": "static int ZopfliGetLengthExtraBitsValue(int l)\n{\n  static const int table[259] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0};\n  return table[l];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "const int [259]",
                        "definition": [
                            "static const int table[259] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetLengthSymbol",
            "header": "",
            "params": [
                "int l"
            ],
            "definition": "static int ZopfliGetLengthSymbol(int l)\n{\n  static const int table[259] = {0, 0, 0, 257, 258, 259, 260, 261, 262, 263, 264, 265, 265, 266, 266, 267, 267, 268, 268, 269, 269, 269, 269, 270, 270, 270, 270, 271, 271, 271, 271, 272, 272, 272, 272, 273, 273, 273, 273, 273, 273, 273, 273, 274, 274, 274, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285};\n  return table[l];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "l",
                        "type": "int",
                        "definition": [
                            "int l"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "const int [259]",
                        "definition": [
                            "static const int table[259] = {0, 0, 0, 257, 258, 259, 260, 261, 262, 263, 264, 265, 265, 266, 266, 267, 267, 268, 268, 269, 269, 269, 269, 270, 270, 270, 270, 271, 271, 271, 271, 272, 272, 272, 272, 273, 273, 273, 273, 273, 273, 273, 273, 274, 274, 274, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetLengthSymbolExtraBits",
            "header": "",
            "params": [
                "int s"
            ],
            "definition": "static int ZopfliGetLengthSymbolExtraBits(int s)\n{\n  static const int table[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};\n  return table[s - 257];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "const int [29]",
                        "definition": [
                            "static const int table[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGetDistSymbolExtraBits",
            "header": "",
            "params": [
                "int s"
            ],
            "definition": "static int ZopfliGetDistSymbolExtraBits(int s)\n{\n  static const int table[30] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};\n  return table[s];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "const int [30]",
                        "definition": [
                            "static const int table[30] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddBit",
            "header": "",
            "params": [
                "int bit",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddBit(int bit, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  if ((*bp) == 0)\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  (*out)[(*outsize) - 1] |= bit << (*bp);\n  *bp = ((*bp) + 1) & 7;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bit",
                        "type": "int",
                        "definition": [
                            "int bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddBits",
            "header": "",
            "params": [
                "unsigned symbol",
                "unsigned length",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddBits(unsigned symbol, unsigned length, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  unsigned i;\n  for (i = 0; i < length; i += 1)\n  {\n    unsigned bit = (symbol >> i) & 1;\n    if ((*bp) == 0)\n    {\n      if (!((*outsize) & ((*outsize) - 1)))\n      {\n        *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n      }\n      (*out)[*outsize] = 0;\n      *outsize += 1;\n    }\n    ;\n    (*out)[(*outsize) - 1] |= bit << (*bp);\n    *bp = ((*bp) + 1) & 7;\n  }\n\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned",
                        "definition": [
                            "unsigned symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bit = (symbol >> i) & 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddHuffmanBits",
            "header": "",
            "params": [
                "unsigned symbol",
                "unsigned length",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddHuffmanBits(unsigned symbol, unsigned length, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  unsigned i;\n  for (i = 0; i < length; i += 1)\n  {\n    unsigned bit = (symbol >> ((length - i) - 1)) & 1;\n    if ((*bp) == 0)\n    {\n      if (!((*outsize) & ((*outsize) - 1)))\n      {\n        *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n      }\n      (*out)[*outsize] = 0;\n      *outsize += 1;\n    }\n    ;\n    (*out)[(*outsize) - 1] |= bit << (*bp);\n    *bp = ((*bp) + 1) & 7;\n  }\n\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned",
                        "definition": [
                            "unsigned symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bit = (symbol >> ((length - i) - 1)) & 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "PatchDistanceCodesForBuggyDecoders",
            "header": "",
            "params": [
                "unsigned *d_lengths"
            ],
            "definition": "static void PatchDistanceCodesForBuggyDecoders(unsigned *d_lengths)\n{\n  int num_dist_codes = 0;\n  int i;\n  for (i = 0; i < 30; i += 1)\n  {\n    if (d_lengths[i])\n    {\n      num_dist_codes += 1;\n    }\n    if (num_dist_codes >= 2)\n    {\n      return;\n    }\n  }\n\n  if (num_dist_codes == 0)\n  {\n    d_lengths[0] = (d_lengths[1] = 1);\n  }\n  else\n    if (num_dist_codes == 1)\n  {\n    d_lengths[(d_lengths[0]) ? (1) : (0)] = 1;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_dist_codes",
                        "type": "int",
                        "definition": [
                            "int num_dist_codes = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "EncodeTree",
            "header": "",
            "params": [
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths",
                "int use_16",
                "int use_17",
                "int use_18",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static size_t EncodeTree(const unsigned *ll_lengths, const unsigned *d_lengths, int use_16, int use_17, int use_18, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  unsigned lld_total;\n  unsigned *rle = 0;\n  unsigned *rle_bits = 0;\n  size_t rle_size = 0;\n  size_t rle_bits_size = 0;\n  unsigned hlit = 29;\n  unsigned hdist = 29;\n  unsigned hclen;\n  unsigned hlit2;\n  size_t i;\n  size_t j;\n  size_t clcounts[19];\n  unsigned clcl[19];\n  unsigned clsymbols[19];\n  static const unsigned order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};\n  int size_only = !out;\n  size_t result_size = 0;\n  for (i = 0; i < 19; i += 1)\n    clcounts[i] = 0;\n\n  while ((hlit > 0) && (ll_lengths[(257 + hlit) - 1] == 0))\n    hlit--;\n\n  hlit -= 1;\n  while ((hdist > 0) && (d_lengths[(1 + hdist) - 1] == 0))\n    hdist--;\n\n  hdist -= 1;\n  hlit2 = hlit + 257;\n  lld_total = (hlit2 + hdist) + 1;\n  for (i = 0; i < lld_total; i += 1)\n  {\n    helper_EncodeTree_2(&rle_size, &rle_bits_size, &i, &j, ll_lengths, d_lengths, use_16, use_17, use_18, lld_total, rle, rle_bits, hlit2, clcounts, size_only);\n  }\n\n  ZopfliCalculateBitLengths(clcounts, 19, 7, clcl);\n  if (!size_only)\n  {\n    ZopfliLengthsToSymbols(clcl, 19, 7, clsymbols);\n  }\n  hclen = 15;\n  while ((hclen > 0) && (clcounts[order[(hclen + 4) - 1]] == 0))\n    hclen--;\n\n  hclen -= 1;\n  if (!size_only)\n  {\n    helper_EncodeTree_1(&i, bp, out, outsize, rle, rle_bits, rle_size, hlit, hdist, hclen, clcl, clsymbols, order);\n  }\n  result_size += 14;\n  result_size += (hclen + 4) * 3;\n  for (i = 0; i < 19; i += 1)\n  {\n    result_size += clcl[i] * clcounts[i];\n  }\n\n  result_size += clcounts[16] * 2;\n  result_size += clcounts[17] * 3;\n  result_size += clcounts[18] * 7;\n  free(rle);\n  free(rle_bits);\n  return result_size;\n}\n\n",
            "calle": [
                "ZopfliCalculateBitLengths",
                "ZopfliLengthsToSymbols",
                "free",
                "helper_EncodeTree_1",
                "helper_EncodeTree_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_16",
                        "type": "int",
                        "definition": [
                            "int use_16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_17",
                        "type": "int",
                        "definition": [
                            "int use_17"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_18",
                        "type": "int",
                        "definition": [
                            "int use_18"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lld_total",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lld_total"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *rle = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *rle_bits = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hlit",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hlit = 29"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hdist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hdist = 29"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hclen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hclen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hlit2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hlit2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcl",
                        "type": "unsigned [19]",
                        "definition": [
                            "unsigned clcl[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clsymbols",
                        "type": "unsigned [19]",
                        "definition": [
                            "unsigned clsymbols[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned [19]",
                        "definition": [
                            "static const unsigned order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only = !out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_size",
                        "type": "size_t",
                        "definition": [
                            "size_t result_size = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddDynamicTree",
            "header": "",
            "params": [
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddDynamicTree(const unsigned *ll_lengths, const unsigned *d_lengths, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  int i;\n  int best = 0;\n  size_t bestsize = 0;\n  for (i = 0; i < 8; i += 1)\n  {\n    size_t size = EncodeTree(ll_lengths, d_lengths, i & 1, i & 2, i & 4, 0, 0, 0);\n    if ((bestsize == 0) || (size < bestsize))\n    {\n      bestsize = size;\n      best = i;\n    }\n  }\n\n  EncodeTree(ll_lengths, d_lengths, best & 1, best & 2, best & 4, bp, out, outsize);\n}\n\n",
            "calle": [
                "EncodeTree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best",
                        "type": "int",
                        "definition": [
                            "int best = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bestsize = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = EncodeTree(ll_lengths, d_lengths, i & 1, i & 2, i & 4, 0, 0, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalculateTreeSize",
            "header": "",
            "params": [
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths"
            ],
            "definition": "static size_t CalculateTreeSize(const unsigned *ll_lengths, const unsigned *d_lengths)\n{\n  size_t result = 0;\n  int i;\n  for (i = 0; i < 8; i += 1)\n  {\n    size_t size = EncodeTree(ll_lengths, d_lengths, i & 1, i & 2, i & 4, 0, 0, 0);\n    if ((result == 0) || (size < result))\n    {\n      result = size;\n    }\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "EncodeTree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = EncodeTree(ll_lengths, d_lengths, i & 1, i & 2, i & 4, 0, 0, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddLZ77Data",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "size_t expected_data_size",
                "const unsigned *ll_symbols",
                "const unsigned *ll_lengths",
                "const unsigned *d_symbols",
                "const unsigned *d_lengths",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddLZ77Data(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, size_t expected_data_size, const unsigned *ll_symbols, const unsigned *ll_lengths, const unsigned *d_symbols, const unsigned *d_lengths, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  size_t testlength = 0;\n  size_t i;\n  for (i = lstart; i < lend; i += 1)\n  {\n    unsigned dist = lz77->dists[i];\n    unsigned litlen = lz77->litlens[i];\n    if (dist == 0)\n    {\n      assert(litlen < 256);\n      assert(ll_lengths[litlen] > 0);\n      AddHuffmanBits(ll_symbols[litlen], ll_lengths[litlen], bp, out, outsize);\n      testlength += 1;\n    }\n    else\n    {\n      unsigned lls = ZopfliGetLengthSymbol(litlen);\n      unsigned ds = ZopfliGetDistSymbol(dist);\n      assert((litlen >= 3) && (litlen <= 288));\n      assert(ll_lengths[lls] > 0);\n      assert(d_lengths[ds] > 0);\n      AddHuffmanBits(ll_symbols[lls], ll_lengths[lls], bp, out, outsize);\n      AddBits(ZopfliGetLengthExtraBitsValue(litlen), ZopfliGetLengthExtraBits(litlen), bp, out, outsize);\n      AddHuffmanBits(d_symbols[ds], d_lengths[ds], bp, out, outsize);\n      AddBits(ZopfliGetDistExtraBitsValue(dist), ZopfliGetDistExtraBits(dist), bp, out, outsize);\n      testlength += litlen;\n    }\n  }\n\n  assert((expected_data_size == 0) || (testlength == expected_data_size));\n}\n\n",
            "calle": [
                "AddBits",
                "AddHuffmanBits",
                "ZopfliGetDistExtraBits",
                "ZopfliGetDistExtraBitsValue",
                "ZopfliGetDistSymbol",
                "ZopfliGetLengthExtraBits",
                "ZopfliGetLengthExtraBitsValue",
                "ZopfliGetLengthSymbol",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_data_size",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_data_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_symbols",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_symbols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_symbols",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_symbols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "testlength",
                        "type": "size_t",
                        "definition": [
                            "size_t testlength = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = lz77->dists[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "litlen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned litlen = lz77->litlens[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lls",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lls = ZopfliGetLengthSymbol(litlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ds",
                        "type": "unsigned",
                        "definition": [
                            "unsigned ds = ZopfliGetDistSymbol(dist)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetFixedTree",
            "header": "",
            "params": [
                "unsigned *ll_lengths",
                "unsigned *d_lengths"
            ],
            "definition": "static void GetFixedTree(unsigned *ll_lengths, unsigned *d_lengths)\n{\n  size_t i;\n  for (i = 0; i < 144; i += 1)\n    ll_lengths[i] = 8;\n\n  for (i = 144; i < 256; i += 1)\n    ll_lengths[i] = 9;\n\n  for (i = 256; i < 280; i += 1)\n    ll_lengths[i] = 7;\n\n  for (i = 280; i < 288; i += 1)\n    ll_lengths[i] = 8;\n\n  for (i = 0; i < 32; i += 1)\n    d_lengths[i] = 5;\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalculateBlockSymbolSizeSmall",
            "header": "",
            "params": [
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths",
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "static size_t CalculateBlockSymbolSizeSmall(const unsigned *ll_lengths, const unsigned *d_lengths, const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  size_t result = 0;\n  size_t i;\n  for (i = lstart; i < lend; i += 1)\n  {\n    assert(i < lz77->size);\n    assert(lz77->litlens[i] < 259);\n    if (lz77->dists[i] == 0)\n    {\n      result += ll_lengths[lz77->litlens[i]];\n    }\n    else\n    {\n      int ll_symbol = ZopfliGetLengthSymbol(lz77->litlens[i]);\n      int d_symbol = ZopfliGetDistSymbol(lz77->dists[i]);\n      result += ll_lengths[ll_symbol];\n      result += d_lengths[d_symbol];\n      result += ZopfliGetLengthSymbolExtraBits(ll_symbol);\n      result += ZopfliGetDistSymbolExtraBits(d_symbol);\n    }\n  }\n\n  result += ll_lengths[256];\n  return result;\n}\n\n",
            "calle": [
                "ZopfliGetDistSymbol",
                "ZopfliGetDistSymbolExtraBits",
                "ZopfliGetLengthSymbol",
                "ZopfliGetLengthSymbolExtraBits",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_symbol",
                        "type": "int",
                        "definition": [
                            "int ll_symbol = ZopfliGetLengthSymbol(lz77->litlens[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_symbol",
                        "type": "int",
                        "definition": [
                            "int d_symbol = ZopfliGetDistSymbol(lz77->dists[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalculateBlockSymbolSizeGivenCounts",
            "header": "",
            "params": [
                "const size_t *ll_counts",
                "const size_t *d_counts",
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths",
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "static size_t CalculateBlockSymbolSizeGivenCounts(const size_t *ll_counts, const size_t *d_counts, const unsigned *ll_lengths, const unsigned *d_lengths, const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  size_t result = 0;\n  size_t i;\n  if ((lstart + (288 * 3)) > lend)\n  {\n    return CalculateBlockSymbolSizeSmall(ll_lengths, d_lengths, lz77, lstart, lend);\n  }\n  else\n  {\n    for (i = 0; i < 256; i += 1)\n    {\n      result += ll_lengths[i] * ll_counts[i];\n    }\n\n    for (i = 257; i < 286; i += 1)\n    {\n      result += ll_lengths[i] * ll_counts[i];\n      result += ZopfliGetLengthSymbolExtraBits(i) * ll_counts[i];\n    }\n\n    for (i = 0; i < 30; i += 1)\n    {\n      result += d_lengths[i] * d_counts[i];\n      result += ZopfliGetDistSymbolExtraBits(i) * d_counts[i];\n    }\n\n    result += ll_lengths[256];\n    return result;\n  }\n}\n\n",
            "calle": [
                "CalculateBlockSymbolSizeSmall",
                "ZopfliGetDistSymbolExtraBits",
                "ZopfliGetLengthSymbolExtraBits"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *ll_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *d_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalculateBlockSymbolSize",
            "header": "",
            "params": [
                "const unsigned *ll_lengths",
                "const unsigned *d_lengths",
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "static size_t CalculateBlockSymbolSize(const unsigned *ll_lengths, const unsigned *d_lengths, const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  if ((lstart + (288 * 3)) > lend)\n  {\n    return CalculateBlockSymbolSizeSmall(ll_lengths, d_lengths, lz77, lstart, lend);\n  }\n  else\n  {\n    size_t ll_counts[288];\n    size_t d_counts[32];\n    ZopfliLZ77GetHistogram(lz77, lstart, lend, ll_counts, d_counts);\n    return CalculateBlockSymbolSizeGivenCounts(ll_counts, d_counts, ll_lengths, d_lengths, lz77, lstart, lend);\n  }\n}\n\n",
            "calle": [
                "CalculateBlockSymbolSizeGivenCounts",
                "CalculateBlockSymbolSizeSmall",
                "ZopfliLZ77GetHistogram"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "size_t [288]",
                        "definition": [
                            "size_t ll_counts[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t d_counts[32]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AbsDiff",
            "header": "",
            "params": [
                "size_t x",
                "size_t y"
            ],
            "definition": "static size_t AbsDiff(size_t x, size_t y)\n{\n  if (x > y)\n  {\n    return x - y;\n  }\n  else\n    return y - x;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "size_t",
                        "definition": [
                            "size_t y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "OptimizeHuffmanForRle",
            "header": "",
            "params": [
                "int length",
                "size_t *counts"
            ],
            "definition": "void OptimizeHuffmanForRle(int length, size_t *counts)\n{\n  int i;\n  int k;\n  int stride;\n  size_t symbol;\n  size_t sum;\n  size_t limit;\n  int *good_for_rle;\n  unsigned int good_for_rle_idx = 0;\n  for (; length >= 0; length -= 1)\n  {\n    if (length == 0)\n    {\n      return;\n    }\n    if (counts[length - 1] != 0)\n    {\n      break;\n    }\n  }\n\n  good_for_rle_idx = (int *) malloc(((unsigned) length) * (sizeof(int)));\n  for (i = 0; i < length; i += 1)\n    good_for_rle[i + good_for_rle_idx] = 0;\n\n  symbol = counts[0];\n  stride = 0;\n  for (i = 0; i < (length + 1); i += 1)\n  {\n    helper_OptimizeHuffmanForRle_1(&i, &k, &stride, &symbol, &good_for_rle_idx, length, counts, good_for_rle);\n  }\n\n  stride = 0;\n  limit = counts[0];\n  sum = 0;\n  for (i = 0; i < (length + 1); i += 1)\n  {\n    helper_OptimizeHuffmanForRle_2(&i, &k, &stride, &sum, &limit, length, counts, good_for_rle, good_for_rle_idx);\n  }\n\n  free(good_for_rle);\n}\n\n",
            "calle": [
                "free",
                "helper_OptimizeHuffmanForRle_1",
                "helper_OptimizeHuffmanForRle_2",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride",
                        "type": "int",
                        "definition": [
                            "int stride"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "size_t",
                        "definition": [
                            "size_t symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle",
                        "type": "int *",
                        "definition": [
                            "int *good_for_rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int good_for_rle_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "TryOptimizeHuffmanForRle",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "const size_t *ll_counts",
                "const size_t *d_counts",
                "unsigned *ll_lengths",
                "unsigned *d_lengths"
            ],
            "definition": "static double TryOptimizeHuffmanForRle(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, const size_t *ll_counts, const size_t *d_counts, unsigned *ll_lengths, unsigned *d_lengths)\n{\n  size_t ll_counts2[288];\n  size_t d_counts2[32];\n  unsigned ll_lengths2[288];\n  unsigned d_lengths2[32];\n  double treesize;\n  double datasize;\n  double treesize2;\n  double datasize2;\n  treesize = CalculateTreeSize(ll_lengths, d_lengths);\n  datasize = CalculateBlockSymbolSizeGivenCounts(ll_counts, d_counts, ll_lengths, d_lengths, lz77, lstart, lend);\n  memcpy(ll_counts2, ll_counts, sizeof(ll_counts2));\n  memcpy(d_counts2, d_counts, sizeof(d_counts2));\n  OptimizeHuffmanForRle(288, ll_counts2);\n  OptimizeHuffmanForRle(32, d_counts2);\n  ZopfliCalculateBitLengths(ll_counts2, 288, 15, ll_lengths2);\n  ZopfliCalculateBitLengths(d_counts2, 32, 15, d_lengths2);\n  PatchDistanceCodesForBuggyDecoders(d_lengths2);\n  treesize2 = CalculateTreeSize(ll_lengths2, d_lengths2);\n  datasize2 = CalculateBlockSymbolSizeGivenCounts(ll_counts, d_counts, ll_lengths2, d_lengths2, lz77, lstart, lend);\n  if ((treesize2 + datasize2) < (treesize + datasize))\n  {\n    memcpy(ll_lengths, ll_lengths2, sizeof(ll_lengths2));\n    memcpy(d_lengths, d_lengths2, sizeof(d_lengths2));\n    return treesize2 + datasize2;\n  }\n  return treesize + datasize;\n}\n\n",
            "calle": [
                "CalculateBlockSymbolSizeGivenCounts",
                "CalculateTreeSize",
                "OptimizeHuffmanForRle",
                "PatchDistanceCodesForBuggyDecoders",
                "ZopfliCalculateBitLengths",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *ll_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *d_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts2",
                        "type": "size_t [288]",
                        "definition": [
                            "size_t ll_counts2[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts2",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t d_counts2[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths2",
                        "type": "unsigned [288]",
                        "definition": [
                            "unsigned ll_lengths2[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths2",
                        "type": "unsigned [32]",
                        "definition": [
                            "unsigned d_lengths2[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "treesize",
                        "type": "double",
                        "definition": [
                            "double treesize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "datasize",
                        "type": "double",
                        "definition": [
                            "double datasize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "treesize2",
                        "type": "double",
                        "definition": [
                            "double treesize2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "datasize2",
                        "type": "double",
                        "definition": [
                            "double datasize2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetDynamicLengths",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "unsigned *ll_lengths",
                "unsigned *d_lengths"
            ],
            "definition": "static double GetDynamicLengths(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, unsigned *ll_lengths, unsigned *d_lengths)\n{\n  size_t ll_counts[288];\n  size_t d_counts[32];\n  ZopfliLZ77GetHistogram(lz77, lstart, lend, ll_counts, d_counts);\n  ll_counts[256] = 1;\n  ZopfliCalculateBitLengths(ll_counts, 288, 15, ll_lengths);\n  ZopfliCalculateBitLengths(d_counts, 32, 15, d_lengths);\n  PatchDistanceCodesForBuggyDecoders(d_lengths);\n  return TryOptimizeHuffmanForRle(lz77, lstart, lend, ll_counts, d_counts, ll_lengths, d_lengths);\n}\n\n",
            "calle": [
                "PatchDistanceCodesForBuggyDecoders",
                "TryOptimizeHuffmanForRle",
                "ZopfliCalculateBitLengths",
                "ZopfliLZ77GetHistogram"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "size_t [288]",
                        "definition": [
                            "size_t ll_counts[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t d_counts[32]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddNonCompressedBlock",
            "header": "",
            "params": [
                "const ZopfliOptions *options",
                "int final",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddNonCompressedBlock(const ZopfliOptions *options, int final, const unsigned char *in, size_t instart, size_t inend, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  size_t pos = instart;\n  (void) options;\n  for (;;)\n  {\n    helper_AddNonCompressedBlock_1(&pos, final, in, inend, bp, out, outsize);\n  }\n\n}\n\n",
            "calle": [
                "helper_AddNonCompressedBlock_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = instart"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddLZ77Block",
            "header": "",
            "params": [
                "const ZopfliOptions *options",
                "int btype",
                "int final",
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "size_t expected_data_size",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddLZ77Block(const ZopfliOptions *options, int btype, int final, const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, size_t expected_data_size, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  unsigned ll_lengths[288];\n  unsigned d_lengths[32];\n  unsigned ll_symbols[288];\n  unsigned d_symbols[32];\n  size_t detect_block_size = *outsize;\n  size_t compressed_size;\n  size_t uncompressed_size = 0;\n  size_t i;\n  if (btype == 0)\n  {\n    size_t length = ZopfliLZ77GetByteRange(lz77, lstart, lend);\n    size_t pos = (lstart == lend) ? (0) : (lz77->pos[lstart]);\n    size_t end = pos + length;\n    AddNonCompressedBlock(options, final, lz77->data, pos, end, bp, out, outsize);\n    return;\n  }\n  AddBit(final, bp, out, outsize);\n  AddBit(btype & 1, bp, out, outsize);\n  AddBit((btype & 2) >> 1, bp, out, outsize);\n  if (btype == 1)\n  {\n    GetFixedTree(ll_lengths, d_lengths);\n  }\n  else\n  {\n    helper_AddLZ77Block_1(options, btype, lz77, lstart, lend, bp, out, outsize, ll_lengths, d_lengths);\n  }\n  ZopfliLengthsToSymbols(ll_lengths, 288, 15, ll_symbols);\n  ZopfliLengthsToSymbols(d_lengths, 32, 15, d_symbols);\n  detect_block_size = *outsize;\n  AddLZ77Data(lz77, lstart, lend, expected_data_size, ll_symbols, ll_lengths, d_symbols, d_lengths, bp, out, outsize);\n  AddHuffmanBits(ll_symbols[256], ll_lengths[256], bp, out, outsize);\n  for (i = lstart; i < lend; i += 1)\n  {\n    uncompressed_size += (lz77->dists[i] == 0) ? (1) : (lz77->litlens[i]);\n  }\n\n  compressed_size = (*outsize) - detect_block_size;\n  if (options->verbose)\n  {\n    fprintf(stderr, \"compressed block size: %d (%dk) (unc: %d)\\n\", (int) compressed_size, (int) (compressed_size / 1024), (int) uncompressed_size);\n  }\n}\n\n",
            "calle": [
                "AddBit",
                "AddHuffmanBits",
                "AddLZ77Data",
                "AddNonCompressedBlock",
                "GetFixedTree",
                "ZopfliLZ77GetByteRange",
                "ZopfliLengthsToSymbols",
                "fprintf",
                "helper_AddLZ77Block_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_data_size",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_data_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned [288]",
                        "definition": [
                            "unsigned ll_lengths[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned [32]",
                        "definition": [
                            "unsigned d_lengths[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_symbols",
                        "type": "unsigned [288]",
                        "definition": [
                            "unsigned ll_symbols[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_symbols",
                        "type": "unsigned [32]",
                        "definition": [
                            "unsigned d_symbols[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "detect_block_size",
                        "type": "size_t",
                        "definition": [
                            "size_t detect_block_size = *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compressed_size",
                        "type": "size_t",
                        "definition": [
                            "size_t compressed_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompressed_size",
                        "type": "size_t",
                        "definition": [
                            "size_t uncompressed_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = ZopfliLZ77GetByteRange(lz77, lstart, lend)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = (lstart == lend) ? (0) : (lz77->pos[lstart])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = pos + length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddLZ77BlockAutoType",
            "header": "",
            "params": [
                "const ZopfliOptions *options",
                "int final",
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "size_t expected_data_size",
                "unsigned char *bp",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "static void AddLZ77BlockAutoType(const ZopfliOptions *options, int final, const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, size_t expected_data_size, unsigned char *bp, unsigned char **out, size_t *outsize)\n{\n  double uncompressedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 0);\n  double fixedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 1);\n  double dyncost = ZopfliCalculateBlockSize(lz77, lstart, lend, 2);\n  int expensivefixed = (lz77->size < 1000) || (fixedcost <= (dyncost * 1.1));\n  ZopfliLZ77Store fixedstore;\n  if (lstart == lend)\n  {\n    AddBits(final, 1, bp, out, outsize);\n    AddBits(1, 2, bp, out, outsize);\n    AddBits(0, 7, bp, out, outsize);\n    return;\n  }\n  ZopfliInitLZ77Store(lz77->data, &fixedstore);\n  if (expensivefixed)\n  {\n    helper_AddLZ77BlockAutoType_1(&fixedcost, options, lz77, lstart, lend, fixedstore);\n  }\n  if ((uncompressedcost < fixedcost) && (uncompressedcost < dyncost))\n  {\n    AddLZ77Block(options, 0, final, lz77, lstart, lend, expected_data_size, bp, out, outsize);\n  }\n  else\n    if (fixedcost < dyncost)\n  {\n    if (expensivefixed)\n    {\n      AddLZ77Block(options, 1, final, &fixedstore, 0, fixedstore.size, expected_data_size, bp, out, outsize);\n    }\n    else\n    {\n      AddLZ77Block(options, 1, final, lz77, lstart, lend, expected_data_size, bp, out, outsize);\n    }\n  }\n  else\n  {\n    AddLZ77Block(options, 2, final, lz77, lstart, lend, expected_data_size, bp, out, outsize);\n  }\n  ZopfliCleanLZ77Store(&fixedstore);\n}\n\n",
            "calle": [
                "AddBits",
                "AddLZ77Block",
                "ZopfliCalculateBlockSize",
                "ZopfliCleanLZ77Store",
                "ZopfliInitLZ77Store",
                "helper_AddLZ77BlockAutoType_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_data_size",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_data_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompressedcost",
                        "type": "double",
                        "definition": [
                            "double uncompressedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedcost",
                        "type": "double",
                        "definition": [
                            "double fixedcost = ZopfliCalculateBlockSize(lz77, lstart, lend, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyncost",
                        "type": "double",
                        "definition": [
                            "double dyncost = ZopfliCalculateBlockSize(lz77, lstart, lend, 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expensivefixed",
                        "type": "int",
                        "definition": [
                            "int expensivefixed = (lz77->size < 1000) || (fixedcost <= (dyncost * 1.1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedstore",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store fixedstore"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_EncodeTree_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "unsigned char * const bp",
                "unsigned char ** const out",
                "size_t * const outsize",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t rle_size",
                "unsigned hlit",
                "unsigned hdist",
                "unsigned hclen",
                "unsigned clcl[19]",
                "unsigned clsymbols[19]",
                "static const unsigned order[19]"
            ],
            "definition": "void helper_EncodeTree_1(size_t * const i_ref, unsigned char * const bp, unsigned char ** const out, size_t * const outsize, unsigned * const rle, unsigned * const rle_bits, size_t rle_size, unsigned hlit, unsigned hdist, unsigned hclen, unsigned clcl[19], unsigned clsymbols[19], static const unsigned order[19])\n{\n  size_t i = *i_ref;\n  AddBits(hlit, 5, bp, out, outsize);\n  AddBits(hdist, 5, bp, out, outsize);\n  AddBits(hclen, 4, bp, out, outsize);\n  for (i = 0; i < (hclen + 4); i += 1)\n  {\n    AddBits(clcl[order[i]], 3, bp, out, outsize);\n  }\n\n  for (i = 0; i < rle_size; i += 1)\n  {\n    unsigned symbol = clsymbols[rle[i]];\n    AddHuffmanBits(symbol, clcl[rle[i]], bp, out, outsize);\n    if (rle[i] == 16)\n    {\n      AddBits(rle_bits[i], 2, bp, out, outsize);\n    }\n    else\n      if (rle[i] == 17)\n    {\n      AddBits(rle_bits[i], 3, bp, out, outsize);\n    }\n    else\n      if (rle[i] == 18)\n    {\n      AddBits(rle_bits[i], 7, bp, out, outsize);\n    }\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "AddBits",
                "AddHuffmanBits"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hlit",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hlit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hdist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hdist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hclen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hclen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcl",
                        "type": "unsigned [19]",
                        "definition": [
                            "unsigned clcl[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clsymbols",
                        "type": "unsigned [19]",
                        "definition": [
                            "unsigned clsymbols[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned [19]",
                        "definition": [
                            "static const unsigned order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned",
                        "definition": [
                            "unsigned symbol = clsymbols[rle[i]]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_EncodeTree_2",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "const unsigned * const ll_lengths",
                "const unsigned * const d_lengths",
                "int use_16",
                "int use_17",
                "int use_18",
                "unsigned lld_total",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "unsigned hlit2",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_EncodeTree_2(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, size_t * const i_ref, size_t * const j_ref, const unsigned * const ll_lengths, const unsigned * const d_lengths, int use_16, int use_17, int use_18, unsigned lld_total, unsigned * const rle, unsigned * const rle_bits, unsigned hlit2, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  unsigned char symbol = (i < hlit2) ? (ll_lengths[i]) : (d_lengths[i - hlit2]);\n  unsigned count = 1;\n  if (use_16 || ((symbol == 0) && (use_17 || use_18)))\n  {\n    for (j = i + 1; (j < lld_total) && (symbol == ((j < hlit2) ? (ll_lengths[j]) : (d_lengths[j - hlit2]))); j += 1)\n    {\n      count += 1;\n    }\n\n  }\n  i += count - 1;\n  if ((symbol == 0) && (count >= 3))\n  {\n    helper_helper_EncodeTree_2_3(&rle_size, &rle_bits_size, &count, use_17, use_18, rle, rle_bits, clcounts, size_only);\n  }\n  if (use_16 && (count >= 4))\n  {\n    helper_helper_EncodeTree_2_2(&rle_size, &rle_bits_size, &symbol, &count, rle, rle_bits, clcounts, size_only);\n  }\n  clcounts[symbol] += count;\n  while (count > 0)\n  {\n    helper_helper_EncodeTree_2_1(&rle_size, &rle_bits_size, &count, rle, rle_bits, size_only, symbol);\n  }\n\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_EncodeTree_2_1",
                "helper_helper_EncodeTree_2_2",
                "helper_helper_EncodeTree_2_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "const unsigned * const",
                        "definition": [
                            "const unsigned * const ll_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "const unsigned * const",
                        "definition": [
                            "const unsigned * const d_lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_16",
                        "type": "int",
                        "definition": [
                            "int use_16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_17",
                        "type": "int",
                        "definition": [
                            "int use_17"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_18",
                        "type": "int",
                        "definition": [
                            "int use_18"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lld_total",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lld_total"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hlit2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned hlit2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char symbol = (i < hlit2) ? (ll_lengths[i]) : (d_lengths[i - hlit2])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_OptimizeHuffmanForRle_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "int * const k_ref",
                "int * const stride_ref",
                "size_t * const symbol_ref",
                "unsigned int * const good_for_rle_idx_ref",
                "int length",
                "size_t * const counts",
                "int * const good_for_rle"
            ],
            "definition": "void helper_OptimizeHuffmanForRle_1(int * const i_ref, int * const k_ref, int * const stride_ref, size_t * const symbol_ref, unsigned int * const good_for_rle_idx_ref, int length, size_t * const counts, int * const good_for_rle)\n{\n  int i = *i_ref;\n  int k = *k_ref;\n  int stride = *stride_ref;\n  size_t symbol = *symbol_ref;\n  unsigned int good_for_rle_idx = *good_for_rle_idx_ref;\n  if ((i == length) || (counts[i] != symbol))\n  {\n    if (((symbol == 0) && (stride >= 5)) || ((symbol != 0) && (stride >= 7)))\n    {\n      for (k = 0; k < stride; k += 1)\n      {\n        good_for_rle[((i - k) - 1) + good_for_rle_idx] = 1;\n      }\n\n    }\n    stride = 1;\n    if (i != length)\n    {\n      symbol = counts[i];\n    }\n  }\n  else\n  {\n    stride += 1;\n  }\n  *i_ref = i;\n  *k_ref = k;\n  *stride_ref = stride;\n  *symbol_ref = symbol;\n  *good_for_rle_idx_ref = good_for_rle_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const symbol_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const good_for_rle_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counts",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle",
                        "type": "int * const",
                        "definition": [
                            "int * const good_for_rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride",
                        "type": "int",
                        "definition": [
                            "int stride = *stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "size_t",
                        "definition": [
                            "size_t symbol = *symbol_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int good_for_rle_idx = *good_for_rle_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_OptimizeHuffmanForRle_2",
            "header": "",
            "params": [
                "int * const i_ref",
                "int * const k_ref",
                "int * const stride_ref",
                "size_t * const sum_ref",
                "size_t * const limit_ref",
                "int length",
                "size_t * const counts",
                "int * const good_for_rle",
                "unsigned int good_for_rle_idx"
            ],
            "definition": "void helper_OptimizeHuffmanForRle_2(int * const i_ref, int * const k_ref, int * const stride_ref, size_t * const sum_ref, size_t * const limit_ref, int length, size_t * const counts, int * const good_for_rle, unsigned int good_for_rle_idx)\n{\n  int i = *i_ref;\n  int k = *k_ref;\n  int stride = *stride_ref;\n  size_t sum = *sum_ref;\n  size_t limit = *limit_ref;\n  if (((i == length) || good_for_rle[i + good_for_rle_idx]) || (AbsDiff(counts[i], limit) >= 4))\n  {\n    helper_helper_OptimizeHuffmanForRle_2_1(&i, &k, &stride, &sum, &limit, length, counts);\n  }\n  stride += 1;\n  if (i != length)\n  {\n    sum += counts[i];\n  }\n  *i_ref = i;\n  *k_ref = k;\n  *stride_ref = stride;\n  *sum_ref = sum;\n  *limit_ref = limit;\n}\n\n",
            "calle": [
                "AbsDiff",
                "helper_helper_OptimizeHuffmanForRle_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const limit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counts",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle",
                        "type": "int * const",
                        "definition": [
                            "int * const good_for_rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_for_rle_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int good_for_rle_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride",
                        "type": "int",
                        "definition": [
                            "int stride = *stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit = *limit_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddNonCompressedBlock_1",
            "header": "",
            "params": [
                "size_t * const pos_ref",
                "int final",
                "const unsigned char * const in",
                "size_t inend",
                "unsigned char * const bp",
                "unsigned char ** const out",
                "size_t * const outsize"
            ],
            "definition": "void helper_AddNonCompressedBlock_1(size_t * const pos_ref, int final, const unsigned char * const in, size_t inend, unsigned char * const bp, unsigned char ** const out, size_t * const outsize)\n{\n  size_t pos = *pos_ref;\n  size_t i;\n  unsigned short blocksize = 65535;\n  unsigned short nlen;\n  int currentfinal;\n  if ((pos + blocksize) > inend)\n  {\n    blocksize = inend - pos;\n  }\n  currentfinal = (pos + blocksize) >= inend;\n  nlen = ~blocksize;\n  AddBit(final && currentfinal, bp, out, outsize);\n  AddBit(0, bp, out, outsize);\n  AddBit(0, bp, out, outsize);\n  *bp = 0;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = blocksize % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (blocksize / 256) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = nlen % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (nlen / 256) % 256;\n    *outsize += 1;\n  }\n  ;\n  for (i = 0; i < blocksize; i += 1)\n  {\n    helper_helper_AddNonCompressedBlock_1_1(in, out, outsize, pos, i);\n  }\n\n  if (currentfinal)\n  {\n    break;\n  }\n  pos += blocksize;\n  *pos_ref = pos;\n}\n\n",
            "calle": [
                "AddBit",
                "helper_helper_AddNonCompressedBlock_1_1",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short blocksize = 65535"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlen",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short nlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentfinal",
                        "type": "int",
                        "definition": [
                            "int currentfinal"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddLZ77Block_1",
            "header": "",
            "params": [
                "const ZopfliOptions * const options",
                "int btype",
                "const ZopfliLZ77Store * const lz77",
                "size_t lstart",
                "size_t lend",
                "unsigned char * const bp",
                "unsigned char ** const out",
                "size_t * const outsize",
                "unsigned ll_lengths[288]",
                "unsigned d_lengths[32]"
            ],
            "definition": "void helper_AddLZ77Block_1(const ZopfliOptions * const options, int btype, const ZopfliLZ77Store * const lz77, size_t lstart, size_t lend, unsigned char * const bp, unsigned char ** const out, size_t * const outsize, unsigned ll_lengths[288], unsigned d_lengths[32])\n{\n  unsigned detect_tree_size;\n  assert(btype == 2);\n  GetDynamicLengths(lz77, lstart, lend, ll_lengths, d_lengths);\n  detect_tree_size = *outsize;\n  AddDynamicTree(ll_lengths, d_lengths, bp, out, outsize);\n  if (options->verbose)\n  {\n    fprintf(stderr, \"treesize: %d\\n\", (int) ((*outsize) - detect_tree_size));\n  }\n}\n\n",
            "calle": [
                "AddDynamicTree",
                "GetDynamicLengths",
                "assert",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions * const",
                        "definition": [
                            "const ZopfliOptions * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store * const",
                        "definition": [
                            "const ZopfliLZ77Store * const lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_lengths",
                        "type": "unsigned [288]",
                        "definition": [
                            "unsigned ll_lengths[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_lengths",
                        "type": "unsigned [32]",
                        "definition": [
                            "unsigned d_lengths[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "detect_tree_size",
                        "type": "unsigned",
                        "definition": [
                            "unsigned detect_tree_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddLZ77BlockAutoType_1",
            "header": "",
            "params": [
                "double * const fixedcost_ref",
                "const ZopfliOptions * const options",
                "const ZopfliLZ77Store * const lz77",
                "size_t lstart",
                "size_t lend",
                "ZopfliLZ77Store fixedstore"
            ],
            "definition": "void helper_AddLZ77BlockAutoType_1(double * const fixedcost_ref, const ZopfliOptions * const options, const ZopfliLZ77Store * const lz77, size_t lstart, size_t lend, ZopfliLZ77Store fixedstore)\n{\n  double fixedcost = *fixedcost_ref;\n  size_t instart = lz77->pos[lstart];\n  size_t inend = instart + ZopfliLZ77GetByteRange(lz77, lstart, lend);\n  ZopfliBlockState s;\n  ZopfliInitBlockState(options, instart, inend, 1, &s);\n  ZopfliLZ77OptimalFixed(&s, lz77->data, instart, inend, &fixedstore);\n  fixedcost = ZopfliCalculateBlockSize(&fixedstore, 0, fixedstore.size, 1);\n  ZopfliCleanBlockState(&s);\n  *fixedcost_ref = fixedcost;\n}\n\n",
            "calle": [
                "ZopfliCalculateBlockSize",
                "ZopfliCleanBlockState",
                "ZopfliInitBlockState",
                "ZopfliLZ77GetByteRange",
                "ZopfliLZ77OptimalFixed"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fixedcost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const fixedcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions * const",
                        "definition": [
                            "const ZopfliOptions * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store * const",
                        "definition": [
                            "const ZopfliLZ77Store * const lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedstore",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store fixedstore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedcost",
                        "type": "double",
                        "definition": [
                            "double fixedcost = *fixedcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart = lz77->pos[lstart]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend = instart + ZopfliLZ77GetByteRange(lz77, lstart, lend)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState",
                        "definition": [
                            "ZopfliBlockState s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliDeflatePart_1",
            "header": "",
            "params": [
                "const ZopfliOptions * const options",
                "int btype",
                "int final",
                "const unsigned char * const in",
                "size_t instart",
                "size_t inend",
                "unsigned char * const bp",
                "unsigned char ** const out",
                "size_t * const outsize"
            ],
            "definition": "void helper_ZopfliDeflatePart_1(const ZopfliOptions * const options, int btype, int final, const unsigned char * const in, size_t instart, size_t inend, unsigned char * const bp, unsigned char ** const out, size_t * const outsize)\n{\n  ZopfliLZ77Store store;\n  ZopfliBlockState s;\n  ZopfliInitLZ77Store(in, &store);\n  ZopfliInitBlockState(options, instart, inend, 1, &s);\n  ZopfliLZ77OptimalFixed(&s, in, instart, inend, &store);\n  AddLZ77Block(options, btype, final, &store, 0, store.size, 0, bp, out, outsize);\n  ZopfliCleanBlockState(&s);\n  ZopfliCleanLZ77Store(&store);\n  return;\n}\n\n",
            "calle": [
                "AddLZ77Block",
                "ZopfliCleanBlockState",
                "ZopfliCleanLZ77Store",
                "ZopfliInitBlockState",
                "ZopfliInitLZ77Store",
                "ZopfliLZ77OptimalFixed"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions * const",
                        "definition": [
                            "const ZopfliOptions * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "btype",
                        "type": "int",
                        "definition": [
                            "int btype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "int",
                        "definition": [
                            "int final"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const bp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState",
                        "definition": [
                            "ZopfliBlockState s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliDeflatePart_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "unsigned int * const splitpoints_idx_ref",
                "double * const totalcost_ref",
                "const ZopfliOptions * const options",
                "const unsigned char * const in",
                "size_t instart",
                "size_t inend",
                "size_t * const splitpoints_uncompressed",
                "size_t npoints",
                "size_t * const splitpoints",
                "ZopfliLZ77Store lz77"
            ],
            "definition": "void helper_ZopfliDeflatePart_2(size_t * const i_ref, unsigned int * const splitpoints_idx_ref, double * const totalcost_ref, const ZopfliOptions * const options, const unsigned char * const in, size_t instart, size_t inend, size_t * const splitpoints_uncompressed, size_t npoints, size_t * const splitpoints, ZopfliLZ77Store lz77)\n{\n  size_t i = *i_ref;\n  unsigned int splitpoints_idx = *splitpoints_idx_ref;\n  double totalcost = *totalcost_ref;\n  size_t start = (i == 0) ? (instart) : (splitpoints_uncompressed[i - 1]);\n  size_t end = (i == npoints) ? (inend) : (splitpoints_uncompressed[i]);\n  ZopfliBlockState s;\n  ZopfliLZ77Store store;\n  ZopfliInitLZ77Store(in, &store);\n  ZopfliInitBlockState(options, start, end, 1, &s);\n  ZopfliLZ77Optimal(&s, in, start, end, options->numiterations, &store);\n  totalcost += ZopfliCalculateBlockSizeAutoType(&store, 0, store.size);\n  ZopfliAppendLZ77Store(&store, &lz77);\n  if (i < npoints)\n  {\n    splitpoints[i + splitpoints_idx] = lz77.size;\n  }\n  ZopfliCleanBlockState(&s);\n  ZopfliCleanLZ77Store(&store);\n  *i_ref = i;\n  *splitpoints_idx_ref = splitpoints_idx;\n  *totalcost_ref = totalcost;\n}\n\n",
            "calle": [
                "ZopfliAppendLZ77Store",
                "ZopfliCalculateBlockSizeAutoType",
                "ZopfliCleanBlockState",
                "ZopfliCleanLZ77Store",
                "ZopfliInitBlockState",
                "ZopfliInitLZ77Store",
                "ZopfliLZ77Optimal"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const splitpoints_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totalcost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const totalcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions * const",
                        "definition": [
                            "const ZopfliOptions * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_uncompressed",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const splitpoints_uncompressed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int splitpoints_idx = *splitpoints_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totalcost",
                        "type": "double",
                        "definition": [
                            "double totalcost = *totalcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = (i == 0) ? (instart) : (splitpoints_uncompressed[i - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = (i == npoints) ? (inend) : (splitpoints_uncompressed[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState",
                        "definition": [
                            "ZopfliBlockState s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store store"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliDeflatePart_3",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const npoints_ref",
                "unsigned int * const splitpoints_idx_ref",
                "const ZopfliOptions * const options",
                "size_t * const splitpoints",
                "double totalcost",
                "ZopfliLZ77Store lz77"
            ],
            "definition": "void helper_ZopfliDeflatePart_3(size_t * const i_ref, size_t * const npoints_ref, unsigned int * const splitpoints_idx_ref, const ZopfliOptions * const options, size_t * const splitpoints, double totalcost, ZopfliLZ77Store lz77)\n{\n  size_t i = *i_ref;\n  size_t npoints = *npoints_ref;\n  unsigned int splitpoints_idx = *splitpoints_idx_ref;\n  size_t *splitpoints2 = 0;\n  size_t npoints2 = 0;\n  double totalcost2 = 0;\n  ZopfliBlockSplitLZ77(options, &lz77, options->blocksplittingmax, &splitpoints2, &npoints2);\n  for (i = 0; i <= npoints2; i += 1)\n  {\n    size_t start = (i == 0) ? (0) : (splitpoints2[i - 1]);\n    size_t end = (i == npoints2) ? (lz77.size) : (splitpoints2[i]);\n    totalcost2 += ZopfliCalculateBlockSizeAutoType(&lz77, start, end);\n  }\n\n  if (totalcost2 < totalcost)\n  {\n    free(splitpoints);\n    splitpoints_idx = splitpoints2;\n    npoints = npoints2;\n  }\n  else\n  {\n    free(splitpoints2);\n  }\n  *i_ref = i;\n  *npoints_ref = npoints;\n  *splitpoints_idx_ref = splitpoints_idx;\n}\n\n",
            "calle": [
                "ZopfliBlockSplitLZ77",
                "ZopfliCalculateBlockSizeAutoType",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const npoints_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const splitpoints_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions * const",
                        "definition": [
                            "const ZopfliOptions * const options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const splitpoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totalcost",
                        "type": "double",
                        "definition": [
                            "double totalcost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints = *npoints_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int splitpoints_idx = *splitpoints_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "splitpoints2",
                        "type": "size_t *",
                        "definition": [
                            "size_t *splitpoints2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints2",
                        "type": "size_t",
                        "definition": [
                            "size_t npoints2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "totalcost2",
                        "type": "double",
                        "definition": [
                            "double totalcost2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = (i == 0) ? (0) : (splitpoints2[i - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = (i == npoints2) ? (lz77.size) : (splitpoints2[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_EncodeTree_2_1",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const count_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "int size_only",
                "unsigned char symbol"
            ],
            "definition": "void helper_helper_EncodeTree_2_1(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const count_ref, unsigned * const rle, unsigned * const rle_bits, int size_only, unsigned char symbol)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned count = *count_ref;\n  if (!size_only)\n  {\n    {\n      if (!((*(&rle_size)) & ((*(&rle_size)) - 1)))\n      {\n        rle = (rle_size == 0) ? (malloc(sizeof(*(*(&rle))))) : (realloc(*(&rle), (rle_size * 2) * (sizeof(*(*(&rle))))));\n      }\n      rle[rle_size] = symbol;\n      rle_size += 1;\n    }\n    ;\n    {\n      if (!((*(&rle_bits_size)) & ((*(&rle_bits_size)) - 1)))\n      {\n        rle_bits = (rle_bits_size == 0) ? (malloc(sizeof(*(*(&rle_bits))))) : (realloc(*(&rle_bits), (rle_bits_size * 2) * (sizeof(*(*(&rle_bits))))));\n      }\n      rle_bits[rle_bits_size] = 0;\n      rle_bits_size += 1;\n    }\n    ;\n  }\n  count -= 1;\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_EncodeTree_2_2",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned char * const symbol_ref",
                "unsigned * const count_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_helper_EncodeTree_2_2(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned char * const symbol_ref, unsigned * const count_ref, unsigned * const rle, unsigned * const rle_bits, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned char symbol = *symbol_ref;\n  unsigned count = *count_ref;\n  count -= 1;\n  clcounts[symbol] += 1;\n  if (!size_only)\n  {\n    helper_helper_helper_EncodeTree_2_2_1(&rle_size, &rle_bits_size, rle, rle_bits, symbol);\n  }\n  while (count >= 3)\n  {\n    helper_helper_helper_EncodeTree_2_2_2(&rle_size, &rle_bits_size, &count, rle, rle_bits, clcounts, size_only);\n  }\n\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *symbol_ref = symbol;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "helper_helper_helper_EncodeTree_2_2_1",
                "helper_helper_helper_EncodeTree_2_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const symbol_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char symbol = *symbol_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_EncodeTree_2_3",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const count_ref",
                "int use_17",
                "int use_18",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_helper_EncodeTree_2_3(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const count_ref, int use_17, int use_18, unsigned * const rle, unsigned * const rle_bits, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned count = *count_ref;\n  if (use_18)\n  {\n    helper_helper_helper_EncodeTree_2_3_1(&rle_size, &rle_bits_size, &count, rle, rle_bits, clcounts, size_only);\n  }\n  if (use_17)\n  {\n    helper_helper_helper_EncodeTree_2_3_2(&rle_size, &rle_bits_size, &count, rle, rle_bits, clcounts, size_only);\n  }\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "helper_helper_helper_EncodeTree_2_3_1",
                "helper_helper_helper_EncodeTree_2_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_17",
                        "type": "int",
                        "definition": [
                            "int use_17"
                        ]
                    },
                    {
                        "path": null,
                        "name": "use_18",
                        "type": "int",
                        "definition": [
                            "int use_18"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_OptimizeHuffmanForRle_2_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "int * const k_ref",
                "int * const stride_ref",
                "size_t * const sum_ref",
                "size_t * const limit_ref",
                "int length",
                "size_t * const counts"
            ],
            "definition": "void helper_helper_OptimizeHuffmanForRle_2_1(int * const i_ref, int * const k_ref, int * const stride_ref, size_t * const sum_ref, size_t * const limit_ref, int length, size_t * const counts)\n{\n  int i = *i_ref;\n  int k = *k_ref;\n  int stride = *stride_ref;\n  size_t sum = *sum_ref;\n  size_t limit = *limit_ref;\n  if ((stride >= 4) || ((stride >= 3) && (sum == 0)))\n  {\n    int count = (sum + (stride / 2)) / stride;\n    if (count < 1)\n    {\n      count = 1;\n    }\n    if (sum == 0)\n    {\n      count = 0;\n    }\n    for (k = 0; k < stride; k += 1)\n    {\n      counts[(i - k) - 1] = count;\n    }\n\n  }\n  stride = 0;\n  sum = 0;\n  if (i < (length - 3))\n  {\n    limit = ((((counts[i] + counts[i + 1]) + counts[i + 2]) + counts[i + 3]) + 2) / 4;\n  }\n  else\n    if (i < length)\n  {\n    limit = counts[i];\n  }\n  else\n  {\n    limit = 0;\n  }\n  *i_ref = i;\n  *k_ref = k;\n  *stride_ref = stride;\n  *sum_ref = sum;\n  *limit_ref = limit;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const limit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counts",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stride",
                        "type": "int",
                        "definition": [
                            "int stride = *stride_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit = *limit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = (sum + (stride / 2)) / stride"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_AddNonCompressedBlock_1_1",
            "header": "",
            "params": [
                "const unsigned char * const in",
                "unsigned char ** const out",
                "size_t * const outsize",
                "size_t pos",
                "size_t i"
            ],
            "definition": "void helper_helper_AddNonCompressedBlock_1_1(const unsigned char * const in, unsigned char ** const out, size_t * const outsize, size_t pos, size_t i)\n{\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = in[pos + i];\n    *outsize += 1;\n  }\n  ;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_EncodeTree_2_2_1",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "unsigned char symbol"
            ],
            "definition": "void helper_helper_helper_EncodeTree_2_2_1(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const rle, unsigned * const rle_bits, unsigned char symbol)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  {\n    if (!((*(&rle_size)) & ((*(&rle_size)) - 1)))\n    {\n      rle = (rle_size == 0) ? (malloc(sizeof(*(*(&rle))))) : (realloc(*(&rle), (rle_size * 2) * (sizeof(*(*(&rle))))));\n    }\n    rle[rle_size] = symbol;\n    rle_size += 1;\n  }\n  ;\n  {\n    if (!((*(&rle_bits_size)) & ((*(&rle_bits_size)) - 1)))\n    {\n      rle_bits = (rle_bits_size == 0) ? (malloc(sizeof(*(*(&rle_bits))))) : (realloc(*(&rle_bits), (rle_bits_size * 2) * (sizeof(*(*(&rle_bits))))));\n    }\n    rle_bits[rle_bits_size] = 0;\n    rle_bits_size += 1;\n  }\n  ;\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbol",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char symbol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_EncodeTree_2_2_2",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const count_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_helper_helper_EncodeTree_2_2_2(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const count_ref, unsigned * const rle, unsigned * const rle_bits, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned count = *count_ref;\n  unsigned count2 = (count > 6) ? (6) : (count);\n  if (!size_only)\n  {\n    {\n      if (!((*(&rle_size)) & ((*(&rle_size)) - 1)))\n      {\n        rle = (rle_size == 0) ? (malloc(sizeof(*(*(&rle))))) : (realloc(*(&rle), (rle_size * 2) * (sizeof(*(*(&rle))))));\n      }\n      rle[rle_size] = 16;\n      rle_size += 1;\n    }\n    ;\n    {\n      if (!((*(&rle_bits_size)) & ((*(&rle_bits_size)) - 1)))\n      {\n        rle_bits = (rle_bits_size == 0) ? (malloc(sizeof(*(*(&rle_bits))))) : (realloc(*(&rle_bits), (rle_bits_size * 2) * (sizeof(*(*(&rle_bits))))));\n      }\n      rle_bits[rle_bits_size] = count2 - 3;\n      rle_bits_size += 1;\n    }\n    ;\n  }\n  clcounts[16] += 1;\n  count -= count2;\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count2 = (count > 6) ? (6) : (count)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_EncodeTree_2_3_1",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const count_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_helper_helper_EncodeTree_2_3_1(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const count_ref, unsigned * const rle, unsigned * const rle_bits, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned count = *count_ref;\n  while (count >= 11)\n  {\n    unsigned count2 = (count > 138) ? (138) : (count);\n    if (!size_only)\n    {\n      {\n        if (!((*(&rle_size)) & ((*(&rle_size)) - 1)))\n        {\n          rle = (rle_size == 0) ? (malloc(sizeof(*(*(&rle))))) : (realloc(*(&rle), (rle_size * 2) * (sizeof(*(*(&rle))))));\n        }\n        rle[rle_size] = 18;\n        rle_size += 1;\n      }\n      ;\n      {\n        if (!((*(&rle_bits_size)) & ((*(&rle_bits_size)) - 1)))\n        {\n          rle_bits = (rle_bits_size == 0) ? (malloc(sizeof(*(*(&rle_bits))))) : (realloc(*(&rle_bits), (rle_bits_size * 2) * (sizeof(*(*(&rle_bits))))));\n        }\n        rle_bits[rle_bits_size] = count2 - 11;\n        rle_bits_size += 1;\n      }\n      ;\n    }\n    clcounts[18] += 1;\n    count -= count2;\n  }\n\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count2 = (count > 138) ? (138) : (count)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_EncodeTree_2_3_2",
            "header": "",
            "params": [
                "size_t * const rle_size_ref",
                "size_t * const rle_bits_size_ref",
                "unsigned * const count_ref",
                "unsigned * const rle",
                "unsigned * const rle_bits",
                "size_t clcounts[19]",
                "int size_only"
            ],
            "definition": "void helper_helper_helper_EncodeTree_2_3_2(size_t * const rle_size_ref, size_t * const rle_bits_size_ref, unsigned * const count_ref, unsigned * const rle, unsigned * const rle_bits, size_t clcounts[19], int size_only)\n{\n  size_t rle_size = *rle_size_ref;\n  size_t rle_bits_size = *rle_bits_size_ref;\n  unsigned count = *count_ref;\n  while (count >= 3)\n  {\n    unsigned count2 = (count > 10) ? (10) : (count);\n    if (!size_only)\n    {\n      {\n        if (!((*(&rle_size)) & ((*(&rle_size)) - 1)))\n        {\n          rle = (rle_size == 0) ? (malloc(sizeof(*(*(&rle))))) : (realloc(*(&rle), (rle_size * 2) * (sizeof(*(*(&rle))))));\n        }\n        rle[rle_size] = 17;\n        rle_size += 1;\n      }\n      ;\n      {\n        if (!((*(&rle_bits_size)) & ((*(&rle_bits_size)) - 1)))\n        {\n          rle_bits = (rle_bits_size == 0) ? (malloc(sizeof(*(*(&rle_bits))))) : (realloc(*(&rle_bits), (rle_bits_size * 2) * (sizeof(*(*(&rle_bits))))));\n        }\n        rle_bits[rle_bits_size] = count2 - 3;\n        rle_bits_size += 1;\n      }\n      ;\n    }\n    clcounts[17] += 1;\n    count -= count2;\n  }\n\n  *rle_size_ref = rle_size;\n  *rle_bits_size_ref = rle_bits_size;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rle_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const rle_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clcounts",
                        "type": "size_t [19]",
                        "definition": [
                            "size_t clcounts[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_only",
                        "type": "int",
                        "definition": [
                            "int size_only"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_size = *rle_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rle_bits_size",
                        "type": "size_t",
                        "definition": [
                            "size_t rle_bits_size = *rle_bits_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned count2 = (count > 10) ? (10) : (count)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliGzipCompress",
            "header": "void ZopfliGzipCompress(const ZopfliOptions *options, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)",
            "params": [
                "const ZopfliOptions *options",
                "const unsigned char *in",
                "size_t insize",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "void ZopfliGzipCompress(const ZopfliOptions *options, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)\n{\n  unsigned long crcvalue = CRC(in, insize);\n  unsigned char bp = 0;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 31;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 139;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 8;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 0;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 2;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = 3;\n    *outsize += 1;\n  }\n  ;\n  ZopfliDeflate(options, 2, 1, in, insize, &bp, out, outsize);\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = crcvalue % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (crcvalue >> 8) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (crcvalue >> 16) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (crcvalue >> 24) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = insize % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (insize >> 8) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (insize >> 16) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (insize >> 24) % 256;\n    *outsize += 1;\n  }\n  ;\n  if (options->verbose)\n  {\n    fprintf(stderr, \"Original Size: %d, Gzip: %d, Compression: %f%% Removed\\n\", (int) insize, (int) (*outsize), (100.0 * ((double) (insize - (*outsize)))) / ((double) insize));\n  }\n}\n\n",
            "calle": [
                "CRC",
                "ZopfliDeflate",
                "fprintf",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "insize",
                        "type": "size_t",
                        "definition": [
                            "size_t insize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crcvalue",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crcvalue = CRC(in, insize)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char bp = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CRC",
            "header": "",
            "params": [
                "const unsigned char *data",
                "size_t size"
            ],
            "definition": "static unsigned long CRC(const unsigned char *data, size_t size)\n{\n  unsigned int data_idx = 0;\n  unsigned long result = 0xffffffffu;\n  for (; size > 0; size -= 1)\n  {\n    result = crc32_table[(result ^ data[data_idx]) & 0xff] ^ (result >> 8);\n    data_idx += 1;\n  }\n\n  return result ^ 0xffffffffu;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long result = 0xffffffffu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc32_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliAllocHash",
            "header": "void ZopfliAllocHash(size_t window_size, ZopfliHash *h)",
            "params": [
                "size_t window_size",
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliAllocHash(size_t window_size, ZopfliHash *h)\n{\n  h->head = (int *) malloc((sizeof(*h->head)) * 65536);\n  h->prev = (unsigned short *) malloc((sizeof(*h->prev)) * window_size);\n  h->hashval = (int *) malloc((sizeof(*h->hashval)) * window_size);\n  h->same = (unsigned short *) malloc((sizeof(*h->same)) * window_size);\n  h->head2 = (int *) malloc((sizeof(*h->head2)) * 65536);\n  h->prev2 = (unsigned short *) malloc((sizeof(*h->prev2)) * window_size);\n  h->hashval2 = (int *) malloc((sizeof(*h->hashval2)) * window_size);\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "window_size",
                        "type": "size_t",
                        "definition": [
                            "size_t window_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliResetHash",
            "header": "void ZopfliResetHash(size_t window_size, ZopfliHash *h)",
            "params": [
                "size_t window_size",
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliResetHash(size_t window_size, ZopfliHash *h)\n{\n  size_t i;\n  h->val = 0;\n  for (i = 0; i < 65536; i += 1)\n  {\n    h->head[i] = -1;\n  }\n\n  for (i = 0; i < window_size; i += 1)\n  {\n    h->prev[i] = i;\n    h->hashval[i] = -1;\n  }\n\n  for (i = 0; i < window_size; i += 1)\n  {\n    h->same[i] = 0;\n  }\n\n  h->val2 = 0;\n  for (i = 0; i < 65536; i += 1)\n  {\n    h->head2[i] = -1;\n  }\n\n  for (i = 0; i < window_size; i += 1)\n  {\n    h->prev2[i] = i;\n    h->hashval2[i] = -1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "window_size",
                        "type": "size_t",
                        "definition": [
                            "size_t window_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCleanHash",
            "header": "void ZopfliCleanHash(ZopfliHash *h)",
            "params": [
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliCleanHash(ZopfliHash *h)\n{\n  free(h->head);\n  free(h->prev);\n  free(h->hashval);\n  free(h->head2);\n  free(h->prev2);\n  free(h->hashval2);\n  free(h->same);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliUpdateHash",
            "header": "void ZopfliUpdateHash(const unsigned char *array, size_t pos, size_t end, ZopfliHash *h)",
            "params": [
                "const unsigned char *array",
                "size_t pos",
                "size_t end",
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliUpdateHash(const unsigned char *array, size_t pos, size_t end, ZopfliHash *h)\n{\n  unsigned short hpos = pos & (32768 - 1);\n  size_t amount = 0;\n  UpdateHashValue(h, ((pos + 3) <= end) ? (array[(pos + 3) - 1]) : (0));\n  h->hashval[hpos] = h->val;\n  if ((h->head[h->val] != (-1)) && (h->hashval[h->head[h->val]] == h->val))\n  {\n    h->prev[hpos] = h->head[h->val];\n  }\n  else\n    h->prev[hpos] = hpos;\n  h->head[h->val] = hpos;\n  if (h->same[(pos - 1) & (32768 - 1)] > 1)\n  {\n    amount = h->same[(pos - 1) & (32768 - 1)] - 1;\n  }\n  while (((((pos + amount) + 1) < end) && (array[pos] == array[(pos + amount) + 1])) && (amount < ((unsigned short) (-1))))\n  {\n    amount += 1;\n  }\n\n  h->same[hpos] = amount;\n  h->val2 = ((h->same[hpos] - 3) & 255) ^ h->val;\n  h->hashval2[hpos] = h->val2;\n  if ((h->head2[h->val2] != (-1)) && (h->hashval2[h->head2[h->val2]] == h->val2))\n  {\n    h->prev2[hpos] = h->head2[h->val2];\n  }\n  else\n    h->prev2[hpos] = hpos;\n  h->head2[h->val2] = hpos;\n}\n\n",
            "calle": [
                "UpdateHashValue"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hpos",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short hpos = pos & (32768 - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amount",
                        "type": "size_t",
                        "definition": [
                            "size_t amount = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliWarmupHash",
            "header": "void ZopfliWarmupHash(const unsigned char *array, size_t pos, size_t end, ZopfliHash *h)",
            "params": [
                "const unsigned char *array",
                "size_t pos",
                "size_t end",
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliWarmupHash(const unsigned char *array, size_t pos, size_t end, ZopfliHash *h)\n{\n  UpdateHashValue(h, array[pos + 0]);\n  if ((pos + 1) < end)\n  {\n    UpdateHashValue(h, array[pos + 1]);\n  }\n}\n\n",
            "calle": [
                "UpdateHashValue"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "UpdateHashValue",
            "header": "",
            "params": [
                "ZopfliHash *h",
                "unsigned char c"
            ],
            "definition": "static void UpdateHashValue(ZopfliHash *h, unsigned char c)\n{\n  h->val = ((h->val << 5) ^ c) & 32767;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLengthLimitedCodeLengths",
            "header": "int ZopfliLengthLimitedCodeLengths(const size_t *frequencies, int n, int maxbits, unsigned *bitlengths)",
            "params": [
                "const size_t *frequencies",
                "int n",
                "int maxbits",
                "unsigned *bitlengths"
            ],
            "definition": "int ZopfliLengthLimitedCodeLengths(const size_t *frequencies, int n, int maxbits, unsigned *bitlengths)\n{\n  NodePool pool;\n  int i;\n  int numsymbols = 0;\n  int numBoundaryPMRuns;\n  Node *nodes;\n  unsigned int nodes_idx = 0;\n  Node *(*lists)[2];\n  unsigned int lists_idx = 0;\n  Node *leaves = (Node *) malloc(n * (sizeof(*leaves)));\n  for (i = 0; i < n; i += 1)\n  {\n    bitlengths[i] = 0;\n  }\n\n  for (i = 0; i < n; i += 1)\n  {\n    if (frequencies[i])\n    {\n      leaves[numsymbols].weight = frequencies[i];\n      leaves[numsymbols].count = i;\n      numsymbols += 1;\n    }\n  }\n\n  if ((1 << maxbits) < numsymbols)\n  {\n    free(leaves);\n    return 1;\n  }\n  if (numsymbols == 0)\n  {\n    free(leaves);\n    return 0;\n  }\n  if (numsymbols == 1)\n  {\n    bitlengths[leaves[0].count] = 1;\n    free(leaves);\n    return 0;\n  }\n  if (numsymbols == 2)\n  {\n    bitlengths[leaves[0].count] += 1;\n    bitlengths[leaves[1].count] += 1;\n    free(leaves);\n    return 0;\n  }\n  for (i = 0; i < numsymbols; i += 1)\n  {\n    if (leaves[i].weight >= (((size_t) 1) << (((sizeof(leaves[0].weight)) * 8) - 9)))\n    {\n      free(leaves);\n      return 1;\n    }\n    leaves[i].weight = (leaves[i].weight << 9) | leaves[i].count;\n  }\n\n  qsort(leaves, numsymbols, sizeof(Node), LeafComparator);\n  for (i = 0; i < numsymbols; i += 1)\n  {\n    leaves[i].weight >>= 9;\n  }\n\n  if ((numsymbols - 1) < maxbits)\n  {\n    maxbits = numsymbols - 1;\n  }\n  nodes_idx = (Node *) malloc(((maxbits * 2) * numsymbols) * (sizeof(Node)));\n  pool.next = &nodes[nodes_idx];\n  lists_idx = (Node *(*)[2]) malloc(maxbits * (sizeof(*lists_idx)));\n  InitLists(&pool, leaves, maxbits, lists);\n  numBoundaryPMRuns = (2 * numsymbols) - 4;\n  for (i = 0; i < (numBoundaryPMRuns - 1); i += 1)\n  {\n    BoundaryPM(lists, leaves, numsymbols, &pool, maxbits - 1);\n  }\n\n  BoundaryPMFinal(lists, leaves, numsymbols, &pool, maxbits - 1);\n  ExtractBitLengths(lists[(maxbits - 1) + lists_idx][1], leaves, bitlengths);\n  free(lists);\n  free(leaves);\n  free(nodes);\n  return 0;\n}\n\n",
            "calle": [
                "BoundaryPM",
                "BoundaryPMFinal",
                "ExtractBitLengths",
                "InitLists",
                "LeafComparator",
                "free",
                "malloc",
                "qsort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "frequencies",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *frequencies"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxbits",
                        "type": "int",
                        "definition": [
                            "int maxbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitlengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *bitlengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pool",
                        "type": "NodePool",
                        "definition": [
                            "NodePool pool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numsymbols",
                        "type": "int",
                        "definition": [
                            "int numsymbols = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numBoundaryPMRuns",
                        "type": "int",
                        "definition": [
                            "int numBoundaryPMRuns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nodes",
                        "type": "Node *",
                        "definition": [
                            "Node *nodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nodes_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nodes_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lists",
                        "type": "Node *(*)[2]",
                        "definition": [
                            "Node *(*lists)[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lists_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lists_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leaves",
                        "type": "Node *",
                        "definition": [
                            "Node *leaves = (Node *) malloc(n * (sizeof(*leaves)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "InitNode",
            "header": "",
            "params": [
                "size_t weight",
                "int count",
                "Node *tail",
                "Node *node"
            ],
            "definition": "static void InitNode(size_t weight, int count, Node *tail, Node *node)\n{\n  node->weight = weight;\n  node->count = count;\n  node->tail = tail;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "weight",
                        "type": "size_t",
                        "definition": [
                            "size_t weight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tail",
                        "type": "Node *",
                        "definition": [
                            "Node *tail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node",
                        "type": "Node *",
                        "definition": [
                            "Node *node"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BoundaryPM",
            "header": "",
            "params": [
                "Node *(*lists)[2]",
                "Node *leaves",
                "int numsymbols",
                "NodePool *pool",
                "int index"
            ],
            "definition": "static void BoundaryPM(Node *(*lists)[2], Node *leaves, int numsymbols, NodePool *pool, int index)\n{\n  Node *newchain;\n  unsigned int newchain_idx = 0;\n  Node *oldchain;\n  unsigned int oldchain_idx = 0;\n  int lastcount = lists[index][1]->count;\n  if ((index == 0) && (lastcount >= numsymbols))\n  {\n    return;\n  }\n  newchain_idx = pool->next++;\n  oldchain_idx = lists[index][1];\n  lists[index][0] = &oldchain[oldchain_idx];\n  lists[index][1] = &newchain[newchain_idx];\n  if (index == 0)\n  {\n    InitNode(leaves[lastcount].weight, lastcount + 1, 0, newchain);\n  }\n  else\n  {\n    size_t sum = lists[index - 1][0]->weight + lists[index - 1][1]->weight;\n    if ((lastcount < numsymbols) && (sum > leaves[lastcount].weight))\n    {\n      InitNode(leaves[lastcount].weight, lastcount + 1, oldchain->tail, newchain);\n    }\n    else\n    {\n      InitNode(sum, lastcount, lists[index - 1][1], newchain);\n      BoundaryPM(lists, leaves, numsymbols, pool, index - 1);\n      BoundaryPM(lists, leaves, numsymbols, pool, index - 1);\n    }\n  }\n}\n\n",
            "calle": [
                "BoundaryPM",
                "InitNode"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lists",
                        "type": "Node *(*)[2]",
                        "definition": [
                            "Node *(*lists)[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leaves",
                        "type": "Node *",
                        "definition": [
                            "Node *leaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numsymbols",
                        "type": "int",
                        "definition": [
                            "int numsymbols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pool",
                        "type": "NodePool *",
                        "definition": [
                            "NodePool *pool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newchain",
                        "type": "Node *",
                        "definition": [
                            "Node *newchain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newchain_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int newchain_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldchain",
                        "type": "Node *",
                        "definition": [
                            "Node *oldchain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldchain_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int oldchain_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastcount",
                        "type": "int",
                        "definition": [
                            "int lastcount = lists[index][1]->count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = lists[index - 1][0]->weight + lists[index - 1][1]->weight"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "BoundaryPMFinal",
            "header": "",
            "params": [
                "Node *(*lists)[2]",
                "Node *leaves",
                "int numsymbols",
                "NodePool *pool",
                "int index"
            ],
            "definition": "static void BoundaryPMFinal(Node *(*lists)[2], Node *leaves, int numsymbols, NodePool *pool, int index)\n{\n  int lastcount = lists[index][1]->count;\n  size_t sum = lists[index - 1][0]->weight + lists[index - 1][1]->weight;\n  if ((lastcount < numsymbols) && (sum > leaves[lastcount].weight))\n  {\n    Node *newchain = pool->next;\n    Node *oldchain = lists[index][1]->tail;\n    lists[index][1] = newchain;\n    newchain->count = lastcount + 1;\n    newchain->tail = oldchain;\n  }\n  else\n  {\n    lists[index][1]->tail = lists[index - 1][1];\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lists",
                        "type": "Node *(*)[2]",
                        "definition": [
                            "Node *(*lists)[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leaves",
                        "type": "Node *",
                        "definition": [
                            "Node *leaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numsymbols",
                        "type": "int",
                        "definition": [
                            "int numsymbols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pool",
                        "type": "NodePool *",
                        "definition": [
                            "NodePool *pool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastcount",
                        "type": "int",
                        "definition": [
                            "int lastcount = lists[index][1]->count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = lists[index - 1][0]->weight + lists[index - 1][1]->weight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newchain",
                        "type": "Node *",
                        "definition": [
                            "Node *newchain = pool->next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldchain",
                        "type": "Node *",
                        "definition": [
                            "Node *oldchain = lists[index][1]->tail"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "InitLists",
            "header": "",
            "params": [
                "NodePool *pool",
                "const Node *leaves",
                "int maxbits",
                "Node *(*lists)[2]"
            ],
            "definition": "static void InitLists(NodePool *pool, const Node *leaves, int maxbits, Node *(*lists)[2])\n{\n  int i;\n  Node *node0 = pool->next++;\n  Node *node1 = pool->next++;\n  InitNode(leaves[0].weight, 1, 0, node0);\n  InitNode(leaves[1].weight, 2, 0, node1);\n  for (i = 0; i < maxbits; i += 1)\n  {\n    lists[i][0] = node0;\n    lists[i][1] = node1;\n  }\n\n}\n\n",
            "calle": [
                "InitNode"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pool",
                        "type": "NodePool *",
                        "definition": [
                            "NodePool *pool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leaves",
                        "type": "const Node *",
                        "definition": [
                            "const Node *leaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxbits",
                        "type": "int",
                        "definition": [
                            "int maxbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lists",
                        "type": "Node *(*)[2]",
                        "definition": [
                            "Node *(*lists)[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node0",
                        "type": "Node *",
                        "definition": [
                            "Node *node0 = pool->next++"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node1",
                        "type": "Node *",
                        "definition": [
                            "Node *node1 = pool->next++"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ExtractBitLengths",
            "header": "",
            "params": [
                "Node *chain",
                "Node *leaves",
                "unsigned *bitlengths"
            ],
            "definition": "static void ExtractBitLengths(Node *chain, Node *leaves, unsigned *bitlengths)\n{\n  int counts[16] = {0};\n  unsigned end = 16;\n  unsigned ptr = 15;\n  unsigned value = 1;\n  Node *node;\n  unsigned int node_idx = 0;\n  int val;\n  for (node_idx = chain; node; node_idx = node_idx->tail)\n  {\n    end -= 1;\n    counts[end] = node->count;\n  }\n\n  val = counts[15];\n  while (ptr >= end)\n  {\n    for (; val > counts[ptr - 1]; val -= 1)\n    {\n      bitlengths[leaves[val - 1].count] = value;\n    }\n\n    ptr -= 1;\n    value += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chain",
                        "type": "Node *",
                        "definition": [
                            "Node *chain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leaves",
                        "type": "Node *",
                        "definition": [
                            "Node *leaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitlengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *bitlengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counts",
                        "type": "int [16]",
                        "definition": [
                            "int counts[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "unsigned",
                        "definition": [
                            "unsigned end = 16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned ptr = 15"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned",
                        "definition": [
                            "unsigned value = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node",
                        "type": "Node *",
                        "definition": [
                            "Node *node"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int node_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "LeafComparator",
            "header": "",
            "params": [
                "const void *a",
                "const void *b"
            ],
            "definition": "static int LeafComparator(const void *a, const void *b)\n{\n  return ((const Node *) a)->weight - ((const Node *) b)->weight;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const void *",
                        "definition": [
                            "const void *a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const void *",
                        "definition": [
                            "const void *b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliInitLZ77Store",
            "header": "void ZopfliInitLZ77Store(const unsigned char *data, ZopfliLZ77Store *store)",
            "params": [
                "const unsigned char *data",
                "ZopfliLZ77Store *store"
            ],
            "definition": "void ZopfliInitLZ77Store(const unsigned char *data, ZopfliLZ77Store *store)\n{\n  store->size = 0;\n  store->litlens = 0;\n  store->dists = 0;\n  store->pos = 0;\n  store->data = data;\n  store->ll_symbol = 0;\n  store->d_symbol = 0;\n  store->ll_counts = 0;\n  store->d_counts = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCleanLZ77Store",
            "header": "void ZopfliCleanLZ77Store(ZopfliLZ77Store *store)",
            "params": [
                "ZopfliLZ77Store *store"
            ],
            "definition": "void ZopfliCleanLZ77Store(ZopfliLZ77Store *store)\n{\n  free(store->litlens);\n  free(store->dists);\n  free(store->pos);\n  free(store->ll_symbol);\n  free(store->d_symbol);\n  free(store->ll_counts);\n  free(store->d_counts);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCopyLZ77Store",
            "header": "void ZopfliCopyLZ77Store(const ZopfliLZ77Store *source, ZopfliLZ77Store *dest)",
            "params": [
                "const ZopfliLZ77Store *source",
                "ZopfliLZ77Store *dest"
            ],
            "definition": "void ZopfliCopyLZ77Store(const ZopfliLZ77Store *source, ZopfliLZ77Store *dest)\n{\n  size_t i;\n  size_t llsize = 288 * CeilDiv(source->size, 288);\n  size_t dsize = 32 * CeilDiv(source->size, 32);\n  ZopfliCleanLZ77Store(dest);\n  ZopfliInitLZ77Store(source->data, dest);\n  dest->litlens = (unsigned short *) malloc((sizeof(*dest->litlens)) * source->size);\n  dest->dists = (unsigned short *) malloc((sizeof(*dest->dists)) * source->size);\n  dest->pos = (size_t *) malloc((sizeof(*dest->pos)) * source->size);\n  dest->ll_symbol = (unsigned short *) malloc((sizeof(*dest->ll_symbol)) * source->size);\n  dest->d_symbol = (unsigned short *) malloc((sizeof(*dest->d_symbol)) * source->size);\n  dest->ll_counts = (size_t *) malloc((sizeof(*dest->ll_counts)) * llsize);\n  dest->d_counts = (size_t *) malloc((sizeof(*dest->d_counts)) * dsize);\n  if ((!dest->litlens) || (!dest->dists))\n  {\n    exit(-1);\n  }\n  if (!dest->pos)\n  {\n    exit(-1);\n  }\n  if ((!dest->ll_symbol) || (!dest->d_symbol))\n  {\n    exit(-1);\n  }\n  if ((!dest->ll_counts) || (!dest->d_counts))\n  {\n    exit(-1);\n  }\n  dest->size = source->size;\n  for (i = 0; i < source->size; i += 1)\n  {\n    dest->litlens[i] = source->litlens[i];\n    dest->dists[i] = source->dists[i];\n    dest->pos[i] = source->pos[i];\n    dest->ll_symbol[i] = source->ll_symbol[i];\n    dest->d_symbol[i] = source->d_symbol[i];\n  }\n\n  for (i = 0; i < llsize; i += 1)\n  {\n    dest->ll_counts[i] = source->ll_counts[i];\n  }\n\n  for (i = 0; i < dsize; i += 1)\n  {\n    dest->d_counts[i] = source->d_counts[i];\n  }\n\n}\n\n",
            "calle": [
                "CeilDiv",
                "ZopfliCleanLZ77Store",
                "ZopfliInitLZ77Store",
                "exit",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llsize",
                        "type": "size_t",
                        "definition": [
                            "size_t llsize = 288 * CeilDiv(source->size, 288)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsize",
                        "type": "size_t",
                        "definition": [
                            "size_t dsize = 32 * CeilDiv(source->size, 32)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliStoreLitLenDist",
            "header": "void ZopfliStoreLitLenDist(unsigned short length, unsigned short dist, size_t pos, ZopfliLZ77Store *store)",
            "params": [
                "unsigned short length",
                "unsigned short dist",
                "size_t pos",
                "ZopfliLZ77Store *store"
            ],
            "definition": "void ZopfliStoreLitLenDist(unsigned short length, unsigned short dist, size_t pos, ZopfliLZ77Store *store)\n{\n  size_t i;\n  size_t origsize = store->size;\n  size_t llstart = 288 * (origsize / 288);\n  size_t dstart = 32 * (origsize / 32);\n  if ((origsize % 288) == 0)\n  {\n    helper_ZopfliStoreLitLenDist_1(&i, store, origsize);\n  }\n  if ((origsize % 32) == 0)\n  {\n    helper_ZopfliStoreLitLenDist_2(&i, store, origsize);\n  }\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->litlens = (store->size == 0) ? (malloc(sizeof(*(*(&store->litlens))))) : (realloc(*(&store->litlens), (store->size * 2) * (sizeof(*(*(&store->litlens))))));\n    }\n    store->litlens[store->size] = length;\n    store->size += 1;\n  }\n  ;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->dists = (store->size == 0) ? (malloc(sizeof(*(*(&store->dists))))) : (realloc(*(&store->dists), (store->size * 2) * (sizeof(*(*(&store->dists))))));\n    }\n    store->dists[store->size] = dist;\n    store->size += 1;\n  }\n  ;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->pos = (store->size == 0) ? (malloc(sizeof(*(*(&store->pos))))) : (realloc(*(&store->pos), (store->size * 2) * (sizeof(*(*(&store->pos))))));\n    }\n    store->pos[store->size] = pos;\n    store->size += 1;\n  }\n  ;\n  assert(length < 259);\n  if (dist == 0)\n  {\n    helper_ZopfliStoreLitLenDist_3(&length, &llstart, store, origsize);\n  }\n  else\n  {\n    helper_ZopfliStoreLitLenDist_4(&length, &dist, &llstart, &dstart, store, origsize);\n  }\n}\n\n",
            "calle": [
                "assert",
                "helper_ZopfliStoreLitLenDist_1",
                "helper_ZopfliStoreLitLenDist_2",
                "helper_ZopfliStoreLitLenDist_3",
                "helper_ZopfliStoreLitLenDist_4",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origsize",
                        "type": "size_t",
                        "definition": [
                            "size_t origsize = store->size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llstart",
                        "type": "size_t",
                        "definition": [
                            "size_t llstart = 288 * (origsize / 288)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstart",
                        "type": "size_t",
                        "definition": [
                            "size_t dstart = 32 * (origsize / 32)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliAppendLZ77Store",
            "header": "void ZopfliAppendLZ77Store(const ZopfliLZ77Store *store, ZopfliLZ77Store *target)",
            "params": [
                "const ZopfliLZ77Store *store",
                "ZopfliLZ77Store *target"
            ],
            "definition": "void ZopfliAppendLZ77Store(const ZopfliLZ77Store *store, ZopfliLZ77Store *target)\n{\n  size_t i;\n  for (i = 0; i < store->size; i += 1)\n  {\n    ZopfliStoreLitLenDist(store->litlens[i], store->dists[i], store->pos[i], target);\n  }\n\n}\n\n",
            "calle": [
                "ZopfliStoreLitLenDist"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "store",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77GetByteRange",
            "header": "size_t ZopfliLZ77GetByteRange(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend"
            ],
            "definition": "size_t ZopfliLZ77GetByteRange(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend)\n{\n  size_t l = lend - 1;\n  if (lstart == lend)\n  {\n    return 0;\n  }\n  return (lz77->pos[l] + ((lz77->dists[l] == 0) ? (1) : (lz77->litlens[l]))) - lz77->pos[lstart];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "size_t",
                        "definition": [
                            "size_t l = lend - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77GetHistogram",
            "header": "void ZopfliLZ77GetHistogram(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, size_t *ll_counts, size_t *d_counts)",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lstart",
                "size_t lend",
                "size_t *ll_counts",
                "size_t *d_counts"
            ],
            "definition": "void ZopfliLZ77GetHistogram(const ZopfliLZ77Store *lz77, size_t lstart, size_t lend, size_t *ll_counts, size_t *d_counts)\n{\n  size_t i;\n  if ((lstart + (288 * 3)) > lend)\n  {\n    memset(ll_counts, 0, (sizeof(*ll_counts)) * 288);\n    memset(d_counts, 0, (sizeof(*d_counts)) * 32);\n    for (i = lstart; i < lend; i += 1)\n    {\n      ll_counts[lz77->ll_symbol[i]] += 1;\n      if (lz77->dists[i] != 0)\n      {\n        d_counts[lz77->d_symbol[i]] += 1;\n      }\n    }\n\n  }\n  else\n  {\n    ZopfliLZ77GetHistogramAt(lz77, lend - 1, ll_counts, d_counts);\n    if (lstart > 0)\n    {\n      size_t ll_counts2[288];\n      size_t d_counts2[32];\n      ZopfliLZ77GetHistogramAt(lz77, lstart - 1, ll_counts2, d_counts2);\n      for (i = 0; i < 288; i += 1)\n      {\n        ll_counts[i] -= ll_counts2[i];\n      }\n\n      for (i = 0; i < 32; i += 1)\n      {\n        d_counts[i] -= d_counts2[i];\n      }\n\n    }\n  }\n}\n\n",
            "calle": [
                "ZopfliLZ77GetHistogramAt",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lstart",
                        "type": "size_t",
                        "definition": [
                            "size_t lstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lend",
                        "type": "size_t",
                        "definition": [
                            "size_t lend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *ll_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *d_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts2",
                        "type": "size_t [288]",
                        "definition": [
                            "size_t ll_counts2[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts2",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t d_counts2[32]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliInitBlockState",
            "header": "void ZopfliInitBlockState(const ZopfliOptions *options, size_t blockstart, size_t blockend, int add_lmc, ZopfliBlockState *s)",
            "params": [
                "const ZopfliOptions *options",
                "size_t blockstart",
                "size_t blockend",
                "int add_lmc",
                "ZopfliBlockState *s"
            ],
            "definition": "void ZopfliInitBlockState(const ZopfliOptions *options, size_t blockstart, size_t blockend, int add_lmc, ZopfliBlockState *s)\n{\n  s->options = options;\n  s->blockstart = blockstart;\n  s->blockend = blockend;\n  if (add_lmc)\n  {\n    s->lmc = (ZopfliLongestMatchCache *) malloc(sizeof(ZopfliLongestMatchCache));\n    ZopfliInitCache(blockend - blockstart, s->lmc);\n  }\n  else\n  {\n    s->lmc = 0;\n  }\n}\n\n",
            "calle": [
                "ZopfliInitCache",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockstart",
                        "type": "size_t",
                        "definition": [
                            "size_t blockstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockend",
                        "type": "size_t",
                        "definition": [
                            "size_t blockend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add_lmc",
                        "type": "int",
                        "definition": [
                            "int add_lmc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCleanBlockState",
            "header": "void ZopfliCleanBlockState(ZopfliBlockState *s)",
            "params": [
                "ZopfliBlockState *s"
            ],
            "definition": "void ZopfliCleanBlockState(ZopfliBlockState *s)\n{\n  if (s->lmc)\n  {\n    ZopfliCleanCache(s->lmc);\n    free(s->lmc);\n  }\n}\n\n",
            "calle": [
                "ZopfliCleanCache",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliFindLongestMatch",
            "header": "void ZopfliFindLongestMatch(ZopfliBlockState *s, const ZopfliHash *h, const unsigned char *array, size_t pos, size_t size, size_t limit, unsigned short *sublen, unsigned short *distance, unsigned short *length)",
            "params": [
                "ZopfliBlockState *s",
                "const ZopfliHash *h",
                "const unsigned char *array",
                "size_t pos",
                "size_t size",
                "size_t limit",
                "unsigned short *sublen",
                "unsigned short *distance",
                "unsigned short *length"
            ],
            "definition": "void ZopfliFindLongestMatch(ZopfliBlockState *s, const ZopfliHash *h, const unsigned char *array, size_t pos, size_t size, size_t limit, unsigned short *sublen, unsigned short *distance, unsigned short *length)\n{\n  unsigned short hpos = pos & (32768 - 1);\n  unsigned short p;\n  unsigned short pp;\n  unsigned short bestdist = 0;\n  unsigned short bestlength = 1;\n  const unsigned char *scan;\n  unsigned int scan_idx = 0;\n  const unsigned char *match;\n  unsigned int match_idx = 0;\n  const unsigned char *arrayend;\n  unsigned int arrayend_idx = 0;\n  const unsigned char *arrayend_safe;\n  unsigned int arrayend_safe_idx = 0;\n  int chain_counter = 8192;\n  unsigned dist = 0;\n  int *hhead = h->head;\n  unsigned int hhead_idx = 0;\n  unsigned short *hprev = h->prev;\n  unsigned int hprev_idx = 0;\n  int *hhashval = h->hashval;\n  unsigned int hhashval_idx = 0;\n  int hval = h->val;\n  if (TryGetFromLongestMatchCache(s, pos, &limit, sublen, distance, length))\n  {\n    assert((pos + (*length)) <= size);\n    return;\n  }\n  assert(limit <= 258);\n  assert(limit >= 3);\n  assert(pos < size);\n  if ((size - pos) < 3)\n  {\n    *length = 0;\n    *distance = 0;\n    return;\n  }\n  if ((pos + limit) > size)\n  {\n    limit = size - pos;\n  }\n  arrayend_idx = (&array[pos]) + limit;\n  arrayend_safe_idx = (&arrayend[arrayend_idx]) - 8;\n  assert(hval < 65536);\n  pp = hhead[hval + hhead_idx];\n  p = hprev[pp + hprev_idx];\n  assert(pp == hpos);\n  dist = (p < pp) ? (pp - p) : ((32768 - p) + pp);\n  while (dist < 32768)\n  {\n    helper_ZopfliFindLongestMatch_1(&p, &pp, &bestdist, &bestlength, &scan_idx, &match_idx, &chain_counter, &dist, &hhead_idx, &hprev_idx, &hhashval_idx, &hval, h, array, pos, size, limit, sublen, hpos, scan, match, arrayend, arrayend_safe, hhead, hprev, hhashval);\n  }\n\n  StoreInLongestMatchCache(s, pos, limit, sublen, bestdist, bestlength);\n  assert(bestlength <= limit);\n  *distance = bestdist;\n  *length = bestlength;\n  assert((pos + (*length)) <= size);\n}\n\n",
            "calle": [
                "StoreInLongestMatchCache",
                "TryGetFromLongestMatchCache",
                "assert",
                "helper_ZopfliFindLongestMatch_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const ZopfliHash *",
                        "definition": [
                            "const ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *distance"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hpos",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short hpos = pos & (32768 - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestdist = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestlength = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *arrayend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arrayend_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_safe",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *arrayend_safe"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_safe_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arrayend_safe_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chain_counter",
                        "type": "int",
                        "definition": [
                            "int chain_counter = 8192"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhead",
                        "type": "int *",
                        "definition": [
                            "int *hhead = h->head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhead_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hhead_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hprev",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *hprev = h->prev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hprev_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hprev_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhashval",
                        "type": "int *",
                        "definition": [
                            "int *hhashval = h->hashval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhashval_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hhashval_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hval",
                        "type": "int",
                        "definition": [
                            "int hval = h->val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliVerifyLenDist",
            "header": "void ZopfliVerifyLenDist(const unsigned char *data, size_t datasize, size_t pos, unsigned short dist, unsigned short length)",
            "params": [
                "const unsigned char *data",
                "size_t datasize",
                "size_t pos",
                "unsigned short dist",
                "unsigned short length"
            ],
            "definition": "void ZopfliVerifyLenDist(const unsigned char *data, size_t datasize, size_t pos, unsigned short dist, unsigned short length)\n{\n  size_t i;\n  assert((pos + length) <= datasize);\n  for (i = 0; i < length; i += 1)\n  {\n    if (data[(pos - dist) + i] != data[pos + i])\n    {\n      assert(data[(pos - dist) + i] == data[pos + i]);\n      break;\n    }\n  }\n\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "datasize",
                        "type": "size_t",
                        "definition": [
                            "size_t datasize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77Greedy",
            "header": "void ZopfliLZ77Greedy(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, ZopfliLZ77Store *store, ZopfliHash *h)",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "ZopfliLZ77Store *store",
                "ZopfliHash *h"
            ],
            "definition": "void ZopfliLZ77Greedy(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, ZopfliLZ77Store *store, ZopfliHash *h)\n{\n  size_t i = 0;\n  size_t j;\n  unsigned short leng;\n  unsigned short dist;\n  int lengthscore;\n  size_t windowstart = (instart > 32768) ? (instart - 32768) : (0);\n  unsigned short dummysublen[259];\n  unsigned prev_length = 0;\n  unsigned prev_match = 0;\n  int prevlengthscore;\n  int match_available = 0;\n  if (instart == inend)\n  {\n    return;\n  }\n  ZopfliResetHash(32768, h);\n  ZopfliWarmupHash(in, windowstart, inend, h);\n  for (i = windowstart; i < instart; i += 1)\n  {\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  for (i = instart; i < inend; i += 1)\n  {\n    helper_ZopfliLZ77Greedy_1(&i, &j, &leng, &dist, &lengthscore, &prev_length, &prev_match, &prevlengthscore, &match_available, s, in, inend, store, h, dummysublen);\n  }\n\n}\n\n",
            "calle": [
                "ZopfliResetHash",
                "ZopfliUpdateHash",
                "ZopfliWarmupHash",
                "helper_ZopfliLZ77Greedy_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore",
                        "type": "int",
                        "definition": [
                            "int lengthscore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowstart",
                        "type": "size_t",
                        "definition": [
                            "size_t windowstart = (instart > 32768) ? (instart - 32768) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummysublen",
                        "type": "unsigned short [259]",
                        "definition": [
                            "unsigned short dummysublen[259]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_length = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_match = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlengthscore",
                        "type": "int",
                        "definition": [
                            "int prevlengthscore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available",
                        "type": "int",
                        "definition": [
                            "int match_available = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CeilDiv",
            "header": "",
            "params": [
                "size_t a",
                "size_t b"
            ],
            "definition": "static size_t CeilDiv(size_t a, size_t b)\n{\n  return ((a + b) - 1) / b;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "size_t",
                        "definition": [
                            "size_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "size_t",
                        "definition": [
                            "size_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77GetHistogramAt",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *lz77",
                "size_t lpos",
                "size_t *ll_counts",
                "size_t *d_counts"
            ],
            "definition": "static void ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *lz77, size_t lpos, size_t *ll_counts, size_t *d_counts)\n{\n  size_t llpos = 288 * (lpos / 288);\n  size_t dpos = 32 * (lpos / 32);\n  size_t i;\n  for (i = 0; i < 288; i += 1)\n  {\n    ll_counts[i] = lz77->ll_counts[llpos + i];\n  }\n\n  for (i = lpos + 1; (i < (llpos + 288)) && (i < lz77->size); i += 1)\n  {\n    ll_counts[lz77->ll_symbol[i]] -= 1;\n  }\n\n  for (i = 0; i < 32; i += 1)\n  {\n    d_counts[i] = lz77->d_counts[dpos + i];\n  }\n\n  for (i = lpos + 1; (i < (dpos + 32)) && (i < lz77->size); i += 1)\n  {\n    if (lz77->dists[i] != 0)\n    {\n      d_counts[lz77->d_symbol[i]] -= 1;\n    }\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lz77",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *lz77"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpos",
                        "type": "size_t",
                        "definition": [
                            "size_t lpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ll_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *ll_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_counts",
                        "type": "size_t *",
                        "definition": [
                            "size_t *d_counts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llpos",
                        "type": "size_t",
                        "definition": [
                            "size_t llpos = 288 * (lpos / 288)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dpos",
                        "type": "size_t",
                        "definition": [
                            "size_t dpos = 32 * (lpos / 32)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetLengthScore",
            "header": "",
            "params": [
                "int length",
                "int distance"
            ],
            "definition": "static int GetLengthScore(int length, int distance)\n{\n  return (distance > 1024) ? (length - 1) : (length);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "int",
                        "definition": [
                            "int distance"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetMatch",
            "header": "",
            "params": [
                "const unsigned char *scan",
                "const unsigned char *match",
                "const unsigned char *end",
                "const unsigned char *safe_end"
            ],
            "definition": "static const unsigned char *GetMatch(const unsigned char *scan, const unsigned char *match, const unsigned char *end, const unsigned char *safe_end)\n{\n  unsigned int match_idx = 0;\n  unsigned int scan_idx = 0;\n  if ((sizeof(size_t)) == 8)\n  {\n    while (((&scan[scan_idx]) < safe_end) && ((*((size_t *) scan)) == (*((size_t *) match))))\n    {\n      scan_idx += 8;\n      match_idx += 8;\n    }\n\n  }\n  else\n    if ((sizeof(unsigned int)) == 4)\n  {\n    while (((&scan[scan_idx]) < safe_end) && ((*((unsigned int *) scan)) == (*((unsigned int *) match))))\n    {\n      scan_idx += 4;\n      match_idx += 4;\n    }\n\n  }\n  else\n  {\n    while ((((((((((&scan[scan_idx]) < safe_end) && (scan[scan_idx] == match[match_idx])) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx])))))\n    {\n      scan_idx += 1;\n      match_idx += 1;\n    }\n\n  }\n  while (((&scan[scan_idx]) != end) && (scan[scan_idx] == match[match_idx]))\n  {\n    scan_idx += 1;\n    match_idx += 1;\n  }\n\n  return scan;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "scan",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "safe_end",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *safe_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "TryGetFromLongestMatchCache",
            "header": "",
            "params": [
                "ZopfliBlockState *s",
                "size_t pos",
                "size_t *limit",
                "unsigned short *sublen",
                "unsigned short *distance",
                "unsigned short *length"
            ],
            "definition": "static int TryGetFromLongestMatchCache(ZopfliBlockState *s, size_t pos, size_t *limit, unsigned short *sublen, unsigned short *distance, unsigned short *length)\n{\n  size_t lmcpos = pos - s->blockstart;\n  unsigned char cache_available = s->lmc && ((s->lmc->length[lmcpos] == 0) || (s->lmc->dist[lmcpos] != 0));\n  unsigned char limit_ok_for_cache = cache_available && ((((*limit) == 258) || (s->lmc->length[lmcpos] <= (*limit))) || (sublen && (ZopfliMaxCachedSublen(s->lmc, lmcpos, s->lmc->length[lmcpos]) >= (*limit))));\n  if ((s->lmc && limit_ok_for_cache) && cache_available)\n  {\n    if ((!sublen) || (s->lmc->length[lmcpos] <= ZopfliMaxCachedSublen(s->lmc, lmcpos, s->lmc->length[lmcpos])))\n    {\n      *length = s->lmc->length[lmcpos];\n      if ((*length) > (*limit))\n      {\n        *length = *limit;\n      }\n      if (sublen)\n      {\n        ZopfliCacheToSublen(s->lmc, lmcpos, *length, sublen);\n        *distance = sublen[*length];\n        if (((*limit) == 258) && ((*length) >= 3))\n        {\n          assert(sublen[*length] == s->lmc->dist[lmcpos]);\n        }\n      }\n      else\n      {\n        *distance = s->lmc->dist[lmcpos];\n      }\n      return 1;\n    }\n    *limit = s->lmc->length[lmcpos];\n  }\n  return 0;\n}\n\n",
            "calle": [
                "ZopfliCacheToSublen",
                "ZopfliMaxCachedSublen",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t *",
                        "definition": [
                            "size_t *limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *distance"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmcpos",
                        "type": "size_t",
                        "definition": [
                            "size_t lmcpos = pos - s->blockstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_available",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char cache_available = s->lmc && ((s->lmc->length[lmcpos] == 0) || (s->lmc->dist[lmcpos] != 0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit_ok_for_cache",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char limit_ok_for_cache = cache_available && ((((*limit) == 258) || (s->lmc->length[lmcpos] <= (*limit))) || (sublen && (ZopfliMaxCachedSublen(s->lmc, lmcpos, s->lmc->length[lmcpos]) >= (*limit))))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "StoreInLongestMatchCache",
            "header": "",
            "params": [
                "ZopfliBlockState *s",
                "size_t pos",
                "size_t limit",
                "const unsigned short *sublen",
                "unsigned short distance",
                "unsigned short length"
            ],
            "definition": "static void StoreInLongestMatchCache(ZopfliBlockState *s, size_t pos, size_t limit, const unsigned short *sublen, unsigned short distance, unsigned short length)\n{\n  size_t lmcpos = pos - s->blockstart;\n  unsigned char cache_available = s->lmc && ((s->lmc->length[lmcpos] == 0) || (s->lmc->dist[lmcpos] != 0));\n  if (((s->lmc && (limit == 258)) && sublen) && (!cache_available))\n  {\n    assert((s->lmc->length[lmcpos] == 1) && (s->lmc->dist[lmcpos] == 0));\n    s->lmc->dist[lmcpos] = (length < 3) ? (0) : (distance);\n    s->lmc->length[lmcpos] = (length < 3) ? (0) : (length);\n    assert(!((s->lmc->length[lmcpos] == 1) && (s->lmc->dist[lmcpos] == 0)));\n    ZopfliSublenToCache(sublen, lmcpos, length, s->lmc);\n  }\n}\n\n",
            "calle": [
                "ZopfliSublenToCache",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "const unsigned short *",
                        "definition": [
                            "const unsigned short *sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short distance"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmcpos",
                        "type": "size_t",
                        "definition": [
                            "size_t lmcpos = pos - s->blockstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_available",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char cache_available = s->lmc && ((s->lmc->length[lmcpos] == 0) || (s->lmc->dist[lmcpos] != 0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliStoreLitLenDist_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "ZopfliLZ77Store * const store",
                "size_t origsize"
            ],
            "definition": "void helper_ZopfliStoreLitLenDist_1(size_t * const i_ref, ZopfliLZ77Store * const store, size_t origsize)\n{\n  size_t i = *i_ref;\n  size_t llsize = origsize;\n  for (i = 0; i < 288; i += 1)\n  {\n    {\n      if (!((*(&llsize)) & ((*(&llsize)) - 1)))\n      {\n        store->ll_counts = (llsize == 0) ? (malloc(sizeof(*(*(&store->ll_counts))))) : (realloc(*(&store->ll_counts), (llsize * 2) * (sizeof(*(*(&store->ll_counts))))));\n      }\n      store->ll_counts[llsize] = (origsize == 0) ? (0) : (store->ll_counts[(origsize - 288) + i]);\n      llsize += 1;\n    }\n    ;\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origsize",
                        "type": "size_t",
                        "definition": [
                            "size_t origsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llsize",
                        "type": "size_t",
                        "definition": [
                            "size_t llsize = origsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliStoreLitLenDist_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "ZopfliLZ77Store * const store",
                "size_t origsize"
            ],
            "definition": "void helper_ZopfliStoreLitLenDist_2(size_t * const i_ref, ZopfliLZ77Store * const store, size_t origsize)\n{\n  size_t i = *i_ref;\n  size_t dsize = origsize;\n  for (i = 0; i < 32; i += 1)\n  {\n    {\n      if (!((*(&dsize)) & ((*(&dsize)) - 1)))\n      {\n        store->d_counts = (dsize == 0) ? (malloc(sizeof(*(*(&store->d_counts))))) : (realloc(*(&store->d_counts), (dsize * 2) * (sizeof(*(*(&store->d_counts))))));\n      }\n      store->d_counts[dsize] = (origsize == 0) ? (0) : (store->d_counts[(origsize - 32) + i]);\n      dsize += 1;\n    }\n    ;\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origsize",
                        "type": "size_t",
                        "definition": [
                            "size_t origsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsize",
                        "type": "size_t",
                        "definition": [
                            "size_t dsize = origsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliStoreLitLenDist_3",
            "header": "",
            "params": [
                "unsigned short * const length_ref",
                "size_t * const llstart_ref",
                "ZopfliLZ77Store * const store",
                "size_t origsize"
            ],
            "definition": "void helper_ZopfliStoreLitLenDist_3(unsigned short * const length_ref, size_t * const llstart_ref, ZopfliLZ77Store * const store, size_t origsize)\n{\n  unsigned short length = *length_ref;\n  size_t llstart = *llstart_ref;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->ll_symbol = (store->size == 0) ? (malloc(sizeof(*(*(&store->ll_symbol))))) : (realloc(*(&store->ll_symbol), (store->size * 2) * (sizeof(*(*(&store->ll_symbol))))));\n    }\n    store->ll_symbol[store->size] = length;\n    store->size += 1;\n  }\n  ;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->d_symbol = (store->size == 0) ? (malloc(sizeof(*(*(&store->d_symbol))))) : (realloc(*(&store->d_symbol), (store->size * 2) * (sizeof(*(*(&store->d_symbol))))));\n    }\n    store->d_symbol[store->size] = 0;\n    store->size += 1;\n  }\n  ;\n  store->ll_counts[llstart + length] += 1;\n  *length_ref = length;\n  *llstart_ref = llstart;\n}\n\n",
            "calle": [
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llstart_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const llstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origsize",
                        "type": "size_t",
                        "definition": [
                            "size_t origsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llstart",
                        "type": "size_t",
                        "definition": [
                            "size_t llstart = *llstart_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliStoreLitLenDist_4",
            "header": "",
            "params": [
                "unsigned short * const length_ref",
                "unsigned short * const dist_ref",
                "size_t * const llstart_ref",
                "size_t * const dstart_ref",
                "ZopfliLZ77Store * const store",
                "size_t origsize"
            ],
            "definition": "void helper_ZopfliStoreLitLenDist_4(unsigned short * const length_ref, unsigned short * const dist_ref, size_t * const llstart_ref, size_t * const dstart_ref, ZopfliLZ77Store * const store, size_t origsize)\n{\n  unsigned short length = *length_ref;\n  unsigned short dist = *dist_ref;\n  size_t llstart = *llstart_ref;\n  size_t dstart = *dstart_ref;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->ll_symbol = (store->size == 0) ? (malloc(sizeof(*(*(&store->ll_symbol))))) : (realloc(*(&store->ll_symbol), (store->size * 2) * (sizeof(*(*(&store->ll_symbol))))));\n    }\n    store->ll_symbol[store->size] = ZopfliGetLengthSymbol(length);\n    store->size += 1;\n  }\n  ;\n  store->size = origsize;\n  {\n    if (!((*(&store->size)) & ((*(&store->size)) - 1)))\n    {\n      store->d_symbol = (store->size == 0) ? (malloc(sizeof(*(*(&store->d_symbol))))) : (realloc(*(&store->d_symbol), (store->size * 2) * (sizeof(*(*(&store->d_symbol))))));\n    }\n    store->d_symbol[store->size] = ZopfliGetDistSymbol(dist);\n    store->size += 1;\n  }\n  ;\n  store->ll_counts[llstart + ZopfliGetLengthSymbol(length)] += 1;\n  store->d_counts[dstart + ZopfliGetDistSymbol(dist)] += 1;\n  *length_ref = length;\n  *dist_ref = dist;\n  *llstart_ref = llstart;\n  *dstart_ref = dstart;\n}\n\n",
            "calle": [
                "ZopfliGetDistSymbol",
                "ZopfliGetLengthSymbol",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llstart_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const llstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstart_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origsize",
                        "type": "size_t",
                        "definition": [
                            "size_t origsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "llstart",
                        "type": "size_t",
                        "definition": [
                            "size_t llstart = *llstart_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstart",
                        "type": "size_t",
                        "definition": [
                            "size_t dstart = *dstart_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliFindLongestMatch_1",
            "header": "",
            "params": [
                "unsigned short * const p_ref",
                "unsigned short * const pp_ref",
                "unsigned short * const bestdist_ref",
                "unsigned short * const bestlength_ref",
                "unsigned int * const scan_idx_ref",
                "unsigned int * const match_idx_ref",
                "int * const chain_counter_ref",
                "unsigned * const dist_ref",
                "unsigned int * const hhead_idx_ref",
                "unsigned int * const hprev_idx_ref",
                "unsigned int * const hhashval_idx_ref",
                "int * const hval_ref",
                "const ZopfliHash * const h",
                "const unsigned char * const array",
                "size_t pos",
                "size_t size",
                "size_t limit",
                "unsigned short * const sublen",
                "unsigned short hpos",
                "const unsigned char * const scan",
                "const unsigned char * const match",
                "const unsigned char * const arrayend",
                "const unsigned char * const arrayend_safe",
                "int * const hhead",
                "unsigned short * const hprev",
                "int * const hhashval"
            ],
            "definition": "void helper_ZopfliFindLongestMatch_1(unsigned short * const p_ref, unsigned short * const pp_ref, unsigned short * const bestdist_ref, unsigned short * const bestlength_ref, unsigned int * const scan_idx_ref, unsigned int * const match_idx_ref, int * const chain_counter_ref, unsigned * const dist_ref, unsigned int * const hhead_idx_ref, unsigned int * const hprev_idx_ref, unsigned int * const hhashval_idx_ref, int * const hval_ref, const ZopfliHash * const h, const unsigned char * const array, size_t pos, size_t size, size_t limit, unsigned short * const sublen, unsigned short hpos, const unsigned char * const scan, const unsigned char * const match, const unsigned char * const arrayend, const unsigned char * const arrayend_safe, int * const hhead, unsigned short * const hprev, int * const hhashval)\n{\n  unsigned short p = *p_ref;\n  unsigned short pp = *pp_ref;\n  unsigned short bestdist = *bestdist_ref;\n  unsigned short bestlength = *bestlength_ref;\n  unsigned int scan_idx = *scan_idx_ref;\n  unsigned int match_idx = *match_idx_ref;\n  int chain_counter = *chain_counter_ref;\n  unsigned dist = *dist_ref;\n  unsigned int hhead_idx = *hhead_idx_ref;\n  unsigned int hprev_idx = *hprev_idx_ref;\n  unsigned int hhashval_idx = *hhashval_idx_ref;\n  int hval = *hval_ref;\n  unsigned short currentlength = 0;\n  assert(p < 32768);\n  assert(p == hprev[pp + hprev_idx]);\n  assert(hhashval[p + hhashval_idx] == hval);\n  if (dist > 0)\n  {\n    helper_helper_ZopfliFindLongestMatch_1_1(&bestdist, &bestlength, &scan_idx, &match_idx, &currentlength, h, array, pos, size, limit, sublen, scan, match, arrayend, arrayend_safe, dist);\n  }\n  if ((((&hhead[hhead_idx]) != h->head2) && (bestlength >= h->same[hpos])) && (h->val2 == h->hashval2[p]))\n  {\n    hhead_idx = h->head2;\n    hprev_idx = h->prev2;\n    hhashval_idx = h->hashval2;\n    hval = h->val2;\n  }\n  pp = p;\n  p = hprev[p + hprev_idx];\n  if (p == pp)\n  {\n    break;\n  }\n  dist += (p < pp) ? (pp - p) : ((32768 - p) + pp);\n  chain_counter -= 1;\n  if (chain_counter <= 0)\n  {\n    break;\n  }\n  *p_ref = p;\n  *pp_ref = pp;\n  *bestdist_ref = bestdist;\n  *bestlength_ref = bestlength;\n  *scan_idx_ref = scan_idx;\n  *match_idx_ref = match_idx;\n  *chain_counter_ref = chain_counter;\n  *dist_ref = dist;\n  *hhead_idx_ref = hhead_idx;\n  *hprev_idx_ref = hprev_idx;\n  *hhashval_idx_ref = hhashval_idx;\n  *hval_ref = hval;\n}\n\n",
            "calle": [
                "assert",
                "helper_helper_ZopfliFindLongestMatch_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chain_counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const chain_counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhead_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const hhead_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hprev_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const hprev_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhashval_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const hhashval_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hval_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const hval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const ZopfliHash * const",
                        "definition": [
                            "const ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hpos",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short hpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_safe",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend_safe"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhead",
                        "type": "int * const",
                        "definition": [
                            "int * const hhead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hprev",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const hprev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhashval",
                        "type": "int * const",
                        "definition": [
                            "int * const hhashval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short p = *p_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short pp = *pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestdist = *bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestlength = *bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = *scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = *match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chain_counter",
                        "type": "int",
                        "definition": [
                            "int chain_counter = *chain_counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhead_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hhead_idx = *hhead_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hprev_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hprev_idx = *hprev_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hhashval_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hhashval_idx = *hhashval_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hval",
                        "type": "int",
                        "definition": [
                            "int hval = *hval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short currentlength = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliLZ77Greedy_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const j_ref",
                "unsigned short * const leng_ref",
                "unsigned short * const dist_ref",
                "int * const lengthscore_ref",
                "unsigned * const prev_length_ref",
                "unsigned * const prev_match_ref",
                "int * const prevlengthscore_ref",
                "int * const match_available_ref",
                "ZopfliBlockState * const s",
                "const unsigned char * const in",
                "size_t inend",
                "ZopfliLZ77Store * const store",
                "ZopfliHash * const h",
                "unsigned short dummysublen[259]"
            ],
            "definition": "void helper_ZopfliLZ77Greedy_1(size_t * const i_ref, size_t * const j_ref, unsigned short * const leng_ref, unsigned short * const dist_ref, int * const lengthscore_ref, unsigned * const prev_length_ref, unsigned * const prev_match_ref, int * const prevlengthscore_ref, int * const match_available_ref, ZopfliBlockState * const s, const unsigned char * const in, size_t inend, ZopfliLZ77Store * const store, ZopfliHash * const h, unsigned short dummysublen[259])\n{\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  unsigned short leng = *leng_ref;\n  unsigned short dist = *dist_ref;\n  int lengthscore = *lengthscore_ref;\n  unsigned prev_length = *prev_length_ref;\n  unsigned prev_match = *prev_match_ref;\n  int prevlengthscore = *prevlengthscore_ref;\n  int match_available = *match_available_ref;\n  ZopfliUpdateHash(in, i, inend, h);\n  ZopfliFindLongestMatch(s, h, in, i, inend, 258, dummysublen, &dist, &leng);\n  lengthscore = GetLengthScore(leng, dist);\n  prevlengthscore = GetLengthScore(prev_length, prev_match);\n  if (match_available)\n  {\n    helper_helper_ZopfliLZ77Greedy_1_1(&i, &j, &leng, &dist, &lengthscore, &prev_length, &prev_match, &match_available, in, inend, store, h, prevlengthscore);\n  }\n  else\n    if ((lengthscore >= 3) && (leng < 258))\n  {\n    match_available = 1;\n    prev_length = leng;\n    prev_match = dist;\n    continue;\n  }\n  if (lengthscore >= 3)\n  {\n    ZopfliVerifyLenDist(in, inend, i, dist, leng);\n    ZopfliStoreLitLenDist(leng, dist, i, store);\n  }\n  else\n  {\n    leng = 1;\n    ZopfliStoreLitLenDist(in[i], 0, i, store);\n  }\n  for (j = 1; j < leng; j += 1)\n  {\n    assert(i < inend);\n    i += 1;\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  *i_ref = i;\n  *j_ref = j;\n  *leng_ref = leng;\n  *dist_ref = dist;\n  *lengthscore_ref = lengthscore;\n  *prev_length_ref = prev_length;\n  *prev_match_ref = prev_match;\n  *prevlengthscore_ref = prevlengthscore;\n  *match_available_ref = match_available;\n}\n\n",
            "calle": [
                "GetLengthScore",
                "ZopfliFindLongestMatch",
                "ZopfliStoreLitLenDist",
                "ZopfliUpdateHash",
                "ZopfliVerifyLenDist",
                "assert",
                "helper_helper_ZopfliLZ77Greedy_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlengthscore_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const prevlengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const match_available_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState * const",
                        "definition": [
                            "ZopfliBlockState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummysublen",
                        "type": "unsigned short [259]",
                        "definition": [
                            "unsigned short dummysublen[259]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng = *leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore",
                        "type": "int",
                        "definition": [
                            "int lengthscore = *lengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_length = *prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_match = *prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlengthscore",
                        "type": "int",
                        "definition": [
                            "int prevlengthscore = *prevlengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available",
                        "type": "int",
                        "definition": [
                            "int match_available = *match_available_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ZopfliFindLongestMatch_1_1",
            "header": "",
            "params": [
                "unsigned short * const bestdist_ref",
                "unsigned short * const bestlength_ref",
                "unsigned int * const scan_idx_ref",
                "unsigned int * const match_idx_ref",
                "unsigned short * const currentlength_ref",
                "const ZopfliHash * const h",
                "const unsigned char * const array",
                "size_t pos",
                "size_t size",
                "size_t limit",
                "unsigned short * const sublen",
                "const unsigned char * const scan",
                "const unsigned char * const match",
                "const unsigned char * const arrayend",
                "const unsigned char * const arrayend_safe",
                "unsigned dist"
            ],
            "definition": "void helper_helper_ZopfliFindLongestMatch_1_1(unsigned short * const bestdist_ref, unsigned short * const bestlength_ref, unsigned int * const scan_idx_ref, unsigned int * const match_idx_ref, unsigned short * const currentlength_ref, const ZopfliHash * const h, const unsigned char * const array, size_t pos, size_t size, size_t limit, unsigned short * const sublen, const unsigned char * const scan, const unsigned char * const match, const unsigned char * const arrayend, const unsigned char * const arrayend_safe, unsigned dist)\n{\n  unsigned short bestdist = *bestdist_ref;\n  unsigned short bestlength = *bestlength_ref;\n  unsigned int scan_idx = *scan_idx_ref;\n  unsigned int match_idx = *match_idx_ref;\n  unsigned short currentlength = *currentlength_ref;\n  assert(pos < size);\n  assert(dist <= pos);\n  scan_idx = &array[pos];\n  match_idx = &array[pos - dist];\n  if (((pos + bestlength) >= size) || ((*((&scan[scan_idx]) + bestlength)) == (*((&match[match_idx]) + bestlength))))\n  {\n    helper_helper_helper_ZopfliFindLongestMatch_1_1_2(&scan_idx, &match_idx, &currentlength, h, array, pos, limit, scan, match, arrayend, arrayend_safe, dist);\n  }\n  if (currentlength > bestlength)\n  {\n    helper_helper_helper_ZopfliFindLongestMatch_1_1_1(&bestdist, &bestlength, limit, sublen, dist, currentlength);\n  }\n  *bestdist_ref = bestdist;\n  *bestlength_ref = bestlength;\n  *scan_idx_ref = scan_idx;\n  *match_idx_ref = match_idx;\n  *currentlength_ref = currentlength;\n}\n\n",
            "calle": [
                "assert",
                "helper_helper_helper_ZopfliFindLongestMatch_1_1_1",
                "helper_helper_helper_ZopfliFindLongestMatch_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bestdist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const currentlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const ZopfliHash * const",
                        "definition": [
                            "const ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_safe",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend_safe"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestdist = *bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestlength = *bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = *scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = *match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short currentlength = *currentlength_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_ZopfliLZ77Greedy_1_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const j_ref",
                "unsigned short * const leng_ref",
                "unsigned short * const dist_ref",
                "int * const lengthscore_ref",
                "unsigned * const prev_length_ref",
                "unsigned * const prev_match_ref",
                "int * const match_available_ref",
                "const unsigned char * const in",
                "size_t inend",
                "ZopfliLZ77Store * const store",
                "ZopfliHash * const h",
                "int prevlengthscore"
            ],
            "definition": "void helper_helper_ZopfliLZ77Greedy_1_1(size_t * const i_ref, size_t * const j_ref, unsigned short * const leng_ref, unsigned short * const dist_ref, int * const lengthscore_ref, unsigned * const prev_length_ref, unsigned * const prev_match_ref, int * const match_available_ref, const unsigned char * const in, size_t inend, ZopfliLZ77Store * const store, ZopfliHash * const h, int prevlengthscore)\n{\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  unsigned short leng = *leng_ref;\n  unsigned short dist = *dist_ref;\n  int lengthscore = *lengthscore_ref;\n  unsigned prev_length = *prev_length_ref;\n  unsigned prev_match = *prev_match_ref;\n  int match_available = *match_available_ref;\n  match_available = 0;\n  if (lengthscore > (prevlengthscore + 1))\n  {\n    helper_helper_helper_ZopfliLZ77Greedy_1_1_1(&prev_length, &prev_match, &match_available, in, store, i, leng, dist, lengthscore);\n  }\n  else\n  {\n    helper_helper_helper_ZopfliLZ77Greedy_1_1_2(&i, &j, &leng, &dist, &lengthscore, in, inend, store, h, prevlengthscore, prev_length, prev_match);\n  }\n  *i_ref = i;\n  *j_ref = j;\n  *leng_ref = leng;\n  *dist_ref = dist;\n  *lengthscore_ref = lengthscore;\n  *prev_length_ref = prev_length;\n  *prev_match_ref = prev_match;\n  *match_available_ref = match_available;\n}\n\n",
            "calle": [
                "helper_helper_helper_ZopfliLZ77Greedy_1_1_1",
                "helper_helper_helper_ZopfliLZ77Greedy_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const match_available_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlengthscore",
                        "type": "int",
                        "definition": [
                            "int prevlengthscore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng = *leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore",
                        "type": "int",
                        "definition": [
                            "int lengthscore = *lengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_length = *prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_match = *prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available",
                        "type": "int",
                        "definition": [
                            "int match_available = *match_available_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ZopfliFindLongestMatch_1_1_1",
            "header": "",
            "params": [
                "unsigned short * const bestdist_ref",
                "unsigned short * const bestlength_ref",
                "size_t limit",
                "unsigned short * const sublen",
                "unsigned dist",
                "unsigned short currentlength"
            ],
            "definition": "void helper_helper_helper_ZopfliFindLongestMatch_1_1_1(unsigned short * const bestdist_ref, unsigned short * const bestlength_ref, size_t limit, unsigned short * const sublen, unsigned dist, unsigned short currentlength)\n{\n  unsigned short bestdist = *bestdist_ref;\n  unsigned short bestlength = *bestlength_ref;\n  if (sublen)\n  {\n    unsigned short j;\n    for (j = bestlength + 1; j <= currentlength; j += 1)\n    {\n      sublen[j] = dist;\n    }\n\n  }\n  bestdist = dist;\n  bestlength = currentlength;\n  if (currentlength >= limit)\n  {\n    break;\n  }\n  *bestdist_ref = bestdist;\n  *bestlength_ref = bestlength;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bestdist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const sublen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short currentlength"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestdist = *bestdist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short bestlength = *bestlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ZopfliFindLongestMatch_1_1_2",
            "header": "",
            "params": [
                "unsigned int * const scan_idx_ref",
                "unsigned int * const match_idx_ref",
                "unsigned short * const currentlength_ref",
                "const ZopfliHash * const h",
                "const unsigned char * const array",
                "size_t pos",
                "size_t limit",
                "const unsigned char * const scan",
                "const unsigned char * const match",
                "const unsigned char * const arrayend",
                "const unsigned char * const arrayend_safe",
                "unsigned dist"
            ],
            "definition": "void helper_helper_helper_ZopfliFindLongestMatch_1_1_2(unsigned int * const scan_idx_ref, unsigned int * const match_idx_ref, unsigned short * const currentlength_ref, const ZopfliHash * const h, const unsigned char * const array, size_t pos, size_t limit, const unsigned char * const scan, const unsigned char * const match, const unsigned char * const arrayend, const unsigned char * const arrayend_safe, unsigned dist)\n{\n  unsigned int scan_idx = *scan_idx_ref;\n  unsigned int match_idx = *match_idx_ref;\n  unsigned short currentlength = *currentlength_ref;\n  unsigned short same0 = h->same[pos & (32768 - 1)];\n  if ((same0 > 2) && (scan[scan_idx] == match[match_idx]))\n  {\n    unsigned short same1 = h->same[(pos - dist) & (32768 - 1)];\n    unsigned short same = (same0 < same1) ? (same0) : (same1);\n    if (same > limit)\n    {\n      same = limit;\n    }\n    scan_idx += same;\n    match_idx += same;\n  }\n  scan_idx = GetMatch(scan_idx, match, arrayend, arrayend_safe);\n  currentlength = (&scan[scan_idx]) - (&array[pos]);\n  *scan_idx_ref = scan_idx;\n  *match_idx_ref = match_idx;\n  *currentlength_ref = currentlength;\n}\n\n",
            "calle": [
                "GetMatch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "scan_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const currentlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "const ZopfliHash * const",
                        "definition": [
                            "const ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "array",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "size_t",
                        "definition": [
                            "size_t limit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arrayend_safe",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const arrayend_safe"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = *scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = *match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentlength",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short currentlength = *currentlength_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "same0",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short same0 = h->same[pos & (32768 - 1)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "same1",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short same1 = h->same[(pos - dist) & (32768 - 1)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "same",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short same = (same0 < same1) ? (same0) : (same1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ZopfliLZ77Greedy_1_1_1",
            "header": "",
            "params": [
                "unsigned * const prev_length_ref",
                "unsigned * const prev_match_ref",
                "int * const match_available_ref",
                "const unsigned char * const in",
                "ZopfliLZ77Store * const store",
                "size_t i",
                "unsigned short leng",
                "unsigned short dist",
                "int lengthscore"
            ],
            "definition": "void helper_helper_helper_ZopfliLZ77Greedy_1_1_1(unsigned * const prev_length_ref, unsigned * const prev_match_ref, int * const match_available_ref, const unsigned char * const in, ZopfliLZ77Store * const store, size_t i, unsigned short leng, unsigned short dist, int lengthscore)\n{\n  unsigned prev_length = *prev_length_ref;\n  unsigned prev_match = *prev_match_ref;\n  int match_available = *match_available_ref;\n  ZopfliStoreLitLenDist(in[i - 1], 0, i - 1, store);\n  if ((lengthscore >= 3) && (leng < 258))\n  {\n    match_available = 1;\n    prev_length = leng;\n    prev_match = dist;\n    continue;\n  }\n  *prev_length_ref = prev_length;\n  *prev_match_ref = prev_match;\n  *match_available_ref = match_available;\n}\n\n",
            "calle": [
                "ZopfliStoreLitLenDist"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "prev_length_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const match_available_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore",
                        "type": "int",
                        "definition": [
                            "int lengthscore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_length = *prev_length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_match = *prev_match_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available",
                        "type": "int",
                        "definition": [
                            "int match_available = *match_available_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_ZopfliLZ77Greedy_1_1_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const j_ref",
                "unsigned short * const leng_ref",
                "unsigned short * const dist_ref",
                "int * const lengthscore_ref",
                "const unsigned char * const in",
                "size_t inend",
                "ZopfliLZ77Store * const store",
                "ZopfliHash * const h",
                "int prevlengthscore",
                "unsigned prev_length",
                "unsigned prev_match"
            ],
            "definition": "void helper_helper_helper_ZopfliLZ77Greedy_1_1_2(size_t * const i_ref, size_t * const j_ref, unsigned short * const leng_ref, unsigned short * const dist_ref, int * const lengthscore_ref, const unsigned char * const in, size_t inend, ZopfliLZ77Store * const store, ZopfliHash * const h, int prevlengthscore, unsigned prev_length, unsigned prev_match)\n{\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  unsigned short leng = *leng_ref;\n  unsigned short dist = *dist_ref;\n  int lengthscore = *lengthscore_ref;\n  leng = prev_length;\n  dist = prev_match;\n  lengthscore = prevlengthscore;\n  ZopfliVerifyLenDist(in, inend, i - 1, dist, leng);\n  ZopfliStoreLitLenDist(leng, dist, i - 1, store);\n  for (j = 2; j < leng; j += 1)\n  {\n    assert(i < inend);\n    i += 1;\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  continue;\n  *i_ref = i;\n  *j_ref = j;\n  *leng_ref = leng;\n  *dist_ref = dist;\n  *lengthscore_ref = lengthscore;\n}\n\n",
            "calle": [
                "ZopfliStoreLitLenDist",
                "ZopfliUpdateHash",
                "ZopfliVerifyLenDist",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lengthscore_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlengthscore",
                        "type": "int",
                        "definition": [
                            "int prevlengthscore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned prev_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng = *leng_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lengthscore",
                        "type": "int",
                        "definition": [
                            "int lengthscore = *lengthscore_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77Optimal",
            "header": "void ZopfliLZ77Optimal(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, int numiterations, ZopfliLZ77Store *store)",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "int numiterations",
                "ZopfliLZ77Store *store"
            ],
            "definition": "void ZopfliLZ77Optimal(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, int numiterations, ZopfliLZ77Store *store)\n{\n  size_t blocksize = inend - instart;\n  unsigned short *length_array = (unsigned short *) malloc((sizeof(unsigned short)) * (blocksize + 1));\n  unsigned short *path = 0;\n  size_t pathsize = 0;\n  ZopfliLZ77Store currentstore;\n  ZopfliHash hash;\n  ZopfliHash *h = &hash;\n  SymbolStats stats;\n  SymbolStats beststats;\n  SymbolStats laststats;\n  int i;\n  float *costs = (float *) malloc((sizeof(float)) * (blocksize + 1));\n  double cost;\n  double bestcost = 1e30;\n  double lastcost = 0;\n  RanState ran_state;\n  int lastrandomstep = -1;\n  if (!costs)\n  {\n    exit(-1);\n  }\n  if (!length_array)\n  {\n    exit(-1);\n  }\n  InitRanState(&ran_state);\n  InitStats(&stats);\n  ZopfliInitLZ77Store(in, &currentstore);\n  ZopfliAllocHash(32768, h);\n  ZopfliLZ77Greedy(s, in, instart, inend, &currentstore, h);\n  GetStatistics(&currentstore, &stats);\n  for (i = 0; i < numiterations; i += 1)\n  {\n    helper_ZopfliLZ77Optimal_1(&cost, &bestcost, &lastcost, &lastrandomstep, s, in, instart, inend, store, length_array, path, pathsize, currentstore, h, stats, beststats, laststats, i, costs, ran_state);\n  }\n\n  free(length_array);\n  free(path);\n  free(costs);\n  ZopfliCleanLZ77Store(&currentstore);\n  ZopfliCleanHash(h);\n}\n\n",
            "calle": [
                "GetStatistics",
                "InitRanState",
                "InitStats",
                "ZopfliAllocHash",
                "ZopfliCleanHash",
                "ZopfliCleanLZ77Store",
                "ZopfliInitLZ77Store",
                "ZopfliLZ77Greedy",
                "exit",
                "free",
                "helper_ZopfliLZ77Optimal_1",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numiterations",
                        "type": "int",
                        "definition": [
                            "int numiterations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize = inend - instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length_array = (unsigned short *) malloc((sizeof(unsigned short)) * (blocksize + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *path = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t",
                        "definition": [
                            "size_t pathsize = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentstore",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store currentstore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "ZopfliHash",
                        "definition": [
                            "ZopfliHash hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h = &hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats stats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beststats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats beststats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "laststats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats laststats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float *",
                        "definition": [
                            "float *costs = (float *) malloc((sizeof(float)) * (blocksize + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "double",
                        "definition": [
                            "double cost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestcost",
                        "type": "double",
                        "definition": [
                            "double bestcost = 1e30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastcost",
                        "type": "double",
                        "definition": [
                            "double lastcost = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ran_state",
                        "type": "RanState",
                        "definition": [
                            "RanState ran_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastrandomstep",
                        "type": "int",
                        "definition": [
                            "int lastrandomstep = -1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLZ77OptimalFixed",
            "header": "void ZopfliLZ77OptimalFixed(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, ZopfliLZ77Store *store)",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "ZopfliLZ77Store *store"
            ],
            "definition": "void ZopfliLZ77OptimalFixed(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, ZopfliLZ77Store *store)\n{\n  size_t blocksize = inend - instart;\n  unsigned short *length_array = (unsigned short *) malloc((sizeof(unsigned short)) * (blocksize + 1));\n  unsigned short *path = 0;\n  size_t pathsize = 0;\n  ZopfliHash hash;\n  ZopfliHash *h = &hash;\n  float *costs = (float *) malloc((sizeof(float)) * (blocksize + 1));\n  if (!costs)\n  {\n    exit(-1);\n  }\n  if (!length_array)\n  {\n    exit(-1);\n  }\n  ZopfliAllocHash(32768, h);\n  s->blockstart = instart;\n  s->blockend = inend;\n  LZ77OptimalRun(s, in, instart, inend, &path, &pathsize, length_array, GetCostFixed, 0, store, h, costs);\n  free(length_array);\n  free(path);\n  free(costs);\n  ZopfliCleanHash(h);\n}\n\n",
            "calle": [
                "GetCostFixed",
                "LZ77OptimalRun",
                "ZopfliAllocHash",
                "ZopfliCleanHash",
                "exit",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize = inend - instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length_array = (unsigned short *) malloc((sizeof(unsigned short)) * (blocksize + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *path = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t",
                        "definition": [
                            "size_t pathsize = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "ZopfliHash",
                        "definition": [
                            "ZopfliHash hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h = &hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float *",
                        "definition": [
                            "float *costs = (float *) malloc((sizeof(float)) * (blocksize + 1))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "InitStats",
            "header": "",
            "params": [
                "SymbolStats *stats"
            ],
            "definition": "static void InitStats(SymbolStats *stats)\n{\n  memset(stats->litlens, 0, 288 * (sizeof(stats->litlens[0])));\n  memset(stats->dists, 0, 32 * (sizeof(stats->dists[0])));\n  memset(stats->ll_symbols, 0, 288 * (sizeof(stats->ll_symbols[0])));\n  memset(stats->d_symbols, 0, 32 * (sizeof(stats->d_symbols[0])));\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CopyStats",
            "header": "",
            "params": [
                "SymbolStats *source",
                "SymbolStats *dest"
            ],
            "definition": "static void CopyStats(SymbolStats *source, SymbolStats *dest)\n{\n  memcpy(dest->litlens, source->litlens, 288 * (sizeof(dest->litlens[0])));\n  memcpy(dest->dists, source->dists, 32 * (sizeof(dest->dists[0])));\n  memcpy(dest->ll_symbols, source->ll_symbols, 288 * (sizeof(dest->ll_symbols[0])));\n  memcpy(dest->d_symbols, source->d_symbols, 32 * (sizeof(dest->d_symbols[0])));\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *dest"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddWeighedStatFreqs",
            "header": "",
            "params": [
                "const SymbolStats *stats1",
                "double w1",
                "const SymbolStats *stats2",
                "double w2",
                "SymbolStats *result"
            ],
            "definition": "static void AddWeighedStatFreqs(const SymbolStats *stats1, double w1, const SymbolStats *stats2, double w2, SymbolStats *result)\n{\n  size_t i;\n  for (i = 0; i < 288; i += 1)\n  {\n    result->litlens[i] = (size_t) ((stats1->litlens[i] * w1) + (stats2->litlens[i] * w2));\n  }\n\n  for (i = 0; i < 32; i += 1)\n  {\n    result->dists[i] = (size_t) ((stats1->dists[i] * w1) + (stats2->dists[i] * w2));\n  }\n\n  result->litlens[256] = 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stats1",
                        "type": "const SymbolStats *",
                        "definition": [
                            "const SymbolStats *stats1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w1",
                        "type": "double",
                        "definition": [
                            "double w1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats2",
                        "type": "const SymbolStats *",
                        "definition": [
                            "const SymbolStats *stats2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w2",
                        "type": "double",
                        "definition": [
                            "double w2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "InitRanState",
            "header": "",
            "params": [
                "RanState *state"
            ],
            "definition": "static void InitRanState(RanState *state)\n{\n  state->m_w = 1;\n  state->m_z = 2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "RanState *",
                        "definition": [
                            "RanState *state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "Ran",
            "header": "",
            "params": [
                "RanState *state"
            ],
            "definition": "static unsigned int Ran(RanState *state)\n{\n  state->m_z = (36969 * (state->m_z & 65535)) + (state->m_z >> 16);\n  state->m_w = (18000 * (state->m_w & 65535)) + (state->m_w >> 16);\n  return (state->m_z << 16) + state->m_w;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "RanState *",
                        "definition": [
                            "RanState *state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "RandomizeFreqs",
            "header": "",
            "params": [
                "RanState *state",
                "size_t *freqs",
                "int n"
            ],
            "definition": "static void RandomizeFreqs(RanState *state, size_t *freqs, int n)\n{\n  int i;\n  for (i = 0; i < n; i += 1)\n  {\n    if (((Ran(state) >> 4) % 3) == 0)\n    {\n      freqs[i] = freqs[Ran(state) % n];\n    }\n  }\n\n}\n\n",
            "calle": [
                "Ran"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "RanState *",
                        "definition": [
                            "RanState *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freqs",
                        "type": "size_t *",
                        "definition": [
                            "size_t *freqs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "RandomizeStatFreqs",
            "header": "",
            "params": [
                "RanState *state",
                "SymbolStats *stats"
            ],
            "definition": "static void RandomizeStatFreqs(RanState *state, SymbolStats *stats)\n{\n  RandomizeFreqs(state, stats->litlens, 288);\n  RandomizeFreqs(state, stats->dists, 32);\n  stats->litlens[256] = 1;\n}\n\n",
            "calle": [
                "RandomizeFreqs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "RanState *",
                        "definition": [
                            "RanState *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ClearStatFreqs",
            "header": "",
            "params": [
                "SymbolStats *stats"
            ],
            "definition": "static void ClearStatFreqs(SymbolStats *stats)\n{\n  size_t i;\n  for (i = 0; i < 288; i += 1)\n    stats->litlens[i] = 0;\n\n  for (i = 0; i < 32; i += 1)\n    stats->dists[i] = 0;\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetCostFixed",
            "header": "",
            "params": [
                "unsigned litlen",
                "unsigned dist",
                "void *unused"
            ],
            "definition": "static double GetCostFixed(unsigned litlen, unsigned dist, void *unused)\n{\n  (void) unused;\n  if (dist == 0)\n  {\n    if (litlen <= 143)\n    {\n      return 8;\n    }\n    else\n      return 9;\n  }\n  else\n  {\n    int dbits = ZopfliGetDistExtraBits(dist);\n    int lbits = ZopfliGetLengthExtraBits(litlen);\n    int lsym = ZopfliGetLengthSymbol(litlen);\n    int cost = 0;\n    if (lsym <= 279)\n    {\n      cost += 7;\n    }\n    else\n      cost += 8;\n    cost += 5;\n    return (cost + dbits) + lbits;\n  }\n}\n\n",
            "calle": [
                "ZopfliGetDistExtraBits",
                "ZopfliGetLengthExtraBits",
                "ZopfliGetLengthSymbol"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "litlen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned litlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unused",
                        "type": "void *",
                        "definition": [
                            "void *unused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dbits",
                        "type": "int",
                        "definition": [
                            "int dbits = ZopfliGetDistExtraBits(dist)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lbits",
                        "type": "int",
                        "definition": [
                            "int lbits = ZopfliGetLengthExtraBits(litlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lsym",
                        "type": "int",
                        "definition": [
                            "int lsym = ZopfliGetLengthSymbol(litlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "int",
                        "definition": [
                            "int cost = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetCostStat",
            "header": "",
            "params": [
                "unsigned litlen",
                "unsigned dist",
                "void *context"
            ],
            "definition": "static double GetCostStat(unsigned litlen, unsigned dist, void *context)\n{\n  SymbolStats *stats = (SymbolStats *) context;\n  if (dist == 0)\n  {\n    return stats->ll_symbols[litlen];\n  }\n  else\n  {\n    int lsym = ZopfliGetLengthSymbol(litlen);\n    int lbits = ZopfliGetLengthExtraBits(litlen);\n    int dsym = ZopfliGetDistSymbol(dist);\n    int dbits = ZopfliGetDistExtraBits(dist);\n    return ((lbits + dbits) + stats->ll_symbols[lsym]) + stats->d_symbols[dsym];\n  }\n}\n\n",
            "calle": [
                "ZopfliGetDistExtraBits",
                "ZopfliGetDistSymbol",
                "ZopfliGetLengthExtraBits",
                "ZopfliGetLengthSymbol"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "litlen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned litlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "context",
                        "type": "void *",
                        "definition": [
                            "void *context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats = (SymbolStats *) context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lsym",
                        "type": "int",
                        "definition": [
                            "int lsym = ZopfliGetLengthSymbol(litlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lbits",
                        "type": "int",
                        "definition": [
                            "int lbits = ZopfliGetLengthExtraBits(litlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsym",
                        "type": "int",
                        "definition": [
                            "int dsym = ZopfliGetDistSymbol(dist)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dbits",
                        "type": "int",
                        "definition": [
                            "int dbits = ZopfliGetDistExtraBits(dist)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetCostModelMinCost",
            "header": "",
            "params": [
                "CostModelFun *costmodel",
                "void *costcontext"
            ],
            "definition": "static double GetCostModelMinCost(CostModelFun *costmodel, void *costcontext)\n{\n  double mincost;\n  int bestlength = 0;\n  int bestdist = 0;\n  int i;\n  static const int dsymbols[30] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};\n  mincost = 1e30;\n  for (i = 3; i < 259; i += 1)\n  {\n    double c = costmodel(i, 1, costcontext);\n    if (c < mincost)\n    {\n      bestlength = i;\n      mincost = c;\n    }\n  }\n\n  mincost = 1e30;\n  for (i = 0; i < 30; i += 1)\n  {\n    double c = costmodel(3, dsymbols[i], costcontext);\n    if (c < mincost)\n    {\n      bestdist = dsymbols[i];\n      mincost = c;\n    }\n  }\n\n  return costmodel(bestlength, bestdist, costcontext);\n}\n\n",
            "calle": [
                "costmodel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "costmodel",
                        "type": "CostModelFun *",
                        "definition": [
                            "CostModelFun *costmodel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void *",
                        "definition": [
                            "void *costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincost",
                        "type": "double",
                        "definition": [
                            "double mincost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestlength",
                        "type": "int",
                        "definition": [
                            "int bestlength = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestdist",
                        "type": "int",
                        "definition": [
                            "int bestdist = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsymbols",
                        "type": "const int [30]",
                        "definition": [
                            "static const int dsymbols[30] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "double",
                        "definition": [
                            "double c = costmodel(3, dsymbols[i], costcontext)",
                            "double c = costmodel(i, 1, costcontext)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zopfli_min",
            "header": "",
            "params": [
                "size_t a",
                "size_t b"
            ],
            "definition": "static size_t zopfli_min(size_t a, size_t b)\n{\n  return (a < b) ? (a) : (b);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "size_t",
                        "definition": [
                            "size_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "size_t",
                        "definition": [
                            "size_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetBestLengths",
            "header": "",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "CostModelFun *costmodel",
                "void *costcontext",
                "unsigned short *length_array",
                "ZopfliHash *h",
                "float *costs"
            ],
            "definition": "static double GetBestLengths(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, CostModelFun *costmodel, void *costcontext, unsigned short *length_array, ZopfliHash *h, float *costs)\n{\n  size_t blocksize = inend - instart;\n  size_t i = 0;\n  size_t k;\n  size_t kend;\n  unsigned short leng;\n  unsigned short dist;\n  unsigned short sublen[259];\n  size_t windowstart = (instart > 32768) ? (instart - 32768) : (0);\n  double result;\n  double mincost = GetCostModelMinCost(costmodel, costcontext);\n  double mincostaddcostj;\n  if (instart == inend)\n  {\n    return 0;\n  }\n  ZopfliResetHash(32768, h);\n  ZopfliWarmupHash(in, windowstart, inend, h);\n  for (i = windowstart; i < instart; i += 1)\n  {\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  for (i = 1; i < (blocksize + 1); i += 1)\n    costs[i] = 1e30;\n\n  costs[0] = 0;\n  length_array[0] = 0;\n  for (i = instart; i < inend; i += 1)\n  {\n    helper_GetBestLengths_1(&i, &k, &kend, &mincostaddcostj, s, in, instart, inend, costcontext, length_array, h, costs, leng, dist, sublen, mincost);\n  }\n\n  assert(costs[blocksize] >= 0);\n  result = costs[blocksize];\n  return result;\n}\n\n",
            "calle": [
                "GetCostModelMinCost",
                "ZopfliResetHash",
                "ZopfliUpdateHash",
                "ZopfliWarmupHash",
                "assert",
                "helper_GetBestLengths_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costmodel",
                        "type": "CostModelFun *",
                        "definition": [
                            "CostModelFun *costmodel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void *",
                        "definition": [
                            "void *costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float *",
                        "definition": [
                            "float *costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize = inend - instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "size_t",
                        "definition": [
                            "size_t k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kend",
                        "type": "size_t",
                        "definition": [
                            "size_t kend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short [259]",
                        "definition": [
                            "unsigned short sublen[259]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowstart",
                        "type": "size_t",
                        "definition": [
                            "size_t windowstart = (instart > 32768) ? (instart - 32768) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "double",
                        "definition": [
                            "double result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincost",
                        "type": "double",
                        "definition": [
                            "double mincost = GetCostModelMinCost(costmodel, costcontext)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincostaddcostj",
                        "type": "double",
                        "definition": [
                            "double mincostaddcostj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "TraceBackwards",
            "header": "",
            "params": [
                "size_t size",
                "const unsigned short *length_array",
                "unsigned short **path",
                "size_t *pathsize"
            ],
            "definition": "static void TraceBackwards(size_t size, const unsigned short *length_array, unsigned short **path, size_t *pathsize)\n{\n  size_t index = size;\n  if (size == 0)\n  {\n    return;\n  }\n  for (;;)\n  {\n    {\n      if (!((*pathsize) & ((*pathsize) - 1)))\n      {\n        *path = ((*pathsize) == 0) ? (malloc(sizeof(*(*path)))) : (realloc(*path, ((*pathsize) * 2) * (sizeof(*(*path)))));\n      }\n      (*path)[*pathsize] = length_array[index];\n      *pathsize += 1;\n    }\n    ;\n    assert(length_array[index] <= index);\n    assert(length_array[index] <= 258);\n    assert(length_array[index] != 0);\n    index -= length_array[index];\n    if (index == 0)\n    {\n      break;\n    }\n  }\n\n  for (index = 0; index < ((*pathsize) / 2); index += 1)\n  {\n    unsigned short temp = (*path)[index];\n    (*path)[index] = (*path)[((*pathsize) - index) - 1];\n    (*path)[((*pathsize) - index) - 1] = temp;\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "const unsigned short *",
                        "definition": [
                            "const unsigned short *length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short **",
                        "definition": [
                            "unsigned short **path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *pathsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "size_t",
                        "definition": [
                            "size_t index = size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short temp = (*path)[index]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "FollowPath",
            "header": "",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "unsigned short *path",
                "size_t pathsize",
                "ZopfliLZ77Store *store",
                "ZopfliHash *h"
            ],
            "definition": "static void FollowPath(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, unsigned short *path, size_t pathsize, ZopfliLZ77Store *store, ZopfliHash *h)\n{\n  size_t i;\n  size_t j;\n  size_t pos = 0;\n  size_t windowstart = (instart > 32768) ? (instart - 32768) : (0);\n  size_t total_length_test = 0;\n  if (instart == inend)\n  {\n    return;\n  }\n  ZopfliResetHash(32768, h);\n  ZopfliWarmupHash(in, windowstart, inend, h);\n  for (i = windowstart; i < instart; i += 1)\n  {\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  pos = instart;\n  for (i = 0; i < pathsize; i += 1)\n  {\n    helper_FollowPath_1(&j, &pos, &total_length_test, s, in, inend, path, store, h, i);\n  }\n\n}\n\n",
            "calle": [
                "ZopfliResetHash",
                "ZopfliUpdateHash",
                "ZopfliWarmupHash",
                "helper_FollowPath_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t",
                        "definition": [
                            "size_t pathsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowstart",
                        "type": "size_t",
                        "definition": [
                            "size_t windowstart = (instart > 32768) ? (instart - 32768) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_length_test",
                        "type": "size_t",
                        "definition": [
                            "size_t total_length_test = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalculateStatistics",
            "header": "",
            "params": [
                "SymbolStats *stats"
            ],
            "definition": "static void CalculateStatistics(SymbolStats *stats)\n{\n  ZopfliCalculateEntropy(stats->litlens, 288, stats->ll_symbols);\n  ZopfliCalculateEntropy(stats->dists, 32, stats->d_symbols);\n}\n\n",
            "calle": [
                "ZopfliCalculateEntropy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetStatistics",
            "header": "",
            "params": [
                "const ZopfliLZ77Store *store",
                "SymbolStats *stats"
            ],
            "definition": "static void GetStatistics(const ZopfliLZ77Store *store, SymbolStats *stats)\n{\n  size_t i;\n  for (i = 0; i < store->size; i += 1)\n  {\n    if (store->dists[i] == 0)\n    {\n      stats->litlens[store->litlens[i]] += 1;\n    }\n    else\n    {\n      stats->litlens[ZopfliGetLengthSymbol(store->litlens[i])] += 1;\n      stats->dists[ZopfliGetDistSymbol(store->dists[i])] += 1;\n    }\n  }\n\n  stats->litlens[256] = 1;\n  CalculateStatistics(stats);\n}\n\n",
            "calle": [
                "CalculateStatistics",
                "ZopfliGetDistSymbol",
                "ZopfliGetLengthSymbol"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "store",
                        "type": "const ZopfliLZ77Store *",
                        "definition": [
                            "const ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats *",
                        "definition": [
                            "SymbolStats *stats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "LZ77OptimalRun",
            "header": "",
            "params": [
                "ZopfliBlockState *s",
                "const unsigned char *in",
                "size_t instart",
                "size_t inend",
                "unsigned short **path",
                "size_t *pathsize",
                "unsigned short *length_array",
                "CostModelFun *costmodel",
                "void *costcontext",
                "ZopfliLZ77Store *store",
                "ZopfliHash *h",
                "float *costs"
            ],
            "definition": "static double LZ77OptimalRun(ZopfliBlockState *s, const unsigned char *in, size_t instart, size_t inend, unsigned short **path, size_t *pathsize, unsigned short *length_array, CostModelFun *costmodel, void *costcontext, ZopfliLZ77Store *store, ZopfliHash *h, float *costs)\n{\n  double cost = GetBestLengths(s, in, instart, inend, costmodel, costcontext, length_array, h, costs);\n  free(*path);\n  *path = 0;\n  *pathsize = 0;\n  TraceBackwards(inend - instart, length_array, path, pathsize);\n  FollowPath(s, in, instart, inend, *path, *pathsize, store, h);\n  assert(cost < 1e30);\n  return cost;\n}\n\n",
            "calle": [
                "FollowPath",
                "GetBestLengths",
                "TraceBackwards",
                "assert",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState *",
                        "definition": [
                            "ZopfliBlockState *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short **",
                        "definition": [
                            "unsigned short **path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *pathsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costmodel",
                        "type": "CostModelFun *",
                        "definition": [
                            "CostModelFun *costmodel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void *",
                        "definition": [
                            "void *costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store *",
                        "definition": [
                            "ZopfliLZ77Store *store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash *",
                        "definition": [
                            "ZopfliHash *h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float *",
                        "definition": [
                            "float *costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "double",
                        "definition": [
                            "double cost = GetBestLengths(s, in, instart, inend, costmodel, costcontext, length_array, h, costs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_GetBestLengths_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const k_ref",
                "size_t * const kend_ref",
                "double * const mincostaddcostj_ref",
                "ZopfliBlockState * const s",
                "const unsigned char * const in",
                "size_t instart",
                "size_t inend",
                "void * const costcontext",
                "unsigned short * const length_array",
                "ZopfliHash * const h",
                "float * const costs",
                "unsigned short leng",
                "unsigned short dist",
                "unsigned short sublen[259]",
                "double mincost"
            ],
            "definition": "void helper_GetBestLengths_1(size_t * const i_ref, size_t * const k_ref, size_t * const kend_ref, double * const mincostaddcostj_ref, ZopfliBlockState * const s, const unsigned char * const in, size_t instart, size_t inend, void * const costcontext, unsigned short * const length_array, ZopfliHash * const h, float * const costs, unsigned short leng, unsigned short dist, unsigned short sublen[259], double mincost)\n{\n  size_t i = *i_ref;\n  size_t k = *k_ref;\n  size_t kend = *kend_ref;\n  double mincostaddcostj = *mincostaddcostj_ref;\n  size_t j = i - instart;\n  ZopfliUpdateHash(in, i, inend, h);\n  if ((((h->same[i & (32768 - 1)] > (258 * 2)) && (i > ((instart + 258) + 1))) && (((i + (258 * 2)) + 1) < inend)) && (h->same[(i - 258) & (32768 - 1)] > 258))\n  {\n    helper_helper_GetBestLengths_1_1(&i, &k, &j, in, inend, costcontext, length_array, h, costs);\n  }\n  ZopfliFindLongestMatch(s, h, in, i, inend, 258, sublen, &dist, &leng);\n  if ((i + 1) <= inend)\n  {\n    double newCost = costmodel(in[i], 0, costcontext) + costs[j];\n    assert(newCost >= 0);\n    if (newCost < costs[j + 1])\n    {\n      costs[j + 1] = newCost;\n      length_array[j + 1] = 1;\n    }\n  }\n  kend = zopfli_min(leng, inend - i);\n  mincostaddcostj = mincost + costs[j];\n  for (k = 3; k <= kend; k += 1)\n  {\n    helper_helper_GetBestLengths_1_2(&k, &j, costcontext, length_array, costs, sublen, mincostaddcostj);\n  }\n\n  *i_ref = i;\n  *k_ref = k;\n  *kend_ref = kend;\n  *mincostaddcostj_ref = mincostaddcostj;\n}\n\n",
            "calle": [
                "ZopfliFindLongestMatch",
                "ZopfliUpdateHash",
                "assert",
                "costmodel",
                "helper_helper_GetBestLengths_1_1",
                "helper_helper_GetBestLengths_1_2",
                "zopfli_min"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kend_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const kend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincostaddcostj_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const mincostaddcostj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState * const",
                        "definition": [
                            "ZopfliBlockState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void * const",
                        "definition": [
                            "void * const costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float * const",
                        "definition": [
                            "float * const costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "leng",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short leng"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short [259]",
                        "definition": [
                            "unsigned short sublen[259]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincost",
                        "type": "double",
                        "definition": [
                            "double mincost"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "size_t",
                        "definition": [
                            "size_t k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kend",
                        "type": "size_t",
                        "definition": [
                            "size_t kend = *kend_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincostaddcostj",
                        "type": "double",
                        "definition": [
                            "double mincostaddcostj = *mincostaddcostj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = i - instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newCost",
                        "type": "double",
                        "definition": [
                            "double newCost = costmodel(in[i], 0, costcontext) + costs[j]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_FollowPath_1",
            "header": "",
            "params": [
                "size_t * const j_ref",
                "size_t * const pos_ref",
                "size_t * const total_length_test_ref",
                "ZopfliBlockState * const s",
                "const unsigned char * const in",
                "size_t inend",
                "unsigned short * const path",
                "ZopfliLZ77Store * const store",
                "ZopfliHash * const h",
                "size_t i"
            ],
            "definition": "void helper_FollowPath_1(size_t * const j_ref, size_t * const pos_ref, size_t * const total_length_test_ref, ZopfliBlockState * const s, const unsigned char * const in, size_t inend, unsigned short * const path, ZopfliLZ77Store * const store, ZopfliHash * const h, size_t i)\n{\n  size_t j = *j_ref;\n  size_t pos = *pos_ref;\n  size_t total_length_test = *total_length_test_ref;\n  unsigned short length = path[i];\n  unsigned short dummy_length;\n  unsigned short dist;\n  assert(pos < inend);\n  ZopfliUpdateHash(in, pos, inend, h);\n  if (length >= 3)\n  {\n    ZopfliFindLongestMatch(s, h, in, pos, inend, length, 0, &dist, &dummy_length);\n    assert(!(((dummy_length != length) && (length > 2)) && (dummy_length > 2)));\n    ZopfliVerifyLenDist(in, inend, pos, dist, length);\n    ZopfliStoreLitLenDist(length, dist, pos, store);\n    total_length_test += length;\n  }\n  else\n  {\n    length = 1;\n    ZopfliStoreLitLenDist(in[pos], 0, pos, store);\n    total_length_test += 1;\n  }\n  assert((pos + length) <= inend);\n  for (j = 1; j < length; j += 1)\n  {\n    ZopfliUpdateHash(in, pos + j, inend, h);\n  }\n\n  pos += length;\n  *j_ref = j;\n  *pos_ref = pos;\n  *total_length_test_ref = total_length_test;\n}\n\n",
            "calle": [
                "ZopfliFindLongestMatch",
                "ZopfliStoreLitLenDist",
                "ZopfliUpdateHash",
                "ZopfliVerifyLenDist",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_length_test_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const total_length_test_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState * const",
                        "definition": [
                            "ZopfliBlockState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_length_test",
                        "type": "size_t",
                        "definition": [
                            "size_t total_length_test = *total_length_test_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short length = path[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummy_length",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dummy_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short dist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_ZopfliLZ77Optimal_1",
            "header": "",
            "params": [
                "double * const cost_ref",
                "double * const bestcost_ref",
                "double * const lastcost_ref",
                "int * const lastrandomstep_ref",
                "ZopfliBlockState * const s",
                "const unsigned char * const in",
                "size_t instart",
                "size_t inend",
                "ZopfliLZ77Store * const store",
                "unsigned short * const length_array",
                "unsigned short * const path",
                "size_t pathsize",
                "ZopfliLZ77Store currentstore",
                "ZopfliHash * const h",
                "SymbolStats stats",
                "SymbolStats beststats",
                "SymbolStats laststats",
                "int i",
                "float * const costs",
                "RanState ran_state"
            ],
            "definition": "void helper_ZopfliLZ77Optimal_1(double * const cost_ref, double * const bestcost_ref, double * const lastcost_ref, int * const lastrandomstep_ref, ZopfliBlockState * const s, const unsigned char * const in, size_t instart, size_t inend, ZopfliLZ77Store * const store, unsigned short * const length_array, unsigned short * const path, size_t pathsize, ZopfliLZ77Store currentstore, ZopfliHash * const h, SymbolStats stats, SymbolStats beststats, SymbolStats laststats, int i, float * const costs, RanState ran_state)\n{\n  double cost = *cost_ref;\n  double bestcost = *bestcost_ref;\n  double lastcost = *lastcost_ref;\n  int lastrandomstep = *lastrandomstep_ref;\n  ZopfliCleanLZ77Store(&currentstore);\n  ZopfliInitLZ77Store(in, &currentstore);\n  LZ77OptimalRun(s, in, instart, inend, &path, &pathsize, length_array, GetCostStat, (void *) (&stats), &currentstore, h, costs);\n  cost = ZopfliCalculateBlockSize(&currentstore, 0, currentstore.size, 2);\n  if (s->options->verbose_more || (s->options->verbose && (cost < bestcost)))\n  {\n    fprintf(stderr, \"Iteration %d: %d bit\\n\", i, (int) cost);\n  }\n  if (cost < bestcost)\n  {\n    ZopfliCopyLZ77Store(&currentstore, store);\n    CopyStats(&stats, &beststats);\n    bestcost = cost;\n  }\n  CopyStats(&stats, &laststats);\n  ClearStatFreqs(&stats);\n  GetStatistics(&currentstore, &stats);\n  if (lastrandomstep != (-1))\n  {\n    AddWeighedStatFreqs(&stats, 1.0, &laststats, 0.5, &stats);\n    CalculateStatistics(&stats);\n  }\n  if ((i > 5) && (cost == lastcost))\n  {\n    CopyStats(&beststats, &stats);\n    RandomizeStatFreqs(&ran_state, &stats);\n    CalculateStatistics(&stats);\n    lastrandomstep = i;\n  }\n  lastcost = cost;\n  *cost_ref = cost;\n  *bestcost_ref = bestcost;\n  *lastcost_ref = lastcost;\n  *lastrandomstep_ref = lastrandomstep;\n}\n\n",
            "calle": [
                "AddWeighedStatFreqs",
                "CalculateStatistics",
                "ClearStatFreqs",
                "CopyStats",
                "GetCostStat",
                "GetStatistics",
                "LZ77OptimalRun",
                "RandomizeStatFreqs",
                "ZopfliCalculateBlockSize",
                "ZopfliCleanLZ77Store",
                "ZopfliCopyLZ77Store",
                "ZopfliInitLZ77Store",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const cost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestcost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const bestcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastcost_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const lastcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastrandomstep_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lastrandomstep_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "ZopfliBlockState * const",
                        "definition": [
                            "ZopfliBlockState * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instart",
                        "type": "size_t",
                        "definition": [
                            "size_t instart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store",
                        "type": "ZopfliLZ77Store * const",
                        "definition": [
                            "ZopfliLZ77Store * const store"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathsize",
                        "type": "size_t",
                        "definition": [
                            "size_t pathsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "currentstore",
                        "type": "ZopfliLZ77Store",
                        "definition": [
                            "ZopfliLZ77Store currentstore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats stats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beststats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats beststats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "laststats",
                        "type": "SymbolStats",
                        "definition": [
                            "SymbolStats laststats"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float * const",
                        "definition": [
                            "float * const costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ran_state",
                        "type": "RanState",
                        "definition": [
                            "RanState ran_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cost",
                        "type": "double",
                        "definition": [
                            "double cost = *cost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bestcost",
                        "type": "double",
                        "definition": [
                            "double bestcost = *bestcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastcost",
                        "type": "double",
                        "definition": [
                            "double lastcost = *lastcost_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastrandomstep",
                        "type": "int",
                        "definition": [
                            "int lastrandomstep = *lastrandomstep_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_GetBestLengths_1_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const k_ref",
                "size_t * const j_ref",
                "const unsigned char * const in",
                "size_t inend",
                "void * const costcontext",
                "unsigned short * const length_array",
                "ZopfliHash * const h",
                "float * const costs"
            ],
            "definition": "void helper_helper_GetBestLengths_1_1(size_t * const i_ref, size_t * const k_ref, size_t * const j_ref, const unsigned char * const in, size_t inend, void * const costcontext, unsigned short * const length_array, ZopfliHash * const h, float * const costs)\n{\n  size_t i = *i_ref;\n  size_t k = *k_ref;\n  size_t j = *j_ref;\n  double symbolcost = costmodel(258, 1, costcontext);\n  for (k = 0; k < 258; k += 1)\n  {\n    costs[j + 258] = costs[j] + symbolcost;\n    length_array[j + 258] = 258;\n    i += 1;\n    j += 1;\n    ZopfliUpdateHash(in, i, inend, h);\n  }\n\n  *i_ref = i;\n  *k_ref = k;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "ZopfliUpdateHash",
                "costmodel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inend",
                        "type": "size_t",
                        "definition": [
                            "size_t inend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void * const",
                        "definition": [
                            "void * const costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "ZopfliHash * const",
                        "definition": [
                            "ZopfliHash * const h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float * const",
                        "definition": [
                            "float * const costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "size_t",
                        "definition": [
                            "size_t k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbolcost",
                        "type": "double",
                        "definition": [
                            "double symbolcost = costmodel(258, 1, costcontext)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_GetBestLengths_1_2",
            "header": "",
            "params": [
                "size_t * const k_ref",
                "size_t * const j_ref",
                "void * const costcontext",
                "unsigned short * const length_array",
                "float * const costs",
                "unsigned short sublen[259]",
                "double mincostaddcostj"
            ],
            "definition": "void helper_helper_GetBestLengths_1_2(size_t * const k_ref, size_t * const j_ref, void * const costcontext, unsigned short * const length_array, float * const costs, unsigned short sublen[259], double mincostaddcostj)\n{\n  size_t k = *k_ref;\n  size_t j = *j_ref;\n  double newCost;\n  if (costs[j + k] <= mincostaddcostj)\n  {\n    continue;\n  }\n  newCost = costmodel(k, sublen[k], costcontext) + costs[j];\n  assert(newCost >= 0);\n  if (newCost < costs[j + k])\n  {\n    assert(k <= 258);\n    costs[j + k] = newCost;\n    length_array[j + k] = k;\n  }\n  *k_ref = k;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert",
                "costmodel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costcontext",
                        "type": "void * const",
                        "definition": [
                            "void * const costcontext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_array",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const length_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "costs",
                        "type": "float * const",
                        "definition": [
                            "float * const costs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublen",
                        "type": "unsigned short [259]",
                        "definition": [
                            "unsigned short sublen[259]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincostaddcostj",
                        "type": "double",
                        "definition": [
                            "double mincostaddcostj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "size_t",
                        "definition": [
                            "size_t k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newCost",
                        "type": "double",
                        "definition": [
                            "double newCost"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCalculateBitLengths",
            "header": "void ZopfliCalculateBitLengths(const size_t *count, size_t n, int maxbits, unsigned *bitlengths)",
            "params": [
                "const size_t *count",
                "size_t n",
                "int maxbits",
                "unsigned *bitlengths"
            ],
            "definition": "void ZopfliCalculateBitLengths(const size_t *count, size_t n, int maxbits, unsigned *bitlengths)\n{\n  int error = ZopfliLengthLimitedCodeLengths(count, n, maxbits, bitlengths);\n  (void) error;\n  assert(!error);\n}\n\n",
            "calle": [
                "ZopfliLengthLimitedCodeLengths",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxbits",
                        "type": "int",
                        "definition": [
                            "int maxbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitlengths",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *bitlengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error = ZopfliLengthLimitedCodeLengths(count, n, maxbits, bitlengths)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliLengthsToSymbols",
            "header": "void ZopfliLengthsToSymbols(const unsigned *lengths, size_t n, unsigned maxbits, unsigned *symbols)",
            "params": [
                "const unsigned *lengths",
                "size_t n",
                "unsigned maxbits",
                "unsigned *symbols"
            ],
            "definition": "void ZopfliLengthsToSymbols(const unsigned *lengths, size_t n, unsigned maxbits, unsigned *symbols)\n{\n  size_t *bl_count = (size_t *) malloc((sizeof(size_t)) * (maxbits + 1));\n  size_t *next_code = (size_t *) malloc((sizeof(size_t)) * (maxbits + 1));\n  unsigned bits;\n  unsigned i;\n  unsigned code;\n  for (i = 0; i < n; i += 1)\n  {\n    symbols[i] = 0;\n  }\n\n  for (bits = 0; bits <= maxbits; bits += 1)\n  {\n    bl_count[bits] = 0;\n  }\n\n  for (i = 0; i < n; i += 1)\n  {\n    assert(lengths[i] <= maxbits);\n    bl_count[lengths[i]] += 1;\n  }\n\n  code = 0;\n  bl_count[0] = 0;\n  for (bits = 1; bits <= maxbits; bits += 1)\n  {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n\n  for (i = 0; i < n; i += 1)\n  {\n    unsigned len = lengths[i];\n    if (len != 0)\n    {\n      symbols[i] = next_code[len];\n      next_code[len] += 1;\n    }\n  }\n\n  free(bl_count);\n  free(next_code);\n}\n\n",
            "calle": [
                "assert",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lengths",
                        "type": "const unsigned *",
                        "definition": [
                            "const unsigned *lengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxbits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned maxbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "symbols",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *symbols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_count",
                        "type": "size_t *",
                        "definition": [
                            "size_t *bl_count = (size_t *) malloc((sizeof(size_t)) * (maxbits + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_code",
                        "type": "size_t *",
                        "definition": [
                            "size_t *next_code = (size_t *) malloc((sizeof(size_t)) * (maxbits + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = lengths[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCalculateEntropy",
            "header": "void ZopfliCalculateEntropy(const size_t *count, size_t n, double *bitlengths)",
            "params": [
                "const size_t *count",
                "size_t n",
                "double *bitlengths"
            ],
            "definition": "void ZopfliCalculateEntropy(const size_t *count, size_t n, double *bitlengths)\n{\n  static const double kInvLog2 = 1.4426950408889;\n  unsigned sum = 0;\n  unsigned i;\n  double log2sum;\n  for (i = 0; i < n; i += 1)\n  {\n    sum += count[i];\n  }\n\n  log2sum = ((sum == 0) ? (log(n)) : (log(sum))) * kInvLog2;\n  for (i = 0; i < n; i += 1)\n  {\n    if (count[i] == 0)\n    {\n      bitlengths[i] = log2sum;\n    }\n    else\n      bitlengths[i] = log2sum - (log(count[i]) * kInvLog2);\n    if ((bitlengths[i] < 0) && (bitlengths[i] > (-1e-5)))\n    {\n      bitlengths[i] = 0;\n    }\n    assert(bitlengths[i] >= 0);\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "log"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count",
                        "type": "const size_t *",
                        "definition": [
                            "const size_t *count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitlengths",
                        "type": "double *",
                        "definition": [
                            "double *bitlengths"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kInvLog2",
                        "type": "const double",
                        "definition": [
                            "static const double kInvLog2 = 1.4426950408889"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log2sum",
                        "type": "double",
                        "definition": [
                            "double log2sum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliInitOptions",
            "header": "void ZopfliInitOptions(ZopfliOptions *options)",
            "params": [
                "ZopfliOptions *options"
            ],
            "definition": "void ZopfliInitOptions(ZopfliOptions *options)\n{\n  options->verbose = 0;\n  options->verbose_more = 0;\n  options->numiterations = 15;\n  options->blocksplitting = 1;\n  options->blocksplittinglast = 0;\n  options->blocksplittingmax = 15;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "ZopfliOptions *",
                        "definition": [
                            "ZopfliOptions *options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliZlibCompress",
            "header": "void ZopfliZlibCompress(const ZopfliOptions *options, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)",
            "params": [
                "const ZopfliOptions *options",
                "const unsigned char *in",
                "size_t insize",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "void ZopfliZlibCompress(const ZopfliOptions *options, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)\n{\n  unsigned char bitpointer = 0;\n  unsigned checksum = adler32(in, (unsigned) insize);\n  unsigned cmf = 120;\n  unsigned flevel = 3;\n  unsigned fdict = 0;\n  unsigned cmfflg = ((256 * cmf) + (fdict * 32)) + (flevel * 64);\n  unsigned fcheck = 31 - (cmfflg % 31);\n  cmfflg += fcheck;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = cmfflg / 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = cmfflg % 256;\n    *outsize += 1;\n  }\n  ;\n  ZopfliDeflate(options, 2, 1, in, insize, &bitpointer, out, outsize);\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (checksum >> 24) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (checksum >> 16) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = (checksum >> 8) % 256;\n    *outsize += 1;\n  }\n  ;\n  {\n    if (!((*outsize) & ((*outsize) - 1)))\n    {\n      *out = ((*outsize) == 0) ? (malloc(sizeof(*(*out)))) : (realloc(*out, ((*outsize) * 2) * (sizeof(*(*out)))));\n    }\n    (*out)[*outsize] = checksum % 256;\n    *outsize += 1;\n  }\n  ;\n  if (options->verbose)\n  {\n    fprintf(stderr, \"Original Size: %d, Zlib: %d, Compression: %f%% Removed\\n\", (int) insize, (int) (*outsize), (100.0 * ((double) (insize - (*outsize)))) / ((double) insize));\n  }\n}\n\n",
            "calle": [
                "ZopfliDeflate",
                "adler32",
                "fprintf",
                "malloc",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "insize",
                        "type": "size_t",
                        "definition": [
                            "size_t insize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bitpointer",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char bitpointer = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "checksum",
                        "type": "unsigned",
                        "definition": [
                            "unsigned checksum = adler32(in, (unsigned) insize)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmf",
                        "type": "unsigned",
                        "definition": [
                            "unsigned cmf = 120"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flevel",
                        "type": "unsigned",
                        "definition": [
                            "unsigned flevel = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fdict",
                        "type": "unsigned",
                        "definition": [
                            "unsigned fdict = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmfflg",
                        "type": "unsigned",
                        "definition": [
                            "unsigned cmfflg = ((256 * cmf) + (fdict * 32)) + (flevel * 64)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fcheck",
                        "type": "unsigned",
                        "definition": [
                            "unsigned fcheck = 31 - (cmfflg % 31)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32",
            "header": "",
            "params": [
                "const unsigned char *data",
                "size_t size"
            ],
            "definition": "static unsigned adler32(const unsigned char *data, size_t size)\n{\n  unsigned int data_idx = 0;\n  static const unsigned sums_overflow = 5550;\n  unsigned s1 = 1;\n  unsigned s2 = 1 >> 16;\n  while (size > 0)\n  {\n    size_t amount = (size > sums_overflow) ? (sums_overflow) : (size);\n    size -= amount;\n    while (amount > 0)\n    {\n      s1 += data[data_idx];\n      data_idx += 1;\n      s2 += s1;\n      amount--;\n    }\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s2 << 16) | s1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sums_overflow",
                        "type": "const unsigned",
                        "definition": [
                            "static const unsigned sums_overflow = 5550"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s1",
                        "type": "unsigned",
                        "definition": [
                            "unsigned s1 = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2",
                        "type": "unsigned",
                        "definition": [
                            "unsigned s2 = 1 >> 16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amount",
                        "type": "size_t",
                        "definition": [
                            "size_t amount = (size > sums_overflow) ? (sums_overflow) : (size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ZopfliCompress",
            "header": "void ZopfliCompress(const ZopfliOptions *options, ZopfliFormat output_type, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)",
            "params": [
                "const ZopfliOptions *options",
                "ZopfliFormat output_type",
                "const unsigned char *in",
                "size_t insize",
                "unsigned char **out",
                "size_t *outsize"
            ],
            "definition": "void ZopfliCompress(const ZopfliOptions *options, ZopfliFormat output_type, const unsigned char *in, size_t insize, unsigned char **out, size_t *outsize)\n{\n  if (output_type == ZOPFLI_FORMAT_GZIP)\n  {\n    ZopfliGzipCompress(options, in, insize, out, outsize);\n  }\n  else\n    if (output_type == ZOPFLI_FORMAT_ZLIB)\n  {\n    ZopfliZlibCompress(options, in, insize, out, outsize);\n  }\n  else\n    if (output_type == ZOPFLI_FORMAT_DEFLATE)\n  {\n    unsigned char bp = 0;\n    ZopfliDeflate(options, 2, 1, in, insize, &bp, out, outsize);\n  }\n  else\n  {\n    assert(0);\n  }\n}\n\n",
            "calle": [
                "ZopfliDeflate",
                "ZopfliGzipCompress",
                "ZopfliZlibCompress",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "options",
                        "type": "const ZopfliOptions *",
                        "definition": [
                            "const ZopfliOptions *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_type",
                        "type": "ZopfliFormat",
                        "definition": [
                            "ZopfliFormat output_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "insize",
                        "type": "size_t",
                        "definition": [
                            "size_t insize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outsize",
                        "type": "size_t *",
                        "definition": [
                            "size_t *outsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bp",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char bp = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}