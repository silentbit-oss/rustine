{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  double r;\n  double g;\n  double b;\n  double a;\n} rgba_t",
            "name": "rgba_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r",
                        "type": "double",
                        "definition": [
                            "double r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "double",
                        "definition": [
                            "double g"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "double",
                        "definition": [
                            "double b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "double",
                        "definition": [
                            "double a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "named_colors",
            "type": "struct named_color\n{\n  const char *name;\n  uint32_t val;\n} []",
            "definition": [
                "static struct named_color\n{\n  const char *name;\n  uint32_t val;\n} named_colors[] = {{\"transparent\", 0xFFFFFF00}, {\"aliceblue\", 0xF0F8FFFF}, {\"antiquewhite\", 0xFAEBD7FF}, {\"aqua\", 0x00FFFFFF}, {\"aquamarine\", 0x7FFFD4FF}, {\"azure\", 0xF0FFFFFF}, {\"beige\", 0xF5F5DCFF}, {\"bisque\", 0xFFE4C4FF}, {\"black\", 0x000000FF}, {\"blanchedalmond\", 0xFFEBCDFF}, {\"blue\", 0x0000FFFF}, {\"blueviolet\", 0x8A2BE2FF}, {\"brown\", 0xA52A2AFF}, {\"burlywood\", 0xDEB887FF}, {\"cadetblue\", 0x5F9EA0FF}, {\"chartreuse\", 0x7FFF00FF}, {\"chocolate\", 0xD2691EFF}, {\"coral\", 0xFF7F50FF}, {\"cornflowerblue\", 0x6495EDFF}, {\"cornsilk\", 0xFFF8DCFF}, {\"crimson\", 0xDC143CFF}, {\"cyan\", 0x00FFFFFF}, {\"darkblue\", 0x00008BFF}, {\"darkcyan\", 0x008B8BFF}, {\"darkgoldenrod\", 0xB8860BFF}, {\"darkgray\", 0xA9A9A9FF}, {\"darkgreen\", 0x006400FF}, {\"darkgrey\", 0xA9A9A9FF}, {\"darkkhaki\", 0xBDB76BFF}, {\"darkmagenta\", 0x8B008BFF}, {\"darkolivegreen\", 0x556B2FFF}, {\"darkorange\", 0xFF8C00FF}, {\"darkorchid\", 0x9932CCFF}, {\"darkred\", 0x8B0000FF}, {\"darksalmon\", 0xE9967AFF}, {\"darkseagreen\", 0x8FBC8FFF}, {\"darkslateblue\", 0x483D8BFF}, {\"darkslategray\", 0x2F4F4FFF}, {\"darkslategrey\", 0x2F4F4FFF}, {\"darkturquoise\", 0x00CED1FF}, {\"darkviolet\", 0x9400D3FF}, {\"deeppink\", 0xFF1493FF}, {\"deepskyblue\", 0x00BFFFFF}, {\"dimgray\", 0x696969FF}, {\"dimgrey\", 0x696969FF}, {\"dodgerblue\", 0x1E90FFFF}, {\"firebrick\", 0xB22222FF}, {\"floralwhite\", 0xFFFAF0FF}, {\"forestgreen\", 0x228B22FF}, {\"fuchsia\", 0xFF00FFFF}, {\"gainsboro\", 0xDCDCDCFF}, {\"ghostwhite\", 0xF8F8FFFF}, {\"gold\", 0xFFD700FF}, {\"goldenrod\", 0xDAA520FF}, {\"gray\", 0x808080FF}, {\"green\", 0x008000FF}, {\"greenyellow\", 0xADFF2FFF}, {\"grey\", 0x808080FF}, {\"honeydew\", 0xF0FFF0FF}, {\"hotpink\", 0xFF69B4FF}, {\"indianred\", 0xCD5C5CFF}, {\"indigo\", 0x4B0082FF}, {\"ivory\", 0xFFFFF0FF}, {\"khaki\", 0xF0E68CFF}, {\"lavender\", 0xE6E6FAFF}, {\"lavenderblush\", 0xFFF0F5FF}, {\"lawngreen\", 0x7CFC00FF}, {\"lemonchiffon\", 0xFFFACDFF}, {\"lightblue\", 0xADD8E6FF}, {\"lightcoral\", 0xF08080FF}, {\"lightcyan\", 0xE0FFFFFF}, {\"lightgoldenrodyellow\", 0xFAFAD2FF}, {\"lightgray\", 0xD3D3D3FF}, {\"lightgreen\", 0x90EE90FF}, {\"lightgrey\", 0xD3D3D3FF}, {\"lightpink\", 0xFFB6C1FF}, {\"lightsalmon\", 0xFFA07AFF}, {\"lightseagreen\", 0x20B2AAFF}, {\"lightskyblue\", 0x87CEFAFF}, {\"lightslategray\", 0x778899FF}, {\"lightslategrey\", 0x778899FF}, {\"lightsteelblue\", 0xB0C4DEFF}, {\"lightyellow\", 0xFFFFE0FF}, {\"lime\", 0x00FF00FF}, {\"limegreen\", 0x32CD32FF}, {\"linen\", 0xFAF0E6FF}, {\"magenta\", 0xFF00FFFF}, {\"maroon\", 0x800000FF}, {\"mediumaquamarine\", 0x66CDAAFF}, {\"mediumblue\", 0x0000CDFF}, {\"mediumorchid\", 0xBA55D3FF}, {\"mediumpurple\", 0x9370DBFF}, {\"mediumseagreen\", 0x3CB371FF}, {\"mediumslateblue\", 0x7B68EEFF}, {\"mediumspringgreen\", 0x00FA9AFF}, {\"mediumturquoise\", 0x48D1CCFF}, {\"mediumvioletred\", 0xC71585FF}, {\"midnightblue\", 0x191970FF}, {\"mintcream\", 0xF5FFFAFF}, {\"mistyrose\", 0xFFE4E1FF}, {\"moccasin\", 0xFFE4B5FF}, {\"navajowhite\", 0xFFDEADFF}, {\"navy\", 0x000080FF}, {\"oldlace\", 0xFDF5E6FF}, {\"olive\", 0x808000FF}, {\"olivedrab\", 0x6B8E23FF}, {\"orange\", 0xFFA500FF}, {\"orangered\", 0xFF4500FF}, {\"orchid\", 0xDA70D6FF}, {\"palegoldenrod\", 0xEEE8AAFF}, {\"palegreen\", 0x98FB98FF}, {\"paleturquoise\", 0xAFEEEEFF}, {\"palevioletred\", 0xDB7093FF}, {\"papayawhip\", 0xFFEFD5FF}, {\"peachpuff\", 0xFFDAB9FF}, {\"peru\", 0xCD853FFF}, {\"pink\", 0xFFC0CBFF}, {\"plum\", 0xDDA0DDFF}, {\"powderblue\", 0xB0E0E6FF}, {\"purple\", 0x800080FF}, {\"red\", 0xFF0000FF}, {\"rosybrown\", 0xBC8F8FFF}, {\"royalblue\", 0x4169E1FF}, {\"saddlebrown\", 0x8B4513FF}, {\"salmon\", 0xFA8072FF}, {\"sandybrown\", 0xF4A460FF}, {\"seagreen\", 0x2E8B57FF}, {\"seashell\", 0xFFF5EEFF}, {\"sienna\", 0xA0522DFF}, {\"silver\", 0xC0C0C0FF}, {\"skyblue\", 0x87CEEBFF}, {\"slateblue\", 0x6A5ACDFF}, {\"slategray\", 0x708090FF}, {\"slategrey\", 0x708090FF}, {\"snow\", 0xFFFAFAFF}, {\"springgreen\", 0x00FF7FFF}, {\"steelblue\", 0x4682B4FF}, {\"tan\", 0xD2B48CFF}, {\"teal\", 0x008080FF}, {\"thistle\", 0xD8BFD8FF}, {\"tomato\", 0xFF6347FF}, {\"turquoise\", 0x40E0D0FF}, {\"violet\", 0xEE82EEFF}, {\"wheat\", 0xF5DEB3FF}, {\"white\", 0xFFFFFFFF}, {\"whitesmoke\", 0xF5F5F5FF}, {\"yellow\", 0xFFFF00FF}, {\"yellowgreen\", 0x9ACD32FF}, {0, 0}}"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "test_named",
            "header": "",
            "params": [],
            "definition": "void test_named()\n{\n  short ok;\n  int32_t val = rgba_from_string(\"olive\", &ok);\n  assert(ok);\n  assert(0x808000FF == val);\n}\n\n",
            "calle": [
                "assert",
                "rgba_from_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short",
                        "definition": [
                            "short ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int32_t",
                        "definition": [
                            "int32_t val = rgba_from_string(\"olive\", &ok)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_rgb",
            "header": "",
            "params": [],
            "definition": "void test_rgb()\n{\n  short ok;\n  int32_t val = rgba_from_string(\"rgb(255, 30   , 0)\", &ok);\n  assert(ok);\n  assert(0xff1e00ff == val);\n  val = rgba_from_string(\"rgb(0,0,0)\", &ok);\n  assert(ok);\n  assert(0x000000ff == val);\n}\n\n",
            "calle": [
                "assert",
                "rgba_from_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short",
                        "definition": [
                            "short ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int32_t",
                        "definition": [
                            "int32_t val = rgba_from_string(\"rgb(255, 30   , 0)\", &ok)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_rgba",
            "header": "",
            "params": [],
            "definition": "void test_rgba()\n{\n  short ok;\n  int32_t val = rgba_from_string(\"rgba(255, 30   , 0, .5)\", &ok);\n  assert(ok);\n  assert(0xff1e007f == val);\n  val = rgba_from_string(\"rgba(0,0,0, 1)\", &ok);\n  assert(ok);\n  assert(0x000000ff == val);\n}\n\n",
            "calle": [
                "assert",
                "rgba_from_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short",
                        "definition": [
                            "short ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int32_t",
                        "definition": [
                            "int32_t val = rgba_from_string(\"rgba(255, 30   , 0, .5)\", &ok)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_hex",
            "header": "",
            "params": [],
            "definition": "void test_hex()\n{\n  short ok;\n  int32_t val = rgba_from_string(\"#ff1e00\", &ok);\n  assert(ok);\n  assert(0xff1e00ff == val);\n  val = rgba_from_string(\"#ffffff\", &ok);\n  assert(ok);\n  assert(0xffffffff == val);\n  val = rgba_from_string(\"#ffcc00\", &ok);\n  assert(ok);\n  assert(0xffcc00ff == val);\n  val = rgba_from_string(\"#fco\", &ok);\n  assert(ok);\n  assert(0xffcc00ff == val);\n}\n\n",
            "calle": [
                "assert",
                "rgba_from_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short",
                        "definition": [
                            "short ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int32_t",
                        "definition": [
                            "int32_t val = rgba_from_string(\"#ff1e00\", &ok)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_to_string",
            "header": "",
            "params": [],
            "definition": "void test_to_string()\n{\n  char buf[256];\n  rgba_t color = rgba_new(0xffcc00ff);\n  rgba_to_string(color, buf, 256);\n  assert(0 == strcmp(\"#ffcc00\", buf));\n  color = rgba_new(0xffcc0050);\n  rgba_to_string(color, buf, 256);\n  assert(0 == strcmp(\"rgba(255, 204, 0, 0.31)\", buf));\n}\n\n",
            "calle": [
                "assert",
                "rgba_new",
                "rgba_to_string",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [256]",
                        "definition": [
                            "char buf[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "rgba_t",
                        "definition": [
                            "rgba_t color = rgba_new(0xffcc00ff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  test_named();\n  test_rgb();\n  test_rgba();\n  test_hex();\n  test_to_string();\n  printf(\"\\n  \\e[32m\\u2713 \\e[90mok\\e[0m\\n\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "printf",
                "test_hex",
                "test_named",
                "test_rgb",
                "test_rgba",
                "test_to_string"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_new",
            "header": "rgba_t rgba_new(uint32_t rgba)",
            "params": [
                "uint32_t rgba"
            ],
            "definition": "rgba_t rgba_new(uint32_t rgba)\n{\n  rgba_t color;\n  color.r = ((double) (rgba >> 24)) / 255;\n  color.g = ((double) ((rgba >> 16) & 0xff)) / 255;\n  color.b = ((double) ((rgba >> 8) & 0xff)) / 255;\n  color.a = ((double) (rgba & 0xff)) / 255;\n  return color;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rgba",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rgba"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "rgba_t",
                        "definition": [
                            "rgba_t color"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_string",
            "header": "uint32_t rgba_from_string(const char *str, short *ok)",
            "params": [
                "const char *str",
                "short *ok"
            ],
            "definition": "uint32_t rgba_from_string(const char *str, short *ok)\n{\n  unsigned int str_idx = 0;\n  if ('#' == str[0 + str_idx])\n  {\n    str_idx += 1;\n    return rgba_from_hex_string(str, ok);\n  }\n  if ((&str[str_idx]) == strstr(str, \"rgba\"))\n  {\n    return rgba_from_rgba_string(str, ok);\n  }\n  if ((&str[str_idx]) == strstr(str, \"rgb\"))\n  {\n    return rgba_from_rgb_string(str, ok);\n  }\n  return rgba_from_name_string(str, ok);\n}\n\n",
            "calle": [
                "rgba_from_hex_string",
                "rgba_from_name_string",
                "rgba_from_rgb_string",
                "rgba_from_rgba_string",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short *",
                        "definition": [
                            "short *ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_to_string",
            "header": "void rgba_to_string(rgba_t rgba, char *buf, size_t len)",
            "params": [
                "rgba_t rgba",
                "char *buf",
                "size_t len"
            ],
            "definition": "void rgba_to_string(rgba_t rgba, char *buf, size_t len)\n{\n  if (1 == rgba.a)\n  {\n    snprintf(buf, len, \"#%.2x%.2x%.2x\", (int) (rgba.r * 255), (int) (rgba.g * 255), (int) (rgba.b * 255));\n  }\n  else\n  {\n    snprintf(buf, len, \"rgba(%d, %d, %d, %.2f)\", (int) (rgba.r * 255), (int) (rgba.g * 255), (int) (rgba.b * 255), rgba.a);\n  }\n}\n\n",
            "calle": [
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rgba",
                        "type": "rgba_t",
                        "definition": [
                            "rgba_t rgba"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_inspect",
            "header": "void rgba_inspect(uint32_t rgba)",
            "params": [
                "uint32_t rgba"
            ],
            "definition": "void rgba_inspect(uint32_t rgba)\n{\n  printf(\"rgba(%d,%d,%d,%d)\\n\", (rgba >> 24) & 0xff, (rgba >> 16) & 0xff, (rgba >> 8) & 0xff, rgba & 0xff);\n}\n\n",
            "calle": [
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rgba",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rgba"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "h",
            "header": "",
            "params": [
                "char c"
            ],
            "definition": "static int h(char c)\n{\n  switch (c)\n  {\n    case '0':\n\n    case '1':\n\n    case '2':\n\n    case '3':\n\n    case '4':\n\n    case '5':\n\n    case '6':\n\n    case '7':\n\n    case '8':\n\n    case '9':\n    {\n      return c - '0';\n    }\n\n    case 'a':\n\n    case 'b':\n\n    case 'c':\n\n    case 'd':\n\n    case 'e':\n\n    case 'f':\n    {\n      return (c - 'a') + 10;\n    }\n\n    case 'A':\n\n    case 'B':\n\n    case 'C':\n\n    case 'D':\n\n    case 'E':\n\n    case 'F':\n    {\n      return (c - 'A') + 10;\n    }\n\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_rgba",
            "header": "",
            "params": [
                "uint8_t r",
                "uint8_t g",
                "uint8_t b",
                "uint8_t a"
            ],
            "definition": "inline static uint32_t rgba_from_rgba(uint8_t r, uint8_t g, uint8_t b, uint8_t a)\n{\n  return (((r << 24) | (g << 16)) | (b << 8)) | a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t g"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_rgb",
            "header": "",
            "params": [
                "uint8_t r",
                "uint8_t g",
                "uint8_t b"
            ],
            "definition": "static int32_t rgba_from_rgb(uint8_t r, uint8_t g, uint8_t b)\n{\n  return rgba_from_rgba(r, g, b, 255);\n}\n\n",
            "calle": [
                "rgba_from_rgba"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t g"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_hex6_string",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static uint32_t rgba_from_hex6_string(const char *str)\n{\n  return rgba_from_rgb((h(str[0]) << 4) + h(str[1]), (h(str[2]) << 4) + h(str[3]), (h(str[4]) << 4) + h(str[5]));\n}\n\n",
            "calle": [
                "h",
                "rgba_from_rgb"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_hex3_string",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static int32_t rgba_from_hex3_string(const char *str)\n{\n  return rgba_from_rgb((h(str[0]) << 4) + h(str[0]), (h(str[1]) << 4) + h(str[1]), (h(str[2]) << 4) + h(str[2]));\n}\n\n",
            "calle": [
                "h",
                "rgba_from_rgb"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_rgb_string",
            "header": "",
            "params": [
                "const char *str",
                "short *ok"
            ],
            "definition": "static int32_t rgba_from_rgb_string(const char *str, short *ok)\n{\n  unsigned int str_idx = 0;\n  if ((&str[str_idx]) == strstr(str, \"rgb(\"))\n  {\n    helper_rgba_from_rgb_string_1(&str_idx, str, ok);\n  }\n  return *ok = 0;\n}\n\n",
            "calle": [
                "helper_rgba_from_rgb_string_1",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short *",
                        "definition": [
                            "short *ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_rgba_string",
            "header": "",
            "params": [
                "const char *str",
                "short *ok"
            ],
            "definition": "static int32_t rgba_from_rgba_string(const char *str, short *ok)\n{\n  unsigned int str_idx = 0;\n  if ((&str[str_idx]) == strstr(str, \"rgba(\"))\n  {\n    helper_rgba_from_rgba_string_1(&str_idx, str, ok);\n  }\n  return *ok = 0;\n}\n\n",
            "calle": [
                "helper_rgba_from_rgba_string_1",
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short *",
                        "definition": [
                            "short *ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_hex_string",
            "header": "",
            "params": [
                "const char *str",
                "short *ok"
            ],
            "definition": "static int32_t rgba_from_hex_string(const char *str, short *ok)\n{\n  size_t len = strlen(str);\n  *ok = 1;\n  if (6 == len)\n  {\n    return rgba_from_hex6_string(str);\n  }\n  if (3 == len)\n  {\n    return rgba_from_hex3_string(str);\n  }\n  return *ok = 0;\n}\n\n",
            "calle": [
                "rgba_from_hex3_string",
                "rgba_from_hex6_string",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short *",
                        "definition": [
                            "short *ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(str)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rgba_from_name_string",
            "header": "",
            "params": [
                "const char *str",
                "short *ok"
            ],
            "definition": "static int32_t rgba_from_name_string(const char *str, short *ok)\n{\n  int i = 0;\n  struct named_color color;\n  while ((color = named_colors[i++]).name)\n  {\n    if (((*str) == (*color.name)) && (0 == strcmp(str, color.name)))\n    {\n      return *ok = 1, color.val;\n    }\n  }\n\n  return *ok = 0;\n}\n\n",
            "calle": [
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short *",
                        "definition": [
                            "short *ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "struct named_color",
                        "definition": [
                            "struct named_color color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "named_colors",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_rgba_from_rgb_string_1",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "const char * const str",
                "short * const ok"
            ],
            "definition": "int32_t helper_rgba_from_rgb_string_1(unsigned int * const str_idx_ref, const char * const str, short * const ok)\n{\n  unsigned int str_idx = *str_idx_ref;\n  str_idx += 4;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  while (' ' == str[str_idx])\n    ++(&str[str_idx]);\n\n  ;\n  uint8_t r = 0;\n  uint8_t g = 0;\n  uint8_t b = 0;\n  int c;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  r = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  g = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  b = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  return *ok = 1, rgba_from_rgb(r, g, b);\n  *str_idx_ref = str_idx;\n}\n\n",
            "calle": [
                "rgba_from_rgb"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short * const",
                        "definition": [
                            "short * const ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t g = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t b = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_rgba_from_rgba_string_1",
            "header": "",
            "params": [
                "unsigned int * const str_idx_ref",
                "const char * const str",
                "short * const ok"
            ],
            "definition": "int32_t helper_rgba_from_rgba_string_1(unsigned int * const str_idx_ref, const char * const str, short * const ok)\n{\n  unsigned int str_idx = *str_idx_ref;\n  str_idx += 5;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  str_idx += 1;\n  while (' ' == str[str_idx])\n    ++(&str[str_idx]);\n\n  ;\n  uint8_t r = 0;\n  uint8_t g = 0;\n  uint8_t b = 0;\n  int c;\n  float a = 0;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  r = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  g = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  c = 0;\n  if ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n  {\n    do\n    {\n      c *= 10;\n      c += (*((&str[str_idx])++)) - '0';\n    }\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'));\n  }\n  else\n  {\n    return 0;\n  }\n  if (c > 255)\n    c = 255;\n  b = c;\n  while ((' ' == str[str_idx]) || (',' == str[str_idx]))\n    (&str[str_idx])++;\n\n  ;\n  if ((str[str_idx] >= '1') && (str[str_idx] <= '9'))\n  {\n    a = 1;\n  }\n  else\n  {\n    helper_helper_rgba_from_rgba_string_1_1(&a, str, str_idx);\n  }\n  return *ok = 1, rgba_from_rgba(r, g, b, (int) (a * 255));\n  *str_idx_ref = str_idx;\n}\n\n",
            "calle": [
                "helper_helper_rgba_from_rgba_string_1_1",
                "rgba_from_rgba"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ok",
                        "type": "short * const",
                        "definition": [
                            "short * const ok"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = *str_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t g = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t b = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_rgba_from_rgba_string_1_1",
            "header": "",
            "params": [
                "float * const a_ref",
                "const char * const str",
                "unsigned int str_idx"
            ],
            "definition": "void helper_helper_rgba_from_rgba_string_1_1(float * const a_ref, const char * const str, unsigned int str_idx)\n{\n  float a = *a_ref;\n  if ('0' == str[str_idx])\n    ++(&str[str_idx]);\n  if ('.' == str[str_idx])\n  {\n    ++(&str[str_idx]);\n    float n = .1;\n    while ((str[str_idx] >= '0') && (str[str_idx] <= '9'))\n    {\n      a += ((*((&str[str_idx])++)) - '0') * n;\n      n *= .1;\n    }\n\n  }\n  *a_ref = a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char * const",
                        "definition": [
                            "const char * const str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float",
                        "definition": [
                            "float n = .1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}