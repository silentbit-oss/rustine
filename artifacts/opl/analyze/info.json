{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct opl_timbre_t\n{\n  unsigned long modulator_E862;\n  unsigned long carrier_E862;\n  unsigned char modulator_40;\n  unsigned char carrier_40;\n  unsigned char feedconn;\n  signed char finetune;\n  unsigned char notenum;\n  signed short noteoffset;\n} opl_timbre_t",
            "name": "opl_timbre_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "modulator_E862",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long modulator_E862"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carrier_E862",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long carrier_E862"
                        ]
                    },
                    {
                        "path": null,
                        "name": "modulator_40",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char modulator_40"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carrier_40",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char carrier_40"
                        ]
                    },
                    {
                        "path": null,
                        "name": "feedconn",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char feedconn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "finetune",
                        "type": "signed char",
                        "definition": [
                            "signed char finetune"
                        ]
                    },
                    {
                        "path": null,
                        "name": "notenum",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char notenum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noteoffset",
                        "type": "signed short",
                        "definition": [
                            "signed short noteoffset"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_t\n{\n  signed char notes2voices[16][128][2];\n  unsigned short channelpitch[16];\n  unsigned short channelvol[16];\n  struct voicealloc_t voices2notes[18];\n  unsigned char channelprog[16];\n  int opl3;\n  struct opl_emu_t opl_emu;\n  struct opl_timbre_t opl_gmtimbres[256];\n  struct opl_timbre_t opl_gmtimbres_voice2[256];\n  int is_op2;\n  enum op2_flags_t op2_flags[256];\n}",
            "name": "opl_t",
            "names": [
                "typedef struct opl_t opl_t"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "notes2voices",
                        "type": "signed char [16][128][2]",
                        "definition": [
                            "signed char notes2voices[16][128][2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channelpitch",
                        "type": "unsigned short [16]",
                        "definition": [
                            "unsigned short channelpitch[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channelvol",
                        "type": "unsigned short [16]",
                        "definition": [
                            "unsigned short channelvol[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voices2notes",
                        "type": "struct voicealloc_t [18]",
                        "definition": [
                            "struct voicealloc_t voices2notes[18]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channelprog",
                        "type": "unsigned char [16]",
                        "definition": [
                            "unsigned char channelprog[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl3",
                        "type": "int",
                        "definition": [
                            "int opl3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl_emu",
                        "type": "struct opl_emu_t",
                        "definition": [
                            "struct opl_emu_t opl_emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl_gmtimbres",
                        "type": "struct opl_timbre_t [256]",
                        "definition": [
                            "struct opl_timbre_t opl_gmtimbres[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl_gmtimbres_voice2",
                        "type": "struct opl_timbre_t [256]",
                        "definition": [
                            "struct opl_timbre_t opl_gmtimbres_voice2[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_op2",
                        "type": "int",
                        "definition": [
                            "int is_op2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op2_flags",
                        "type": "enum op2_flags_t [256]",
                        "definition": [
                            "enum op2_flags_t op2_flags[256]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum opl_emu_envelope_state\n{\n  OPL_EMU_EG_ATTACK = 1,\n  OPL_EMU_EG_DECAY = 2,\n  OPL_EMU_EG_SUSTAIN = 3,\n  OPL_EMU_EG_RELEASE = 4,\n  OPL_EMU_EG_STATES = 6\n}",
            "name": "opl_emu_envelope_state",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum opl_emu_keyon_type\n{\n  OPL_EMU_KEYON_NORMAL = 0,\n  OPL_EMU_KEYON_RHYTHM = 1,\n  OPL_EMU_KEYON_CSM = 2\n}",
            "name": "opl_emu_keyon_type",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_opdata_cache\n{\n  const uint16_t *waveform;\n  uint32_t phase_step;\n  uint32_t total_level;\n  uint32_t block_freq;\n  int32_t detune;\n  uint32_t multiple;\n  uint32_t eg_sustain;\n  uint8_t eg_rate[OPL_EMU_EG_STATES];\n  uint8_t eg_shift;\n}",
            "name": "opl_emu_opdata_cache",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "waveform",
                        "type": "const uint16_t *",
                        "definition": [
                            "const uint16_t *waveform"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_step",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_level",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t total_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_freq",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t block_freq"
                        ]
                    },
                    {
                        "path": null,
                        "name": "detune",
                        "type": "int32_t",
                        "definition": [
                            "int32_t detune"
                        ]
                    },
                    {
                        "path": null,
                        "name": "multiple",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t multiple"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eg_sustain",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t eg_sustain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eg_rate",
                        "type": "uint8_t [OPL_EMU_EG_STATES]",
                        "definition": [
                            "uint8_t eg_rate[OPL_EMU_EG_STATES]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eg_shift",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t eg_shift"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_registers\n{\n  uint16_t m_lfo_am_counter;\n  uint16_t m_lfo_pm_counter;\n  uint32_t m_noise_lfsr;\n  uint8_t m_lfo_am;\n  uint8_t m_regdata[0x200];\n  uint16_t m_waveform[8][0x400];\n}",
            "name": "opl_emu_registers",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_lfo_am_counter",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t m_lfo_am_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_lfo_pm_counter",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t m_lfo_pm_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_noise_lfsr",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_noise_lfsr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_lfo_am",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t m_lfo_am"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_regdata",
                        "type": "uint8_t [0x200]",
                        "definition": [
                            "uint8_t m_regdata[0x200]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_waveform",
                        "type": "uint16_t [8][0x400]",
                        "definition": [
                            "uint16_t m_waveform[8][0x400]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_registers_operator_mapping\n{\n  uint32_t chan[18];\n}",
            "name": "opl_emu_registers_operator_mapping",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chan",
                        "type": "uint32_t [18]",
                        "definition": [
                            "uint32_t chan[18]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_fm_operator\n{\n  uint32_t m_choffs;\n  uint32_t m_opoffs;\n  uint32_t m_phase;\n  uint16_t m_env_attenuation;\n  enum opl_emu_envelope_state m_env_state;\n  uint8_t m_key_state;\n  uint8_t m_keyon_live;\n  struct opl_emu_opdata_cache m_cache;\n  struct opl_emu_registers *m_regs;\n}",
            "name": "opl_emu_fm_operator",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_choffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_opoffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_phase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_env_attenuation",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t m_env_attenuation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_env_state",
                        "type": "enum opl_emu_envelope_state",
                        "definition": [
                            "enum opl_emu_envelope_state m_env_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_key_state",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t m_key_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_keyon_live",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t m_keyon_live"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_cache",
                        "type": "struct opl_emu_opdata_cache",
                        "definition": [
                            "struct opl_emu_opdata_cache m_cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *m_regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_fm_channel\n{\n  uint32_t m_choffs;\n  int16_t m_feedback[2];\n  int16_t m_feedback_in;\n  struct opl_emu_fm_operator *m_op[4];\n  struct opl_emu_registers *m_regs;\n}",
            "name": "opl_emu_fm_channel",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_choffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_feedback",
                        "type": "int16_t [2]",
                        "definition": [
                            "int16_t m_feedback[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_feedback_in",
                        "type": "int16_t",
                        "definition": [
                            "int16_t m_feedback_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_op",
                        "type": "struct opl_emu_fm_operator *[4]",
                        "definition": [
                            "struct opl_emu_fm_operator *m_op[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *m_regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opl_emu_t\n{\n  uint32_t m_env_counter;\n  uint8_t m_status;\n  uint8_t m_timer_running[2];\n  uint32_t m_active_channels;\n  uint32_t m_modified_channels;\n  uint32_t m_prepare_count;\n  struct opl_emu_registers m_regs;\n  struct opl_emu_fm_channel m_channel[18];\n  struct opl_emu_fm_operator m_operator[18 * 2];\n}",
            "name": "opl_emu_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "m_env_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_env_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_status",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t m_status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_timer_running",
                        "type": "uint8_t [2]",
                        "definition": [
                            "uint8_t m_timer_running[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_active_channels",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_active_channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_modified_channels",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_modified_channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_prepare_count",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t m_prepare_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_regs",
                        "type": "struct opl_emu_registers",
                        "definition": [
                            "struct opl_emu_registers m_regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_channel",
                        "type": "struct opl_emu_fm_channel [18]",
                        "definition": [
                            "struct opl_emu_fm_channel m_channel[18]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_operator",
                        "type": "struct opl_emu_fm_operator [18 * 2]",
                        "definition": [
                            "struct opl_emu_fm_operator m_operator[18 * 2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct voicealloc_t\n{\n  unsigned short priority;\n  signed short timbreid;\n  signed char channel;\n  signed char note;\n  unsigned char voiceindex;\n}",
            "name": "voicealloc_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "priority",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short priority"
                        ]
                    },
                    {
                        "path": null,
                        "name": "timbreid",
                        "type": "signed short",
                        "definition": [
                            "signed short timbreid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "signed char",
                        "definition": [
                            "signed char channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "signed char",
                        "definition": [
                            "signed char note"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voiceindex",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char voiceindex"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum op2_flags_t\n{\n  OP2_FIXEDPITCH = 1,\n  OP2_UNUSED = 2,\n  OP2_DOUBLEVOICE = 4\n}",
            "name": "op2_flags_t",
            "names": []
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "freqtable",
            "type": "const unsigned short [128]",
            "definition": [
                "const unsigned short freqtable[128] = {345, 365, 387, 410, 435, 460, 488, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517, 547, 580, 615, 651, 690, 731, 774, 820, 869, 921, 975, 517}"
            ]
        },
        {
            "path": null,
            "name": "octavetable",
            "type": "const unsigned char [128]",
            "definition": [
                "const unsigned char octavetable[128] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10}"
            ]
        },
        {
            "path": null,
            "name": "pitchtable",
            "type": "const unsigned short [256]",
            "definition": [
                "const unsigned short pitchtable[256] = {29193U, 29219U, 29246U, 29272U, 29299U, 29325U, 29351U, 29378U, 29405U, 29431U, 29458U, 29484U, 29511U, 29538U, 29564U, 29591U, 29618U, 29644U, 29671U, 29698U, 29725U, 29752U, 29778U, 29805U, 29832U, 29859U, 29886U, 29913U, 29940U, 29967U, 29994U, 30021U, 30048U, 30076U, 30103U, 30130U, 30157U, 30184U, 30212U, 30239U, 30266U, 30293U, 30321U, 30348U, 30376U, 30403U, 30430U, 30458U, 30485U, 30513U, 30541U, 30568U, 30596U, 30623U, 30651U, 30679U, 30706U, 30734U, 30762U, 30790U, 30817U, 30845U, 30873U, 30901U, 30929U, 30957U, 30985U, 31013U, 31041U, 31069U, 31097U, 31125U, 31153U, 31181U, 31209U, 31237U, 31266U, 31294U, 31322U, 31350U, 31379U, 31407U, 31435U, 31464U, 31492U, 31521U, 31549U, 31578U, 31606U, 31635U, 31663U, 31692U, 31720U, 31749U, 31778U, 31806U, 31835U, 31864U, 31893U, 31921U, 31950U, 31979U, 32008U, 32037U, 32066U, 32095U, 32124U, 32153U, 32182U, 32211U, 32240U, 32269U, 32298U, 32327U, 32357U, 32386U, 32415U, 32444U, 32474U, 32503U, 32532U, 32562U, 32591U, 32620U, 32650U, 32679U, 32709U, 32738U, 32768U, 32798U, 32827U, 32857U, 32887U, 32916U, 32946U, 32976U, 33005U, 33035U, 33065U, 33095U, 33125U, 33155U, 33185U, 33215U, 33245U, 33275U, 33305U, 33335U, 33365U, 33395U, 33425U, 33455U, 33486U, 33516U, 33546U, 33576U, 33607U, 33637U, 33667U, 33698U, 33728U, 33759U, 33789U, 33820U, 33850U, 33881U, 33911U, 33942U, 33973U, 34003U, 34034U, 34065U, 34095U, 34126U, 34157U, 34188U, 34219U, 34250U, 34281U, 34312U, 34343U, 34374U, 34405U, 34436U, 34467U, 34498U, 34529U, 34560U, 34591U, 34623U, 34654U, 34685U, 34716U, 34748U, 34779U, 34811U, 34842U, 34874U, 34905U, 34937U, 34968U, 35000U, 35031U, 35063U, 35095U, 35126U, 35158U, 35190U, 35221U, 35253U, 35285U, 35317U, 35349U, 35381U, 35413U, 35445U, 35477U, 35509U, 35541U, 35573U, 35605U, 35637U, 35669U, 35702U, 35734U, 35766U, 35798U, 35831U, 35863U, 35895U, 35928U, 35960U, 35993U, 36025U, 36058U, 36090U, 36123U, 36155U, 36188U, 36221U, 36254U, 36286U, 36319U, 36352U, 36385U, 36417U, 36450U, 36483U, 36516U, 36549U, 36582U, 36615U, 36648U, 36681U, 36715U, 36748U}"
            ]
        },
        {
            "path": null,
            "name": "opl_gmtimbres_default",
            "type": "struct opl_timbre_t [256]",
            "definition": [
                "static struct opl_timbre_t opl_gmtimbres_default[256] = {{0x223E133, 0x4F4F131, 0xA5, 0x09, 0x0E, 0, 0}, {0x433F133, 0x0F4F131, 0xA3, 0x09, 0x0C, 0, 0}, {0x4B3E131, 0x0F4F130, 0x1A, 0x86, 0x08, 0, 0}, {0x073FA32, 0x4F4D111, 0x80, 0x08, 0x0C, 0, 0}, {0x0E7F21C, 0x0B8F201, 0x6F, 0x80, 0x0C, 0, 0}, {0x0C7F437, 0x0D7F230, 0x5D, 0x0A, 0x08, 0, 0}, {0x303F232, 0x1F6D131, 0x44, 0x00, 0x08, 0, 0}, {0x559F101, 0x0F7F111, 0x44, 0x08, 0x06, 0, 0}, {0x087F607, 0x0E4F231, 0x54, 0x08, 0x09, 0, 0}, {0x0A5F33F, 0x0F2C312, 0xA1, 0x06, 0x0C, 0, 0}, {0x004561A, 0x004F601, 0x9E, 0x08, 0x08, 0, 0}, {0x0F6F2B2, 0x0F6F281, 0xE5, 0x00, 0x0F, 0, 0}, {0x0F6F618, 0x0F7E500, 0x63, 0x80, 0x06, 0, 0}, {0x096F616, 0x0F5F111, 0x1F, 0x03, 0x04, 0, 0}, {0x082F307, 0x0E3F302, 0x97, 0x8A, 0x06, 0, 0}, {0x4109130, 0x3B5F321, 0x52, 0x88, 0x08, 0, 0}, {0x116B1A2, 0x117D160, 0x88, 0x80, 0x07, 0, 0}, {0x0F8F032, 0x0F8F001, 0x65, 0x00, 0x0E, 0, 0}, {0x018AA70, 0x0088AB1, 0x44, 0x0A, 0x04, 0, 0}, {0x1043030, 0x1145431, 0x92, 0x80, 0x0D, 0, 0}, {0x0178000, 0x1176081, 0x54, 0x8B, 0x04, 0, 0}, {0x025A721, 0x1264132, 0x4D, 0x08, 0x06, 0, 0}, {0x4FAF022, 0x01A6221, 0x96, 0x08, 0x0C, 0, 0}, {0x107F020, 0x2055231, 0x92, 0x07, 0x08, 0, 0}, {0x274A613, 0x4B8F401, 0xDD, 0x05, 0x06, 0, 0}, {0x5E5F133, 0x1E4F211, 0x99, 0x07, 0x06, 0, 0}, {0x21FF021, 0x088F211, 0xA5, 0x48, 0x0A, 0, 0}, {0x132ED10, 0x3E7D210, 0x87, 0x0A, 0x06, 0, 0}, {0x0F4E430, 0x0F5F330, 0x92, 0x80, 0x08, 0, 0}, {0x0F78111, 0x3F7F054, 0x40, 0x45, 0x08, 0, 0}, {0x0F78111, 0x2F7F054, 0x40, 0x45, 0x0A, 0, 0}, {0x6F78AE4, 0x649B1F2, 0x03, 0x0A, 0x0A, 0, 0}, {0x0209220, 0x0E6C130, 0x97, 0x05, 0x00, 0, 0}, {0x0FFF030, 0x0F8F131, 0x9D, 0x00, 0x0A, 0, 0}, {0x026AA20, 0x0D7F131, 0xCF, 0x80, 0x0A, 0, 0}, {0x0007511, 0x0B69212, 0x1A, 0x40, 0x08, 0, 0}, {0x2E69419, 0x5B6B311, 0x5E, 0x08, 0x00, 0, 0}, {0x2E69515, 0x1B6B211, 0x17, 0x08, 0x00, 0, 0}, {0x0F5F430, 0x0F6F330, 0x0E, 0x00, 0x0A, 0, 0}, {0x1468330, 0x017D231, 0x15, 0x00, 0x0A, 0, 0}, {0x2257020, 0x4266161, 0x95, 0x05, 0x0A, 0, 0}, {0x2446070, 0x2154130, 0x4E, 0x00, 0x0A, 0, 0}, {0x214D070, 0x1175222, 0x0F, 0x88, 0x02, 0, 0}, {0x521F570, 0x4166021, 0x90, 0x09, 0x06, 0, 0}, {0x201C3B0, 0x0058321, 0x8D, 0x08, 0x08, 0, 0}, {0x0848521, 0x074C411, 0x69, 0x07, 0x0A, 0, 0}, {0x022E133, 0x0F2F131, 0xA2, 0x09, 0x0E, 0, 0}, {0x4C3C413, 0x0B4D215, 0x9B, 0x09, 0x0A, 0, 0}, {0x223F832, 0x4055421, 0x99, 0x8A, 0x0C, 0, 0}, {0x5059022, 0x1055521, 0x5B, 0x85, 0x00, 0, 0}, {0x1254732, 0x40256B1, 0xA4, 0x0A, 0x08, 0, 0}, {0x0031121, 0x1046120, 0x58, 0x84, 0x00, 0, 0}, {0x0055020, 0x0F55021, 0x1C, 0x0F, 0x07, 0, 0}, {0x239B420, 0x0076121, 0x50, 0x05, 0x06, 0, 0}, {0x05470F0, 0x07460B0, 0x5A, 0x80, 0x00, 0, 0}, {0x2436110, 0x114D211, 0x90, 0x00, 0x0C, 0, 0}, {0x017B561, 0x0097F21, 0x92, 0x04, 0x0C, 0, 0}, {0x0235270, 0x0198160, 0x1E, 0x08, 0x0E, 0, 0}, {0x0157621, 0x0378261, 0x94, 0x00, 0x0C, 0, 0}, {0x118537A, 0x5177432, 0x21, 0x00, 0x04, 0, 0}, {0x0364120, 0x02B7220, 0x21, 0x08, 0x0C, 0, 0}, {0x0577320, 0x117C020, 0x19, 0x03, 0x0C, 0, 0}, {0x036F120, 0x337F120, 0x92, 0x08, 0x0E, 0, 0}, {0x0A66120, 0x0976120, 0x9B, 0x08, 0x0E, 0, 0}, {0x0F37010, 0x1F65051, 0x51, 0x04, 0x0A, 0, 0}, {0x1067021, 0x1165231, 0x8A, 0x00, 0x06, 0, 0}, {0x00B9820, 0x10B5330, 0x8E, 0x00, 0x0A, 0, 0}, {0x10B8020, 0x11B6330, 0x87, 0x00, 0x08, 0, 0}, {0x0235030, 0x0076C62, 0x58, 0x08, 0x0A, 0, 0}, {0x2077820, 0x2074331, 0x97, 0x00, 0x06, 0, 0}, {0x0199030, 0x01B6132, 0x95, 0x80, 0x0A, 0, 0}, {0x0177531, 0x0174530, 0x93, 0x03, 0x0C, 0, 0}, {0x08D6EF1, 0x02A3571, 0xC0, 0x00, 0x0E, 0, 0}, {0x08860A1, 0x02A6561, 0xA6, 0x00, 0x08, 0, 0}, {0x2176522, 0x0277421, 0x5A, 0x00, 0x06, 0, 0}, {0x1273471, 0x01745B0, 0x8D, 0x05, 0x04, 0, 0}, {0x00457E1, 0x0375760, 0xA8, 0x00, 0x0E, 0, 0}, {0x6543739, 0x25D67A1, 0x28, 0x00, 0x0E, 0, 0}, {0x00F31D0, 0x0053270, 0xC7, 0x00, 0x0B, 0, 0}, {0x00581A1, 0x0295230, 0x37, 0x00, 0x06, 0, 0}, {0x20FFF22, 0x60FFF21, 0x7F, 0x12, 0x05, 0, 0}, {0x39BC120, 0x368C030, 0xBF, 0x06, 0x00, 0, 0}, {0x33357F0, 0x00767E0, 0x28, 0x00, 0x0E, 0, 0}, {0x40457E1, 0x03D67E0, 0x23, 0x00, 0x0E, 0, 0}, {0x32B7320, 0x12BF131, 0x40, 0x00, 0x08, 0, 0}, {0x5029071, 0x0069060, 0x96, 0x09, 0x08, 0, 0}, {0x195C120, 0x1637030, 0x43, 0x80, 0x0A, 0, 0}, {0x132ED10, 0x3E7D210, 0x87, 0x08, 0x06, 0, 0}, {0x2946374, 0x005A0A1, 0xA5, 0x05, 0x02, 0, 0}, {0x00521A1, 0x0053360, 0xC0, 0x00, 0x09, 0, 0}, {0x2A5A120, 0x196A120, 0x95, 0x05, 0x0C, 0, 0}, {0x005F0E0, 0x0548160, 0x44, 0x00, 0x0B, 0, 0}, {0x0336183, 0x05452E0, 0xA7, 0x00, 0x06, 0, 0}, {0x2529082, 0x1534340, 0x9D, 0x80, 0x0C, 0, 0}, {0x2345231, 0x2135120, 0x98, 0x00, 0x06, 0, 0}, {0x1521161, 0x1632060, 0x90, 0x80, 0x08, 0, 0}, {0x157B260, 0x019F803, 0x04, 0x40, 0x07, 0, 0}, {0x2322122, 0x0133221, 0x8C, 0x92, 0x06, 0, 0}, {0x074F624, 0x0249303, 0xC0, 0x0D, 0x00, 0, 0}, {0x3D2C091, 0x1D2D130, 0x8E, 0x03, 0x00, 0, 0}, {0x5F29052, 0x0F2C240, 0x96, 0x06, 0x08, 0, 0}, {0x05213E1, 0x2131371, 0x1A, 0x88, 0x07, 0, 0}, {0x0B67060, 0x0928031, 0x9C, 0x11, 0x0A, 0, 0}, {0x0025511, 0x1748201, 0x94, 0x06, 0x0E, 0, 0}, {0x0B37120, 0x5F48220, 0x1B, 0x08, 0x02, 0, 0}, {0x0127530, 0x6F4F310, 0x0D, 0x0A, 0x06, 0, 0}, {0x033F900, 0x273F400, 0x80, 0x80, 0x00, 0, 0}, {0x332F320, 0x6E49423, 0x0E, 0x08, 0x08, 0, 0}, {0x0328413, 0x073B410, 0xA1, 0x00, 0x0F, 0, 0}, {0x1397931, 0x2099B22, 0x80, 0x00, 0x06, 0, 0}, {0x302A130, 0x0266221, 0x1E, 0x00, 0x0E, 0, 0}, {0x0136030, 0x1169130, 0x12, 0x80, 0x08, 0, 0}, {0x032A115, 0x172B212, 0x00, 0x80, 0x01, 0, 0}, {0x001E795, 0x0679616, 0x81, 0x00, 0x04, 0, 0}, {0x4046303, 0x005A901, 0xCA, 0x08, 0x06, 0, 0}, {0x6D1F817, 0x098F611, 0xA7, 0x00, 0x06, 0, 0}, {0x008F312, 0x004F600, 0x08, 0xC8, 0x04, 0, 46}, {0x0C8A820, 0x0B7E601, 0x0B, 0x00, 0x00, 0, 0}, {0x00437D2, 0x0343471, 0xA1, 0x07, 0x0C, 0, 0}, {0x2114109, 0x51D2101, 0x05, 0x80, 0x0A, 0, 0}, {0x4543310, 0x3574515, 0x19, 0x03, 0x0E, 0, 0}, {0x00437D2, 0x0343471, 0xA1, 0x07, 0x0C, 0, 0}, {0x200C327, 0x6021300, 0x80, 0x08, 0x0E, 0, 65}, {0x003EBD7, 0x06845D8, 0xD4, 0x00, 0x07, 0, 0}, {0x62FDA20, 0x614B009, 0x42, 0x48, 0x04, 0, 0}, {0x101FE30, 0x6142120, 0x00, 0x00, 0x0C, 0, 17}, {0x200832F, 0x6044020, 0x80, 0x00, 0x0E, 0, 65}, {0x230732F, 0x6E6F400, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x06, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x06, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x06, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0A, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0A, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x06, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0A, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0C, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0A, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x02, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0C, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0E, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x08, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x0F, 0, 0}, {0x057FB00, 0x046F800, 0x00, 0x00, 0x0E, 0, 25}, {0x277F810, 0x006FC11, 0x86, 0x00, 0x0A, 0, 34}, {0x287F702, 0x678F802, 0x80, 0x88, 0x0A, 0, 61}, {0x6EF8801, 0x608B502, 0x0D, 0x00, 0x0C, 0, 38}, {0x05476C1, 0x30892C5, 0x80, 0x08, 0x06, 0, 37}, {0x6EF8800, 0x608F502, 0x13, 0x00, 0x08, 0, 38}, {0x508F601, 0x104F600, 0x08, 0x00, 0x06, 0, 32}, {0x254F307, 0x307F905, 0x04, 0x0B, 0x06, 0, 48}, {0x508F601, 0x104F600, 0x08, 0x00, 0x0A, 0, 34}, {0x254D307, 0x3288905, 0x04, 0x08, 0x0A, 0, 48}, {0x508F601, 0x104F600, 0x0C, 0x00, 0x08, 0, 37}, {0x2F2E327, 0x3F5C525, 0x04, 0x08, 0x08, 0, 48}, {0x508F601, 0x104F600, 0x0C, 0x00, 0x00, 0, 40}, {0x508F601, 0x104F600, 0x0C, 0x00, 0x00, 0, 43}, {0x292F108, 0x354F201, 0x00, 0x08, 0x00, 0, 61}, {0x508F601, 0x104F600, 0x0C, 0x00, 0x00, 0, 46}, {0x210F509, 0x305FE03, 0x8A, 0x88, 0x00, 0, 60}, {0x283E108, 0x334D700, 0x00, 0x08, 0x00, 0, 79}, {0x2E1F119, 0x3F3F11B, 0x04, 0x08, 0x00, 0, 62}, {0x2777603, 0x3679601, 0x87, 0x08, 0x00, 0, 80}, {0x251F206, 0x263C504, 0x04, 0x09, 0x00, 0, 67}, {0x366F905, 0x099F701, 0x00, 0x00, 0x00, 0, 58}, {0x292F108, 0x354F201, 0x00, 0x03, 0x00, 0, 62}, {0x422F120, 0x056B40E, 0x81, 0x00, 0x00, 0, 24}, {0x212FD04, 0x305FD03, 0x01, 0x00, 0x00, 0, 61}, {0x2A8F9E3, 0x0779643, 0x1E, 0x08, 0x00, 0, 41}, {0x2A8F9E3, 0x0779643, 0x1E, 0x00, 0x00, 0, 35}, {0x0A8F7E9, 0x5D8990A, 0x08, 0x00, 0x00, 0, 29}, {0x2A8F9E2, 0x0779642, 0x1E, 0x00, 0x00, 0, 41}, {0x2A8F9E2, 0x0779642, 0x1E, 0x00, 0x00, 0, 37}, {0x456FB02, 0x017F700, 0x81, 0x00, 0x00, 0, 55}, {0x456FB02, 0x017F700, 0x81, 0x00, 0x00, 0, 48}, {0x367FD01, 0x098F601, 0x00, 0x08, 0x00, 0, 78}, {0x367FD01, 0x098F601, 0x00, 0x08, 0x00, 0, 73}, {0x25E780C, 0x32B8A0A, 0x00, 0x80, 0x00, 0, 88}, {0x098600F, 0x3FC8590, 0x08, 0xC0, 0x00, 0, 40}, {0x009F020, 0x37DA588, 0x07, 0x00, 0x00, 0, 45}, {0x00FC020, 0x32DA5A8, 0x07, 0x00, 0x00, 0, 42}, {0x106F680, 0x016F610, 0x00, 0x00, 0x00, 0, 48}, {0x106F680, 0x016F610, 0x00, 0x00, 0x00, 0, 48}, {0x0D1F815, 0x078F512, 0x44, 0x00, 0x00, 0, 73}, {0x1D1F813, 0x078F512, 0x44, 0x00, 0x00, 0, 68}, {0x1D1F813, 0x078F512, 0x44, 0x00, 0x00, 0, 61}, {0x1DC5D01, 0x06FF79F, 0x0B, 0x00, 0x00, 0, 16}, {0x1C7C900, 0x05FF49F, 0x07, 0x00, 0x00, 0, 16}, {0x160F2C6, 0x07AF4D4, 0x4F, 0x80, 0x00, 0, 90}, {0x160F286, 0x0B7F294, 0x4F, 0x80, 0x00, 0, 90}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}, {0x0000000, 0x0000000, 0x00, 0x00, 0x00, 0, 0}}"
            ]
        },
        {
            "path": null,
            "name": "op1offsets",
            "type": "const unsigned short [18]",
            "definition": [
                "const unsigned short op1offsets[18] = {0x00, 0x01, 0x02, 0x08, 0x09, 0x0a, 0x10, 0x11, 0x12, 0x100, 0x101, 0x102, 0x108, 0x109, 0x10a, 0x110, 0x111, 0x112}"
            ]
        },
        {
            "path": null,
            "name": "op2offsets",
            "type": "const unsigned short [18]",
            "definition": [
                "const unsigned short op2offsets[18] = {0x03, 0x04, 0x05, 0x0b, 0x0c, 0x0d, 0x13, 0x14, 0x15, 0x103, 0x104, 0x105, 0x10b, 0x10c, 0x10d, 0x113, 0x114, 0x115}"
            ]
        },
        {
            "path": null,
            "name": "voicescount",
            "type": "int",
            "definition": [
                "static int voicescount = 9"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "opl_create",
            "header": "opl_t *opl_create(void)",
            "params": [
                "void"
            ],
            "definition": "opl_t *opl_create(void)\n{\n  struct opl_t *opl = (struct opl_t *) calloc(1, sizeof(struct opl_t));\n  if (opl == 0)\n  {\n    return 0;\n  }\n  memcpy(opl->opl_gmtimbres, opl_gmtimbres_default, sizeof(opl_gmtimbres_default));\n  opl_emu_init(&opl->opl_emu);\n  opl->is_op2 = 0;\n  oplregwr(opl, 0x04, 0x60);\n  oplregwr(opl, 0x04, 0x80);\n  oplregwr(opl, 0x02, 0xff);\n  oplregwr(opl, 0x04, 0x21);\n  oplregwr(opl, 0x04, 0x60);\n  oplregwr(opl, 0x04, 0x80);\n  opl->opl3 = 1;\n  voicescount = 9;\n  if (opl->opl3 != 0)\n  {\n    oplregwr(opl, 0x105, 1);\n    oplregwr(opl, 0x104, 0);\n    voicescount = 18;\n  }\n  oplregwr(opl, 0x01, 0x20);\n  oplregwr(opl, 0x04, 0x00);\n  oplregwr(opl, 0x08, 0x40);\n  oplregwr(opl, 0xBD, 0x00);\n  for (int x = 0; x < voicescount; x += 1)\n  {\n    oplregwr(opl, 0x20 + op1offsets[x], 0x1);\n    oplregwr(opl, 0x20 + op2offsets[x], 0x1);\n    oplregwr(opl, 0x40 + op1offsets[x], 0x10);\n    oplregwr(opl, 0x40 + op2offsets[x], 0x10);\n  }\n\n  opl_clear(opl);\n  return opl;\n}\n\n",
            "calle": [
                "calloc",
                "memcpy",
                "opl_clear",
                "opl_emu_init",
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_t",
                        "type": "struct opl_t *",
                        "definition": [
                            "struct opl_t *opl = (struct opl_t *) calloc(1, sizeof(struct opl_t))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl_gmtimbres_default",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "op1offsets",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "op2offsets",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_destroy",
            "header": "void opl_destroy(opl_t *opl)",
            "params": [
                "opl_t *opl"
            ],
            "definition": "void opl_destroy(opl_t *opl)\n{\n  unsigned int opl_idx = 0;\n  int x;\n  opl_clear(opl);\n  for (x = 0; x < voicescount; x += 1)\n  {\n    oplregwr(opl, 0x40 + op1offsets[x], 0x1f);\n    oplregwr(opl, 0x40 + op2offsets[x], 0x1f);\n  }\n\n  if (opl->opl3 != 0)\n  {\n    oplregwr(opl, 0x105, 0);\n  }\n  free(opl);\n  opl_idx = 0;\n}\n\n",
            "calle": [
                "free",
                "opl_clear",
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int opl_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "op1offsets",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "op2offsets",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_clear",
            "header": "void opl_clear(opl_t *opl)",
            "params": [
                "opl_t *opl"
            ],
            "definition": "void opl_clear(opl_t *opl)\n{\n  int x;\n  int y;\n  for (x = 0; x < voicescount; x += 1)\n    opl_noteoff(opl, x);\n\n  oplregwr(opl, 0xBD, 0);\n  for (x = 0; x < voicescount; x += 1)\n  {\n    opl->voices2notes[x].channel = -1;\n    opl->voices2notes[x].note = -1;\n    opl->voices2notes[x].timbreid = -1;\n    opl->voices2notes[x].voiceindex = 0xFF;\n  }\n\n  for (x = 0; x < 16; x += 1)\n  {\n    for (y = 0; y < 128; y += 1)\n    {\n      opl->notes2voices[x][y][0] = -1;\n      opl->notes2voices[x][y][1] = -1;\n    }\n\n  }\n\n  for (x = 0; x < 16; x += 1)\n  {\n    opl_midi_changeprog(opl, x, x);\n    opl->channelvol[x] = 127;\n  }\n\n}\n\n",
            "calle": [
                "opl_midi_changeprog",
                "opl_noteoff",
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_noteon",
            "header": "void opl_midi_noteon(opl_t *opl, int channel, int note, int velocity)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int note",
                "int velocity"
            ],
            "definition": "void opl_midi_noteon(opl_t *opl, int channel, int note, int velocity)\n{\n  opl_midi_noteon_op2(opl, channel, note, velocity, 1);\n  opl_midi_noteon_op2(opl, channel, note, velocity, 0);\n}\n\n",
            "calle": [
                "opl_midi_noteon_op2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "int",
                        "definition": [
                            "int note"
                        ]
                    },
                    {
                        "path": null,
                        "name": "velocity",
                        "type": "int",
                        "definition": [
                            "int velocity"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_noteoff",
            "header": "void opl_midi_noteoff(opl_t *opl, int channel, int note)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int note"
            ],
            "definition": "void opl_midi_noteoff(opl_t *opl, int channel, int note)\n{\n  opl_midi_noteoff_op2(opl, channel, note, 0);\n  opl_midi_noteoff_op2(opl, channel, note, 1);\n}\n\n",
            "calle": [
                "opl_midi_noteoff_op2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "int",
                        "definition": [
                            "int note"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_pitchwheel",
            "header": "void opl_midi_pitchwheel(opl_t *opl, int channel, int wheelvalue)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int pitchwheel"
            ],
            "definition": "void opl_midi_pitchwheel(opl_t *opl, int channel, int pitchwheel)\n{\n  int x;\n  for (x = 0; x < voicescount; x += 1)\n  {\n    if (opl->voices2notes[x].channel != channel)\n    {\n      continue;\n    }\n    opl_timbre_t *timbre = (opl->voices2notes[x].voiceindex == 0) ? (&opl->opl_gmtimbres[opl->voices2notes[x].timbreid]) : (&opl->opl_gmtimbres_voice2[opl->voices2notes[x].timbreid]);\n    opl_noteon(opl, x, opl->voices2notes[x].note + timbre->noteoffset, pitchwheel + timbre->finetune);\n  }\n\n}\n\n",
            "calle": [
                "opl_noteon"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pitchwheel",
                        "type": "int",
                        "definition": [
                            "int pitchwheel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "timbre",
                        "type": "opl_timbre_t *",
                        "definition": [
                            "opl_timbre_t *timbre = (opl->voices2notes[x].voiceindex == 0) ? (&opl->opl_gmtimbres[opl->voices2notes[x].timbreid]) : (&opl->opl_gmtimbres_voice2[opl->voices2notes[x].timbreid])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_controller",
            "header": "void opl_midi_controller(opl_t *opl, int channel, int id, int value)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int id",
                "int value"
            ],
            "definition": "void opl_midi_controller(opl_t *opl, int channel, int id, int value)\n{\n  int x;\n  switch (id)\n  {\n    case 11:\n    {\n      opl->channelvol[channel] = value;\n      break;\n    }\n\n    case 123:\n\n    case 120:\n    {\n      for (x = 0; x < voicescount; x += 1)\n      {\n        if (opl->voices2notes[x].channel != channel)\n        {\n          continue;\n        }\n        opl_midi_noteoff(opl, channel, opl->voices2notes[x].note);\n      }\n\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "opl_midi_noteoff"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_changeprog",
            "header": "void opl_midi_changeprog(opl_t *opl, int channel, int program)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int program"
            ],
            "definition": "void opl_midi_changeprog(opl_t *opl, int channel, int program)\n{\n  if (channel == 9)\n  {\n    return;\n  }\n  opl->channelprog[channel] = program;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "program",
                        "type": "int",
                        "definition": [
                            "int program"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_loadinstrument",
            "header": "void opl_loadinstrument(opl_t *opl, int voice, opl_timbre_t *timbre)",
            "params": [
                "opl_t *opl",
                "int voice",
                "opl_timbre_t *timbre"
            ],
            "definition": "void opl_loadinstrument(opl_t *opl, int voice, opl_timbre_t *timbre)\n{\n  oplregwr(opl, 0x40 + op1offsets[voice], timbre->modulator_40);\n  oplregwr(opl, 0x40 + op2offsets[voice], timbre->carrier_40 | 0x3f);\n  oplregwr(opl, 0xE0 + op1offsets[voice], timbre->modulator_E862 >> 24);\n  oplregwr(opl, 0xE0 + op2offsets[voice], timbre->carrier_E862 >> 24);\n  oplregwr(opl, 0x80 + op1offsets[voice], (timbre->modulator_E862 >> 16) & 0xff);\n  oplregwr(opl, 0x80 + op2offsets[voice], (timbre->carrier_E862 >> 16) & 0xff);\n  oplregwr(opl, 0x60 + op1offsets[voice], (timbre->modulator_E862 >> 8) & 0xff);\n  oplregwr(opl, 0x60 + op2offsets[voice], (timbre->carrier_E862 >> 8) & 0xff);\n  oplregwr(opl, 0x20 + op1offsets[voice], timbre->modulator_E862 & 0xff);\n  oplregwr(opl, 0x20 + op2offsets[voice], timbre->carrier_E862 & 0xff);\n  if (voice >= 9)\n  {\n    voice -= 9;\n    voice |= 0x100;\n  }\n  if (opl->opl3 != 0)\n  {\n    oplregwr(opl, 0xC0 + voice, timbre->feedconn | 0x30);\n  }\n  else\n  {\n    oplregwr(opl, 0xC0 + voice, timbre->feedconn);\n  }\n}\n\n",
            "calle": [
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "int",
                        "definition": [
                            "int voice"
                        ]
                    },
                    {
                        "path": null,
                        "name": "timbre",
                        "type": "opl_timbre_t *",
                        "definition": [
                            "opl_timbre_t *timbre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op1offsets",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "op2offsets",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_loadbank_ibk",
            "header": "int opl_loadbank_ibk(opl_t *opl, const char *file)",
            "params": [
                "opl_t *opl",
                "const char *file"
            ],
            "definition": "int opl_loadbank_ibk(opl_t *opl, const char *file)\n{\n  char *instruments = 0;\n  unsigned int instruments_idx = 0;\n  char *percussion = 0;\n  unsigned int percussion_idx = 0;\n  int i;\n  int res;\n  instruments_idx = strdup(file);\n  if ((&instruments[instruments_idx]) == 0)\n  {\n    return -64;\n  }\n  for (i = 0; instruments[i + instruments_idx] != 0; i += 1)\n  {\n    if (instruments[i + instruments_idx] == ',')\n    {\n      instruments[i + instruments_idx] = 0;\n      percussion_idx = ((&instruments[instruments_idx]) + i) + 1;\n      break;\n    }\n  }\n\n  res = opl_loadbank_internal(opl, instruments, 0);\n  if ((res == 0) && ((&percussion[percussion_idx]) != 0))\n  {\n    res = opl_loadbank_internal(opl, percussion, 128);\n  }\n  free(instruments);\n  return res;\n}\n\n",
            "calle": [
                "free",
                "opl_loadbank_internal",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instruments",
                        "type": "char *",
                        "definition": [
                            "char *instruments = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instruments_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int instruments_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "percussion",
                        "type": "char *",
                        "definition": [
                            "char *percussion = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "percussion_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int percussion_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_loadbank_op2",
            "header": "int opl_loadbank_op2(opl_t *opl, const void *data, int size)",
            "params": [
                "opl_t *opl",
                "const void *data",
                "int size"
            ],
            "definition": "int opl_loadbank_op2(opl_t *opl, const void *data, int size)\n{\n  if (size < (8 + (36 * 175)))\n  {\n    return -3;\n  }\n  const uint8_t *buff = (const uint8_t *) data;\n  unsigned int buff_idx = 0;\n  int i;\n  if ((((((((buff[0 + buff_idx] != '#') || (buff[1 + buff_idx] != 'O')) || (buff[2 + buff_idx] != 'P')) || (buff[3 + buff_idx] != 'L')) || (buff[4 + buff_idx] != '_')) || (buff[5 + buff_idx] != 'I')) || (buff[6 + buff_idx] != 'I')) || (buff[7 + buff_idx] != '#'))\n  {\n    return -3;\n  }\n  buff_idx += 8;\n  opl->is_op2 = 1;\n  for (i = 0; i < 175; i += 1)\n  {\n    opl->op2_flags[i] = (enum op2_flags_t) (buff[0 + buff_idx] | (((uint16_t) buff[1 + buff_idx]) << 8));\n    int finetune = buff[2 + buff_idx];\n    uint8_t fixednote = buff[3 + buff_idx];\n    buff_idx += 4;\n    opl_load_op2_voice(&opl->opl_gmtimbres[i], buff);\n    opl->opl_gmtimbres[i].notenum = fixednote;\n    buff_idx += 16;\n    opl_load_op2_voice(&opl->opl_gmtimbres_voice2[i], buff);\n    opl->opl_gmtimbres_voice2[i].notenum = fixednote;\n    opl->opl_gmtimbres_voice2[i].finetune += finetune - 128;\n    buff_idx += 16;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "opl_load_op2_voice"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const void *",
                        "definition": [
                            "const void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *buff = (const uint8_t *) data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buff_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "finetune",
                        "type": "int",
                        "definition": [
                            "int finetune = buff[2 + buff_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixednote",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t fixednote = buff[3 + buff_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_render",
            "header": "void opl_render(opl_t *opl, short *sample_pairs, int sample_pairs_count, float volume)",
            "params": [
                "opl_t *opl",
                "short *sample_pairs",
                "int sample_pairs_count",
                "float volume"
            ],
            "definition": "void opl_render(opl_t *opl, short *sample_pairs, int sample_pairs_count, float volume)\n{\n  memset(sample_pairs, 0, (sample_pairs_count * 2) * (sizeof(short)));\n  opl_emu_generate(&opl->opl_emu, sample_pairs, sample_pairs_count, volume);\n}\n\n",
            "calle": [
                "memset",
                "opl_emu_generate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_pairs",
                        "type": "short *",
                        "definition": [
                            "short *sample_pairs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_pairs_count",
                        "type": "int",
                        "definition": [
                            "int sample_pairs_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "float",
                        "definition": [
                            "float volume"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_write",
            "header": "void opl_write(opl_t *opl, int count, unsigned short *regs, unsigned char *data)",
            "params": [
                "opl_t *opl",
                "int count",
                "unsigned short *regs",
                "unsigned char *data"
            ],
            "definition": "void opl_write(opl_t *opl, int count, unsigned short *regs, unsigned char *data)\n{\n  struct opl_emu_t *emu = &opl->opl_emu;\n  for (int i = 0; i < count; i += 1)\n  {\n    uint16_t regnum = regs[i];\n    uint8_t value = data[i];\n    if (regnum == 0x04)\n    {\n      continue;\n      ;\n    }\n    emu->m_modified_channels = (1 << 18) - 1;\n    uint32_t keyon_channel;\n    uint32_t keyon_opmask;\n    if (opl_emu_registers_write(&emu->m_regs, regnum, value, &keyon_channel, &keyon_opmask))\n    {\n      if (keyon_channel < 18)\n      {\n        opl_emu_fm_channel_keyonoff(&emu->m_channel[keyon_channel], keyon_opmask, OPL_EMU_KEYON_NORMAL, keyon_channel);\n      }\n      else\n        if ((18 >= 9) && (keyon_channel == 0xff))\n      {\n        opl_emu_fm_channel_keyonoff(&emu->m_channel[6], (opl_emu_bitfield(keyon_opmask, 4, 1)) ? (3) : (0), OPL_EMU_KEYON_RHYTHM, 6);\n        opl_emu_fm_channel_keyonoff(&emu->m_channel[7], opl_emu_bitfield(keyon_opmask, 0, 1) | (opl_emu_bitfield(keyon_opmask, 3, 1) << 1), OPL_EMU_KEYON_RHYTHM, 7);\n        opl_emu_fm_channel_keyonoff(&emu->m_channel[8], opl_emu_bitfield(keyon_opmask, 2, 1) | (opl_emu_bitfield(keyon_opmask, 1, 1) << 1), OPL_EMU_KEYON_RHYTHM, 8);\n      }\n    }\n  }\n\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_channel_keyonoff",
                "opl_emu_registers_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "regs",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu = &opl->opl_emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "regnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t regnum = regs[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t value = data[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keyon_channel",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keyon_channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keyon_opmask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keyon_opmask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_bitfield",
            "header": "",
            "params": [
                "uint32_t value",
                "int start",
                "int length"
            ],
            "definition": "uint32_t opl_emu_bitfield(uint32_t value, int start, int length)\n{\n  return (value >> start) & ((1 << length) - 1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "int",
                        "definition": [
                            "int start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "int",
                        "definition": [
                            "int length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_clamp",
            "header": "",
            "params": [
                "int32_t value",
                "int32_t minval",
                "int32_t maxval"
            ],
            "definition": "int32_t opl_emu_clamp(int32_t value, int32_t minval, int32_t maxval)\n{\n  if (value < minval)\n  {\n    return minval;\n  }\n  if (value > maxval)\n  {\n    return maxval;\n  }\n  return value;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minval",
                        "type": "int32_t",
                        "definition": [
                            "int32_t minval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "int32_t",
                        "definition": [
                            "int32_t maxval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_operator_list",
            "header": "",
            "params": [
                "uint8_t o1",
                "uint8_t o2",
                "uint8_t o3",
                "uint8_t o4"
            ],
            "definition": "uint32_t opl_emu_registers_operator_list(uint8_t o1, uint8_t o2, uint8_t o3, uint8_t o4)\n{\n  return ((o1 | (o2 << 8)) | (o3 << 16)) | (o4 << 24);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "o1",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t o1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o2",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t o2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o3",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t o3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "o4",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t o4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_effective_rate",
            "header": "",
            "params": [
                "uint32_t rawrate",
                "uint32_t ksr"
            ],
            "definition": "uint32_t opl_emu_registers_effective_rate(uint32_t rawrate, uint32_t ksr)\n{\n  return (rawrate == 0) ? (0) : (((rawrate + ksr) < 63) ? (rawrate + ksr) : (63));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rawrate",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rawrate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ksr",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t ksr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_init",
            "header": "void opl_emu_registers_init(struct opl_emu_registers *regs)",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "void opl_emu_registers_init(struct opl_emu_registers *regs)\n{\n  regs->m_lfo_am_counter = 0;\n  regs->m_lfo_pm_counter = 0;\n  regs->m_noise_lfsr = 1;\n  regs->m_lfo_am = 0;\n  uint16_t *wf0 = &regs->m_waveform[0][0];\n  uint16_t *wf1 = &regs->m_waveform[1 % 8][0];\n  uint16_t *wf2 = &regs->m_waveform[2 % 8][0];\n  uint16_t *wf3 = &regs->m_waveform[3 % 8][0];\n  uint16_t *wf4 = &regs->m_waveform[4 % 8][0];\n  uint16_t *wf5 = &regs->m_waveform[5 % 8][0];\n  uint16_t *wf6 = &regs->m_waveform[6 % 8][0];\n  uint16_t *wf7 = &regs->m_waveform[7 % 8][0];\n  for (uint32_t index = 0; index < 0x400; index += 1)\n    wf0[index] = opl_emu_abs_sin_attenuation(index) | (opl_emu_bitfield(index, 9, 1) << 15);\n\n  if (8 >= 4)\n  {\n    uint16_t zeroval = wf0[0];\n    for (uint32_t index = 0; index < 0x400; index += 1)\n    {\n      wf1[index] = (opl_emu_bitfield(index, 9, 1)) ? (zeroval) : (wf0[index]);\n      wf2[index] = wf0[index] & 0x7fff;\n      wf3[index] = (opl_emu_bitfield(index, 8, 1)) ? (zeroval) : (wf0[index] & 0x7fff);\n      if (8 >= 8)\n      {\n        wf4[index] = (opl_emu_bitfield(index, 9, 1)) ? (zeroval) : (wf0[index * 2]);\n        wf5[index] = (opl_emu_bitfield(index, 9, 1)) ? (zeroval) : (wf0[(index * 2) & 0x1ff]);\n        wf6[index] = opl_emu_bitfield(index, 9, 1) << 15;\n        wf7[index] = ((opl_emu_bitfield(index, 9, 1)) ? (index ^ 0x13ff) : (index)) << 3;\n      }\n    }\n\n  }\n}\n\n",
            "calle": [
                "opl_emu_abs_sin_attenuation",
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf0",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf0 = &regs->m_waveform[0][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf1",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf1 = &regs->m_waveform[1 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf2",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf2 = &regs->m_waveform[2 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf3",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf3 = &regs->m_waveform[3 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf4",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf4 = &regs->m_waveform[4 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf5",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf5 = &regs->m_waveform[5 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf6",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf6 = &regs->m_waveform[6 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wf7",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *wf7 = &regs->m_waveform[7 % 8][0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t index = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zeroval",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t zeroval = wf0[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_reset",
            "header": "void opl_emu_registers_reset(struct opl_emu_registers *regs)",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "void opl_emu_registers_reset(struct opl_emu_registers *regs)\n{\n  for (int i = 0; i < 0x200; i += 1)\n    regs->m_regdata[i] = 0;\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_channel_offset",
            "header": "",
            "params": [
                "uint32_t chnum"
            ],
            "definition": "uint32_t opl_emu_registers_channel_offset(uint32_t chnum)\n{\n  return (chnum % 9) + (0x100 * (chnum / 9));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_operator_offset",
            "header": "",
            "params": [
                "uint32_t opnum"
            ],
            "definition": "uint32_t opl_emu_registers_operator_offset(uint32_t opnum)\n{\n  return ((opnum % 18) + (2 * ((opnum % 18) / 6))) + (0x100 * (opnum / 18));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_operator_map",
            "header": "void opl_emu_registers_operator_map(struct opl_emu_registers *regs, struct opl_emu_registers_operator_mapping *dest)",
            "params": [
                "struct opl_emu_registers *regs",
                "struct opl_emu_registers_operator_mapping *dest"
            ],
            "definition": "void opl_emu_registers_operator_map(struct opl_emu_registers *regs, struct opl_emu_registers_operator_mapping *dest)\n{\n  uint32_t fourop = opl_emu_registers_fourop_enable(regs);\n  dest->chan[0] = (opl_emu_bitfield(fourop, 0, 1)) ? (opl_emu_registers_operator_list(0, 3, 6, 9)) : (opl_emu_registers_operator_list(0, 3, 0xff, 0xff));\n  dest->chan[1] = (opl_emu_bitfield(fourop, 1, 1)) ? (opl_emu_registers_operator_list(1, 4, 7, 10)) : (opl_emu_registers_operator_list(1, 4, 0xff, 0xff));\n  dest->chan[2] = (opl_emu_bitfield(fourop, 2, 1)) ? (opl_emu_registers_operator_list(2, 5, 8, 11)) : (opl_emu_registers_operator_list(2, 5, 0xff, 0xff));\n  dest->chan[3] = (opl_emu_bitfield(fourop, 0, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(6, 9, 0xff, 0xff));\n  dest->chan[4] = (opl_emu_bitfield(fourop, 1, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(7, 10, 0xff, 0xff));\n  dest->chan[5] = (opl_emu_bitfield(fourop, 2, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(8, 11, 0xff, 0xff));\n  dest->chan[6] = opl_emu_registers_operator_list(12, 15, 0xff, 0xff);\n  dest->chan[7] = opl_emu_registers_operator_list(13, 16, 0xff, 0xff);\n  dest->chan[8] = opl_emu_registers_operator_list(14, 17, 0xff, 0xff);\n  dest->chan[9] = (opl_emu_bitfield(fourop, 3, 1)) ? (opl_emu_registers_operator_list(18, 21, 24, 27)) : (opl_emu_registers_operator_list(18, 21, 0xff, 0xff));\n  dest->chan[10] = (opl_emu_bitfield(fourop, 4, 1)) ? (opl_emu_registers_operator_list(19, 22, 25, 28)) : (opl_emu_registers_operator_list(19, 22, 0xff, 0xff));\n  dest->chan[11] = (opl_emu_bitfield(fourop, 5, 1)) ? (opl_emu_registers_operator_list(20, 23, 26, 29)) : (opl_emu_registers_operator_list(20, 23, 0xff, 0xff));\n  dest->chan[12] = (opl_emu_bitfield(fourop, 3, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(24, 27, 0xff, 0xff));\n  dest->chan[13] = (opl_emu_bitfield(fourop, 4, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(25, 28, 0xff, 0xff));\n  dest->chan[14] = (opl_emu_bitfield(fourop, 5, 1)) ? (opl_emu_registers_operator_list(0xff, 0xff, 0xff, 0xff)) : (opl_emu_registers_operator_list(26, 29, 0xff, 0xff));\n  dest->chan[15] = opl_emu_registers_operator_list(30, 33, 0xff, 0xff);\n  dest->chan[16] = opl_emu_registers_operator_list(31, 34, 0xff, 0xff);\n  dest->chan[17] = opl_emu_registers_operator_list(32, 35, 0xff, 0xff);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_registers_fourop_enable",
                "opl_emu_registers_operator_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_registers_operator_mapping",
                        "type": "struct opl_emu_registers_operator_mapping *",
                        "definition": [
                            "struct opl_emu_registers_operator_mapping *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fourop",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t fourop = opl_emu_registers_fourop_enable(regs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_write",
            "header": "int opl_emu_registers_write(struct opl_emu_registers *regs, uint16_t index, uint8_t data, uint32_t *chan, uint32_t *opmask)",
            "params": [
                "struct opl_emu_registers *regs",
                "uint16_t index",
                "uint8_t data",
                "uint32_t *channel",
                "uint32_t *opmask"
            ],
            "definition": "int opl_emu_registers_write(struct opl_emu_registers *regs, uint16_t index, uint8_t data, uint32_t *channel, uint32_t *opmask)\n{\n  if ((index == 0x04) && (opl_emu_bitfield(data, 7, 1) != 0))\n  {\n    regs->m_regdata[index] |= 0x80;\n  }\n  else\n    regs->m_regdata[index] = data;\n  if (index == 0xbd)\n  {\n    *channel = 0xff;\n    *opmask = (opl_emu_bitfield(data, 5, 1)) ? (opl_emu_bitfield(data, 0, 5)) : (0);\n    return 1;\n  }\n  if ((index & 0xf0) == 0xb0)\n  {\n    *channel = index & 0x0f;\n    if ((*channel) < 9)\n    {\n      *channel += 9 * opl_emu_bitfield(index, 8, 1);\n      *opmask = (opl_emu_bitfield(data, 5, 1)) ? (15) : (0);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "uint32_t *",
                        "definition": [
                            "uint32_t *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opmask",
                        "type": "uint32_t *",
                        "definition": [
                            "uint32_t *opmask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_clock_noise_and_lfo",
            "header": "int32_t opl_emu_registers_clock_noise_and_lfo(struct opl_emu_registers *regs)",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "int32_t opl_emu_registers_clock_noise_and_lfo(struct opl_emu_registers *regs)\n{\n  return opl_emu_opl_clock_noise_and_lfo(&regs->m_noise_lfsr, &regs->m_lfo_am_counter, &regs->m_lfo_pm_counter, &regs->m_lfo_am, opl_emu_registers_lfo_am_depth(regs), opl_emu_registers_lfo_pm_depth(regs));\n}\n\n",
            "calle": [
                "opl_emu_opl_clock_noise_and_lfo",
                "opl_emu_registers_lfo_am_depth",
                "opl_emu_registers_lfo_pm_depth"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_reset_lfo",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "void opl_emu_registers_reset_lfo(struct opl_emu_registers *regs)\n{\n  regs->m_lfo_am_counter = (regs->m_lfo_pm_counter = 0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_lfo_am_offset",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_lfo_am_offset(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return regs->m_lfo_am;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_noise_state",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_noise_state(struct opl_emu_registers *regs)\n{\n  return regs->m_noise_lfsr >> 23;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_cache_operator_data",
            "header": "void opl_emu_registers_cache_operator_data(struct opl_emu_registers *regs, uint32_t choffs, uint32_t opoffs, struct opl_emu_opdata_cache *cache)",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs",
                "uint32_t opoffs",
                "struct opl_emu_opdata_cache *cache"
            ],
            "definition": "void opl_emu_registers_cache_operator_data(struct opl_emu_registers *regs, uint32_t choffs, uint32_t opoffs, struct opl_emu_opdata_cache *cache)\n{\n  cache->waveform = &regs->m_waveform[opl_emu_registers_op_waveform(regs, opoffs) % 8][0];\n  uint32_t block_freq = cache->block_freq = opl_emu_registers_ch_block_freq(regs, choffs);\n  uint32_t keycode = opl_emu_bitfield(block_freq, 10, 3) << 1;\n  keycode |= opl_emu_bitfield(block_freq, 9 - opl_emu_registers_note_select(regs), 1);\n  cache->detune = 0;\n  uint32_t multiple = opl_emu_registers_op_multiple(regs, opoffs);\n  cache->multiple = ((multiple & 0xe) | opl_emu_bitfield(0xc2aa, multiple, 1)) * 2;\n  if (cache->multiple == 0)\n  {\n    cache->multiple = 1;\n  }\n  if (opl_emu_registers_op_lfo_pm_enable(regs, opoffs) == 0)\n  {\n    cache->phase_step = opl_emu_registers_compute_phase_step(regs, choffs, opoffs, cache, 0);\n  }\n  else\n    cache->phase_step = 1;\n  cache->total_level = opl_emu_registers_op_total_level(regs, opoffs) << 3;\n  uint32_t ksl = opl_emu_registers_op_ksl(regs, opoffs);\n  if (ksl != 0)\n  {\n    cache->total_level += opl_emu_opl_key_scale_atten(opl_emu_bitfield(block_freq, 10, 3), opl_emu_bitfield(block_freq, 6, 4)) << ksl;\n  }\n  cache->eg_sustain = opl_emu_registers_op_sustain_level(regs, opoffs);\n  cache->eg_sustain |= (cache->eg_sustain + 1) & 0x10;\n  cache->eg_sustain <<= 5;\n  uint32_t ksrval = keycode >> (2 * (opl_emu_registers_op_ksr(regs, opoffs) ^ 1));\n  cache->eg_rate[OPL_EMU_EG_ATTACK] = opl_emu_registers_effective_rate(opl_emu_registers_op_attack_rate(regs, opoffs) * 4, ksrval);\n  cache->eg_rate[OPL_EMU_EG_DECAY] = opl_emu_registers_effective_rate(opl_emu_registers_op_decay_rate(regs, opoffs) * 4, ksrval);\n  cache->eg_rate[OPL_EMU_EG_SUSTAIN] = (opl_emu_registers_op_eg_sustain(regs, opoffs)) ? (0) : (opl_emu_registers_effective_rate(opl_emu_registers_op_release_rate(regs, opoffs) * 4, ksrval));\n  cache->eg_rate[OPL_EMU_EG_RELEASE] = opl_emu_registers_effective_rate(opl_emu_registers_op_release_rate(regs, opoffs) * 4, ksrval);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_opl_key_scale_atten",
                "opl_emu_registers_ch_block_freq",
                "opl_emu_registers_compute_phase_step",
                "opl_emu_registers_effective_rate",
                "opl_emu_registers_note_select",
                "opl_emu_registers_op_attack_rate",
                "opl_emu_registers_op_decay_rate",
                "opl_emu_registers_op_eg_sustain",
                "opl_emu_registers_op_ksl",
                "opl_emu_registers_op_ksr",
                "opl_emu_registers_op_lfo_pm_enable",
                "opl_emu_registers_op_multiple",
                "opl_emu_registers_op_release_rate",
                "opl_emu_registers_op_sustain_level",
                "opl_emu_registers_op_total_level",
                "opl_emu_registers_op_waveform"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_opdata_cache",
                        "type": "struct opl_emu_opdata_cache *",
                        "definition": [
                            "struct opl_emu_opdata_cache *cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_freq",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t block_freq = cache->block_freq = opl_emu_registers_ch_block_freq(regs, choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keycode",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keycode = opl_emu_bitfield(block_freq, 10, 3) << 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "multiple",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t multiple = opl_emu_registers_op_multiple(regs, opoffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ksl",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t ksl = opl_emu_registers_op_ksl(regs, opoffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ksrval",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t ksrval = keycode >> (2 * (opl_emu_registers_op_ksr(regs, opoffs) ^ 1))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_compute_phase_step",
            "header": "uint32_t opl_emu_registers_compute_phase_step(struct opl_emu_registers *regs, uint32_t choffs, uint32_t opoffs, const struct opl_emu_opdata_cache *cache, int32_t lfo_raw_pm)",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs",
                "uint32_t opoffs",
                "const struct opl_emu_opdata_cache *cache",
                "int32_t lfo_raw_pm"
            ],
            "definition": "uint32_t opl_emu_registers_compute_phase_step(struct opl_emu_registers *regs, uint32_t choffs, uint32_t opoffs, const struct opl_emu_opdata_cache *cache, int32_t lfo_raw_pm)\n{\n  return opl_emu_opl_compute_phase_step(cache->block_freq, cache->multiple, (opl_emu_registers_op_lfo_pm_enable(regs, opoffs)) ? (lfo_raw_pm) : (0));\n}\n\n",
            "calle": [
                "opl_emu_opl_compute_phase_step",
                "opl_emu_registers_op_lfo_pm_enable"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_opdata_cache",
                        "type": "const struct opl_emu_opdata_cache *",
                        "definition": [
                            "const struct opl_emu_opdata_cache *cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_byte",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t offset",
                "uint32_t start",
                "uint32_t count",
                "uint32_t extra_offset"
            ],
            "definition": "uint32_t opl_emu_registers_byte(struct opl_emu_registers *regs, uint32_t offset, uint32_t start, uint32_t count, uint32_t extra_offset)\n{\n  return opl_emu_bitfield(regs->m_regdata[offset + extra_offset], start, count);\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t extra_offset"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_word",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t offset1",
                "uint32_t start1",
                "uint32_t count1",
                "uint32_t offset2",
                "uint32_t start2",
                "uint32_t count2",
                "uint32_t extra_offset"
            ],
            "definition": "uint32_t opl_emu_registers_word(struct opl_emu_registers *regs, uint32_t offset1, uint32_t start1, uint32_t count1, uint32_t offset2, uint32_t start2, uint32_t count2, uint32_t extra_offset)\n{\n  return (opl_emu_registers_byte(regs, offset1, start1, count1, extra_offset) << count2) | opl_emu_registers_byte(regs, offset2, start2, count2, extra_offset);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset1",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t offset1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start1",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t start1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count1",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t count1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset2",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t offset2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start2",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t start2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count2",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t count2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t extra_offset"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_timer_a_value",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_timer_a_value(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x02, 0, 8, 0) * 4;\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_timer_b_value",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_timer_b_value(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x03, 0, 8, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_status_mask",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_status_mask(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x04, 0, 8, 0) & 0x78;\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_note_select",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_note_select(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x08, 6, 1, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_lfo_am_depth",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_lfo_am_depth(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0xbd, 7, 1, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_lfo_pm_depth",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_lfo_pm_depth(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0xbd, 6, 1, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_rhythm_enable",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_rhythm_enable(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0xbd, 5, 1, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_newflag",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_newflag(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x105, 0, 1, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_fourop_enable",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs"
            ],
            "definition": "uint32_t opl_emu_registers_fourop_enable(struct opl_emu_registers *regs)\n{\n  return opl_emu_registers_byte(regs, 0x104, 0, 6, 0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_block_freq",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_block_freq(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return opl_emu_registers_word(regs, 0xb0, 0, 5, 0xa0, 0, 8, choffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_word"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_feedback",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_feedback(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return opl_emu_registers_byte(regs, 0xc0, 1, 3, choffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_algorithm",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_algorithm(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return opl_emu_registers_byte(regs, 0xc0, 0, 1, choffs) | (8 | (opl_emu_registers_byte(regs, 0xc3, 0, 1, choffs) << 1));\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_output_any",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_output_any(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return (opl_emu_registers_newflag(regs)) ? (opl_emu_registers_byte(regs, 0xc0 + choffs, 4, 4, 0)) : (1);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_output_0",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_output_0(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return (opl_emu_registers_newflag(regs)) ? (opl_emu_registers_byte(regs, 0xc0 + choffs, 4, 1, 0)) : (1);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_output_1",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_output_1(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return (opl_emu_registers_newflag(regs)) ? (opl_emu_registers_byte(regs, 0xc0 + choffs, 5, 1, 0)) : (1);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_output_2",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_output_2(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return (opl_emu_registers_newflag(regs)) ? (opl_emu_registers_byte(regs, 0xc0 + choffs, 6, 1, 0)) : (0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_ch_output_3",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "uint32_t opl_emu_registers_ch_output_3(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return (opl_emu_registers_newflag(regs)) ? (opl_emu_registers_byte(regs, 0xc0 + choffs, 7, 1, 0)) : (0);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_lfo_am_enable",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_lfo_am_enable(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x20, 7, 1, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_lfo_pm_enable",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_lfo_pm_enable(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x20, 6, 1, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_eg_sustain",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_eg_sustain(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x20, 5, 1, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_ksr",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_ksr(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x20, 4, 1, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_multiple",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_multiple(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x20, 0, 4, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_ksl",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_ksl(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  uint32_t temp = opl_emu_registers_byte(regs, 0x40, 6, 2, opoffs);\n  return opl_emu_bitfield(temp, 1, 1) | (opl_emu_bitfield(temp, 0, 1) << 1);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t temp = opl_emu_registers_byte(regs, 0x40, 6, 2, opoffs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_total_level",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_total_level(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x40, 0, 6, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_attack_rate",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_attack_rate(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x60, 4, 4, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_decay_rate",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_decay_rate(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x60, 0, 4, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_sustain_level",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_sustain_level(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x80, 4, 4, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_release_rate",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_release_rate(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0x80, 0, 4, opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_op_waveform",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "uint32_t opl_emu_registers_op_waveform(struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  return opl_emu_registers_byte(regs, 0xe0, 0, (opl_emu_registers_newflag(regs)) ? (3) : (2), opoffs);\n}\n\n",
            "calle": [
                "opl_emu_registers_byte",
                "opl_emu_registers_newflag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_registers_is_rhythm",
            "header": "",
            "params": [
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "int opl_emu_registers_is_rhythm(struct opl_emu_registers *regs, uint32_t choffs)\n{\n  return opl_emu_registers_rhythm_enable(regs) && ((choffs >= 6) && (choffs <= 8));\n}\n\n",
            "calle": [
                "opl_emu_registers_rhythm_enable"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_init",
            "header": "void opl_emu_fm_operator_init(struct opl_emu_fm_operator *fmop, struct opl_emu_registers *regs, uint32_t opoffs)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "struct opl_emu_registers *regs",
                "uint32_t opoffs"
            ],
            "definition": "void opl_emu_fm_operator_init(struct opl_emu_fm_operator *fmop, struct opl_emu_registers *regs, uint32_t opoffs)\n{\n  fmop->m_choffs = 0;\n  fmop->m_opoffs = opoffs;\n  fmop->m_phase = 0;\n  fmop->m_env_attenuation = 0x3ff;\n  fmop->m_env_state = OPL_EMU_EG_RELEASE;\n  fmop->m_key_state = 0;\n  fmop->m_keyon_live = 0;\n  fmop->m_regs = regs;\n  fmop->m_cache.eg_shift = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opoffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opoffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_reset",
            "header": "void opl_emu_fm_operator_reset(struct opl_emu_fm_operator *fmop)",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "void opl_emu_fm_operator_reset(struct opl_emu_fm_operator *fmop)\n{\n  fmop->m_phase = 0;\n  fmop->m_env_attenuation = 0x3ff;\n  fmop->m_env_state = OPL_EMU_EG_RELEASE;\n  fmop->m_key_state = 0;\n  fmop->m_keyon_live = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_opoffs",
            "header": "",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "uint32_t opl_emu_fm_operator_opoffs(struct opl_emu_fm_operator *fmop)\n{\n  return fmop->m_opoffs;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_choffs",
            "header": "",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "uint32_t opl_emu_fm_operator_choffs(struct opl_emu_fm_operator *fmop)\n{\n  return fmop->m_choffs;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_set_choffs",
            "header": "",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t choffs"
            ],
            "definition": "void opl_emu_fm_operator_set_choffs(struct opl_emu_fm_operator *fmop, uint32_t choffs)\n{\n  fmop->m_choffs = choffs;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_prepare",
            "header": "int opl_emu_fm_operator_prepare(struct opl_emu_fm_operator *fmop)",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "int opl_emu_fm_operator_prepare(struct opl_emu_fm_operator *fmop)\n{\n  opl_emu_registers_cache_operator_data(fmop->m_regs, fmop->m_choffs, fmop->m_opoffs, &fmop->m_cache);\n  opl_emu_fm_operator_clock_keystate(fmop, (uint32_t) (fmop->m_keyon_live != 0));\n  fmop->m_keyon_live &= ~(1 << OPL_EMU_KEYON_CSM);\n  return (fmop->m_env_state != OPL_EMU_EG_RELEASE) || (fmop->m_env_attenuation < 0x200);\n}\n\n",
            "calle": [
                "opl_emu_fm_operator_clock_keystate",
                "opl_emu_registers_cache_operator_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_clock",
            "header": "void opl_emu_fm_operator_clock(struct opl_emu_fm_operator *fmop, uint32_t env_counter, int32_t lfo_raw_pm)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t env_counter",
                "int32_t lfo_raw_pm"
            ],
            "definition": "void opl_emu_fm_operator_clock(struct opl_emu_fm_operator *fmop, uint32_t env_counter, int32_t lfo_raw_pm)\n{\n  if (opl_emu_bitfield(env_counter, 0, 2) == 0)\n  {\n    opl_emu_fm_operator_clock_envelope(fmop, env_counter >> 2);\n  }\n  opl_emu_fm_operator_clock_phase(fmop, lfo_raw_pm);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_operator_clock_envelope",
                "opl_emu_fm_operator_clock_phase"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t env_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_phase",
            "header": "",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "uint32_t opl_emu_fm_operator_phase(struct opl_emu_fm_operator *fmop)\n{\n  return fmop->m_phase >> 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_compute_volume",
            "header": "int32_t opl_emu_fm_operator_compute_volume(struct opl_emu_fm_operator *fmop, uint32_t phase, uint32_t am_offset)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t phase",
                "uint32_t am_offset"
            ],
            "definition": "int32_t opl_emu_fm_operator_compute_volume(struct opl_emu_fm_operator *fmop, uint32_t phase, uint32_t am_offset)\n{\n  if (fmop->m_env_attenuation > 0x200)\n  {\n    return 0;\n  }\n  uint32_t sin_attenuation = fmop->m_cache.waveform[phase & (0x400 - 1)];\n  uint32_t env_attenuation = opl_emu_fm_operator_envelope_attenuation(fmop, am_offset) << 2;\n  int32_t result = opl_emu_attenuation_to_volume((sin_attenuation & 0x7fff) + env_attenuation);\n  return (opl_emu_bitfield(sin_attenuation, 15, 1)) ? (-result) : (result);\n}\n\n",
            "calle": [
                "opl_emu_attenuation_to_volume",
                "opl_emu_bitfield",
                "opl_emu_fm_operator_envelope_attenuation"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sin_attenuation",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t sin_attenuation = fmop->m_cache.waveform[phase & (0x400 - 1)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env_attenuation",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t env_attenuation = opl_emu_fm_operator_envelope_attenuation(fmop, am_offset) << 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = opl_emu_attenuation_to_volume((sin_attenuation & 0x7fff) + env_attenuation)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_keyonoff",
            "header": "void opl_emu_fm_operator_keyonoff(struct opl_emu_fm_operator *fmop, uint32_t on, enum opl_emu_keyon_type type)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t on",
                "enum opl_emu_keyon_type type"
            ],
            "definition": "void opl_emu_fm_operator_keyonoff(struct opl_emu_fm_operator *fmop, uint32_t on, enum opl_emu_keyon_type type)\n{\n  fmop->m_keyon_live = (fmop->m_keyon_live & (~(1 << ((int) type)))) | (opl_emu_bitfield(on, 0, 1) << ((int) type));\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "on",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t on"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "enum opl_emu_keyon_type",
                        "definition": [
                            "enum opl_emu_keyon_type type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_start_attack",
            "header": "void opl_emu_fm_operator_start_attack(struct opl_emu_fm_operator *fmop)",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "void opl_emu_fm_operator_start_attack(struct opl_emu_fm_operator *fmop)\n{\n  if (fmop->m_env_state == OPL_EMU_EG_ATTACK)\n  {\n    return;\n  }\n  fmop->m_env_state = OPL_EMU_EG_ATTACK;\n  fmop->m_phase = 0;\n  if (fmop->m_cache.eg_rate[OPL_EMU_EG_ATTACK] >= 62)\n  {\n    fmop->m_env_attenuation = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_start_release",
            "header": "void opl_emu_fm_operator_start_release(struct opl_emu_fm_operator *fmop)",
            "params": [
                "struct opl_emu_fm_operator *fmop"
            ],
            "definition": "void opl_emu_fm_operator_start_release(struct opl_emu_fm_operator *fmop)\n{\n  if (fmop->m_env_state >= OPL_EMU_EG_RELEASE)\n  {\n    return;\n  }\n  fmop->m_env_state = OPL_EMU_EG_RELEASE;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_clock_keystate",
            "header": "void opl_emu_fm_operator_clock_keystate(struct opl_emu_fm_operator *fmop, uint32_t keystate)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t keystate"
            ],
            "definition": "void opl_emu_fm_operator_clock_keystate(struct opl_emu_fm_operator *fmop, uint32_t keystate)\n{\n  if ((keystate ^ fmop->m_key_state) != 0)\n  {\n    fmop->m_key_state = keystate;\n    if (keystate != 0)\n    {\n      opl_emu_fm_operator_start_attack(fmop);\n    }\n    else\n      opl_emu_fm_operator_start_release(fmop);\n  }\n}\n\n",
            "calle": [
                "opl_emu_fm_operator_start_attack",
                "opl_emu_fm_operator_start_release"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keystate",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keystate"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_clock_envelope",
            "header": "void opl_emu_fm_operator_clock_envelope(struct opl_emu_fm_operator *fmop, uint32_t env_counter)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t env_counter"
            ],
            "definition": "void opl_emu_fm_operator_clock_envelope(struct opl_emu_fm_operator *fmop, uint32_t env_counter)\n{\n  if ((fmop->m_env_state == OPL_EMU_EG_ATTACK) && (fmop->m_env_attenuation == 0))\n  {\n    fmop->m_env_state = OPL_EMU_EG_DECAY;\n  }\n  if ((fmop->m_env_state == OPL_EMU_EG_DECAY) && (fmop->m_env_attenuation >= fmop->m_cache.eg_sustain))\n  {\n    fmop->m_env_state = OPL_EMU_EG_SUSTAIN;\n  }\n  uint32_t rate = fmop->m_cache.eg_rate[fmop->m_env_state];\n  uint32_t rate_shift = rate >> 2;\n  env_counter <<= rate_shift;\n  if (opl_emu_bitfield(env_counter, 0, 11) != 0)\n  {\n    return;\n  }\n  uint32_t relevant_bits = opl_emu_bitfield(env_counter, (rate_shift <= 11) ? (11) : (rate_shift), 3);\n  uint32_t increment = opl_emu_attenuation_increment(rate, relevant_bits);\n  if (fmop->m_env_state == OPL_EMU_EG_ATTACK)\n  {\n    if (rate < 62)\n    {\n      fmop->m_env_attenuation += ((~fmop->m_env_attenuation) * increment) >> 4;\n    }\n  }\n  else\n  {\n    fmop->m_env_attenuation += increment;\n    if (fmop->m_env_attenuation >= 0x400)\n    {\n      fmop->m_env_attenuation = 0x3ff;\n    }\n  }\n}\n\n",
            "calle": [
                "opl_emu_attenuation_increment",
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t env_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rate",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rate = fmop->m_cache.eg_rate[fmop->m_env_state]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rate_shift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rate_shift = rate >> 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "relevant_bits",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t relevant_bits = opl_emu_bitfield(env_counter, (rate_shift <= 11) ? (11) : (rate_shift), 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "increment",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t increment = opl_emu_attenuation_increment(rate, relevant_bits)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_clock_phase",
            "header": "void opl_emu_fm_operator_clock_phase(struct opl_emu_fm_operator *fmop, int32_t lfo_raw_pm)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "int32_t lfo_raw_pm"
            ],
            "definition": "void opl_emu_fm_operator_clock_phase(struct opl_emu_fm_operator *fmop, int32_t lfo_raw_pm)\n{\n  uint32_t phase_step = fmop->m_cache.phase_step;\n  if (phase_step == 1)\n  {\n    phase_step = opl_emu_registers_compute_phase_step(fmop->m_regs, fmop->m_choffs, fmop->m_opoffs, &fmop->m_cache, lfo_raw_pm);\n  }\n  fmop->m_phase += phase_step;\n}\n\n",
            "calle": [
                "opl_emu_registers_compute_phase_step"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_step",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_step = fmop->m_cache.phase_step"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_operator_envelope_attenuation",
            "header": "uint32_t opl_emu_fm_operator_envelope_attenuation(struct opl_emu_fm_operator *fmop, uint32_t am_offset)",
            "params": [
                "struct opl_emu_fm_operator *fmop",
                "uint32_t am_offset"
            ],
            "definition": "uint32_t opl_emu_fm_operator_envelope_attenuation(struct opl_emu_fm_operator *fmop, uint32_t am_offset)\n{\n  uint32_t result = fmop->m_env_attenuation >> fmop->m_cache.eg_shift;\n  if (opl_emu_registers_op_lfo_am_enable(fmop->m_regs, fmop->m_opoffs))\n  {\n    result += am_offset;\n  }\n  result += fmop->m_cache.total_level;\n  return (result < 0x3ff) ? (result) : (0x3ff);\n}\n\n",
            "calle": [
                "opl_emu_registers_op_lfo_am_enable"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *fmop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t result = fmop->m_env_attenuation >> fmop->m_cache.eg_shift"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_init",
            "header": "void opl_emu_fm_channel_init(struct opl_emu_fm_channel *fmch, struct opl_emu_registers *regs, uint32_t choffs)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "struct opl_emu_registers *regs",
                "uint32_t choffs"
            ],
            "definition": "void opl_emu_fm_channel_init(struct opl_emu_fm_channel *fmch, struct opl_emu_registers *regs, uint32_t choffs)\n{\n  fmch->m_choffs = choffs;\n  fmch->m_feedback[0] = 0;\n  fmch->m_feedback[1] = 0;\n  fmch->m_feedback_in = 0;\n  fmch->m_op[0] = 0;\n  fmch->m_op[1] = 0;\n  fmch->m_op[2] = 0;\n  fmch->m_op[3] = 0;\n  fmch->m_regs = regs;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_registers",
                        "type": "struct opl_emu_registers *",
                        "definition": [
                            "struct opl_emu_registers *regs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_reset",
            "header": "void opl_emu_fm_channel_reset(struct opl_emu_fm_channel *fmch)",
            "params": [
                "struct opl_emu_fm_channel *fmch"
            ],
            "definition": "void opl_emu_fm_channel_reset(struct opl_emu_fm_channel *fmch)\n{\n  fmch->m_feedback[0] = (fmch->m_feedback[1] = 0);\n  fmch->m_feedback_in = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_choffs",
            "header": "",
            "params": [
                "struct opl_emu_fm_channel *fmch"
            ],
            "definition": "uint32_t opl_emu_fm_channel_choffs(struct opl_emu_fm_channel *fmch)\n{\n  return fmch->m_choffs;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_assign",
            "header": "",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t index",
                "struct opl_emu_fm_operator *op"
            ],
            "definition": "void opl_emu_fm_channel_assign(struct opl_emu_fm_channel *fmch, uint32_t index, struct opl_emu_fm_operator *op)\n{\n  fmch->m_op[index] = op;\n  if (op != 0)\n  {\n    opl_emu_fm_operator_set_choffs(op, fmch->m_choffs);\n  }\n}\n\n",
            "calle": [
                "opl_emu_fm_operator_set_choffs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_operator",
                        "type": "struct opl_emu_fm_operator *",
                        "definition": [
                            "struct opl_emu_fm_operator *op"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_keyonoff",
            "header": "void opl_emu_fm_channel_keyonoff(struct opl_emu_fm_channel *fmch, uint32_t states, enum opl_emu_keyon_type type, uint32_t chnum)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t states",
                "enum opl_emu_keyon_type type",
                "uint32_t chnum"
            ],
            "definition": "void opl_emu_fm_channel_keyonoff(struct opl_emu_fm_channel *fmch, uint32_t states, enum opl_emu_keyon_type type, uint32_t chnum)\n{\n  for (uint32_t opnum = 0; opnum < ((sizeof(fmch->m_op)) / (sizeof(*fmch->m_op))); opnum += 1)\n    if (fmch->m_op[opnum] != 0)\n  {\n    opl_emu_fm_operator_keyonoff(fmch->m_op[opnum], opl_emu_bitfield(states, opnum, 1), type);\n  }\n\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_operator_keyonoff"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "states",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t states"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "enum opl_emu_keyon_type",
                        "definition": [
                            "enum opl_emu_keyon_type type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_prepare",
            "header": "int opl_emu_fm_channel_prepare(struct opl_emu_fm_channel *fmch)",
            "params": [
                "struct opl_emu_fm_channel *fmch"
            ],
            "definition": "int opl_emu_fm_channel_prepare(struct opl_emu_fm_channel *fmch)\n{\n  uint32_t active_mask = 0;\n  for (uint32_t opnum = 0; opnum < ((sizeof(fmch->m_op)) / (sizeof(*fmch->m_op))); opnum += 1)\n    if (fmch->m_op[opnum] != 0)\n  {\n    if (opl_emu_fm_operator_prepare(fmch->m_op[opnum]))\n    {\n      active_mask |= 1 << opnum;\n    }\n  }\n\n  return active_mask != 0;\n}\n\n",
            "calle": [
                "opl_emu_fm_operator_prepare"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "active_mask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t active_mask = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_clock",
            "header": "void opl_emu_fm_channel_clock(struct opl_emu_fm_channel *fmch, uint32_t env_counter, int32_t lfo_raw_pm)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t env_counter",
                "int32_t lfo_raw_pm"
            ],
            "definition": "void opl_emu_fm_channel_clock(struct opl_emu_fm_channel *fmch, uint32_t env_counter, int32_t lfo_raw_pm)\n{\n  fmch->m_feedback[0] = fmch->m_feedback[1];\n  fmch->m_feedback[1] = fmch->m_feedback_in;\n  for (uint32_t opnum = 0; opnum < ((sizeof(fmch->m_op)) / (sizeof(*fmch->m_op))); opnum += 1)\n    if (fmch->m_op[opnum] != 0)\n  {\n    opl_emu_fm_operator_clock(fmch->m_op[opnum], env_counter, lfo_raw_pm);\n  }\n\n}\n\n",
            "calle": [
                "opl_emu_fm_operator_clock"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "env_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t env_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_output_2op",
            "header": "void opl_emu_fm_channel_output_2op(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax"
            ],
            "definition": "void opl_emu_fm_channel_output_2op(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)\n{\n  uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs);\n  int32_t opmod = 0;\n  uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs);\n  if (feedback != 0)\n  {\n    opmod = (fmch->m_feedback[0] + fmch->m_feedback[1]) >> (10 - feedback);\n  }\n  int32_t op1value = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset);\n  if (opl_emu_registers_ch_output_any(fmch->m_regs, fmch->m_choffs) == 0)\n  {\n    return;\n  }\n  int32_t result;\n  if (opl_emu_bitfield(opl_emu_registers_ch_algorithm(fmch->m_regs, fmch->m_choffs), 0, 1) == 0)\n  {\n    opmod = op1value >> 1;\n    result = opl_emu_fm_operator_compute_volume(fmch->m_op[1], opl_emu_fm_operator_phase(fmch->m_op[1]) + opmod, am_offset) >> rshift;\n  }\n  else\n  {\n    result = op1value + (opl_emu_fm_operator_compute_volume(fmch->m_op[1], opl_emu_fm_operator_phase(fmch->m_op[1]), am_offset) >> rshift);\n    int32_t clipmin = (-clipmax) - 1;\n    result = opl_emu_clamp(result, clipmin, clipmax);\n  }\n  opl_emu_fm_channel_add_to_output(fmch, fmch->m_choffs, output, result);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_clamp",
                "opl_emu_fm_channel_add_to_output",
                "opl_emu_fm_operator_compute_volume",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_ch_algorithm",
                "opl_emu_registers_ch_feedback",
                "opl_emu_registers_ch_output_any",
                "opl_emu_registers_lfo_am_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opmod",
                        "type": "int32_t",
                        "definition": [
                            "int32_t opmod = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "feedback",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op1value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t op1value = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmin",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmin = (-clipmax) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_output_4op",
            "header": "void opl_emu_fm_channel_output_4op(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax"
            ],
            "definition": "void opl_emu_fm_channel_output_4op(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)\n{\n  uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs);\n  int32_t opmod = 0;\n  uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs);\n  if (feedback != 0)\n  {\n    opmod = (fmch->m_feedback[0] + fmch->m_feedback[1]) >> (10 - feedback);\n  }\n  int32_t op1value = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset);\n  if (opl_emu_registers_ch_output_any(fmch->m_regs, fmch->m_choffs) == 0)\n  {\n    return;\n  }\n  static const uint16_t s_algorithm_ops[8 + 4] = {((((1 | (2 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (5 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (6 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (7 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (3 << 4)) | (0 << 7)) | (1 << 8)) | (0 << 9), ((((1 | (1 << 1)) | (1 << 4)) | (0 << 7)) | (1 << 8)) | (1 << 9), ((((1 | (0 << 1)) | (0 << 4)) | (0 << 7)) | (1 << 8)) | (1 << 9), ((((0 | (0 << 1)) | (0 << 4)) | (1 << 7)) | (1 << 8)) | (1 << 9), ((((1 | (2 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (3 << 4)) | (1 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (3 << 4)) | (0 << 7)) | (1 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (0 << 4)) | (1 << 7)) | (0 << 8)) | (1 << 9)};\n  uint32_t algorithm_ops = s_algorithm_ops[opl_emu_registers_ch_algorithm(fmch->m_regs, fmch->m_choffs)];\n  int16_t opout[8];\n  opout[0] = 0;\n  opout[1] = op1value;\n  opmod = opout[opl_emu_bitfield(algorithm_ops, 0, 1)] >> 1;\n  opout[2] = opl_emu_fm_operator_compute_volume(fmch->m_op[1], opl_emu_fm_operator_phase(fmch->m_op[1]) + opmod, am_offset);\n  opout[5] = opout[1] + opout[2];\n  opmod = opout[opl_emu_bitfield(algorithm_ops, 1, 3)] >> 1;\n  opout[3] = opl_emu_fm_operator_compute_volume(fmch->m_op[2], opl_emu_fm_operator_phase(fmch->m_op[2]) + opmod, am_offset);\n  opout[6] = opout[1] + opout[3];\n  opout[7] = opout[2] + opout[3];\n  opmod = opout[opl_emu_bitfield(algorithm_ops, 4, 3)] >> 1;\n  int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[3], opl_emu_fm_operator_phase(fmch->m_op[3]) + opmod, am_offset);\n  result >>= rshift;\n  int32_t clipmin = (-clipmax) - 1;\n  if (opl_emu_bitfield(algorithm_ops, 7, 1) != 0)\n  {\n    result = opl_emu_clamp(result + (opout[1] >> rshift), clipmin, clipmax);\n  }\n  if (opl_emu_bitfield(algorithm_ops, 8, 1) != 0)\n  {\n    result = opl_emu_clamp(result + (opout[2] >> rshift), clipmin, clipmax);\n  }\n  if (opl_emu_bitfield(algorithm_ops, 9, 1) != 0)\n  {\n    result = opl_emu_clamp(result + (opout[3] >> rshift), clipmin, clipmax);\n  }\n  opl_emu_fm_channel_add_to_output(fmch, fmch->m_choffs, output, result);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_clamp",
                "opl_emu_fm_channel_add_to_output",
                "opl_emu_fm_operator_compute_volume",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_ch_algorithm",
                "opl_emu_registers_ch_feedback",
                "opl_emu_registers_ch_output_any",
                "opl_emu_registers_lfo_am_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opmod",
                        "type": "int32_t",
                        "definition": [
                            "int32_t opmod = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "feedback",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op1value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t op1value = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_algorithm_ops",
                        "type": "const uint16_t [8 + 4]",
                        "definition": [
                            "static const uint16_t s_algorithm_ops[8 + 4] = {((((1 | (2 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (5 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (6 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (7 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (3 << 4)) | (0 << 7)) | (1 << 8)) | (0 << 9), ((((1 | (1 << 1)) | (1 << 4)) | (0 << 7)) | (1 << 8)) | (1 << 9), ((((1 | (0 << 1)) | (0 << 4)) | (0 << 7)) | (1 << 8)) | (1 << 9), ((((0 | (0 << 1)) | (0 << 4)) | (1 << 7)) | (1 << 8)) | (1 << 9), ((((1 | (2 << 1)) | (3 << 4)) | (0 << 7)) | (0 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (3 << 4)) | (1 << 7)) | (0 << 8)) | (0 << 9), ((((1 | (0 << 1)) | (3 << 4)) | (0 << 7)) | (1 << 8)) | (0 << 9), ((((0 | (2 << 1)) | (0 << 4)) | (1 << 7)) | (0 << 8)) | (1 << 9)}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "algorithm_ops",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t algorithm_ops = s_algorithm_ops[opl_emu_registers_ch_algorithm(fmch->m_regs, fmch->m_choffs)]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opout",
                        "type": "int16_t [8]",
                        "definition": [
                            "int16_t opout[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[3], opl_emu_fm_operator_phase(fmch->m_op[3]) + opmod, am_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmin",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmin = (-clipmax) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_output_rhythm_ch6",
            "header": "void opl_emu_fm_channel_output_rhythm_ch6(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax"
            ],
            "definition": "void opl_emu_fm_channel_output_rhythm_ch6(struct opl_emu_fm_channel *fmch, short *output, uint32_t rshift, int32_t clipmax)\n{\n  uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs);\n  int32_t opmod = 0;\n  uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs);\n  if (feedback != 0)\n  {\n    opmod = (fmch->m_feedback[0] + fmch->m_feedback[1]) >> (10 - feedback);\n  }\n  int32_t opout1 = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset);\n  opmod = (opl_emu_bitfield(opl_emu_registers_ch_algorithm(fmch->m_regs, fmch->m_choffs), 0, 1)) ? (0) : (opout1 >> 1);\n  int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[1], opl_emu_fm_operator_phase(fmch->m_op[1]) + opmod, am_offset) >> rshift;\n  opl_emu_fm_channel_add_to_output(fmch, fmch->m_choffs, output, result * 2);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_channel_add_to_output",
                "opl_emu_fm_operator_compute_volume",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_ch_algorithm",
                "opl_emu_registers_ch_feedback",
                "opl_emu_registers_lfo_am_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opmod",
                        "type": "int32_t",
                        "definition": [
                            "int32_t opmod = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "feedback",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t feedback = opl_emu_registers_ch_feedback(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opout1",
                        "type": "int32_t",
                        "definition": [
                            "int32_t opout1 = fmch->m_feedback_in = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]) + opmod, am_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[1], opl_emu_fm_operator_phase(fmch->m_op[1]) + opmod, am_offset) >> rshift"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_output_rhythm_ch7",
            "header": "void opl_emu_fm_channel_output_rhythm_ch7(struct opl_emu_fm_channel *fmch, uint32_t phase_select, short *output, uint32_t rshift, int32_t clipmax)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t phase_select",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax"
            ],
            "definition": "void opl_emu_fm_channel_output_rhythm_ch7(struct opl_emu_fm_channel *fmch, uint32_t phase_select, short *output, uint32_t rshift, int32_t clipmax)\n{\n  uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs);\n  uint32_t noise_state = opl_emu_bitfield(opl_emu_registers_noise_state(fmch->m_regs), 0, 1);\n  uint32_t phase = (phase_select << 9) | (0xd0 >> (2 * (noise_state ^ phase_select)));\n  int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[0], phase, am_offset) >> rshift;\n  uint32_t op13phase = opl_emu_fm_operator_phase(fmch->m_op[0]);\n  phase = (0x100 << opl_emu_bitfield(op13phase, 8, 1)) ^ (noise_state << 8);\n  result += opl_emu_fm_operator_compute_volume(fmch->m_op[1], phase, am_offset) >> rshift;\n  result = opl_emu_clamp(result, (-clipmax) - 1, clipmax);\n  opl_emu_fm_channel_add_to_output(fmch, fmch->m_choffs, output, result * 2);\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_clamp",
                "opl_emu_fm_channel_add_to_output",
                "opl_emu_fm_operator_compute_volume",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_lfo_am_offset",
                "opl_emu_registers_noise_state"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_select",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_select"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noise_state",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t noise_state = opl_emu_bitfield(opl_emu_registers_noise_state(fmch->m_regs), 0, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase = (phase_select << 9) | (0xd0 >> (2 * (noise_state ^ phase_select)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[0], phase, am_offset) >> rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op13phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t op13phase = opl_emu_fm_operator_phase(fmch->m_op[0])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_output_rhythm_ch8",
            "header": "void opl_emu_fm_channel_output_rhythm_ch8(struct opl_emu_fm_channel *fmch, uint32_t phase_select, short *output, uint32_t rshift, int32_t clipmax)",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t phase_select",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax"
            ],
            "definition": "void opl_emu_fm_channel_output_rhythm_ch8(struct opl_emu_fm_channel *fmch, uint32_t phase_select, short *output, uint32_t rshift, int32_t clipmax)\n{\n  uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs);\n  int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]), am_offset) >> rshift;\n  uint32_t phase = 0x100 | (phase_select << 9);\n  result += opl_emu_fm_operator_compute_volume(fmch->m_op[1], phase, am_offset) >> rshift;\n  result = opl_emu_clamp(result, (-clipmax) - 1, clipmax);\n  opl_emu_fm_channel_add_to_output(fmch, fmch->m_choffs, output, result * 2);\n}\n\n",
            "calle": [
                "opl_emu_clamp",
                "opl_emu_fm_channel_add_to_output",
                "opl_emu_fm_operator_compute_volume",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_lfo_am_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_select",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_select"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_offset = opl_emu_registers_lfo_am_offset(fmch->m_regs, fmch->m_choffs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = opl_emu_fm_operator_compute_volume(fmch->m_op[0], opl_emu_fm_operator_phase(fmch->m_op[0]), am_offset) >> rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase = 0x100 | (phase_select << 9)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_is4op",
            "header": "",
            "params": [
                "struct opl_emu_fm_channel *fmch"
            ],
            "definition": "int opl_emu_fm_channel_is4op(struct opl_emu_fm_channel *fmch)\n{\n  return fmch->m_op[2] != 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_fm_channel_add_to_output",
            "header": "",
            "params": [
                "struct opl_emu_fm_channel *fmch",
                "uint32_t choffs",
                "short *output",
                "int32_t value"
            ],
            "definition": "void opl_emu_fm_channel_add_to_output(struct opl_emu_fm_channel *fmch, uint32_t choffs, short *output, int32_t value)\n{\n  int out0_index = 0;\n  int out1_index = 1 % 2;\n  int out2_index = 2 % 2;\n  int out3_index = 3 % 2;\n  if ((2 == 1) || opl_emu_registers_ch_output_0(fmch->m_regs, choffs))\n  {\n    int s = output[out0_index] + value;\n    output[out0_index] = (s < (-32767)) ? (-32767) : ((s > 32767) ? (32767) : (s));\n  }\n  if ((2 >= 2) && opl_emu_registers_ch_output_1(fmch->m_regs, choffs))\n  {\n    int s = output[out1_index] + value;\n    output[out1_index] = (s < (-32767)) ? (-32767) : ((s > 32767) ? (32767) : (s));\n  }\n}\n\n",
            "calle": [
                "opl_emu_registers_ch_output_0",
                "opl_emu_registers_ch_output_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_fm_channel",
                        "type": "struct opl_emu_fm_channel *",
                        "definition": [
                            "struct opl_emu_fm_channel *fmch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "choffs",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t choffs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out0_index",
                        "type": "int",
                        "definition": [
                            "int out0_index = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out1_index",
                        "type": "int",
                        "definition": [
                            "int out1_index = 1 % 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out2_index",
                        "type": "int",
                        "definition": [
                            "int out2_index = 2 % 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out3_index",
                        "type": "int",
                        "definition": [
                            "int out3_index = 3 % 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "int",
                        "definition": [
                            "int s = output[out0_index] + value",
                            "int s = output[out1_index] + value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_set_reset_status",
            "header": "",
            "params": [
                "struct opl_emu_t *emu",
                "uint8_t set",
                "uint8_t reset"
            ],
            "definition": "uint8_t opl_emu_set_reset_status(struct opl_emu_t *emu, uint8_t set, uint8_t reset)\n{\n  emu->m_status = (emu->m_status | set) & (~(reset | 0));\n  return emu->m_status & (~opl_emu_registers_status_mask(&emu->m_regs));\n}\n\n",
            "calle": [
                "opl_emu_registers_status_mask"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t reset"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_assign_operators",
            "header": "void opl_emu_assign_operators(struct opl_emu_t *emu)",
            "params": [
                "struct opl_emu_t *emu"
            ],
            "definition": "void opl_emu_assign_operators(struct opl_emu_t *emu)\n{\n  struct opl_emu_registers_operator_mapping map;\n  opl_emu_registers_operator_map(&emu->m_regs, &map);\n  for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n    for (uint32_t index = 0; index < 4; index += 1)\n  {\n    uint32_t opnum = opl_emu_bitfield(map.chan[chnum], 8 * index, 8);\n    opl_emu_fm_channel_assign(&emu->m_channel[chnum], index, (opnum == 0xff) ? (0) : (&emu->m_operator[opnum]));\n  }\n\n\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_channel_assign",
                "opl_emu_registers_operator_map"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "struct opl_emu_registers_operator_mapping",
                        "definition": [
                            "struct opl_emu_registers_operator_mapping map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t index = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum = opl_emu_bitfield(map.chan[chnum], 8 * index, 8)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_write",
            "header": "void opl_emu_write(struct opl_emu_t *emu, uint16_t regnum, uint8_t data)",
            "params": [
                "struct opl_emu_t *emu",
                "uint16_t regnum",
                "uint8_t data"
            ],
            "definition": "void opl_emu_write(struct opl_emu_t *emu, uint16_t regnum, uint8_t data)\n{\n  if (regnum == 0x04)\n  {\n    return;\n  }\n  emu->m_modified_channels = (1 << 18) - 1;\n  uint32_t keyon_channel;\n  uint32_t keyon_opmask;\n  if (opl_emu_registers_write(&emu->m_regs, regnum, data, &keyon_channel, &keyon_opmask))\n  {\n    if (keyon_channel < 18)\n    {\n      opl_emu_fm_channel_keyonoff(&emu->m_channel[keyon_channel], keyon_opmask, OPL_EMU_KEYON_NORMAL, keyon_channel);\n    }\n    else\n      if ((18 >= 9) && (keyon_channel == 0xff))\n    {\n      opl_emu_fm_channel_keyonoff(&emu->m_channel[6], (opl_emu_bitfield(keyon_opmask, 4, 1)) ? (3) : (0), OPL_EMU_KEYON_RHYTHM, 6);\n      opl_emu_fm_channel_keyonoff(&emu->m_channel[7], opl_emu_bitfield(keyon_opmask, 0, 1) | (opl_emu_bitfield(keyon_opmask, 3, 1) << 1), OPL_EMU_KEYON_RHYTHM, 7);\n      opl_emu_fm_channel_keyonoff(&emu->m_channel[8], opl_emu_bitfield(keyon_opmask, 2, 1) | (opl_emu_bitfield(keyon_opmask, 1, 1) << 1), OPL_EMU_KEYON_RHYTHM, 8);\n    }\n  }\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_channel_keyonoff",
                "opl_emu_registers_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "regnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t regnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keyon_channel",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keyon_channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keyon_opmask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t keyon_opmask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_init",
            "header": "",
            "params": [
                "struct opl_emu_t *emu"
            ],
            "definition": "void opl_emu_init(struct opl_emu_t *emu)\n{\n  emu->m_env_counter = 0;\n  emu->m_status = 0;\n  emu->m_timer_running[0] = 0;\n  emu->m_timer_running[1] = 0;\n  emu->m_active_channels = (1 << 18) - 1;\n  emu->m_modified_channels = (1 << 18) - 1;\n  emu->m_prepare_count = 0;\n  opl_emu_registers_init(&emu->m_regs);\n  for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n    opl_emu_fm_channel_init(&emu->m_channel[chnum], &emu->m_regs, opl_emu_registers_channel_offset(chnum));\n\n  for (uint32_t opnum = 0; opnum < (18 * 2); opnum += 1)\n    opl_emu_fm_operator_init(&emu->m_operator[opnum], &emu->m_regs, opl_emu_registers_operator_offset(opnum));\n\n  opl_emu_assign_operators(emu);\n}\n\n",
            "calle": [
                "opl_emu_assign_operators",
                "opl_emu_fm_channel_init",
                "opl_emu_fm_operator_init",
                "opl_emu_registers_channel_offset",
                "opl_emu_registers_init",
                "opl_emu_registers_operator_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t opnum = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_reset",
            "header": "",
            "params": [
                "struct opl_emu_t *emu"
            ],
            "definition": "void opl_emu_reset(struct opl_emu_t *emu)\n{\n  opl_emu_set_reset_status(emu, 0, 0xff);\n  opl_emu_registers_reset(&emu->m_regs);\n  opl_emu_write(emu, 0x04, 0);\n  for (int i = 0; i < ((sizeof(emu->m_channel)) / (sizeof(*emu->m_channel))); i += 1)\n    opl_emu_fm_channel_reset(&emu->m_channel[i]);\n\n  for (int i = 0; i < ((sizeof(emu->m_operator)) / (sizeof(*emu->m_operator))); i += 1)\n    opl_emu_fm_operator_reset(&emu->m_operator[i]);\n\n}\n\n",
            "calle": [
                "opl_emu_fm_channel_reset",
                "opl_emu_fm_operator_reset",
                "opl_emu_registers_reset",
                "opl_emu_set_reset_status",
                "opl_emu_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_clock",
            "header": "",
            "params": [
                "struct opl_emu_t *emu",
                "uint32_t chanmask"
            ],
            "definition": "uint32_t opl_emu_clock(struct opl_emu_t *emu, uint32_t chanmask)\n{\n  if ((emu->m_modified_channels != 0) || ((emu->m_prepare_count++) >= 4096))\n  {\n    opl_emu_assign_operators(emu);\n    emu->m_active_channels = 0;\n    for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n      if (opl_emu_bitfield(chanmask, chnum, 1))\n    {\n      if (opl_emu_fm_channel_prepare(&emu->m_channel[chnum]))\n      {\n        emu->m_active_channels |= 1 << chnum;\n      }\n    }\n\n    emu->m_modified_channels = (emu->m_prepare_count = 0);\n  }\n  emu->m_env_counter += 4;\n  int32_t lfo_raw_pm = opl_emu_registers_clock_noise_and_lfo(&emu->m_regs);\n  for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n    if (opl_emu_bitfield(chanmask, chnum, 1))\n  {\n    opl_emu_fm_channel_clock(&emu->m_channel[chnum], emu->m_env_counter, lfo_raw_pm);\n  }\n\n  return emu->m_env_counter;\n}\n\n",
            "calle": [
                "opl_emu_assign_operators",
                "opl_emu_bitfield",
                "opl_emu_fm_channel_clock",
                "opl_emu_fm_channel_prepare",
                "opl_emu_registers_clock_noise_and_lfo"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chanmask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chanmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm = opl_emu_registers_clock_noise_and_lfo(&emu->m_regs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_out",
            "header": "",
            "params": [
                "struct opl_emu_t *emu",
                "short *output",
                "uint32_t rshift",
                "int32_t clipmax",
                "uint32_t chanmask"
            ],
            "definition": "void opl_emu_out(struct opl_emu_t *emu, short *output, uint32_t rshift, int32_t clipmax, uint32_t chanmask)\n{\n  chanmask &= emu->m_active_channels;\n  if (opl_emu_registers_rhythm_enable(&emu->m_regs))\n  {\n    uint32_t op13phase = opl_emu_fm_operator_phase(&emu->m_operator[13]);\n    uint32_t op17phase = opl_emu_fm_operator_phase(&emu->m_operator[17]);\n    uint32_t phase_select = ((opl_emu_bitfield(op13phase, 2, 1) ^ opl_emu_bitfield(op13phase, 7, 1)) | opl_emu_bitfield(op13phase, 3, 1)) | (opl_emu_bitfield(op17phase, 5, 1) ^ opl_emu_bitfield(op17phase, 3, 1));\n    for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n      if (opl_emu_bitfield(chanmask, chnum, 1))\n    {\n      if (chnum == 6)\n      {\n        opl_emu_fm_channel_output_rhythm_ch6(&emu->m_channel[chnum], output, rshift, clipmax);\n      }\n      else\n        if (chnum == 7)\n      {\n        opl_emu_fm_channel_output_rhythm_ch7(&emu->m_channel[chnum], phase_select, output, rshift, clipmax);\n      }\n      else\n        if (chnum == 8)\n      {\n        opl_emu_fm_channel_output_rhythm_ch8(&emu->m_channel[chnum], phase_select, output, rshift, clipmax);\n      }\n      else\n        if (opl_emu_fm_channel_is4op(&emu->m_channel[chnum]))\n      {\n        opl_emu_fm_channel_output_4op(&emu->m_channel[chnum], output, rshift, clipmax);\n      }\n      else\n        opl_emu_fm_channel_output_2op(&emu->m_channel[chnum], output, rshift, clipmax);\n    }\n\n  }\n  else\n  {\n    for (uint32_t chnum = 0; chnum < 18; chnum += 1)\n      if (opl_emu_bitfield(chanmask, chnum, 1))\n    {\n      if (opl_emu_fm_channel_is4op(&emu->m_channel[chnum]))\n      {\n        opl_emu_fm_channel_output_4op(&emu->m_channel[chnum], output, rshift, clipmax);\n      }\n      else\n        opl_emu_fm_channel_output_2op(&emu->m_channel[chnum], output, rshift, clipmax);\n    }\n\n  }\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_fm_channel_is4op",
                "opl_emu_fm_channel_output_2op",
                "opl_emu_fm_channel_output_4op",
                "opl_emu_fm_channel_output_rhythm_ch6",
                "opl_emu_fm_channel_output_rhythm_ch7",
                "opl_emu_fm_channel_output_rhythm_ch8",
                "opl_emu_fm_operator_phase",
                "opl_emu_registers_rhythm_enable"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rshift",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clipmax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t clipmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chanmask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chanmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op13phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t op13phase = opl_emu_fm_operator_phase(&emu->m_operator[13])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op17phase",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t op17phase = opl_emu_fm_operator_phase(&emu->m_operator[17])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_select",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_select = ((opl_emu_bitfield(op13phase, 2, 1) ^ opl_emu_bitfield(op13phase, 7, 1)) | opl_emu_bitfield(op13phase, 3, 1)) | (opl_emu_bitfield(op17phase, 5, 1) ^ opl_emu_bitfield(op17phase, 3, 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t chnum = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_update_timer",
            "header": "",
            "params": [
                "struct opl_emu_t *emu",
                "uint32_t tnum",
                "uint32_t enable"
            ],
            "definition": "void opl_emu_update_timer(struct opl_emu_t *emu, uint32_t tnum, uint32_t enable)\n{\n  if (enable && (!emu->m_timer_running[tnum]))\n  {\n    uint32_t period = (tnum == 0) ? (1024 - opl_emu_registers_timer_a_value(&emu->m_regs)) : (16 * (256 - opl_emu_registers_timer_b_value(&emu->m_regs)));\n    emu->m_timer_running[tnum] = 1;\n  }\n  else\n    if (!enable)\n  {\n    emu->m_timer_running[tnum] = 0;\n  }\n}\n\n",
            "calle": [
                "opl_emu_registers_timer_a_value",
                "opl_emu_registers_timer_b_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t tnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "enable",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t enable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t period = (tnum == 0) ? (1024 - opl_emu_registers_timer_a_value(&emu->m_regs)) : (16 * (256 - opl_emu_registers_timer_b_value(&emu->m_regs)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_generate",
            "header": "",
            "params": [
                "struct opl_emu_t *emu",
                "short *output",
                "uint32_t numsamples",
                "float volume"
            ],
            "definition": "void opl_emu_generate(struct opl_emu_t *emu, short *output, uint32_t numsamples, float volume)\n{\n  unsigned int output_idx = 0;\n  volume = (volume > 1.0f) ? (1.0f) : ((volume < 0.0f) ? (0.0f) : (volume));\n  for (uint32_t samp = 0; samp < numsamples; samp += 1, output_idx += 2)\n  {\n    opl_emu_clock(emu, (1 << 18) - 1);\n    opl_emu_out(emu, output, 0, 32767, (1 << 18) - 1);\n    output[output_idx] = (short) (output[output_idx] * volume);\n    *((&output[output_idx]) + 1) = (short) ((*((&output[output_idx]) + 1)) * volume);\n  }\n\n}\n\n",
            "calle": [
                "opl_emu_clock",
                "opl_emu_out"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opl_emu_t",
                        "type": "struct opl_emu_t *",
                        "definition": [
                            "struct opl_emu_t *emu"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "short *",
                        "definition": [
                            "short *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numsamples",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t numsamples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "float",
                        "definition": [
                            "float volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int output_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samp",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t samp = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_opl_key_scale_atten",
            "header": "",
            "params": [
                "uint32_t block",
                "uint32_t fnum_4msb"
            ],
            "definition": "uint32_t opl_emu_opl_key_scale_atten(uint32_t block, uint32_t fnum_4msb)\n{\n  static const uint8_t fnum_to_atten[16] = {0, 24, 32, 37, 40, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56};\n  int32_t result = fnum_to_atten[fnum_4msb] - (8 * (block ^ 7));\n  return (0 > result) ? (0) : (result);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fnum_4msb",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t fnum_4msb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fnum_to_atten",
                        "type": "const uint8_t [16]",
                        "definition": [
                            "static const uint8_t fnum_to_atten[16] = {0, 24, 32, 37, 40, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int32_t",
                        "definition": [
                            "int32_t result = fnum_to_atten[fnum_4msb] - (8 * (block ^ 7))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_abs_sin_attenuation",
            "header": "",
            "params": [
                "uint32_t input"
            ],
            "definition": "uint32_t opl_emu_abs_sin_attenuation(uint32_t input)\n{\n  static const uint16_t s_sin_table[256] = {0x859, 0x6c3, 0x607, 0x58b, 0x52e, 0x4e4, 0x4a6, 0x471, 0x443, 0x41a, 0x3f5, 0x3d3, 0x3b5, 0x398, 0x37e, 0x365, 0x34e, 0x339, 0x324, 0x311, 0x2ff, 0x2ed, 0x2dc, 0x2cd, 0x2bd, 0x2af, 0x2a0, 0x293, 0x286, 0x279, 0x26d, 0x261, 0x256, 0x24b, 0x240, 0x236, 0x22c, 0x222, 0x218, 0x20f, 0x206, 0x1fd, 0x1f5, 0x1ec, 0x1e4, 0x1dc, 0x1d4, 0x1cd, 0x1c5, 0x1be, 0x1b7, 0x1b0, 0x1a9, 0x1a2, 0x19b, 0x195, 0x18f, 0x188, 0x182, 0x17c, 0x177, 0x171, 0x16b, 0x166, 0x160, 0x15b, 0x155, 0x150, 0x14b, 0x146, 0x141, 0x13c, 0x137, 0x133, 0x12e, 0x129, 0x125, 0x121, 0x11c, 0x118, 0x114, 0x10f, 0x10b, 0x107, 0x103, 0x0ff, 0x0fb, 0x0f8, 0x0f4, 0x0f0, 0x0ec, 0x0e9, 0x0e5, 0x0e2, 0x0de, 0x0db, 0x0d7, 0x0d4, 0x0d1, 0x0cd, 0x0ca, 0x0c7, 0x0c4, 0x0c1, 0x0be, 0x0bb, 0x0b8, 0x0b5, 0x0b2, 0x0af, 0x0ac, 0x0a9, 0x0a7, 0x0a4, 0x0a1, 0x09f, 0x09c, 0x099, 0x097, 0x094, 0x092, 0x08f, 0x08d, 0x08a, 0x088, 0x086, 0x083, 0x081, 0x07f, 0x07d, 0x07a, 0x078, 0x076, 0x074, 0x072, 0x070, 0x06e, 0x06c, 0x06a, 0x068, 0x066, 0x064, 0x062, 0x060, 0x05e, 0x05c, 0x05b, 0x059, 0x057, 0x055, 0x053, 0x052, 0x050, 0x04e, 0x04d, 0x04b, 0x04a, 0x048, 0x046, 0x045, 0x043, 0x042, 0x040, 0x03f, 0x03e, 0x03c, 0x03b, 0x039, 0x038, 0x037, 0x035, 0x034, 0x033, 0x031, 0x030, 0x02f, 0x02e, 0x02d, 0x02b, 0x02a, 0x029, 0x028, 0x027, 0x026, 0x025, 0x024, 0x023, 0x022, 0x021, 0x020, 0x01f, 0x01e, 0x01d, 0x01c, 0x01b, 0x01a, 0x019, 0x018, 0x017, 0x017, 0x016, 0x015, 0x014, 0x014, 0x013, 0x012, 0x011, 0x011, 0x010, 0x00f, 0x00f, 0x00e, 0x00d, 0x00d, 0x00c, 0x00c, 0x00b, 0x00a, 0x00a, 0x009, 0x009, 0x008, 0x008, 0x007, 0x007, 0x007, 0x006, 0x006, 0x005, 0x005, 0x005, 0x004, 0x004, 0x004, 0x003, 0x003, 0x003, 0x002, 0x002, 0x002, 0x002, 0x001, 0x001, 0x001, 0x001, 0x001, 0x001, 0x001, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000};\n  if (opl_emu_bitfield(input, 8, 1))\n  {\n    input = ~input;\n  }\n  return s_sin_table[input & 0xff];\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "input",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_sin_table",
                        "type": "const uint16_t [256]",
                        "definition": [
                            "static const uint16_t s_sin_table[256] = {0x859, 0x6c3, 0x607, 0x58b, 0x52e, 0x4e4, 0x4a6, 0x471, 0x443, 0x41a, 0x3f5, 0x3d3, 0x3b5, 0x398, 0x37e, 0x365, 0x34e, 0x339, 0x324, 0x311, 0x2ff, 0x2ed, 0x2dc, 0x2cd, 0x2bd, 0x2af, 0x2a0, 0x293, 0x286, 0x279, 0x26d, 0x261, 0x256, 0x24b, 0x240, 0x236, 0x22c, 0x222, 0x218, 0x20f, 0x206, 0x1fd, 0x1f5, 0x1ec, 0x1e4, 0x1dc, 0x1d4, 0x1cd, 0x1c5, 0x1be, 0x1b7, 0x1b0, 0x1a9, 0x1a2, 0x19b, 0x195, 0x18f, 0x188, 0x182, 0x17c, 0x177, 0x171, 0x16b, 0x166, 0x160, 0x15b, 0x155, 0x150, 0x14b, 0x146, 0x141, 0x13c, 0x137, 0x133, 0x12e, 0x129, 0x125, 0x121, 0x11c, 0x118, 0x114, 0x10f, 0x10b, 0x107, 0x103, 0x0ff, 0x0fb, 0x0f8, 0x0f4, 0x0f0, 0x0ec, 0x0e9, 0x0e5, 0x0e2, 0x0de, 0x0db, 0x0d7, 0x0d4, 0x0d1, 0x0cd, 0x0ca, 0x0c7, 0x0c4, 0x0c1, 0x0be, 0x0bb, 0x0b8, 0x0b5, 0x0b2, 0x0af, 0x0ac, 0x0a9, 0x0a7, 0x0a4, 0x0a1, 0x09f, 0x09c, 0x099, 0x097, 0x094, 0x092, 0x08f, 0x08d, 0x08a, 0x088, 0x086, 0x083, 0x081, 0x07f, 0x07d, 0x07a, 0x078, 0x076, 0x074, 0x072, 0x070, 0x06e, 0x06c, 0x06a, 0x068, 0x066, 0x064, 0x062, 0x060, 0x05e, 0x05c, 0x05b, 0x059, 0x057, 0x055, 0x053, 0x052, 0x050, 0x04e, 0x04d, 0x04b, 0x04a, 0x048, 0x046, 0x045, 0x043, 0x042, 0x040, 0x03f, 0x03e, 0x03c, 0x03b, 0x039, 0x038, 0x037, 0x035, 0x034, 0x033, 0x031, 0x030, 0x02f, 0x02e, 0x02d, 0x02b, 0x02a, 0x029, 0x028, 0x027, 0x026, 0x025, 0x024, 0x023, 0x022, 0x021, 0x020, 0x01f, 0x01e, 0x01d, 0x01c, 0x01b, 0x01a, 0x019, 0x018, 0x017, 0x017, 0x016, 0x015, 0x014, 0x014, 0x013, 0x012, 0x011, 0x011, 0x010, 0x00f, 0x00f, 0x00e, 0x00d, 0x00d, 0x00c, 0x00c, 0x00b, 0x00a, 0x00a, 0x009, 0x009, 0x008, 0x008, 0x007, 0x007, 0x007, 0x006, 0x006, 0x005, 0x005, 0x005, 0x004, 0x004, 0x004, 0x003, 0x003, 0x003, 0x002, 0x002, 0x002, 0x002, 0x001, 0x001, 0x001, 0x001, 0x001, 0x001, 0x001, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_attenuation_to_volume",
            "header": "",
            "params": [
                "uint32_t input"
            ],
            "definition": "uint32_t opl_emu_attenuation_to_volume(uint32_t input)\n{\n  static const uint16_t s_power_table[256] = {(0x3fa | 0x400) << 2, (0x3f5 | 0x400) << 2, (0x3ef | 0x400) << 2, (0x3ea | 0x400) << 2, (0x3e4 | 0x400) << 2, (0x3df | 0x400) << 2, (0x3da | 0x400) << 2, (0x3d4 | 0x400) << 2, (0x3cf | 0x400) << 2, (0x3c9 | 0x400) << 2, (0x3c4 | 0x400) << 2, (0x3bf | 0x400) << 2, (0x3b9 | 0x400) << 2, (0x3b4 | 0x400) << 2, (0x3ae | 0x400) << 2, (0x3a9 | 0x400) << 2, (0x3a4 | 0x400) << 2, (0x39f | 0x400) << 2, (0x399 | 0x400) << 2, (0x394 | 0x400) << 2, (0x38f | 0x400) << 2, (0x38a | 0x400) << 2, (0x384 | 0x400) << 2, (0x37f | 0x400) << 2, (0x37a | 0x400) << 2, (0x375 | 0x400) << 2, (0x370 | 0x400) << 2, (0x36a | 0x400) << 2, (0x365 | 0x400) << 2, (0x360 | 0x400) << 2, (0x35b | 0x400) << 2, (0x356 | 0x400) << 2, (0x351 | 0x400) << 2, (0x34c | 0x400) << 2, (0x347 | 0x400) << 2, (0x342 | 0x400) << 2, (0x33d | 0x400) << 2, (0x338 | 0x400) << 2, (0x333 | 0x400) << 2, (0x32e | 0x400) << 2, (0x329 | 0x400) << 2, (0x324 | 0x400) << 2, (0x31f | 0x400) << 2, (0x31a | 0x400) << 2, (0x315 | 0x400) << 2, (0x310 | 0x400) << 2, (0x30b | 0x400) << 2, (0x306 | 0x400) << 2, (0x302 | 0x400) << 2, (0x2fd | 0x400) << 2, (0x2f8 | 0x400) << 2, (0x2f3 | 0x400) << 2, (0x2ee | 0x400) << 2, (0x2e9 | 0x400) << 2, (0x2e5 | 0x400) << 2, (0x2e0 | 0x400) << 2, (0x2db | 0x400) << 2, (0x2d6 | 0x400) << 2, (0x2d2 | 0x400) << 2, (0x2cd | 0x400) << 2, (0x2c8 | 0x400) << 2, (0x2c4 | 0x400) << 2, (0x2bf | 0x400) << 2, (0x2ba | 0x400) << 2, (0x2b5 | 0x400) << 2, (0x2b1 | 0x400) << 2, (0x2ac | 0x400) << 2, (0x2a8 | 0x400) << 2, (0x2a3 | 0x400) << 2, (0x29e | 0x400) << 2, (0x29a | 0x400) << 2, (0x295 | 0x400) << 2, (0x291 | 0x400) << 2, (0x28c | 0x400) << 2, (0x288 | 0x400) << 2, (0x283 | 0x400) << 2, (0x27f | 0x400) << 2, (0x27a | 0x400) << 2, (0x276 | 0x400) << 2, (0x271 | 0x400) << 2, (0x26d | 0x400) << 2, (0x268 | 0x400) << 2, (0x264 | 0x400) << 2, (0x25f | 0x400) << 2, (0x25b | 0x400) << 2, (0x257 | 0x400) << 2, (0x252 | 0x400) << 2, (0x24e | 0x400) << 2, (0x249 | 0x400) << 2, (0x245 | 0x400) << 2, (0x241 | 0x400) << 2, (0x23c | 0x400) << 2, (0x238 | 0x400) << 2, (0x234 | 0x400) << 2, (0x230 | 0x400) << 2, (0x22b | 0x400) << 2, (0x227 | 0x400) << 2, (0x223 | 0x400) << 2, (0x21e | 0x400) << 2, (0x21a | 0x400) << 2, (0x216 | 0x400) << 2, (0x212 | 0x400) << 2, (0x20e | 0x400) << 2, (0x209 | 0x400) << 2, (0x205 | 0x400) << 2, (0x201 | 0x400) << 2, (0x1fd | 0x400) << 2, (0x1f9 | 0x400) << 2, (0x1f5 | 0x400) << 2, (0x1f0 | 0x400) << 2, (0x1ec | 0x400) << 2, (0x1e8 | 0x400) << 2, (0x1e4 | 0x400) << 2, (0x1e0 | 0x400) << 2, (0x1dc | 0x400) << 2, (0x1d8 | 0x400) << 2, (0x1d4 | 0x400) << 2, (0x1d0 | 0x400) << 2, (0x1cc | 0x400) << 2, (0x1c8 | 0x400) << 2, (0x1c4 | 0x400) << 2, (0x1c0 | 0x400) << 2, (0x1bc | 0x400) << 2, (0x1b8 | 0x400) << 2, (0x1b4 | 0x400) << 2, (0x1b0 | 0x400) << 2, (0x1ac | 0x400) << 2, (0x1a8 | 0x400) << 2, (0x1a4 | 0x400) << 2, (0x1a0 | 0x400) << 2, (0x19c | 0x400) << 2, (0x199 | 0x400) << 2, (0x195 | 0x400) << 2, (0x191 | 0x400) << 2, (0x18d | 0x400) << 2, (0x189 | 0x400) << 2, (0x185 | 0x400) << 2, (0x181 | 0x400) << 2, (0x17e | 0x400) << 2, (0x17a | 0x400) << 2, (0x176 | 0x400) << 2, (0x172 | 0x400) << 2, (0x16f | 0x400) << 2, (0x16b | 0x400) << 2, (0x167 | 0x400) << 2, (0x163 | 0x400) << 2, (0x160 | 0x400) << 2, (0x15c | 0x400) << 2, (0x158 | 0x400) << 2, (0x154 | 0x400) << 2, (0x151 | 0x400) << 2, (0x14d | 0x400) << 2, (0x149 | 0x400) << 2, (0x146 | 0x400) << 2, (0x142 | 0x400) << 2, (0x13e | 0x400) << 2, (0x13b | 0x400) << 2, (0x137 | 0x400) << 2, (0x134 | 0x400) << 2, (0x130 | 0x400) << 2, (0x12c | 0x400) << 2, (0x129 | 0x400) << 2, (0x125 | 0x400) << 2, (0x122 | 0x400) << 2, (0x11e | 0x400) << 2, (0x11b | 0x400) << 2, (0x117 | 0x400) << 2, (0x114 | 0x400) << 2, (0x110 | 0x400) << 2, (0x10c | 0x400) << 2, (0x109 | 0x400) << 2, (0x106 | 0x400) << 2, (0x102 | 0x400) << 2, (0x0ff | 0x400) << 2, (0x0fb | 0x400) << 2, (0x0f8 | 0x400) << 2, (0x0f4 | 0x400) << 2, (0x0f1 | 0x400) << 2, (0x0ed | 0x400) << 2, (0x0ea | 0x400) << 2, (0x0e7 | 0x400) << 2, (0x0e3 | 0x400) << 2, (0x0e0 | 0x400) << 2, (0x0dc | 0x400) << 2, (0x0d9 | 0x400) << 2, (0x0d6 | 0x400) << 2, (0x0d2 | 0x400) << 2, (0x0cf | 0x400) << 2, (0x0cc | 0x400) << 2, (0x0c8 | 0x400) << 2, (0x0c5 | 0x400) << 2, (0x0c2 | 0x400) << 2, (0x0be | 0x400) << 2, (0x0bb | 0x400) << 2, (0x0b8 | 0x400) << 2, (0x0b5 | 0x400) << 2, (0x0b1 | 0x400) << 2, (0x0ae | 0x400) << 2, (0x0ab | 0x400) << 2, (0x0a8 | 0x400) << 2, (0x0a4 | 0x400) << 2, (0x0a1 | 0x400) << 2, (0x09e | 0x400) << 2, (0x09b | 0x400) << 2, (0x098 | 0x400) << 2, (0x094 | 0x400) << 2, (0x091 | 0x400) << 2, (0x08e | 0x400) << 2, (0x08b | 0x400) << 2, (0x088 | 0x400) << 2, (0x085 | 0x400) << 2, (0x082 | 0x400) << 2, (0x07e | 0x400) << 2, (0x07b | 0x400) << 2, (0x078 | 0x400) << 2, (0x075 | 0x400) << 2, (0x072 | 0x400) << 2, (0x06f | 0x400) << 2, (0x06c | 0x400) << 2, (0x069 | 0x400) << 2, (0x066 | 0x400) << 2, (0x063 | 0x400) << 2, (0x060 | 0x400) << 2, (0x05d | 0x400) << 2, (0x05a | 0x400) << 2, (0x057 | 0x400) << 2, (0x054 | 0x400) << 2, (0x051 | 0x400) << 2, (0x04e | 0x400) << 2, (0x04b | 0x400) << 2, (0x048 | 0x400) << 2, (0x045 | 0x400) << 2, (0x042 | 0x400) << 2, (0x03f | 0x400) << 2, (0x03c | 0x400) << 2, (0x039 | 0x400) << 2, (0x036 | 0x400) << 2, (0x033 | 0x400) << 2, (0x030 | 0x400) << 2, (0x02d | 0x400) << 2, (0x02a | 0x400) << 2, (0x028 | 0x400) << 2, (0x025 | 0x400) << 2, (0x022 | 0x400) << 2, (0x01f | 0x400) << 2, (0x01c | 0x400) << 2, (0x019 | 0x400) << 2, (0x016 | 0x400) << 2, (0x014 | 0x400) << 2, (0x011 | 0x400) << 2, (0x00e | 0x400) << 2, (0x00b | 0x400) << 2, (0x008 | 0x400) << 2, (0x006 | 0x400) << 2, (0x003 | 0x400) << 2, (0x000 | 0x400) << 2};\n  return s_power_table[input & 0xff] >> (input >> 8);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "input",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_power_table",
                        "type": "const uint16_t [256]",
                        "definition": [
                            "static const uint16_t s_power_table[256] = {(0x3fa | 0x400) << 2, (0x3f5 | 0x400) << 2, (0x3ef | 0x400) << 2, (0x3ea | 0x400) << 2, (0x3e4 | 0x400) << 2, (0x3df | 0x400) << 2, (0x3da | 0x400) << 2, (0x3d4 | 0x400) << 2, (0x3cf | 0x400) << 2, (0x3c9 | 0x400) << 2, (0x3c4 | 0x400) << 2, (0x3bf | 0x400) << 2, (0x3b9 | 0x400) << 2, (0x3b4 | 0x400) << 2, (0x3ae | 0x400) << 2, (0x3a9 | 0x400) << 2, (0x3a4 | 0x400) << 2, (0x39f | 0x400) << 2, (0x399 | 0x400) << 2, (0x394 | 0x400) << 2, (0x38f | 0x400) << 2, (0x38a | 0x400) << 2, (0x384 | 0x400) << 2, (0x37f | 0x400) << 2, (0x37a | 0x400) << 2, (0x375 | 0x400) << 2, (0x370 | 0x400) << 2, (0x36a | 0x400) << 2, (0x365 | 0x400) << 2, (0x360 | 0x400) << 2, (0x35b | 0x400) << 2, (0x356 | 0x400) << 2, (0x351 | 0x400) << 2, (0x34c | 0x400) << 2, (0x347 | 0x400) << 2, (0x342 | 0x400) << 2, (0x33d | 0x400) << 2, (0x338 | 0x400) << 2, (0x333 | 0x400) << 2, (0x32e | 0x400) << 2, (0x329 | 0x400) << 2, (0x324 | 0x400) << 2, (0x31f | 0x400) << 2, (0x31a | 0x400) << 2, (0x315 | 0x400) << 2, (0x310 | 0x400) << 2, (0x30b | 0x400) << 2, (0x306 | 0x400) << 2, (0x302 | 0x400) << 2, (0x2fd | 0x400) << 2, (0x2f8 | 0x400) << 2, (0x2f3 | 0x400) << 2, (0x2ee | 0x400) << 2, (0x2e9 | 0x400) << 2, (0x2e5 | 0x400) << 2, (0x2e0 | 0x400) << 2, (0x2db | 0x400) << 2, (0x2d6 | 0x400) << 2, (0x2d2 | 0x400) << 2, (0x2cd | 0x400) << 2, (0x2c8 | 0x400) << 2, (0x2c4 | 0x400) << 2, (0x2bf | 0x400) << 2, (0x2ba | 0x400) << 2, (0x2b5 | 0x400) << 2, (0x2b1 | 0x400) << 2, (0x2ac | 0x400) << 2, (0x2a8 | 0x400) << 2, (0x2a3 | 0x400) << 2, (0x29e | 0x400) << 2, (0x29a | 0x400) << 2, (0x295 | 0x400) << 2, (0x291 | 0x400) << 2, (0x28c | 0x400) << 2, (0x288 | 0x400) << 2, (0x283 | 0x400) << 2, (0x27f | 0x400) << 2, (0x27a | 0x400) << 2, (0x276 | 0x400) << 2, (0x271 | 0x400) << 2, (0x26d | 0x400) << 2, (0x268 | 0x400) << 2, (0x264 | 0x400) << 2, (0x25f | 0x400) << 2, (0x25b | 0x400) << 2, (0x257 | 0x400) << 2, (0x252 | 0x400) << 2, (0x24e | 0x400) << 2, (0x249 | 0x400) << 2, (0x245 | 0x400) << 2, (0x241 | 0x400) << 2, (0x23c | 0x400) << 2, (0x238 | 0x400) << 2, (0x234 | 0x400) << 2, (0x230 | 0x400) << 2, (0x22b | 0x400) << 2, (0x227 | 0x400) << 2, (0x223 | 0x400) << 2, (0x21e | 0x400) << 2, (0x21a | 0x400) << 2, (0x216 | 0x400) << 2, (0x212 | 0x400) << 2, (0x20e | 0x400) << 2, (0x209 | 0x400) << 2, (0x205 | 0x400) << 2, (0x201 | 0x400) << 2, (0x1fd | 0x400) << 2, (0x1f9 | 0x400) << 2, (0x1f5 | 0x400) << 2, (0x1f0 | 0x400) << 2, (0x1ec | 0x400) << 2, (0x1e8 | 0x400) << 2, (0x1e4 | 0x400) << 2, (0x1e0 | 0x400) << 2, (0x1dc | 0x400) << 2, (0x1d8 | 0x400) << 2, (0x1d4 | 0x400) << 2, (0x1d0 | 0x400) << 2, (0x1cc | 0x400) << 2, (0x1c8 | 0x400) << 2, (0x1c4 | 0x400) << 2, (0x1c0 | 0x400) << 2, (0x1bc | 0x400) << 2, (0x1b8 | 0x400) << 2, (0x1b4 | 0x400) << 2, (0x1b0 | 0x400) << 2, (0x1ac | 0x400) << 2, (0x1a8 | 0x400) << 2, (0x1a4 | 0x400) << 2, (0x1a0 | 0x400) << 2, (0x19c | 0x400) << 2, (0x199 | 0x400) << 2, (0x195 | 0x400) << 2, (0x191 | 0x400) << 2, (0x18d | 0x400) << 2, (0x189 | 0x400) << 2, (0x185 | 0x400) << 2, (0x181 | 0x400) << 2, (0x17e | 0x400) << 2, (0x17a | 0x400) << 2, (0x176 | 0x400) << 2, (0x172 | 0x400) << 2, (0x16f | 0x400) << 2, (0x16b | 0x400) << 2, (0x167 | 0x400) << 2, (0x163 | 0x400) << 2, (0x160 | 0x400) << 2, (0x15c | 0x400) << 2, (0x158 | 0x400) << 2, (0x154 | 0x400) << 2, (0x151 | 0x400) << 2, (0x14d | 0x400) << 2, (0x149 | 0x400) << 2, (0x146 | 0x400) << 2, (0x142 | 0x400) << 2, (0x13e | 0x400) << 2, (0x13b | 0x400) << 2, (0x137 | 0x400) << 2, (0x134 | 0x400) << 2, (0x130 | 0x400) << 2, (0x12c | 0x400) << 2, (0x129 | 0x400) << 2, (0x125 | 0x400) << 2, (0x122 | 0x400) << 2, (0x11e | 0x400) << 2, (0x11b | 0x400) << 2, (0x117 | 0x400) << 2, (0x114 | 0x400) << 2, (0x110 | 0x400) << 2, (0x10c | 0x400) << 2, (0x109 | 0x400) << 2, (0x106 | 0x400) << 2, (0x102 | 0x400) << 2, (0x0ff | 0x400) << 2, (0x0fb | 0x400) << 2, (0x0f8 | 0x400) << 2, (0x0f4 | 0x400) << 2, (0x0f1 | 0x400) << 2, (0x0ed | 0x400) << 2, (0x0ea | 0x400) << 2, (0x0e7 | 0x400) << 2, (0x0e3 | 0x400) << 2, (0x0e0 | 0x400) << 2, (0x0dc | 0x400) << 2, (0x0d9 | 0x400) << 2, (0x0d6 | 0x400) << 2, (0x0d2 | 0x400) << 2, (0x0cf | 0x400) << 2, (0x0cc | 0x400) << 2, (0x0c8 | 0x400) << 2, (0x0c5 | 0x400) << 2, (0x0c2 | 0x400) << 2, (0x0be | 0x400) << 2, (0x0bb | 0x400) << 2, (0x0b8 | 0x400) << 2, (0x0b5 | 0x400) << 2, (0x0b1 | 0x400) << 2, (0x0ae | 0x400) << 2, (0x0ab | 0x400) << 2, (0x0a8 | 0x400) << 2, (0x0a4 | 0x400) << 2, (0x0a1 | 0x400) << 2, (0x09e | 0x400) << 2, (0x09b | 0x400) << 2, (0x098 | 0x400) << 2, (0x094 | 0x400) << 2, (0x091 | 0x400) << 2, (0x08e | 0x400) << 2, (0x08b | 0x400) << 2, (0x088 | 0x400) << 2, (0x085 | 0x400) << 2, (0x082 | 0x400) << 2, (0x07e | 0x400) << 2, (0x07b | 0x400) << 2, (0x078 | 0x400) << 2, (0x075 | 0x400) << 2, (0x072 | 0x400) << 2, (0x06f | 0x400) << 2, (0x06c | 0x400) << 2, (0x069 | 0x400) << 2, (0x066 | 0x400) << 2, (0x063 | 0x400) << 2, (0x060 | 0x400) << 2, (0x05d | 0x400) << 2, (0x05a | 0x400) << 2, (0x057 | 0x400) << 2, (0x054 | 0x400) << 2, (0x051 | 0x400) << 2, (0x04e | 0x400) << 2, (0x04b | 0x400) << 2, (0x048 | 0x400) << 2, (0x045 | 0x400) << 2, (0x042 | 0x400) << 2, (0x03f | 0x400) << 2, (0x03c | 0x400) << 2, (0x039 | 0x400) << 2, (0x036 | 0x400) << 2, (0x033 | 0x400) << 2, (0x030 | 0x400) << 2, (0x02d | 0x400) << 2, (0x02a | 0x400) << 2, (0x028 | 0x400) << 2, (0x025 | 0x400) << 2, (0x022 | 0x400) << 2, (0x01f | 0x400) << 2, (0x01c | 0x400) << 2, (0x019 | 0x400) << 2, (0x016 | 0x400) << 2, (0x014 | 0x400) << 2, (0x011 | 0x400) << 2, (0x00e | 0x400) << 2, (0x00b | 0x400) << 2, (0x008 | 0x400) << 2, (0x006 | 0x400) << 2, (0x003 | 0x400) << 2, (0x000 | 0x400) << 2}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_attenuation_increment",
            "header": "",
            "params": [
                "uint32_t rate",
                "uint32_t index"
            ],
            "definition": "uint32_t opl_emu_attenuation_increment(uint32_t rate, uint32_t index)\n{\n  static const uint32_t s_increment_table[64] = {0x00000000, 0x00000000, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x11101110, 0x11101110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x11111111, 0x21112111, 0x21212121, 0x22212221, 0x22222222, 0x42224222, 0x42424242, 0x44424442, 0x44444444, 0x84448444, 0x84848484, 0x88848884, 0x88888888, 0x88888888, 0x88888888, 0x88888888};\n  return opl_emu_bitfield(s_increment_table[rate], 4 * index, 4);\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rate",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_increment_table",
                        "type": "const uint32_t [64]",
                        "definition": [
                            "static const uint32_t s_increment_table[64] = {0x00000000, 0x00000000, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x11101110, 0x11101110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x10101010, 0x10111010, 0x11101110, 0x11111110, 0x11111111, 0x21112111, 0x21212121, 0x22212221, 0x22222222, 0x42224222, 0x42424242, 0x44424442, 0x44444444, 0x84448444, 0x84848484, 0x88848884, 0x88888888, 0x88888888, 0x88888888, 0x88888888}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_opl_clock_noise_and_lfo",
            "header": "",
            "params": [
                "uint32_t *noise_lfsr",
                "uint16_t *lfo_am_counter",
                "uint16_t *lfo_pm_counter",
                "uint8_t *lfo_am",
                "uint32_t am_depth",
                "uint32_t pm_depth"
            ],
            "definition": "static int32_t opl_emu_opl_clock_noise_and_lfo(uint32_t *noise_lfsr, uint16_t *lfo_am_counter, uint16_t *lfo_pm_counter, uint8_t *lfo_am, uint32_t am_depth, uint32_t pm_depth)\n{\n  unsigned int lfo_pm_counter_idx = 0;\n  unsigned int lfo_am_counter_idx = 0;\n  *noise_lfsr <<= 1;\n  *noise_lfsr |= ((opl_emu_bitfield(*noise_lfsr, 23, 1) ^ opl_emu_bitfield(*noise_lfsr, 9, 1)) ^ opl_emu_bitfield(*noise_lfsr, 8, 1)) ^ opl_emu_bitfield(*noise_lfsr, 1, 1);\n  uint32_t am_counter = lfo_am_counter[lfo_am_counter_idx];\n  lfo_am_counter_idx += 1;\n  if (am_counter >= ((210 * 64) - 1))\n  {\n    lfo_am_counter[lfo_am_counter_idx] = 0;\n  }\n  int shift = 9 - (2 * am_depth);\n  *lfo_am = ((am_counter < (105 * 64)) ? (am_counter) : (((210 * 64) + 63) - am_counter)) >> shift;\n  uint32_t pm_counter = lfo_pm_counter[lfo_pm_counter_idx];\n  lfo_pm_counter_idx += 1;\n  static int8_t pm_scale[8] = {8, 4, 0, -4, -8, -4, 0, 4};\n  return pm_scale[opl_emu_bitfield(pm_counter, 10, 3)] >> (pm_depth ^ 1);\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "noise_lfsr",
                        "type": "uint32_t *",
                        "definition": [
                            "uint32_t *noise_lfsr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_am_counter",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *lfo_am_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_pm_counter",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *lfo_pm_counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_am",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *lfo_am"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_depth",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pm_depth",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t pm_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_pm_counter_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lfo_pm_counter_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_am_counter_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lfo_am_counter_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "am_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t am_counter = lfo_am_counter[lfo_am_counter_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int",
                        "definition": [
                            "int shift = 9 - (2 * am_depth)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pm_counter",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t pm_counter = lfo_pm_counter[lfo_pm_counter_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pm_scale",
                        "type": "int8_t [8]",
                        "definition": [
                            "static int8_t pm_scale[8] = {8, 4, 0, -4, -8, -4, 0, 4}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_emu_opl_compute_phase_step",
            "header": "",
            "params": [
                "uint32_t block_freq",
                "uint32_t multiple",
                "int32_t lfo_raw_pm"
            ],
            "definition": "static uint32_t opl_emu_opl_compute_phase_step(uint32_t block_freq, uint32_t multiple, int32_t lfo_raw_pm)\n{\n  uint32_t fnum = opl_emu_bitfield(block_freq, 0, 10) << 2;\n  fnum += (lfo_raw_pm * opl_emu_bitfield(block_freq, 7, 3)) >> 1;\n  fnum &= 0xfff;\n  uint32_t block = opl_emu_bitfield(block_freq, 10, 3);\n  uint32_t phase_step = (fnum << block) >> 2;\n  return (phase_step * multiple) >> 1;\n}\n\n",
            "calle": [
                "opl_emu_bitfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block_freq",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t block_freq"
                        ]
                    },
                    {
                        "path": null,
                        "name": "multiple",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t multiple"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfo_raw_pm",
                        "type": "int32_t",
                        "definition": [
                            "int32_t lfo_raw_pm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fnum",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t fnum = opl_emu_bitfield(block_freq, 0, 10) << 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t block = opl_emu_bitfield(block_freq, 10, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "phase_step",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t phase_step = (fnum << block) >> 2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "oplregwr",
            "header": "",
            "params": [
                "opl_t *opl",
                "uint16_t reg",
                "uint8_t data"
            ],
            "definition": "void oplregwr(opl_t *opl, uint16_t reg, uint8_t data)\n{\n  opl_emu_write(&opl->opl_emu, reg, data);\n}\n\n",
            "calle": [
                "opl_emu_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reg",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t reg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "calc_vol",
            "header": "",
            "params": [
                "unsigned char *regbyte",
                "int volume"
            ],
            "definition": "static void calc_vol(unsigned char *regbyte, int volume)\n{\n  int level;\n  level = ~(*regbyte);\n  level &= 0x3f;\n  level = (level * volume) / 127;\n  if (level > 0x3f)\n  {\n    level = 0x3f;\n  }\n  if (level < 0)\n  {\n    level = 0;\n  }\n  level = ~level;\n  level &= 0x3f;\n  *regbyte &= 0xC0;\n  *regbyte |= level;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "regbyte",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *regbyte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "int",
                        "definition": [
                            "int volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_noteoff",
            "header": "",
            "params": [
                "opl_t *opl",
                "unsigned short voice"
            ],
            "definition": "void opl_noteoff(opl_t *opl, unsigned short voice)\n{\n  if (voice >= 9)\n  {\n    oplregwr(opl, (0x1B0 + voice) - 9, 0);\n  }\n  else\n  {\n    oplregwr(opl, 0xB0 + voice, 0);\n  }\n}\n\n",
            "calle": [
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short voice"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_noteon",
            "header": "",
            "params": [
                "opl_t *opl",
                "unsigned short voice",
                "unsigned int note",
                "int pitch"
            ],
            "definition": "void opl_noteon(opl_t *opl, unsigned short voice, unsigned int note, int pitch)\n{\n  unsigned int freq = freqtable[note];\n  unsigned int octave = octavetable[note];\n  if (pitch != 0)\n  {\n    if (pitch > 127)\n    {\n      pitch = 127;\n    }\n    else\n      if (pitch < (-128))\n    {\n      pitch = -128;\n    }\n    freq = (((unsigned long) freq) * pitchtable[pitch + 128]) >> 15;\n    if (freq >= 1024)\n    {\n      freq >>= 1;\n      octave += 1;\n    }\n  }\n  if (octave > 7)\n  {\n    octave = 7;\n  }\n  if (voice >= 9)\n  {\n    voice -= 9;\n    voice |= 0x100;\n  }\n  oplregwr(opl, 0xA0 + voice, freq & 0xff);\n  oplregwr(opl, 0xB0 + voice, ((freq >> 8) | (octave << 2)) | 32);\n}\n\n",
            "calle": [
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short voice"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int note"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pitch",
                        "type": "int",
                        "definition": [
                            "int pitch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freq",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int freq = freqtable[note]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octave",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int octave = octavetable[note]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freqtable",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "octavetable",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pitchtable",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "voicevolume",
            "header": "",
            "params": [
                "opl_t *opl",
                "unsigned short voice",
                "const opl_timbre_t *timbre",
                "int volume"
            ],
            "definition": "static void voicevolume(opl_t *opl, unsigned short voice, const opl_timbre_t *timbre, int volume)\n{\n  unsigned char carrierval = timbre->carrier_40;\n  if (volume == 0)\n  {\n    carrierval |= 0x3f;\n  }\n  else\n  {\n    calc_vol(&carrierval, volume);\n  }\n  oplregwr(opl, 0x40 + op2offsets[voice], carrierval);\n}\n\n",
            "calle": [
                "calc_vol",
                "oplregwr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short voice"
                        ]
                    },
                    {
                        "path": null,
                        "name": "timbre",
                        "type": "const opl_timbre_t *",
                        "definition": [
                            "const opl_timbre_t *timbre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "volume",
                        "type": "int",
                        "definition": [
                            "int volume"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carrierval",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char carrierval = timbre->carrier_40"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op2offsets",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "getinstrument",
            "header": "",
            "params": [
                "opl_t *opl",
                "int channel",
                "int note"
            ],
            "definition": "static int getinstrument(opl_t *opl, int channel, int note)\n{\n  if (((note < 0) || (note > 127)) || (channel > 15))\n  {\n    return -1;\n  }\n  if (channel == 9)\n  {\n    if (opl->is_op2)\n    {\n      return (128 + note) - 35;\n    }\n    else\n      return 128 | note;\n  }\n  return opl->channelprog[channel];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "int",
                        "definition": [
                            "int note"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_noteoff_op2",
            "header": "void opl_midi_noteoff_op2(opl_t *opl, int channel, int note, int vindex)",
            "params": [
                "opl_t *opl",
                "int channel",
                "int note",
                "int vindex"
            ],
            "definition": "void opl_midi_noteoff_op2(opl_t *opl, int channel, int note, int vindex)\n{\n  int voice = opl->notes2voices[channel][note][vindex];\n  if (voice >= 0)\n  {\n    opl_noteoff(opl, voice);\n    opl->voices2notes[voice].channel = -1;\n    opl->voices2notes[voice].note = -1;\n    opl->voices2notes[voice].priority = -1;\n    opl->voices2notes[voice].voiceindex = 0xFF;\n    opl->notes2voices[channel][note][vindex] = -1;\n  }\n}\n\n",
            "calle": [
                "opl_noteoff"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "int",
                        "definition": [
                            "int note"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vindex",
                        "type": "int",
                        "definition": [
                            "int vindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "int",
                        "definition": [
                            "int voice = opl->notes2voices[channel][note][vindex]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_midi_noteon_op2",
            "header": "",
            "params": [
                "opl_t *opl",
                "int channel",
                "int note",
                "int velocity",
                "int vindex"
            ],
            "definition": "void opl_midi_noteon_op2(opl_t *opl, int channel, int note, int velocity, int vindex)\n{\n  if (velocity == 0)\n  {\n    opl_midi_noteoff_op2(opl, channel, note, vindex);\n    return;\n  }\n  int x;\n  int voice = -1;\n  int lowestpriority = 0xFFFF;\n  int highestvoiceindex = -1;\n  int lowestpriorityvoice = -1;\n  int instrument;\n  instrument = getinstrument(opl, channel, note);\n  if (instrument < 0)\n  {\n    return;\n  }\n  if ((vindex > 0) && ((opl->op2_flags[instrument] & OP2_DOUBLEVOICE) == 0))\n  {\n    return;\n  }\n  opl_timbre_t *timbre = (vindex == 0) ? (&opl->opl_gmtimbres[instrument]) : (&opl->opl_gmtimbres_voice2[instrument]);\n  if (opl->notes2voices[channel][note][vindex] >= 0)\n  {\n    voice = opl->notes2voices[channel][note][vindex];\n  }\n  else\n  {\n    helper_opl_midi_noteon_op2_1(&x, &voice, &lowestpriority, &highestvoiceindex, &lowestpriorityvoice, opl, vindex, instrument);\n  }\n  if (opl->voices2notes[voice].timbreid != instrument)\n  {\n    opl->voices2notes[voice].timbreid = instrument;\n    opl_loadinstrument(opl, voice, timbre);\n  }\n  opl->voices2notes[voice].channel = channel;\n  opl->voices2notes[voice].note = note;\n  opl->voices2notes[voice].priority = ((16 - channel) << 8) | 0xff;\n  opl->voices2notes[voice].voiceindex = vindex;\n  opl->notes2voices[channel][note][vindex] = voice;\n  if (vindex != 0)\n  {\n    int reducedprio = ((int) opl->voices2notes[voice].priority) - 0xFF;\n    if (reducedprio < 0)\n    {\n      reducedprio = 0;\n    }\n    opl->voices2notes[voice].priority = (unsigned short) reducedprio;\n  }\n  voicevolume(opl, voice, timbre, (velocity * opl->channelvol[channel]) / 127);\n  if (channel == 9)\n  {\n    opl_noteon(opl, voice, timbre->notenum + timbre->noteoffset, opl->channelpitch[channel] + timbre->finetune);\n  }\n  else\n  {\n    opl_noteon(opl, voice, note + timbre->noteoffset, opl->channelpitch[channel] + timbre->finetune);\n  }\n  for (x = 0; x < voicescount; x += 1)\n  {\n    if (opl->voices2notes[x].priority > 0)\n    {\n      opl->voices2notes[x].priority -= 1;\n    }\n  }\n\n}\n\n",
            "calle": [
                "getinstrument",
                "helper_opl_midi_noteon_op2_1",
                "opl_loadinstrument",
                "opl_midi_noteoff_op2",
                "opl_noteon",
                "voicevolume"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "int",
                        "definition": [
                            "int channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "note",
                        "type": "int",
                        "definition": [
                            "int note"
                        ]
                    },
                    {
                        "path": null,
                        "name": "velocity",
                        "type": "int",
                        "definition": [
                            "int velocity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vindex",
                        "type": "int",
                        "definition": [
                            "int vindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "int",
                        "definition": [
                            "int voice = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriority",
                        "type": "int",
                        "definition": [
                            "int lowestpriority = 0xFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highestvoiceindex",
                        "type": "int",
                        "definition": [
                            "int highestvoiceindex = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriorityvoice",
                        "type": "int",
                        "definition": [
                            "int lowestpriorityvoice = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instrument",
                        "type": "int",
                        "definition": [
                            "int instrument"
                        ]
                    },
                    {
                        "path": null,
                        "name": "timbre",
                        "type": "opl_timbre_t *",
                        "definition": [
                            "opl_timbre_t *timbre = (vindex == 0) ? (&opl->opl_gmtimbres[instrument]) : (&opl->opl_gmtimbres_voice2[instrument])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reducedprio",
                        "type": "int",
                        "definition": [
                            "int reducedprio = ((int) opl->voices2notes[voice].priority) - 0xFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_loadbank_internal",
            "header": "",
            "params": [
                "opl_t *opl",
                "const char *file",
                "int offset"
            ],
            "definition": "static int opl_loadbank_internal(opl_t *opl, const char *file, int offset)\n{\n  opl->is_op2 = 0;\n  unsigned char buff[16];\n  int i;\n  FILE *f = fopen(file, \"rb\");\n  if (!f)\n  {\n    return -1;\n  }\n  fseek(f, 0, 2);\n  if (ftell(f) != 3204)\n  {\n    fclose(f);\n    return -2;\n  }\n  fseek(f, 0, 0);\n  if (((((fread(buff, 1, 4, f) != 4) || (buff[0] != 'I')) || (buff[1] != 'B')) || (buff[2] != 'K')) || (buff[3] != 0x1A))\n  {\n    fclose(f);\n    return -3;\n  }\n  for (i = offset; i < (128 + offset); i += 1)\n  {\n    helper_opl_loadbank_internal_1(&i, opl, buff, f);\n  }\n\n  fclose(f);\n  return 0;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "fread",
                "fseek",
                "ftell",
                "helper_opl_loadbank_internal_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t *",
                        "definition": [
                            "opl_t *opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "const char *",
                        "definition": [
                            "const char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "int",
                        "definition": [
                            "int offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "unsigned char [16]",
                        "definition": [
                            "unsigned char buff[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE *",
                        "definition": [
                            "FILE *f = fopen(file, \"rb\")"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opl_load_op2_voice",
            "header": "",
            "params": [
                "opl_timbre_t *timbre",
                "const uint8_t *buff"
            ],
            "definition": "static void opl_load_op2_voice(opl_timbre_t *timbre, const uint8_t *buff)\n{\n  timbre->modulator_E862 = buff[3];\n  timbre->modulator_E862 <<= 8;\n  timbre->modulator_E862 |= buff[2];\n  timbre->modulator_E862 <<= 8;\n  timbre->modulator_E862 |= buff[1];\n  timbre->modulator_E862 <<= 8;\n  timbre->modulator_E862 |= buff[0];\n  timbre->carrier_E862 = buff[10];\n  timbre->carrier_E862 <<= 8;\n  timbre->carrier_E862 |= buff[9];\n  timbre->carrier_E862 <<= 8;\n  timbre->carrier_E862 |= buff[8];\n  timbre->carrier_E862 <<= 8;\n  timbre->carrier_E862 |= buff[7];\n  timbre->modulator_40 = (buff[5] & 0x3f) | (buff[4] & 0xc0);\n  timbre->carrier_40 = (buff[12] & 0x3f) | (buff[11] & 0xc0);\n  timbre->feedconn = buff[6];\n  timbre->finetune = 0;\n  timbre->noteoffset = (int16_t) (buff[14] | (((uint16_t) buff[15]) << 8));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "timbre",
                        "type": "opl_timbre_t *",
                        "definition": [
                            "opl_timbre_t *timbre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *buff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#main",
            "header": "",
            "params": [],
            "definition": "int main()\n{\n  opl_emu_bitfield(1, 2, 3);\n  opl_emu_registers_effective_rate(1, 2);\n  return 0;\n}\n\n",
            "calle": [
                "opl_emu_bitfield",
                "opl_emu_registers_effective_rate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opl_midi_noteon_op2_1",
            "header": "",
            "params": [
                "int * const x_ref",
                "int * const voice_ref",
                "int * const lowestpriority_ref",
                "int * const highestvoiceindex_ref",
                "int * const lowestpriorityvoice_ref",
                "opl_t * const opl",
                "int vindex",
                "int instrument"
            ],
            "definition": "void helper_opl_midi_noteon_op2_1(int * const x_ref, int * const voice_ref, int * const lowestpriority_ref, int * const highestvoiceindex_ref, int * const lowestpriorityvoice_ref, opl_t * const opl, int vindex, int instrument)\n{\n  int x = *x_ref;\n  int voice = *voice_ref;\n  int lowestpriority = *lowestpriority_ref;\n  int highestvoiceindex = *highestvoiceindex_ref;\n  int lowestpriorityvoice = *lowestpriorityvoice_ref;\n  for (x = 0; x < voicescount; x += 1)\n  {\n    if (opl->voices2notes[x].channel < 0)\n    {\n      voice = x;\n      if ((opl->voices2notes[x].timbreid == instrument) && (opl->voices2notes[x].voiceindex == vindex))\n      {\n        break;\n      }\n    }\n    if (opl->voices2notes[x].priority < lowestpriority)\n    {\n      if ((opl->voices2notes[x].voiceindex >= vindex) && (opl->voices2notes[x].voiceindex >= highestvoiceindex))\n      {\n        lowestpriorityvoice = x;\n        lowestpriority = opl->voices2notes[x].priority;\n        highestvoiceindex = opl->voices2notes[x].voiceindex;\n      }\n    }\n  }\n\n  if (voice < 0)\n  {\n    if (lowestpriorityvoice < 0)\n    {\n      return;\n    }\n    voice = lowestpriorityvoice;\n    opl_midi_noteoff_op2(opl, opl->voices2notes[voice].channel, opl->voices2notes[voice].note, opl->voices2notes[voice].voiceindex);\n  }\n  *x_ref = x;\n  *voice_ref = voice;\n  *lowestpriority_ref = lowestpriority;\n  *highestvoiceindex_ref = highestvoiceindex;\n  *lowestpriorityvoice_ref = lowestpriorityvoice;\n}\n\n",
            "calle": [
                "opl_midi_noteoff_op2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const voice_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriority_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lowestpriority_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highestvoiceindex_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const highestvoiceindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriorityvoice_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lowestpriorityvoice_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t * const",
                        "definition": [
                            "opl_t * const opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vindex",
                        "type": "int",
                        "definition": [
                            "int vindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "instrument",
                        "type": "int",
                        "definition": [
                            "int instrument"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voice",
                        "type": "int",
                        "definition": [
                            "int voice = *voice_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriority",
                        "type": "int",
                        "definition": [
                            "int lowestpriority = *lowestpriority_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highestvoiceindex",
                        "type": "int",
                        "definition": [
                            "int highestvoiceindex = *highestvoiceindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowestpriorityvoice",
                        "type": "int",
                        "definition": [
                            "int lowestpriorityvoice = *lowestpriorityvoice_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "voicescount",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opl_loadbank_internal_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "opl_t * const opl",
                "unsigned char buff[16]",
                "FILE * const f"
            ],
            "definition": "int helper_opl_loadbank_internal_1(int * const i_ref, opl_t * const opl, unsigned char buff[16], FILE * const f)\n{\n  int i = *i_ref;\n  if (fread(buff, 1, 16, f) != 16)\n  {\n    fclose(f);\n    return -4;\n  }\n  opl->opl_gmtimbres[i].modulator_E862 = buff[8];\n  opl->opl_gmtimbres[i].modulator_E862 <<= 8;\n  opl->opl_gmtimbres[i].modulator_E862 |= buff[6];\n  opl->opl_gmtimbres[i].modulator_E862 <<= 8;\n  opl->opl_gmtimbres[i].modulator_E862 |= buff[4];\n  opl->opl_gmtimbres[i].modulator_E862 <<= 8;\n  opl->opl_gmtimbres[i].modulator_E862 |= buff[0];\n  opl->opl_gmtimbres[i].carrier_E862 = buff[9];\n  opl->opl_gmtimbres[i].carrier_E862 <<= 8;\n  opl->opl_gmtimbres[i].carrier_E862 |= buff[7];\n  opl->opl_gmtimbres[i].carrier_E862 <<= 8;\n  opl->opl_gmtimbres[i].carrier_E862 |= buff[5];\n  opl->opl_gmtimbres[i].carrier_E862 <<= 8;\n  opl->opl_gmtimbres[i].carrier_E862 |= buff[1];\n  opl->opl_gmtimbres[i].modulator_40 = buff[2];\n  opl->opl_gmtimbres[i].carrier_40 = buff[3];\n  opl->opl_gmtimbres[i].feedconn = buff[10];\n  opl->opl_gmtimbres[i].finetune = buff[12];\n  opl->opl_gmtimbres[i].notenum = 60;\n  opl->opl_gmtimbres[i].noteoffset = 0;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fclose",
                "fread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opl",
                        "type": "opl_t * const",
                        "definition": [
                            "opl_t * const opl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buff",
                        "type": "unsigned char [16]",
                        "definition": [
                            "unsigned char buff[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}